# Chuỗi ngược: Một quy tắc chung cho LLM để thành thạo lập kế hoạch đa API

Yinger Zhang*,1, Hui Cai*,†,2, Xierui Song2, Yicheng Chen2, Rui Sun2, Jing Zheng2
Đại học Chiết Giang1
Tập đoàn Ant2
zhangyinger@zju.edu.cn
{biyu.ch,songxierui.sxr,yicheng.chen,zhengxi.sr,jing.zheng}@antgroup.com

## Tóm tắt

Trong khi việc cho phép các mô hình ngôn ngữ lớn thực hiện gọi hàm (được gọi là API) có thể nâng cao đáng kể hiệu suất của các Mô hình Ngôn ngữ Lớn (LLM), gọi hàm vẫn là một nhiệm vụ đầy thử thách do các mối quan hệ phức tạp giữa các API khác nhau, đặc biệt trong bối cảnh học theo ngữ cảnh mà không cần tinh chỉnh. Bài báo này giới thiệu "Chuỗi Ngược", một phương pháp có thể kiểm soát, hướng mục tiêu được thiết kế để trao quyền cho LLM khả năng vận hành các API bên ngoài chỉ thông qua các lời nhắc. Nhận thấy rằng hầu hết các LLM có khả năng sử dụng công cụ hạn chế, Chuỗi Ngược giới hạn LLM thực hiện các nhiệm vụ đơn giản, ví dụ: Lựa chọn API và Hoàn thành Đối số. Hơn nữa, để quản lý việc gọi đa chức năng có thể kiểm soát, Chuỗi Ngược áp dụng một quy tắc chung dựa trên quá trình suy luận ngược. Quy tắc này xác định khi nào thực hiện lựa chọn API hoặc hoàn thành Đối số. Để đánh giá khả năng sử dụng đa công cụ của LLM, chúng tôi đã phát hành một bộ dữ liệu nhiệm vụ đa công cụ tổ hợp, có sẵn tại https://anonymous.4open.science/r/reverse-chain-8681. Các thí nghiệm số mở rộng xác nhận khả năng xuất sắc đáng chú ý của Chuỗi Ngược trong việc quản lý nhiều cuộc gọi API.

## 1 Giới thiệu

Gần đây, đã có một làn sóng ấn tượng trong tiến bộ được thực hiện trong các Mô hình Ngôn ngữ Lớn (LLM), do hiệu suất xuất sắc của chúng trong nhiều nhiệm vụ khác nhau (Chowdhery et al., 2022; Brown et al., 2020; Scao et al., 2022; Wei et al., 2022a; Bubeck et al., 2023). Tuy nhiên, LLM vẫn gặp khó khăn với một số nhiệm vụ chuyên biệt do hạn chế cơ bản về thông tin mà chúng lưu trữ và học được, có thể trở nên lỗi thời và có thể không phù hợp cho tất cả các ứng dụng. Một giải pháp thực tế là tăng cường LLM với các công cụ bên ngoài (được gọi là API). Trong thiết lập này, LLM hoạt động như bộ điều khiển, không chỉ để hiểu ý định của người dùng mà quan trọng là để lựa chọn và điều phối các công cụ phù hợp để hoàn thành nhiệm vụ.

Thật không may, LLM vẫn thiếu sự tinh tế để hiểu đầy đủ các hướng dẫn của con người và thực hiện hiệu quả việc gọi hàm. Nhiều nghiên cứu dành riêng cho việc nâng cao khả năng gọi hàm của LLM thông qua các phương pháp tinh chỉnh hoặc học theo ngữ cảnh. (Patil et al., 2023; Qin et al., 2023; Schick et al., 2023; Tang et al., 2023; Parisi et al., 2022; Li et al., 2023; Liang et al., 2023; Song et al., 2023; Xu et al., 2023) So với tinh chỉnh, các phương pháp học theo ngữ cảnh cung cấp một giải pháp đơn giản và có thể mở rộng hơn, vì chúng loại bỏ nhu cầu đào tạo một mô hình hoàn toàn mới cho mỗi API mới. Do đó, mục tiêu chính của bài báo này là nâng cao khả năng lập kế hoạch API của LLM trong bối cảnh học theo ngữ cảnh.

Khác với các nghiên cứu nêu trên tập trung vào các nhiệm vụ đơn giản hơn, chẳng hạn như nhiệm vụ công cụ đơn hoặc nhiệm vụ đa công cụ độc lập (chi tiết trong Bảng 1), bài báo này nhắm đến việc nâng cao khả năng của LLM để xử lý nhiệm vụ đa công cụ tổ hợp phức tạp hơn (chi tiết trong Bảng 1). Việc thực hiện nhiệm vụ này yêu cầu sử dụng nhiều API có thể phụ thuộc lẫn nhau, điều này phổ biến trong các tình huống thực tế nhưng đặt ra thử thách lớn hơn trong lập kế hoạch API cho LLM. Đáng chú ý là nhiệm vụ công cụ đơn và nhiệm vụ đa công cụ độc lập có thể được xem là tập con của nhiệm vụ đa công cụ tổ hợp, và phương pháp được đề xuất cũng có thể quản lý chúng với những sửa đổi tối thiểu. Khả năng tổng quát hóa của phương pháp được đề xuất cho các loại nhiệm vụ khác nhau sẽ được thảo luận trong Phần 5.

Trong lĩnh vực sử dụng công cụ, nhiều kỹ thuật nhắc nhở khác nhau đã được khám phá. Các thuật toán lập kế hoạch một bước được giới thiệu trong (Shen et al., 2023; Liang et al., 2023), nhưng độ chính xác của nó thường thấp trong các tình huống phức tạp, mơ hồ. Phương pháp Chuỗi Suy nghĩ (CoT) (Wei et al., 2022b) chống lại điều này bằng cách lập kế hoạch từng bước với lý luận trung gian. Được gọi là lập kế hoạch CoT, kỹ thuật này phân tách các nhiệm vụ thành nhiều nhiệm vụ con đơn giản hơn, từ đó tăng cường lý luận và độ chính xác. Tuy nhiên, như được minh họa trong Hình 1 (a), một hạn chế của các phương pháp lập kế hoạch này là khả năng xảy ra lỗi ở các giai đoạn trung gian. Trong khi bước cuối cùng của kế hoạch nhằm đạt được mục tiêu cuối cùng, các lỗi trong các bước lập kế hoạch trung gian có thể dẫn đến thất bại trong thực thi. Ví dụ, như được minh họa trong trường hợp đa công cụ tổ hợp của Bảng 1, nếu giá trị của tham số 'destination' được phân tích sai, ví dụ: destination = 'None', rõ ràng là BookFlight không thể được thực thi thành công. Để thu hẹp khoảng cách này, ReAct, như được mô tả bởi (Yao et al., 2022), tinh chỉnh lý luận bằng cách kết hợp các hành động và quan sát để có cái nhìn sâu sắc hơn. Mở rộng về điều này, các dự án học công cụ (Song et al., 2023; Ruan et al., 2023) sử dụng đầu ra từ mỗi bước để thông báo cho quyết định tiếp theo. Tuy nhiên, như được mô tả trong Hình 1(c), trong các tình huống gọi đa chức năng, ReAct, mặc dù thực thi thành công từng bước, có thể không tuân thủ đường dẫn lý luận chính xác hướng tới mục tiêu cuối cùng, do đó, nó chệch hướng đến đích sai và có thể kết thúc sớm. Ví dụ, trong tình huống được đề cập trước đó, luồng thực thi ReAct sẽ là: GetUserDestination(userName='Lucas') -> destination, flight_ID =FindFlight (destination) -> Final Answer, điều này không hoàn thành vì API cuối cùng BookFlight chưa được thực thi.

Tóm lại, cả lập kế hoạch một bước/CoT và ReAct đều gặp phải những thách thức kiểm soát đáng kể: mỗi bước của các phương pháp này thể hiện mức độ không thể dự đoán và không chắc chắn cao. Lỗi có thể lan truyền từ một suy nghĩ hoặc hành động sai, dẫn đến các đường dẫn giải pháp không chính xác hoặc mục tiêu cuối cùng. Vấn đề này phát sinh vì các phương pháp này bắt đầu từ đầu và tiến về phía mục tiêu cuối cùng, với LLM gánh vác toàn bộ gánh nặng lập kế hoạch.

Để giải quyết những vấn đề này, chúng tôi đề xuất một khung có thể kiểm soát nhưng tổng quát được gọi là Chuỗi Ngược. Khung này bao gồm một quy tắc chung và hai mô-đun chính: Lựa chọn API và Hoàn thành Đối số, cả hai đều tập trung vào việc nhắc nhở LLM. Cụ thể, quy tắc chung trong Chuỗi Ngược thực hiện một nhiệm vụ lập kế hoạch đa API theo cách ngược: nó bắt đầu bằng việc lựa chọn API cuối cùng cho một nhiệm vụ, và sau đó hoàn thành các đối số yêu cầu, rút ra các giá trị từ truy vấn và ngữ cảnh, hoặc bằng đầu ra của các API khác. Khi một API mới được chọn trong giai đoạn hoàn thành đối số, quá trình này lặp lại. Thủ tục tiếp tục một cách lặp đi lặp lại cho đến khi tất cả các đối số của tất cả các API được điền đầy. Chuỗi Ngược phân biệt bản thân với công việc trước đó với ba ưu điểm chính sau: 1. Lý luận ngược, bắt đầu từ mục tiêu cuối cùng, ngăn chặn lập kế hoạch chệch hướng vào hướng sai (thường xảy ra trong ReAct), do đó đảm bảo tính chính xác của mục tiêu cuối cùng. 2. Việc phân tách từng bước được chi phối bởi quy tắc làm cho quá trình có thể kiểm soát, với mỗi giai đoạn có thể thực thi tiến, hiệu quả tránh các lỗi phổ biến trong lập kế hoạch một bước/CoT, chẳng hạn như giai đoạn trung gian không chính xác. 3. Các nhiệm vụ của LLM được đơn giản hóa chỉ còn lại việc chọn API và điền đối số, tránh lập kế hoạch phức tạp. Chiến lược này hiệu quả sử dụng các điểm mạnh và khả năng của các LLM hiện có mà không phụ thuộc vào khả năng lý luận rộng rãi.

Tóm lại, các đóng góp của bài báo này là:

1. Bài báo này trình bày Chuỗi Ngược, một khung đơn giản để cải thiện khả năng lập kế hoạch API của LLM trong bối cảnh học theo ngữ cảnh. Bằng cách sử dụng một sơ đồ lý luận ngược và một phương pháp giải quyết vấn đề từng bước, quá trình trở nên dễ quản lý và có thể kiểm soát hơn.

2. Theo hiểu biết của chúng tôi, bài báo này là đầu tiên tập trung vào lập kế hoạch API cho nhiệm vụ đa công cụ tổ hợp. Để đánh giá khả năng của LLM trong việc xử lý các nhiệm vụ như vậy, chúng tôi thu thập một bộ dữ liệu chất lượng cao chứa 825 API và 1550 thể hiện cho nhiệm vụ đó, được xây dựng tự động bằng GPT-4 (OpenAI, 2023). Ngoài ra, một bộ đánh giá tự động được hỗ trợ bởi GPT-4 cũng được phát triển cho mục đích đánh giá hiệu quả.

3. Các thí nghiệm mở rộng được tiến hành để chứng minh sự vượt trội của phương pháp Chuỗi Ngược trong các nhiệm vụ gọi đa API, vượt qua các phương pháp học theo ngữ cảnh tiên tiến nhất, ví dụ: CoT và ReAct.

## 2 Nghiên cứu Liên quan

Học Công cụ Cuộc thảo luận về việc sử dụng công cụ trong LLM đã phát triển đáng kể, với các mô hình như Toolformer dẫn đầu (Schick et al., 2023; Nakano et al., 2021). Các phương pháp hiện tại có thể được chia thành hai loại. Loại đầu tiên tập trung vào việc nâng cao khả năng cụ thể của công cụ của các mô hình ngôn ngữ thông qua tinh chỉnh với các bộ dữ liệu chuyên biệt (Patil et al., 2023; Qin et al., 2023; Schick et al., 2023; Tang et al., 2023; Parisi et al., 2022; Yang et al., 2023; Qian et al., 2023). Loại thứ hai trực tiếp tận dụng khả năng của LLM, nhắc nhở chúng tương tác với các công cụ khác nhau, từ các mô hình AI (Shen et al., 2023; Wu et al., 2023) đến các bộ công cụ đa năng hơn (Li et al., 2023; Liang et al., 2023; Song et al., 2023; Xu et al., 2023). Nói chung, phương pháp nhắc nhở đơn giản và có thể mở rộng hơn, nhưng nó vẫn có khoảng cách đáng kể so với phương pháp tinh chỉnh, vì vậy công việc này được đề xuất để nâng cao khả năng lập kế hoạch API của các phương pháp nhắc nhở. Đáng chú ý là trong khi các nghiên cứu được đề cập trước đó giới thiệu nhiều bộ dữ liệu học công cụ, chúng chủ yếu bao gồm các nhiệm vụ tương đối đơn giản, tập trung vào nhiệm vụ công cụ đơn hoặc nhiệm vụ đa công cụ độc lập. Ngược lại, bài báo này nhắm đến một nhiệm vụ phức tạp hơn được gọi là nhiệm vụ tổ hợp, nơi cần nhiều API phụ thuộc.

Nhắc nhở LLM Các phương pháp khác nhau, như CoT (Wei et al., 2022b) cho phân tách nhiệm vụ và ReAct (Yao et al., 2022) cho việc hòa trộn lý luận với hành động, nâng cao khả năng nhắc nhở chung. Ngoài ra, nhiều phương pháp lập kế hoạch được thiết kế riêng cho việc sử dụng công cụ. (Shen et al., 2023; Liang et al., 2023) bắt đầu bằng việc tạo ra một dàn ý giải pháp trực tiếp, sau đó lựa chọn và thực thi các API liên quan. DFSDT (Qin et al., 2023) có thể được xem là một phiên bản cải tiến của ReAct, cho phép LLM đánh giá các đường dẫn lý luận khác nhau và chọn ra đường dẫn hứa hẹn nhất. Quy trình làm việc của RestGPT (Song et al., 2023) bao gồm một chu kỳ "lập kế hoạch và thực thi" lặp đi lặp lại. Trong khi đó, (Ruan et al., 2023) sử dụng một phương pháp lập kế hoạch tuần tự, đưa kết quả của mỗi bước vào bước tiếp theo. Tất cả các công việc này yêu cầu LLM thực hiện lập kế hoạch đầy đủ hoặc từng bước dựa trên nhiệm vụ. Tuy nhiên, Chuỗi Ngược được đề xuất trong công việc này đơn giản hóa điều này bằng cách để LLM tập trung vào chỉ hai nhiệm vụ: lựa chọn API và hoàn thành đối số, từ đó đơn giản hóa đáng kể độ phức tạp của nhiệm vụ. Hơn nữa, không giống như các phương pháp trước đó tiến từ đầu đến mục tiêu cuối cùng, Chuỗi Ngược bắt đầu từ mục tiêu cuối và lý luận ngược, nâng cao khả năng kiểm soát.

## 3 Chuỗi Ngược: Một Phương pháp Lập kế hoạch Đa API

Mục tiêu của công việc này là tạo ra lập kế hoạch API hiệu quả dựa trên truy vấn người dùng và các ứng viên API. Hình 2 cung cấp một ví dụ chi tiết: Một truy vấn người dùng có thể là một yêu cầu ngôn ngữ tự nhiên như "Xin hãy giúp Jack đặt phòng họp từ 9:00 sáng đến 10:00 sáng". Mỗi API trong nhóm API được đặc trưng bởi mô tả, đối số và đầu ra của nó. ví dụ: API RecommendRoom có mô tả chức năng là "Đề xuất ID của một phòng họp có sẵn", đối số "start_time" và "end_time", và đầu ra là "room_ID". Một lập kế hoạch API thành công bao gồm hai phần: chọn API phù hợp và điền vào tất cả các đối số.

Phần 3.1 phác thảo quy trình Chuỗi Ngược, trong khi Phần 3.2 thảo luận cụ thể về hai mô-đun tương tác với LLM: Lựa chọn API và Hoàn thành Đối số.

### 3.1 Chuỗi Ngược

Khác với CoT và ReAct, Chuỗi Ngược thực hiện phân tách nhiệm vụ theo cách ngược, và đường dẫn giải quyết vấn đề từng bước được xác định trước bởi một quy tắc chung. Đáng chú ý là quy tắc chung này không bị hạn chế với một loại nhiệm vụ cụ thể.

Hình 2 cho thấy một ví dụ về Chuỗi Ngược được áp dụng cho lập kế hoạch API cho một truy vấn. Ban đầu, Chuỗi Ngược chọn API cuối cùng cho một nhiệm vụ nhất định, bước này được gọi là Lựa chọn API. Trong ví dụ này, LLM chọn một API có tên BookRoom để phù hợp với nhiệm vụ "đặt phòng họp". Tiếp theo, các đối số yêu cầu của API được chọn được xác định thông qua hướng dẫn kỹ thuật, ví dụ: API BookRoom có bốn đối số yêu cầu, đó là person_ID, room_ID, start_time và end_time. Có ba cách tiếp cận có thể để điền đối số, và chúng tôi định nghĩa quá trình này là Hoàn thành Đối số:

Trường hợp 1. Giá trị đối số được trích xuất trực tiếp từ ngữ cảnh và truy vấn người dùng, ví dụ: start_time = 9:00 sáng;

Trường hợp 2. Khi giá trị đối số không thể thu được trực tiếp, Chuỗi Ngược tìm kiếm một API khác có thể có đầu ra có thể hoàn thành đối số bị thiếu, ví dụ: đối số person_ID có thể được lấy từ API Name2ID;

Trường hợp 3. Nếu không thể lấy được giá trị đối số từ hai trường hợp trên, quy tắc chung sẽ yêu cầu giá trị đối số trực tiếp từ người dùng.

Đối với các API nội bộ được chọn trong Trường hợp 2, Chuỗi Ngược thực hiện các cuộc gọi đệ quy để hoàn thành các đối số yêu cầu của các API này, ví dụ: đối số yêu cầu của Name2ID là person_name, và giá trị 'Jack' có thể được lấy thông qua Trường hợp 1 trong Hoàn thành Đối số. Thuật toán tiếp tục cho đến khi điều kiện kết thúc được đáp ứng, tức là tất cả các đối số yêu cầu đều được hoàn thành. Cuối cùng, khi tất cả các đối số yêu cầu của một API được điền đầy, API đã sẵn sàng để được thực thi tiến để hoàn thành nhiệm vụ đã cho.

### 3.2 Các Mô-đun LLM trong Chuỗi Ngược

#### 3.2.1 Lựa chọn API

Trong mô-đun này, LLM hiệu quả xác định API liên quan bằng cách phân tích mô tả nhiệm vụ và các ứng viên API. Lời nhắc cụ thể được sử dụng trong mô-đun này được mô tả trong Hình 3.(a). Trong Chuỗi Ngược, mô-đun Lựa chọn API được sử dụng trong hai tình huống khác nhau, được phân tách liên quan đến mô tả nhiệm vụ và ứng viên API khác nhau. Tình huống đầu tiên xảy ra khi chọn API cuối cùng. Trong trường hợp này, mô tả nhiệm vụ tương ứng với truy vấn người dùng và ứng viên API đề cập đến tất cả API trong Nhóm API. Tình huống thứ hai xảy ra như một mô-đun phụ của Hoàn thành Đối số. Khi giá trị của một đối số không thể thu được từ truy vấn người dùng hoặc ngữ cảnh, Chuỗi Ngược chọn một API phù hợp có đầu ra có thể đáp ứng đối số bị thiếu. Trong những trường hợp như vậy, mô tả nhiệm vụ đề cập đến mô tả của đối số chưa điền. Phạm vi của ứng viên API có thể được thu hẹp thông qua khớp loại biến, bao gồm Thời gian, Ngày, Chuỗi, v.v. Khả năng này tạo điều kiện cho một quá trình lựa chọn tinh tế hơn, dẫn đến độ chính xác được cải thiện.

#### 3.2.2 Hoàn thành Đối số

Sau Lựa chọn API, các đối số yêu cầu cho API được chọn được xác định với sự trợ giúp của hướng dẫn kỹ thuật. Trong mô-đun này, LLM được tận dụng để hoàn thành các đối số này bằng thông tin từ truy vấn, ngữ cảnh và ứng viên API. Việc thực thi tuân theo ba kết quả có thể:

Trường hợp 1 Giá trị đối số được trích xuất trực tiếp từ ngữ cảnh hoặc truy vấn người dùng.

Trường hợp 2 Một API khác được sử dụng để hoàn thành giá trị đối số bị thiếu, cho thấy rằng LLM không thể lấy được giá trị đối số trực tiếp. Cần lưu ý rằng các đối số của API nội bộ mới này phải được hoàn thành trước khi thực thi.

Trường hợp 3 Không có, cho thấy không thể lấy được giá trị đối số từ ngữ cảnh, truy vấn người dùng và đầu ra API tiềm năng. Trong trường hợp này, quy tắc chung sẽ yêu cầu giá trị đối số trực tiếp từ người dùng.

Các tối ưu hóa cụ thể đã được áp dụng cho phương pháp nêu trên, được khám phá thêm trong Phần 4.2.2. Lời nhắc được tối ưu hóa được sử dụng trong mô-đun này được minh họa trong Hình 3.(b).

## 4 Thí nghiệm

Trong phần này, các thí nghiệm mở rộng được tiến hành để điều tra hiệu suất của Chuỗi Ngược. Chúng tôi bắt đầu với việc tạo ra một bộ dữ liệu đánh giá tự động, đo điểm chuẩn các phương pháp học theo ngữ cảnh khác nhau về gọi hàm và định nghĩa các chỉ số đánh giá. Trong Phần 4.1, để đo điểm chuẩn Chuỗi Ngược, chúng tôi so sánh khả năng lập kế hoạch API của nó với các giải pháp học theo ngữ cảnh tiên tiến nhất hiện tại trên ChatGPT. Phần 4.2, chi tiết một tập hợp các thí nghiệm loại bỏ được thiết kế để làm rõ các nguyên lý cơ bản của Chuỗi Ngược. Cuối cùng, Phần 4.3 phân tích các yếu tố góp phần vào hiệu quả của Chuỗi Ngược.

Bộ dữ liệu Chúng tôi xây dựng một bộ dữ liệu để đánh giá các nhiệm vụ đa công cụ tổ hợp. Được hướng dẫn bởi mô hình tự hướng dẫn (Wang et al., 2022), bộ dữ liệu này được tạo ra tự động dựa trên GPT-4 và ChatGPT (gpt-3.5-turbo), bao gồm các bước sau:

1. Ban đầu, các API được chọn từ các kho lưu trữ công cộng, bao gồm API-Bank (Li et al., 2023) và public-apis. Sau đó chúng tôi tạo thủ công 20 ví dụ hạt giống đa dạng cho nhiệm vụ đa công cụ tổ hợp, mỗi ví dụ bao gồm ba thành phần: {API và mô tả của nó, Truy vấn người dùng, Phản hồi hệ thống}. Một ví dụ hạt giống cụ thể được chi tiết trong Hình 4 trong Phụ lục A.1.

2. Các thể hiện hạt giống này phục vụ như các ví dụ theo ngữ cảnh cho GPT-4, để tạo ra các mẫu mới phức tạp hơn. Các lời nhắc cho GPT-4 được chi tiết trong Hình 6 trong Phụ lục A.2, bao gồm mô tả chung về nhiệm vụ, một ví dụ hạt giống được chọn ngẫu nhiên và định dạng phản hồi quy định. Sau đó chúng tôi tiến hành kiểm tra chất lượng thủ công để lọc ra các mẫu sai, đạt tỷ lệ lọc 50%. Các mẫu chất lượng cao được sản xuất được sử dụng làm ví dụ hạt giống mới để thu thập dữ liệu thêm, lặp lại quá trình nhiều lần. Để tăng cường tính đa dạng của bộ dữ liệu, nhiệt độ của GPT-4 được đặt ở 0.8.

3. Ngoài ra, chúng tôi sử dụng ChatGPT để nâng cao thông tin API và thống nhất tiêu chuẩn hóa các mẫu thành định dạng JSON. Một ví dụ chi tiết trong Hình 5 trong Phụ lục A.1. Mỗi mẫu bao gồm các trường: {APIs, Query, Label}, với mỗi API trong APIs được đại diện như một đối tượng JSON với các trường: {name, description, arguments, output, format}. Đáng chú ý, các trường {arguments, output, và format} được tạo ra bằng cách tận dụng thông tin hiện có. Lời nhắc cho điều này được phác thảo trong Hình 7 Phụ lục A.2.

Đáng đề cập là bộ dữ liệu bao gồm 825 API duy nhất trên 20 danh mục, tổng cộng 1550 thể hiện được gán nhãn, với các danh mục được chi tiết trong Bảng 7 trong Phụ lục A.1. Tập trung vào các nhiệm vụ đa công cụ tổ hợp, các mẫu được phân loại thành ba cấp độ dựa trên độ phức tạp lồng API: Cấp-1, hai cấp độ lồng API, chứa 798 thể hiện; Cấp-2, ba cấp độ lồng API, chứa 693 thể hiện; và Cấp-3, hơn bốn cấp độ lồng API, chứa 59 thể hiện. Mỗi Thể hiện có trung bình 2.93 cuộc gọi hàm. Rõ ràng là bộ dữ liệu tổng hợp này phù hợp cho đánh giá vì: 1. Tạo dữ liệu tự động đảm bảo dữ liệu không thiên vị; 2. Các API được trải rộng trên các lĩnh vực đa dạng, phản ánh chính xác các tình huống thực tế; 3. Việc bao gồm các cấp độ lồng khác nhau trong các nhiệm vụ đa công cụ tổ hợp đảm bảo tính đa dạng phong phú.

Đường cơ sở Để đo điểm chuẩn Chuỗi Ngược, chúng tôi đo hiệu suất của nó so với năm phương pháp học theo ngữ cảnh khác: Zero-Shot, Few-Shot, Zero-Shot-CoT, Few-Shot-CoT và ReAct, sử dụng ChatGPT làm LLM cơ bản. Mỗi phương pháp tích hợp dữ liệu API vào lời nhắc, sử dụng học theo ngữ cảnh của LLM cho lập kế hoạch API. Phương pháp Zero-Shot sử dụng thông tin API và truy vấn người dùng trong lời nhắc, Few-Shot thêm các ví dụ bổ sung vào lời nhắc. Zero-Shot-CoT bao gồm hướng dẫn từng bước, trong khi Few-Shot-CoT thêm giải thích cho các bước này trong các ví dụ. ReAct, được thực hiện thông qua khung langchain, sử dụng định dạng (suy nghĩ, hành động, quan sát) để thực thi nhiệm vụ. Các ví dụ về lời nhắc cho các phương pháp này có thể được tìm thấy trong Phụ lục A.3. Các thí nghiệm được tiến hành trên hai LLM: GPT-3.5-turbo tại điểm kiểm tra gpt-3.5-turbo-0301 với nhiệt độ được đặt ở 0.1.

Chỉ số Chúng tôi sử dụng độ chính xác làm chỉ số để đánh giá lập kế hoạch API, bao gồm hai khía cạnh: tên API và đối số API. Giá trị của đối số bao gồm điền giá trị trực tiếp hoặc gọi API khác.

Với tính đa dạng của các định dạng đầu ra trên các giải pháp, chúng tôi loại trừ khớp chuỗi đơn giản do tính không hiệu quả của nó và chú thích thủ công vì tính chất tốn thời gian. Thay vào đó, chúng tôi tạo ra một bộ đánh giá tự động hiệu quả bằng GPT-4. Các lời nhắc được thiết kế riêng cho mỗi phương pháp đường cơ sở để phù hợp với đặc điểm đầu ra của nó. Các lời nhắc được trình bày trong Phụ lục A.4. Chúng tôi kiểm tra thủ công 200 mẫu, so sánh chú thích của con người với đánh giá GPT-4, và phát hiện rằng bộ đánh giá GPT-4 thể hiện mối tương quan mạnh 89% với đánh giá của con người.

### 4.1 Kết quả Chính

Trong suốt các thí nghiệm, tập hợp ứng viên API đã cho trong lời nhắc chỉ bao gồm các API cần thiết cho một nhiệm vụ nhất định vì trọng tâm của bài báo này chủ yếu là đánh giá khả năng của LLM trong việc tạo ra cuộc gọi API phù hợp hơn là việc truy xuất API. Bảng 2 so sánh độ chính xác của các phương pháp học theo ngữ cảnh khác nhau. Trong bối cảnh Zero-Shot, độ chính xác lập kế hoạch API của LLM đứng ở khoảng 68.97%. Mặc dù các phương pháp Few-Shot nâng điều này lên 81.87%, việc thêm Chuỗi Suy nghĩ (CoT) nâng cao hiệu suất lên 87.16% trong Few-Shot-CoT, điều này cho thấy lợi ích của việc phân tách các nhiệm vụ phức tạp. Chiến lược ReAct, với phương pháp lý luận-hành động-quan sát của nó, cũng cải thiện so với phương pháp zero-shot. Tuy nhiên, người biểu diễn nổi bật là phương pháp Chuỗi Ngược, vượt qua tất cả các phương pháp khác bằng cách đơn giản hóa vấn đề gọi đa API thành hai nhiệm vụ dễ dàng hơn (Lựa chọn API và Hoàn thành Đối số) và áp dụng phương pháp hướng mục tiêu, từ đó giảm thiểu sự không chắc chắn. Ấn tượng là Chuỗi Ngược đạt được kết quả vượt trội ngay cả trong bối cảnh zero-shot vượt qua cả phương pháp Few-Shot-CoT và Few-Shot. Ngoài ra, Bảng 2 hiển thị kết quả trên các cấp độ lập kế hoạch API khác nhau nơi các cấp độ cao hơn cho thấy khó khăn lớn hơn. Như mong đợi, tất cả các phương pháp thể hiện tỷ lệ lỗi tăng khi độ phức tạp của lập kế hoạch API leo thang. Trong những tình huống đầy thử thách hơn này, phương pháp Chuỗi Ngược thể hiện sự cải thiện rõ rệt hơn so với các phương pháp khác. Khoảng cách đáng kể này nhấn mạnh tính mạnh mẽ và hiệu quả của nó trong việc xử lý các nhiệm vụ gọi đa API phức tạp.

### 4.2 Nghiên cứu Loại bỏ

Trong phần này, chúng tôi chủ yếu tập trung vào khám phá tác động của tính sáng tạo của LLM và các chiến lược hoàn thành đối số khác nhau đối với hiệu suất của Chuỗi Ngược. Các thí nghiệm được tiến hành trên GPT-3.5-turbo.

#### 4.2.1 Tính sáng tạo và trí tưởng tượng của LLM trên Chuỗi Ngược

Chúng tôi đầu tiên điều tra tác động của nhiệt độ LLM đối với Chuỗi Ngược. Nhiệt độ kiểm soát tính ngẫu nhiên của đầu ra LLM. Nhiệt độ thấp hơn dẫn đến các phản hồi tập trung và xác định hơn, trong khi nhiệt độ cao hơn tạo ra các câu trả lời đa dạng và sáng tạo hơn. Bảng 3 cho thấy rằng Chuỗi Ngược hoạt động tốt hơn ở nhiệt độ thấp hơn, với độ chính xác giảm khi nó tìm kiếm các phản hồi sáng tạo hơn. Điều này có ý nghĩa vì chúng tôi yêu cầu LLM đưa ra các quyết định hợp lý và chính xác.

#### 4.2.2 Tối ưu hóa Hoàn thành Đối số

Trong phần này, một loạt các nghiên cứu loại bỏ được thực hiện để kiểm tra các tối ưu hóa khác nhau trong quá trình phát triển Thuật toán Chuỗi Ngược. Các tối ưu hóa được thảo luận ở đây chủ yếu tập trung vào giai đoạn Hoàn thành Đối số.

Reverse Chain_one-by-one Trong phương pháp Chuỗi Ngược hiện tại, LLM đồng thời trích xuất tất cả kết quả đối số. Một chiến lược thay thế bao gồm việc xử lý từng hoàn thành đối số một cách tuần tự, một phương pháp mà chúng tôi gọi là Reverse Chain_one-by-one. Ví dụ, API FlightBooking có hai đối số: departure_point và destination. Trong khi Chuỗi Ngược tiêu chuẩn hoàn thành cả đối số departure_point và destination đồng thời, Reverse Chain_one-by-one đầu tiên điền đối số departure_point, tiếp theo là destination.

Bảng 4 cho thấy rằng Chuỗi Ngược đạt độ chính xác 92.06%, vượt qua 74.19% của Reverse Chain_one-by-one. Sự chênh lệch hiệu suất phát sinh vì LLM trong Chuỗi Ngược có thể truy cập tất cả thông tin về các đối số chưa điền trong quá trình hoàn thành đối số. Cái nhìn sâu sắc toàn diện này cho phép điền đối số chính xác và chính xác hơn. Xem xét ví dụ API FlightBooking với truy vấn người dùng: "giúp tôi đặt chuyến bay từ London đến Los Angeles", Bảng 5 chứng minh rằng trong Reverse Chain_one-by-one, cả hai đối số đều nhầm lẫn trích xuất giá trị 'London', vì LLM diễn giải vị trí của truy vấn là đích đến. Ngược lại, Chuỗi Ngược, nhận ra hai đối số riêng biệt cho departure_point và destination, chính xác phân biệt giữa hai vị trí trong truy vấn.

Ngoài hiệu suất vượt trội, Chuỗi Ngược cũng hiệu quả hơn về thời gian và tài nguyên tính toán vì nó chỉ yêu cầu một tương tác với LLM.

Reverse Chain_three-step Đây là một ví dụ: truy vấn người dùng là "giúp Jack đặt phòng họp", yêu cầu điền đối số person_ID cho API BookRoom. Trong bước Hoàn thành Đối số của Chuỗi Ngược tiêu chuẩn, cả truy vấn và tập hợp ứng viên API đều có sẵn cho LLM, cho phép trích xuất giá trị trực tiếp từ truy vấn hoặc lựa chọn API. Tuy nhiên, trong thiết lập Reverse Chain_three-step, hoàn thành đối số được chia thành hai bước: ban đầu, LLM chỉ được cung cấp truy vấn để trích xuất giá trị, có thể trả về giá trị được trích xuất hoặc 'None'. Nếu 'None' được trả về, thì nó sẽ chuyển sang lựa chọn API, chọn từ tập hợp ứng viên API.

Bảng 4 tiết lộ rằng Reverse Chain_three-step chỉ đạt tỷ lệ chính xác 38.71%. Điều này chủ yếu do thiếu thông tin API trong bước trích xuất giá trị, thường dẫn đến việc ép buộc trích xuất các giá trị không chính xác ngay cả khi mức độ chắc chắn thấp. Trong ví dụ đã cho, LLM nhầm lẫn xác định 'Jack' là giá trị person_ID. Sự nhầm lẫn này không đáng ngạc nhiên với tính chất mơ hồ của khái niệm person_id. Tuy nhiên, với thông tin API, LLM có thể phân biệt giữa việc sử dụng API hoặc ép buộc trích xuất giá trị, từ đó nâng cao độ chính xác. Ví dụ, LLM có thể tìm thấy rằng person_ID có thể truy xuất được thông qua API PersonName2ID, và do đó, nó bỏ qua 'Jack' được trích xuất sai.

### 4.3 Tại sao Chuỗi Ngược hoạt động?

Trong phần này, chúng tôi phân tích các lỗi phổ biến trong lập kế hoạch API và minh họa cách phương pháp Chuỗi Ngược giảm thiểu chúng để có kết quả cải thiện. Chúng tôi phân loại các lỗi, xác định thông qua đánh giá thủ công, thành hai loại chính, Công cụ Cuối cùng Sai và Đối số Sai, được chi tiết trong Bảng 6. Thống kê này được thực hiện trên 500 thể hiện được lấy mẫu ngẫu nhiên.

Công cụ Cuối cùng Sai phát sinh khi API cuối cùng bị thiếu, dẫn đến việc kết thúc API không chính xác và hướng dẫn không hoàn chỉnh. Lỗi này phổ biến trên tất cả các phương pháp so sánh do kh경향ược của chúng lập kế hoạch từ đầu, tăng khả năng chệch hướng khỏi mục tiêu cuối cùng. Đặc biệt, ReAct dễ bị lỗi này hơn vì phương pháp suy nghĩ-hành động-quan sát của nó thiếu lập kế hoạch toàn cầu. Chuỗi Ngược, bằng cách lập kế hoạch dựa trên mục tiêu cuối cùng, giảm thiểu lỗi này, ngoại trừ khi ý định cuối cùng của truy vấn mơ hồ.

Lỗi thứ hai, Đối số Sai, chiếm ưu thế trong các phương pháp lập kế hoạch, có thể được phân loại thêm thành Wrong Argument_API và Wrong Argument_Value. Lỗi Wrong Argument_API xảy ra khi một đối số yêu cầu là đầu ra của API khác, nhưng kết quả được dự đoán bỏ qua API này, điền giá trị không chính xác. Ví dụ, đối số chính xác là person_ID = PersonName2ID (name='Jack'), nhưng dự đoán nhập sai person_ID='Jack'. Lỗi này thường là kết quả của các sai lầm trong các bước lập kế hoạch trung gian. Trong giai đoạn hoàn thành đối số của Chuỗi Ngược, sử dụng phương pháp tối ưu hóa từ Phần 4.2.2, những lỗi này có thể được giảm đáng kể, cho phép LLM chọn giữa việc sử dụng API hoặc trích xuất giá trị đối số. Wrong Argument_Value bao gồm việc trích xuất các giá trị không chính xác cho đối số. Các trường hợp cụ thể và chiến lược tối ưu hóa cho Chuỗi Ngược được thảo luận trong Phần 4.2.2.

## 5 Kết luận

Bài báo này đề xuất Chuỗi Ngược, một phương pháp ngắn gọn, hướng mục tiêu được phát triển để trao quyền cho LLM khả năng tương tác với các API bên ngoài trong bối cảnh học theo ngữ cảnh. Bằng cách thực hiện chiến lược lý luận ngược và quy tắc chung, Chuỗi Ngược hiệu quả phá vỡ các thách thức gọi hàm phức tạp thành hai nhiệm vụ cơ bản cho LLM: lựa chọn API và hoàn thành đối số. Ngoài ra, chúng tôi thu thập một bộ dữ liệu đa công cụ tổ hợp để đánh giá. Các thí nghiệm mở rộng tiết lộ rằng Chuỗi Ngược nâng cao đáng kể khả năng sử dụng công cụ của ChatGPT LLM hiện có, đạt hiệu suất vượt trội so với các phương pháp như CoT và ReAct.

Mặc dù công việc hiện tại tập trung vào các nhiệm vụ đa công cụ tổ hợp, nó cũng có thể dễ dàng được mở rộng cho các loại nhiệm vụ khác. Ví dụ, trong trường hợp các nhiệm vụ đa công cụ độc lập, sau khi xác định các ý định phụ ở đầu nhiệm vụ (được gọi là Phát hiện Ý định, một vấn đề được thiết lập tốt trong NLP với nhiều giải pháp mạnh mẽ), chúng tôi có thể sử dụng quy trình chuỗi ngược cho từng nhiệm vụ phụ được xác định một cách riêng biệt.

## 6 Hạn chế

Chúng tôi xác định một số hạn chế với công việc hiện tại có thể được giải quyết trong công việc tương lai.

• Phương pháp học theo ngữ cảnh nói chung gặp khó khăn trong việc xử lý một số lượng lớn ứng viên API do hạn chế về độ dài. Một giải pháp tương tự như trong (Qin et al., 2023), bao gồm việc thêm một mô-đun truy xuất ở đầu đường ống, có thể được áp dụng.

• Trong khi minh chứng của chúng tôi cho thấy rằng Chuỗi Ngược vượt qua các phương pháp học theo ngữ cảnh khác về hiệu suất, nó đòi hỏi nhiều cuộc gọi đến LLM hơn. Điều này nêu bật sự đánh đổi giữa nâng cao hiệu suất và tăng sử dụng tài nguyên tính toán.
