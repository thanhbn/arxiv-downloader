# 2310.13227.pdf
# Chuyển đổi từ PDF sang TXT
# Đường dẫn nguồn: /home/admin88/arxiv-downloader/rag/2310.13227.pdf
# Kích thước file: 991334 bytes

===============================================
NỘI DUNG FILE PDF
===============================================

--- TRANG 1 ---
Bản thảo
TOOLCHAIN∗: ĐIỀU HƯỚNG KHÔNG GIAN HÀNH ĐỘNG HIỆU QUẢ
TRONG CÁC MÔ HÌNH NGÔN NGỮ LỚN VỚI THUẬT TOÁN TÌM KIẾM A∗
Yuchen Zhuang1∗, Xiang Chen2, Tong Yu2, Saayan Mitra2
Victor Bursztyn2, Ryan A. Rossi2, Somdeb Sarkhel2, Chao Zhang1
Georgia Institute of Technology1 Adobe Research2
yczhuang@gatech.edu, {xiangche, tyu, smitra }@adobe.com
{soaresbu, ryrossi, sarkhel }@adobe.com, chaozhang@gatech.edu
TÓM TẮT
Các mô hình ngôn ngữ lớn (LLM) đã thể hiện khả năng ra quyết định và lập kế hoạch mạnh mẽ trong việc giải quyết các vấn đề phức tạp trong thế giới thực. Các tác nhân tự động dựa trên LLM có thể tương tác với các công cụ đa dạng (ví dụ: API chức năng) và tạo ra các kế hoạch giải pháp thực hiện một chuỗi các lời gọi hàm API theo từng bước. Số lượng lớn các lời gọi hàm API ứng viên mở rộng đáng kể không gian hành động, làm tăng nhu cầu cấp thiết về điều hướng không gian hành động hiệu quả. Tuy nhiên, các phương pháp hiện tại hoặc gặp khó khăn với việc khám phá đơn hướng trong không gian hành động rộng lớn, bị mắc kẹt trong giải pháp tối ưu cục bộ, hoặc phải chịu việc duyệt qua tất cả các hành động tiềm năng một cách toàn diện, gây ra điều hướng không hiệu quả. Để giải quyết những vấn đề này, chúng tôi đề xuất ToolChain∗, một thuật toán lập kế hoạch dựa trên tìm kiếm cây hiệu quả cho các tác nhân dựa trên LLM. Nó hình thành toàn bộ không gian hành động như một cây quyết định, trong đó mỗi nút đại diện cho một lời gọi hàm API có thể có liên quan đến một kế hoạch giải pháp. Bằng cách kết hợp thuật toán tìm kiếm A∗ với thiết kế hàm chi phí cụ thể cho nhiệm vụ, nó cắt tỉa hiệu quả các nhánh chi phí cao có thể liên quan đến các hành động sai, xác định đường dẫn hợp lệ có chi phí thấp nhất làm giải pháp. Các thí nghiệm rộng rãi trên nhiều nhiệm vụ sử dụng công cụ và lý luận cho thấy ToolChain∗ cân bằng hiệu quả việc khám phá và khai thác trong không gian hành động rộng lớn. Nó vượt trội hơn các baseline hiện đại về các nhiệm vụ lập kế hoạch và lý luận lần lượt là 3.1% và 3.5% trung bình trong khi yêu cầu ít thời gian hơn 7.35x và 2.31x.

1 GIỚI THIỆU
Các mô hình ngôn ngữ lớn (LLM), như GPT (Radford et al., 2018; 2019; Brown et al., 2020; OpenAI, 2023) và PaLM (Chowdhery et al., 2022; Anil et al., 2023), đã thể hiện khả năng đáng chú ý về lý luận và tuân theo hướng dẫn trên một phạm vi rộng các nhiệm vụ (Huang & Chang, 2023). Gần đây, việc hướng dẫn LLM sử dụng các công cụ bên ngoài cho các vấn đề phức tạp trong thế giới thực đã nổi lên như một chủ đề ngày càng quan trọng (Hao et al., 2023b; Zhang et al., 2023; Zhuang et al., 2023; Yang et al., 2023b; Schick et al., 2023; Lu et al., 2023). Đối với các nhiệm vụ phức tạp, các tác nhân tự động dựa trên LLM tích hợp LLM với các công cụ bên ngoài đa dạng (API), tạo ra các giải pháp liên quan đến các bước lý luận trung gian (Schick et al., 2023; Lu et al., 2023; Patil et al., 2023; Qin et al., 2023b). Với một mô tả vấn đề, mục tiêu của một tác nhân là xác định một chuỗi các lời gọi hàm API có thể được thực hiện tuần tự hướng tới một giải pháp hợp lệ. Tuy nhiên, với một không gian hành động gồm hàng trăm hàm API ứng viên, mỗi hàm bao gồm các tên hàm và tham số khác nhau có sẵn ở mỗi bước lập kế hoạch, việc tìm kiếm một giải pháp tối ưu toàn cục trở nên rất thách thức.

Các phương pháp hiện tại tận dụng LLM như các tác nhân tự động cho ra quyết định và lý luận có thể được phân loại rộng rãi thành bốn danh mục (Hình 1): (1) các phương pháp vòng lặp mở (Wei et al., 2022; Zhou et al., 2022; Huang et al., 2022a; Shen et al., 2023; Lu et al., 2023) tạo ra một kế hoạch hoàn chỉnh để giải quyết vấn đề mà không có bất kỳ thích ứng nào trong quá trình thực hiện; (2) các phương pháp vòng lặp đóng tham lam (Yao et al., 2023b; Jang, 2023; Huang et al., 2022b; Kim et al., 2023; Liang et al., 2022) tận dụng phản hồi môi trường để xác định tham lam bước tiếp theo trong kế hoạch; và (3) các phương pháp vòng lặp đóng (Wang et al., 2023; Sun et al., 2023) kết hợp phản hồi môi trường để liên tục giám sát hành vi hệ thống

∗Công việc được thực hiện trong thời gian tác giả thực tập tại Adobe Research.

--- TRANG 2 ---
Bản thảo
Hệ thống Vòng lặp Mở (ví dụ: Chuỗi Suy nghĩ) Hệ thống Vòng lặp Đóng Tham lam (ví dụ: ReAct) Hệ thống Vòng lặp Đóng (ví dụ: AdaPlanner) Hệ thống Dựa trên Tìm kiếm Cây (ví dụ: Cây Suy nghĩ) Các Hành động Tiềm năng Các Hành động Đã khám phá Các Lựa chọn Không khả thi Đầu ra Cuối cùng Khám phá Thực hiện

Hình 1: So sánh các phương pháp hiện tại tận dụng LLM cho ra quyết định từ góc độ không gian tìm kiếm. Hầu hết các phương pháp hiện tại của (1) hệ thống vòng lặp mở (ví dụ: Chuỗi Suy nghĩ (Wei et al., 2022)), (2) hệ thống vòng lặp đóng tham lam (ví dụ: ReAct (Yao et al., 2023b)), và (3) hệ thống vòng lặp đóng (ví dụ: Adaplanner (Sun et al., 2023)) chỉ khám phá một hướng có thể. Điều này thường dẫn đến việc khám phá hạn chế toàn bộ không gian hành động. Ngược lại, (4) các phương pháp dựa trên tìm kiếm cây (ví dụ: Cây Suy nghĩ (Yao et al., 2023a)) xác định một đường dẫn giải pháp hợp lệ bằng cách kiểm tra rộng rãi nhiều nhánh không gian quyết định, bao phủ gần như mọi nút có thể tưởng tượng. ToolChain∗ được đề xuất của chúng tôi thuộc danh mục dựa trên tìm kiếm cây và cải thiện bằng cách phát triển một thuật toán tìm kiếm hiệu quả.

và sửa đổi các kế hoạch tiếp theo tương ứng. Tuy nhiên, các hệ thống điều hướng đơn hướng như vậy có hai hạn chế chính: lan truyền lỗi, bắt nguồn từ một hành động sai lầm và dẫn đến một vòng lặp lỗi; khám phá hạn chế, mặc dù được trang bị các chiến lược tinh chỉnh kế hoạch, hầu hết các phương pháp hiện tại chỉ khám phá một phần nhỏ của không gian hành động lớn, rơi vào các giải pháp tối ưu cục bộ.

Để giải quyết điều này, một số nghiên cứu bắt đầu khám phá (4) các phương pháp dựa trên tìm kiếm cây (Yao et al., 2023a; Hao et al., 2023a) để tận dụng nhiều đường dẫn lý luận đồng thời và đánh giá các nhánh để quyết định hành động tiếp theo. Tuy nhiên, các thuật toán tìm kiếm cây hiện tại, như tìm kiếm theo chiều sâu đầu tiên (DFS) (Yao et al., 2023a) và Tìm kiếm Cây Monte Carlo (MCTS) (Hao et al., 2023a), yêu cầu khám phá toàn diện gần như tất cả các hành động tiềm năng trong toàn bộ không gian quyết định, dẫn đến việc tìm kiếm không hiệu quả cho các giải pháp tối ưu toàn cục.

Để giải quyết những hạn chế này, chúng tôi đề xuất ToolChain∗, một phương pháp lập kế hoạch dựa trên tìm kiếm cây A∗ hiệu quả cho các tác nhân dựa trên LLM. Chúng tôi hình thành quá trình lập kế hoạch sử dụng công cụ như một cây quyết định, trong đó mỗi nút đại diện cho một lời gọi API tiềm năng cho một bước nhất định. Phù hợp với thuật toán tìm kiếm A∗ truyền thống, ToolChain∗ được đề xuất xác định đường dẫn nào để mở rộng dựa trên cả chi phí của đường dẫn hiện tại và chi phí tương lai ước tính cần thiết để hoàn thành kế hoạch hiện tại. Với các hàm chi phí cụ thể cho nhiệm vụ, các hành động sai lệch sẽ bị phạt và giảm thiểu, vì những hành động này gây ra chi phí bổ sung khi lan truyền dọc theo đường dẫn, dẫn đến đường dẫn dần dần bị hạ ưu tiên và không được mở rộng qua các lần lặp. Ngoài ra, không giống như giai đoạn mô phỏng trong MCTS, yêu cầu nhiều bước để mô phỏng cho đến trạng thái cuối trong quá trình rollout, việc ước tính chi phí tương lai trong ToolChain∗ cho phép mở rộng chỉ bước tiếp theo. Với việc mở rộng nút hiệu quả, ToolChain∗ hiệu quả tìm kiếm các giải pháp tối ưu toàn cục trong một số bước có thể quản lý.

Những đóng góp chính của chúng tôi như sau: (1) Chúng tôi đề xuất ToolChain∗, một thuật toán tìm kiếm cây giống A∗ mới, để phát triển các tác nhân tự động dựa trên LLM cho các nhiệm vụ lập kế hoạch và lý luận phức tạp; (2) ToolChain∗ hình thành không gian hành động như một cây quyết định, hiệu quả giảm thiểu lan truyền lỗi và mở rộng không gian tìm kiếm; và (3) ToolChain∗ tăng tốc đáng kể các tác nhân dựa trên LLM trong việc điều hướng không gian cây hành động rộng lớn, tạo ra sự cân bằng giữa khám phá các hành động chưa thăm và khai thác các giải pháp tối ưu toàn cục.

2 SỞ LIỆU CHUẨN BỊ
Công thức Vấn đề. Tận dụng LLM làm tác nhân cho giải quyết vấn đề có thể được khái niệm hóa như một quá trình lập kế hoạch. Để khởi tạo, tác nhân LLM được tăng cường với quyền truy cập vào một nhóm m hàm API ứng viên, ký hiệu là A={API 0,API 1,···,API m}, cùng với một mô tả nhiệm vụ ngôn ngữ tự nhiên g∈ G từ không gian nhiệm vụ G. Mục tiêu của tác nhân LLM là dịch mô tả nhiệm vụ g thành một chuỗi có thứ tự gồm Tg lời gọi hàm API pg={a0, a1,···, aTg}. Cụ thể, xem mô tả nhiệm vụ g như trạng thái ban đầu s0, chúng tôi lấy mẫu kế hoạch pg bằng cách nhắc tác nhân LLM

--- TRANG 3 ---
Bản thảo
với các định nghĩa API I và các mẫu trình diễn D như: pg∼ρ(a0, a1,···, aTg|s0;I,D) : G × I × D → ∆(ATg), trong đó ∆(·) là một hàm simplex xác suất. Đầu ra cuối cùng được rút ra sau khi thực hiện toàn bộ kế hoạch y∼π(y|s0, a1, a2,···, aTg), trong đó π(·) chỉ ra một bộ thực thi kế hoạch.

Hệ thống Dựa trên Tìm kiếm Cây. Các phương pháp tìm kiếm cây khung một vấn đề lập kế hoạch như một tìm kiếm trên một cây quyết định, trong đó mỗi nút n đại diện cho một hành động an, đi kèm với một trạng thái sn∈ S chỉ ra một đường dẫn hợp lệ từ trạng thái ban đầu đến hành động hiện tại. Khi khám phá không gian cây, các phương pháp tìm kiếm cây mở rộng k nút con tiềm năng ch(n) của nút hiện tại n thông qua lấy mẫu từ tập hành động tiềm năng được tạo bởi LLM a(j)ch(n)∼ρ(ach(n)|sn;I,D),(j= 1,···, k) và thêm các nút mới vào không gian trạng thái cây S=S ∪ { (sn, a(j)ch(n))}kj=1. Với các hàm giá trị để đánh giá trạng thái, các phương pháp dựa trên tìm kiếm cây nhằm xác định một đường dẫn từ nút gốc s0 đến các nút lá có giá trị cao nhất hoặc chi phí thấp nhất. ToolChain∗ được đề xuất của chúng tôi là một phương pháp dựa trên tìm kiếm cây.

Tìm kiếm Cây Monte Carlo. MCTS, sử dụng khám phá heuristic để xây dựng cây tìm kiếm của nó, đã đạt được thành công lớn trong các nhiệm vụ ra quyết định, như GO (Silver et al., 2016). Biến thể của nó, UCT (Kocsis & Szepesv ́ari, 2006), đã được áp dụng trong Hao et al. (2023a) để phát triển các tác nhân dựa trên LLM. Cụ thể, nó bắt đầu từ nút gốc của mô tả nhiệm vụ g và di chuyển xuống cây bằng cách chọn các hành động tối ưu (nút con) cho đến nút lá. Sau đó, MCTS giới thiệu một hoặc nhiều nút con dựa trên các hành động có sẵn được cung cấp bởi LLM và xác định nút hứa hẹn nhất n. Từ nút mới được mở rộng n, MCTS yêu cầu các tác nhân LLM thực hiện một rollout mô phỏng cho đến khi đạt đến trạng thái cuối. Khi hoàn thành mô phỏng, một kết quả được trả về từ n tất cả đường về nút gốc, đi kèm với hàm giá trị Q(n) để cập nhật tất cả các điểm số trên đường dẫn được chọn.

© 2023 Adobe. Tất cả quyền được bảo lưu. Adobe Confidential.
f(n)
g(n)
Monte Carlo Tree Search ToolChain*
Q(n)
Q(n)

Hình 2: So sánh giữa MCTS và tìm kiếm A∗ trong ToolChain∗. Không giống MCTS, tìm kiếm A∗ chỉ yêu cầu mở rộng một bước được hướng dẫn bởi các hàm chi phí.

MCTS so với Tìm kiếm A∗. Mặc dù có những cải thiện hiệu suất đạt được bởi MCTS trong các nhiệm vụ lập kế hoạch và lý luận, việc ứng dụng trực tiếp của nó vào các tác nhân LLM đi kèm với chi phí thực hiện đáng kể. Cơ chế rollout trong MCTS yêu cầu nhiều lời gọi LLM để nhắc các hành động tiếp theo cho đến trạng thái cuối. Hơn nữa, không giống như các trò chơi tổng bằng không hai người chơi, các nhiệm vụ lập kế hoạch về cơ bản hoạt động như các trò chơi một người chơi, trong đó các hàm giá trị được ước tính bởi rollout ngẫu nhiên có thể thể hiện độ không chính xác đáng kể. Để giảm thiểu vấn đề, ToolChain∗ được đề xuất dựa trên thuật toán tìm kiếm A∗ hiệu quả hơn. Một so sánh giữa MCTS và ToolChain∗ được đề xuất của chúng tôi được minh họa trong Hình 2. Không giống MCTS, tìm kiếm A∗ chỉ cần một lời gọi LLM duy nhất để xác định các hành động tiếp theo trong quá trình mở rộng theo hai hàm chi phí, g(n), định lượng chi phí của đường dẫn từ nút gốc đến n, và h(n), một hàm heuristic ước tính chi phí của đường dẫn hứa hẹn nhất từ n đến mục tiêu.

3 TOOLCHAIN∗: QUAN ĐIỂM TÌM KIẾM CÂY VỀ SỬ DỤNG CÔNG CỤ BÊN NGOÀI
Trong phần này, chúng tôi giới thiệu ToolChain∗ cho phép các tác nhân dựa trên LLM điều hướng hiệu quả không gian hành động để xác định một đường dẫn giải pháp hợp lệ cho giải quyết vấn đề (Hình 3). Đầu tiên, chúng tôi phác thảo khung của ToolChain∗ (Phần 3.1), bao gồm ba giai đoạn lặp: chọn đường dẫn hứa hẹn nhất trong cây quyết định đã khám phá, mở rộng các hành động tiếp theo tiềm năng dọc theo đường dẫn được chọn, và sau đó cập nhật các hàm chi phí. Trong ToolChain∗, hàm chi phí được cấu thành từ hai thành phần: chi phí tích lũy g(n) (Phần 3.2) và điểm tương lai h(n) (Phần 3.3).

3.1 TỔNG QUAN
ToolChain∗ là một thuật toán tìm kiếm tốt nhất đầu tiên, hướng dẫn hiệu quả các tác nhân LLM trong việc tạo ra một chuỗi các lời gọi hàm API như một kế hoạch giải pháp. Chúng tôi hình thành không gian hành động như một cây tìm kiếm T, trong đó mỗi nút n đại diện cho một hành động an, đi kèm với một trạng thái gồm mô tả nhiệm vụ ban đầu s0

--- TRANG 4 ---
Bản thảo
© 2023 Adobe. Tất cả quyền được bảo lưu. Adobe Confidential.
(c) Cập nhật:
Cập nhật các hàm giá trị của các nút mới được thêm vào trong cây tìm kiếm.
(b) Mở rộng:
Mở rộng các nút với các bước tiếp theo tiềm năng.
(a) Lựa chọn:
Chọn một nút biên giới với tổng chi phí tích lũy và chi phí tương lai thấp nhất

Hình 3: Khung ToolChain∗ gồm ba giai đoạn: (a) lựa chọn, (b) mở rộng, và (c) cập nhật. Các vòng tròn tối và xám chỉ ra các hành động đã khám phá và các hành động tiềm năng nhưng chưa được khám phá, tương ứng. Các vòng tròn xanh dương đại diện cho bước tiếp theo được chọn.

và các hành động trước đó. Điều này tạo điều kiện cho việc dịch lập kế hoạch chuỗi hành động thành một nhiệm vụ điều hướng bắt nguồn từ nút gốc của cây quyết định. ToolChain∗ bắt đầu cây tìm kiếm T với một nút gốc duy nhất, tương ứng với mô tả vấn đề đầu vào s0. Ở mỗi bước, nó chọn một nút n từ các biên giới của T (ký hiệu là F(T)) theo hàm chi phí. Sau đó, nó mở rộng n với LLM để tạo ra một tập k hành động tiềm năng i.i.d. {a(j)ch(n)}kj=1 cho bước tiếp theo và phát triển T với các hành động được tạo ra. Cuối cùng, chúng tôi cập nhật các hành động thành các nút mới s(j)ch(n)= (sn, a(j)ch(n)) và cập nhật các hàm chi phí của chúng tương ứng. Thuật toán 1 mô tả quy trình chi tiết.

Thuật toán 1: ToolChain∗.
Đầu vào: x: đầu vào; ρ: mô hình ngôn ngữ lớn; T: số bước khám phá tối đa; T: cây quyết định; F(T): tập hợp các nút biên giới trong T; f(n): hàm chi phí của nút n.
Khởi tạo T={V,E}, V ← x, E ←∅
for t= 1,2,···, T do
    nnext←arg minn∈F(T)f(n) //Lựa chọn
    {a(i)}ki=1←ρ(nnext) //Mở rộng
    for i= 1,2,···, k do
        Thêm [nnext,a(i)] vào T dưới nnext
    Cập nhật f(n) cho n trong F(T). //Cập nhật
Đầu ra: Đường dẫn hợp lệ để giải quyết vấn đề arg maxn∈F(T)f(n).

Lựa chọn. Với một cây tìm kiếm T, chúng tôi ký hiệu các nút của nó là V(T). Biên giới F(T)⊆ V(T) chứa tất cả các nút lá trong T chưa được khám phá. Với mục tiêu của chúng tôi là giảm thiểu tổng chi phí của giải pháp cuối cùng, nút tối ưu tiếp theo để mở rộng sẽ là kế hoạch hứa hẹn nhất như một phần của giải pháp tốt nhất. Giả sử chúng ta có một oracle hàm chi phí f(n), cung cấp chi phí của kế hoạch tốt nhất kết hợp n để giải quyết vấn đề s0 dưới T. Sau đó, chúng ta có thể chọn nút tiếp theo với chi phí thấp nhất: nnext= arg minn∈F(T)f(n). Một thiết kế phù hợp của hàm giá trị f(n) không chỉ tăng cường hiệu quả tìm kiếm mà còn hỗ trợ trong việc xác định các giải pháp tối ưu toàn cục.

Mở rộng. Một khi nút n với ước tính chi phí tối thiểu f(n) đã được chọn, chúng tôi mở rộng cây tìm kiếm với k hành động tiềm năng cho bước tiếp theo. Những hành động này được lấy mẫu từ tập hành động tiềm năng được tạo bởi LLM a(j)ch(n)∼ρ(ach(n)|sn;I,D),(j= 1,···, k), với các định nghĩa API I và các ví dụ trình diễn D. Đối với các hành động hoặc bước lý luận được tạo ra {a(j)ch(n)}kj=1, chúng tôi thiết lập các nút tương ứng của chúng dưới nút n. Trái ngược với phương pháp trong MCTS (Hao et al., 2023a), yêu cầu nhiều lời gọi đến ρ cho đến trạng thái cuối trong quá trình rollout, việc mở rộng của chúng tôi chỉ yêu cầu một lời gọi duy nhất để tạo ra các hành động có thể ở bước tiếp theo.

Cập nhật. Ký hiệu cây tìm kiếm T sau khi mở rộng nút n là T′. Với việc các nút mới đã được kết hợp và cấu trúc cây ban đầu đã thay đổi, chúng tôi cần cập nhật các nút biên giới là F(T′). Với các nút biên giới mới n∈ F(T′), chúng ta có thể tính toán các hàm chi phí tương ứng của chúng cho lần lặp lựa chọn-mở rộng-cập nhật tiếp theo.

Hàm Chi phí. Chúng tôi lấy cảm hứng từ thuật toán A∗ để thiết kế và cập nhật hàm chi phí f(n). Cụ thể, A∗ chọn đường dẫn giảm thiểu f(n) =g(n) +h(n), trong đó n là nút hiện tại, g(n) đại diện cho chi phí của đường dẫn từ nút bắt đầu đến n, và h(n) là một hàm heuristic ước tính chi phí của đường dẫn rẻ nhất từ n đến mục tiêu.

3.2 THIẾT KẾ CHI PHÍ TÍCH LŨY g(n)
Trong quá trình lập kế hoạch, chúng tôi đánh giá chi phí tích lũy của các hành động trong kế hoạch hiện tại và hướng dẫn việc lập kế hoạch dựa trên đánh giá. Đối với mỗi nút n trong cây tìm kiếm, chúng tôi thiết kế một hàm giá trị một bước gt(n) trong khoảng từ 0 đến 1 và hình thành chi phí như phần bù của nó 1−gt(n). Do đó, chi phí tích lũy của n có thể được tính bằng cách tổng tất cả các chi phí một bước của các nút tổ tiên an(n): g(n) =∑i∈an(n)1−gt(i). Cụ thể hơn, chúng tôi kết hợp hai hàm giá trị khác nhau, hàm heuristic cụ thể cho nhiệm vụ từ dữ liệu tham chiếu (bộ nhớ dài hạn) gt,1(n) và tần suất tự nhất quán bởi LLM gt,2(n), để tính chi phí tích lũy g(n):

g(n) =∑i∈{an(n),n}(1−gt,1(i))α·(1−gt,2(i))1−α, (1)

trong đó α là một tham số trọng số cho trung bình hình học.

Hàm Heuristic Cụ thể cho Nhiệm vụ gt,1(n). Chúng ta cũng có thể duy trì một bộ nhớ dài hạn với các kinh nghiệm thành công và tính điểm heuristic tương ứng. Bộ nhớ dài hạn bắt đầu từ một tập seed của các ví dụ trình diễn được cung cấp trong một bộ dữ liệu cụ thể và được mở rộng lặp đi lặp lại với các kế hoạch thành công trong quá trình đánh giá. Mỗi ví dụ trong bộ nhớ dài hạn được đại diện như một kế hoạch mj= (sj,0, aj,1, aj,2,···, aj,Tj)∈ M. Số lượng hành động Tj trong kế hoạch thay đổi theo từng trường hợp. Để tận dụng các kinh nghiệm thành công để đánh giá kế hoạch hiện tại, chúng tôi tính điểm chuỗi con chung dài nhất (LCS) giữa kế hoạch hiện tại được tạo ra sn và mỗi kế hoạch mj trong bộ nhớ dài hạn LCS score(sn, mj) =LCS(sn,mj)/min(L(sn),L(mj)), trong đó L(·) chỉ ra độ dài của kế hoạch. Theo sau điều này, chúng tôi tính các hàm tích lũy như điểm LCS cao nhất gt,1(n) = max mj∈M LCS score(sn, mj), đo tỷ lệ thành công trong kế hoạch so với các kinh nghiệm tích lũy trong bộ nhớ dài hạn.

Tần suất Tự nhất quán gt,2(n). Tự nhất quán (Wang et al., 2022b) là một phương pháp ensemble lấy mẫu k hành động i.i.d. ở bước tiếp theo {a(j)t+1}kj=1∼p(at+1|x, a0, a1,···, at). Sau đó chúng tôi chọn các hành động khác nhau về ngữ nghĩa từ k mẫu được tạo ra làm tập các bước tiếp theo tiềm năng. Đối với các tình huống sử dụng công cụ, vì các hành động nghiêm ngặt về định dạng hàm API và tham số, chúng tôi trực tiếp xây dựng tập hợp với các hành động không lặp lại. Tuy nhiên, đối với các tình huống lý luận, các hành động đại diện cho các quá trình suy nghĩ trung gian được diễn đạt bằng ngôn ngữ tự nhiên. Lấy cảm hứng từ Kuhn et al. (2022), chúng tôi áp dụng một mô hình DeBERTa-large (He et al., 2020) được fine-tune trên bộ dữ liệu suy luận ngôn ngữ tự nhiên (NLI) MNLI (Williams et al., 2018) để xác định xem hai hành động được tạo ra có kéo theo nhau về ngữ nghĩa hay không. Điều này cho phép chúng tôi loại bỏ các hành động tương đương về ngữ nghĩa, chỉ giữ lại những hành động cung cấp lý luận khác biệt như các bước tiếp theo tiềm năng. Cuối cùng, chúng tôi xem xét tần suất của các hành động khác nhau trong tập hợp như điểm tích lũy tương ứng của chúng, được cho bởi gt,2(n) = #{j|a(j)t+1=n}/k.

3.3 THIẾT KẾ CHI PHÍ TƯƠNG LAI h(n)
Tương tự như công thức chi phí tích lũy g(n), chúng tôi tích hợp hai hàm phần thưởng khác biệt, hàm heuristic cụ thể cho nhiệm vụ ht,1(n) và Điểm Tưởng tượng bởi LLM ht,2(n), để tính h(n):

h(n) = (1 −ht,1(n))β·(1−ht,2(n))1−β, (2)

trong đó β là trọng số trung bình hình học cho chi phí tương lai.

Hàm Heuristic Cụ thể cho Nhiệm vụ. Tương tự như hàm heuristic trong chi phí tích lũy (Phần 3.2), chúng tôi tiếp tục tận dụng bộ nhớ dài hạn để tính điểm tương lai. Từ bộ nhớ dài hạn, chúng ta có thể rút ra điểm vị trí tương đối trung bình của hành động a xuất hiện trong các kế hoạch mj: ht,1(a) =∑mj∈M1{a∈mj}pos(a,mj)/Tj, trong đó pos(a, mj) chỉ ra vị trí tương đối của hành động a trong kế hoạch mj. Lưu ý rằng không gian hành động có thể vô hạn, và bộ nhớ dài hạn có thể không bao phủ tất cả các hành động tiềm năng liên quan đến các nhiệm vụ chưa thấy. Do đó, với một nút hành động n, chúng tôi tính điểm tương lai của nó như điểm heuristic của hành động gần nhất về từ vựng được bao phủ trong bộ nhớ dài hạn: ht,1(n) =ht,1(arg maxa∈M LCS score(n, a)).

--- TRANG 5 ---
Bản thảo
Bảng 1: Kết quả thí nghiệm chính (tỷ lệ thành công) trên ToolBench, bao gồm các tình huống sử dụng công cụ của (1) Home Search, (2) Trip Booking, (3) Google Sheets, và (4) Virtual Home.

| Mô hình | GPT-3.5-turbo | | | | | GPT-4 | | | | |
|---------|---|---|---|---|---|---|---|---|---|---|
| | Home Search | Trip Booking | Google Sheets | Virtual Home | Trung bình | Home Search | Trip Booking | Google Sheets | Virtual Home | Trung bình |
| GPT (OpenAI, 2023) | 80.0 | 85.8 | 51.4 | 18.9 | 59.2 | 97.0 | 96.7 | 62.9 | 23.5 | 70.0 |
| ReAct (Yao et al., 2023b) | 83.0 | 86.7 | 47.1 | 20.5 | 59.3 | 94.0 | 97.5 | 64.3 | 22.7 | 69.6 |
| AdaPlanner (Sun et al., 2023) | 90.0 | 87.5 | 55.7 | 20.7 | 63.5 | 97.0 | 97.5 | 66.7 | 27.1 | 72.1 |
| ToT-DFS (Yao et al., 2023a) | 82.0 | 81.7 | 53.4 | 21.0 | 59.5 | 95.0 | 96.7 | 62.9 | 24.8 | 69.9 |
| ToT-BFS (T=5) (Yao et al., 2023a) | 83.0 | 83.3 | 48.6 | 21.8 | 59.9 | 92.0 | 94.2 | 64.3 | 26.6 | 69.3 |
| MCTS (Hao et al., 2023a) | 85.0 | 86.7 | 62.9 | 24.4 | 64.8 | 96.0 | 94.2 | 66.7 | 31.3 | 72.1 |
| ToolChain∗ | 93.0 | 90.8 | 61.4 | 28.6 | 68.5 | 98.0 | 97.5 | 68.6 | 34.5 | 74.7 |

Điểm Tưởng tượng bởi LLM. Việc trực tiếp hỏi LLM để tự đánh giá chi phí tương lai ở bước hiện tại thường mang lại các điểm quá tự tin (Lin et al., 2022). Để giải quyết điều này, chúng tôi cho phép LLM tưởng tượng các bước tương lai cụ thể hơn cho đến mục tiêu nT. Tuy nhiên, cần lưu ý rằng các hành động được tưởng tượng có thể không phù hợp với các hành động thực sự được thực hiện trong các kế hoạch tương lai. Để giải quyết điều này, chúng tôi tính điểm tương lai như tỷ lệ các bước hiện tại có mặt trong kế hoạch được tưởng tượng, tức là tỷ số số lượng giữa các tổ tiên nút hiện tại n với nút mục tiêu nT: ht,2(n) =|{an(n)}|/|{an(nT)}|. Một điểm cao hơn cho thấy kế hoạch được tưởng tượng nắm bắt chặt chẽ đường dẫn đến bước hiện tại, chỉ ra rằng cần ít bước còn lại hơn để hoàn thành nhiệm vụ trong trí tưởng tượng của LLM.

4 THÍ NGHIỆM
Trong phần này, chúng tôi chứng minh tính hiệu quả và hiệu suất của ToolChain∗ thông qua các thí nghiệm toàn diện trên một phạm vi rộng các tình huống sử dụng công cụ từ ToolBench (Xu et al., 2023) (Phần 4.2). Ngoài ra, chúng tôi tiến hành các thí nghiệm rộng rãi trên GSM8K (Cobbe et al., 2021) (Phần 4.3) để thể hiện sự tổng quát hóa của ToolChain∗ trên các nhiệm vụ lý luận thuần túy mà không có tương tác công cụ.

4.1 THIẾT LẬP THÍ NGHIỆM
Bộ dữ liệu. Chúng tôi đánh giá ToolChain∗ trên bốn môi trường sử dụng công cụ trong ToolBench (Xu et al., 2023) và một nhiệm vụ lý luận trong GSM8K (Cobbe et al., 2021). Đối với các tình huống sử dụng công cụ, chúng tôi chọn các môi trường với cả không gian hành động rộng lớn bao gồm một số lượng lớn công cụ chức năng, và yêu cầu của một đường dẫn giải pháp sâu với nhiều hàm API (tức là các nhiệm vụ phức tạp), bao gồm Home Search, Trip Booking, Google Sheets, và Virtual Home. Với việc lý luận số học yêu cầu tính toán nhiều bước để tính toán câu trả lời, chúng tôi chọn GSM8K (Cobbe et al., 2021) để đánh giá về lý luận toán học. Chi tiết bộ dữ liệu có sẵn trong Phụ lục D.1.

Baseline. Đối với các môi trường từ ToolBench, chúng tôi so sánh ToolChain∗ với các thuật toán lập kế hoạch LLM hiện đại từ ba danh mục chính, bao gồm các hệ thống vòng lặp mở (GPT (OpenAI, 2023)), các hệ thống vòng lặp đóng (ReAct (Yao et al., 2023b) và Adaplanner (Sun et al., 2023)), và các hệ thống dựa trên tìm kiếm cây (Tree-of-Thoughts (Yao et al., 2023a) và MCTS (Hao et al., 2023a)). Đối với các bài toán lý luận toán học, chúng tôi sử dụng một tập baseline tương tự như trong các nhiệm vụ sử dụng công cụ. Tuy nhiên, chúng tôi loại trừ ReAct và AdaPlanner khỏi các đánh giá lý luận toán học. Điều này là do chúng phụ thuộc rất nhiều vào phản hồi môi trường chất lượng cao để điều chỉnh các kế hoạch hành động, điều này không có sẵn trong bộ dữ liệu GSM8K. Ngoài ra, vì các bước hành động trong các tình huống sử dụng công cụ vốn tạo thành các chuỗi mạch lạc, chúng tôi hạn chế so sánh ToolChain∗ chỉ với Chain-of-Thought (Wei et al., 2022) và Self-Consistency (Wang et al., 2022b) cho nhiệm vụ lý luận toán học, và loại trừ nó khỏi các đánh giá ToolBench. Chi tiết baseline có thể tìm thấy trong Phụ lục D.2.

4.2 SỬ DỤNG CÔNG CỤ: TOOLBENCH
Chúng tôi tiến hành thí nghiệm trên bốn nhiệm vụ lập kế hoạch khác biệt để đánh giá tính hiệu quả và hiệu suất của ToolChain∗ trong việc sử dụng công cụ. Mục tiêu là tạo ra một chuỗi các lời gọi hàm API để hình thành

--- TRANG 6 ---
Bản thảo
một kế hoạch giải pháp cho mỗi nhiệm vụ được đưa ra. Ví dụ, những nhiệm vụ này bao gồm các câu hỏi hoặc yêu cầu từ người dùng, ví dụ: "Bạn có thể giúp tôi tìm vé tàu đến Cape Coral không?". Chúng tôi trình bày các kết quả chính, trực quan hóa nghiên cứu trường hợp, phân tích hiệu suất theo thời gian, và thảo luận các nghiên cứu loại bỏ trong các tình huống sử dụng công cụ như sau. Chúng tôi báo cáo tỷ lệ thành công như số liệu đánh giá. Thiết lập nhiệm vụ chi tiết cho ToolBench có sẵn trong Phụ lục B.3.

Kết quả. Bảng 1 trình bày các kết quả thí nghiệm chính trên ToolBench. ToolChain∗ được đề xuất của chúng tôi nhất quán vượt trội trên gần như tất cả các bộ dữ liệu, vượt qua các baseline hiện đại với biên độ 3.7% và 2.5% với các LLM cơ sở GPT-3.5-turbo và GPT-4, tương ứng. So sánh với baseline vòng lặp đóng mạnh nhất AdaPlanner, ToolChain∗ cải thiện tỷ lệ thành công trung bình 3.8%. Sự cải thiện này là do AdaPlanner phụ thuộc rất nhiều vào phản hồi môi trường, có thể không luôn có sẵn trong các tình huống sử dụng công cụ. Không có phản hồi chất lượng cao như vậy, các phương pháp vòng lặp đóng có xu hướng khám phá một quỹ đạo hạn chế trong không gian hành động, khiến chúng dễ bị lan truyền lỗi từ các hành động trước đó đến các kế hoạch tương lai.

Tắm
ĐiĐến(vòi sen) ĐiĐến(phòng ngủ)
Tìm(xà phòng)
Quay(vòi sen) Cầm(xà phòng) BậtLên(vòi sen)

Không gian Khám phá ToolChain* 
Không gian Khám phá ReAct
...
Các Nút Đã khám phá ToolChain* Giải pháp ReAct
Giải pháp ToolChain* Câu trả lời Đúng Thực hiện ToolChain* Thực hiện ReAct

Mô tả Vấn đề Khám phá ToolChain*
ĐiĐến(phòng tắm)
Tìm(vòi sen) Quay(vòi sen)
Bật(vòi sen)
Tìm(quần áo)
... ... ...

Tắm
ĐiĐến(phòng tắm)
ĐiĐến(vòi sen)
Tìm(vòi sen)
Quay(vòi sen)
...

Hình 4: Nghiên cứu trường hợp của ToolChain∗ và ReAct (Yao et al., 2023b) trên bộ dữ liệu Virtual Home. So với ReAct với tìm kiếm đơn hướng (đỏ), ToolChain∗ hiệu quả mở rộng không gian tìm kiếm (xanh) với cấu trúc cây.

Hơn nữa, ToolChain∗ không chỉ vượt qua phương pháp dựa trên tìm kiếm cây mạnh nhất, MCTS, mà còn thể hiện khả năng khai thác một kế hoạch giải pháp tốt hơn trong cùng ngân sách khám phá. Điều này là do hàm chi phí cụ thể cho nhiệm vụ được đề xuất của chúng tôi cho phép ToolChain∗ ưu tiên việc mở rộng các nhánh hứa hẹn nhất. Phân tích bổ sung có sẵn trong Phụ lục D.3.

Nghiên cứu Trường hợp. Hình 4 mô tả một ví dụ về ToolChain∗ (GPT-4) và ReAct (Yao et al., 2023b) trên nhiệm vụ "tắm" trong bộ dữ liệu Virtual Home. Theo sự thật cơ bản (xanh lá, "vòi sen"), ToolChain∗ tạo ra kế hoạch hành động chính xác (xanh, "vòi sen") với một không gian tìm kiếm mở rộng, trong khi phương pháp tìm kiếm baseline bị mắc kẹt trong một giải pháp tối ưu cục bộ (đỏ, "xà phòng"). Điều này cho thấy rằng bằng cách hình thành và mở rộng dựa trên một không gian hành động dựa trên cây, ToolChain∗ có khả năng hiệu quả tìm kiếm giải pháp tối ưu toàn cục trong các nhiệm vụ lập kế hoạch nhiều bước phức tạp.

Bảng 2: Nghiên cứu loại bỏ trên ToolBench.
| | Home Search | Trip Booking | Google Sheets | Virtual Home | Trung bình |
|---|---|---|---|---|---|
| ToolChain* | 93.0 | 90.8 | 61.4 | 28.6 | 68.5 |
| −g1,t(n) | 91.0 | 88.3 | 60.0 | 22.6 | 65.5 |
| −g2,t(n) | 84.0 | 83.3 | 54.3 | 25.3 | 61.7 |
| −h1,t(n) | 88.0 | 87.5 | 61.4 | 23.0 | 65.0 |
| −h2,t(n) | 85.0 | 85.8 | 51.4 | 24.9 | 61.8 |
| −g(n) | 61.0 | 34.9 | 44.2 | 21.0 | 40.3 |
| −h(n) | 84.0 | 85.8 | 53.4 | 26.1 | 62.3 |

Đánh giá Hiệu suất. Về mặt hiệu suất, chúng tôi đánh giá thời gian chạy của ToolChain∗ so với tất cả các baseline dựa trên GPT-3.5-turbo, như được mô tả trong Hình 5(a). Đáng chú ý, ToolChain∗ nhanh hơn 37.2% so với phương pháp dựa trên tìm kiếm cây hiệu quả nhất, Tree-of-Thoughts (BFS). Cải thiện hiệu suất này có thể xuất phát từ hàm chi phí vượt trội được đề xuất, hiệu quả điều hướng các đường dẫn hứa hẹn nhất. Ngoài ra, ToolChain∗ vượt qua phương pháp dựa trên tìm kiếm cây hoạt động tốt nhất, MCTS, với một cách biệt ấn tượng 415.84%. Sự khác biệt này phát sinh vì ToolChain∗ tập trung vào việc mở rộng chỉ hành động ngay lập tức tiếp theo trong quá trình khám phá. Ngược lại, MCTS trải qua một quá trình toàn diện hơn, mô phỏng toàn bộ kế hoạch tương lai từng bước một bằng cách sử dụng cơ chế rollout. Kết quả hiệu suất dựa trên GPT-4 có sẵn trong Phụ lục D.5.

Nghiên cứu Loại bỏ. Chúng tôi tiến hành các nghiên cứu loại bỏ để đánh giá tính hiệu quả (tỷ lệ thành công) của cả các hàm chi phí tích lũy và tương lai (Bảng 2). Kết quả cho thấy mỗi thành phần của các hàm chi phí tích lũy và tương lai đóng góp vào hiệu suất của ToolChain∗. Điều này xác minh hiệu quả của các hàm chi phí được đề xuất của chúng tôi trong việc hướng dẫn tìm kiếm qua cây quyết định. Ngoài ra, việc loại bỏ toàn bộ chi phí tích lũy hoặc tương lai dẫn đến sự suy giảm đáng kể trong tỷ lệ thành công. Chỉ dựa vào chi phí tương lai dẫn đến sự sụt giảm hiệu suất mạnh 28.2%, làm giảm ToolChain∗ thành một chiến lược tham lam ưa chuộng các kế hoạch giải pháp ngắn nhất với số lượng hành động ít nhất. Ngược lại, nếu tìm kiếm chỉ được hướng dẫn bởi chi phí tích lũy, ToolChain∗ về cơ bản phản ánh hành vi của thuật toán BFS, mang lại hiệu suất tương tự. Phân tích nghiên cứu loại bỏ thêm có thể tìm thấy trong Phụ lục D.6.

4.3 LÝ LUẬN TOÁN: GSM8K
Ngoài các tình huống sử dụng công cụ, chúng tôi chứng minh tính linh hoạt của ToolChain∗ bằng cách tổng quát hóa ứng dụng của nó vào lý luận toán học để giải quyết các bài toán từ toán học. Chúng tôi tiến hành thí nghiệm trên toàn bộ tập GSM8K và cũng một tập con các câu hỏi khó từ GSM8K được thu thập trong ToolQA (Zhuang et al., 2023). Thiết lập nhiệm vụ chi tiết cho GSM8K có sẵn trong Phụ lục B.4.

Bảng 3: Kết quả chính về nhiệm vụ lý luận toán trong GSM8K và tập con khó của nó được thu thập trong ToolQA.
| Mô hình | GPT-3.5-turbo | | GPT-4 | |
|---------|---|---|---|---|
| | GSM8K | ToolQA | GSM8K | ToolQA |
| GPT | 67.3 | 26.0 | 86.6 | 66.0 |
| CoT | 70.1 | 30.0 | 87.5 | 75.0 |
| Self-Consistency | 76.1 | 47.0 | 92.4 | 78.0 |
| ToT-DFS | 69.9 | 32.0 | 89.2 | 76.0 |
| ToT-BFS | 72.3 | 39.0 | 91.3 | 77.0 |
| MCTS | 74.7 | 27.0 | 91.0 | 74.0 |
| ToolChain* | 77.0 | 52.0 | 93.5 | 84.0 |

Kết quả. Bảng 3 trình bày các kết quả thí nghiệm chính (độ chính xác) cho GSM8K và tập con thách thức của nó từ ToolQA. Tương tự như các nghiên cứu sử dụng công cụ (Bảng 1), ToolChain∗ nhất quán vượt trội hơn tất cả các baseline trong cả tập ban đầu và tập con thách thức. Những kết quả này chứng minh tính linh hoạt và khả năng tổng quát hóa của ToolChain∗ trong các nhiệm vụ lý luận toán học. Đáng chú ý, ToolChain∗ thể hiện lợi thế lớn hơn so với các baseline khác trên ToolQA (câu hỏi khó) hơn trên GSM8K, chỉ ra khả năng vượt trội của nó trong việc giải quyết các nhiệm vụ phức tạp. Điều này là do các câu hỏi đơn giản được cấu thành từ lý luận đơn giản và tĩnh, loại bỏ nhu cầu về nhiều nhánh. Ngược lại, các câu hỏi thách thức thường liên quan đến lý luận phức tạp, nhiều bước trung gian, và nhiều đường dẫn giải pháp. Hiệu suất vượt trội trên các tập con khó nhấn mạnh khả năng của ToolChain∗ trong việc giải quyết các vấn đề lý luận phức tạp. Hơn nữa, phân tích hiệu suất được trình bày trong Hình 5(b) chỉ ra rằng ToolChain∗ nằm trong số các baseline tìm kiếm dựa trên cây hiệu quả nhất và có hiệu suất thời gian tương đương với các hệ thống vòng lặp đóng mà không có cấu trúc cây. Nghiên cứu trường hợp chi tiết về khám phá không gian hành động và phân tích hiệu suất với số lượng hành động hợp lệ có sẵn trong Phụ lục D.4 và D.5, tương ứng.

4.4 THẢO LUẬN: PHÂN TÍCH THỰC NGHIỆM
Từ các đánh giá toàn diện trong các nhiệm vụ lập kế hoạch và lý luận được trình bày trong Phần 4.2 và 4.3, chúng tôi xác nhận rằng ToolChain∗ giải quyết hai hạn chế cốt lõi của các tác nhân dựa trên LLM vòng lặp mở/đóng, lan truyền lỗi trong các giải pháp nhiều bước và khám phá hạn chế trong không gian hành động rộng lớn. Đồng thời, chúng tôi chứng minh ToolChain∗ là một chiến lược tìm kiếm hiệu quả hơn so với các tác nhân dựa trên tìm kiếm cây hiện tại. Từ phân tích mở rộng quy mô trong Hình 10 trong Phụ lục D.5, cùng với kết quả thí nghiệm trong Bảng 1 và số liệu hiệu suất trong Hình 5, chúng tôi xác định một sự đánh đổi quan trọng giữa hiệu quả và hiệu suất trong việc ứng dụng trực tiếp các phương pháp lý luận dựa trên tìm kiếm cây vào các tình huống sử dụng công cụ phức tạp.

GPT AdaPlanner ReAct ToolChain* ToT-BFS ToT-DFS MCTS
0 200 400 600 800 1000
Thời gian Chạy (giây)
Home Search
Trip Booking
Google Sheet
Virtual Home
(a) ToolBench.

GPT CoT SC ToolChain* ToT-BFS ToT-DFS MCTS
0 100 200 300 400 500 600
Thời gian Chạy (giây)
GSM8K (GPT3.5)
ToolQA (GPT3.5)
GSM8K (GPT4)
ToolQA (GPT4)
(b) GSM8K.

Hình 5: Đánh giá hiệu suất thời gian trên (a) ToolBench và (b) GSM8K. Chúng tôi báo cáo thời gian chạy trung bình tính bằng giây trên tất cả các instance trong bộ dữ liệu. ToolChain∗ đạt được hiệu suất cạnh tranh với các hệ thống vòng lặp đóng không có cấu trúc cây và vượt trội hơn các thuật toán dựa trên tìm kiếm cây khác.

--- TRANG 7 ---
Bản thảo
5 10 15 20 25 30
Giới hạn Bước
0 20 40 60 80
Tỷ lệ Thành công (%)
(a) Hiệu suất

5 10 15 20 25 30
Giới hạn Bước
50 100 150 200 250 300
Thời gian Chạy (giây)
Home Search
Trip Booking
Google Sheet
Virtual Home
GSM8K
(b) Thời gian Chạy

Hình 6: Phân tích mở rộng quy mô của ToolChain∗. (a) Hiệu suất và (b) thời gian chạy trên ToolBench và GSM8K khi mở rộng quy mô giới hạn bước T.

Để xác nhận ToolChain∗ trong việc giải quyết những vấn đề này, chúng tôi tóm tắt các phát hiện chính từ thí nghiệm như sau: (1) Từ các kết quả thí nghiệm chính được thể hiện trong Bảng 1 và 3, ToolChain∗ vượt qua các baseline vòng lặp mở/đóng và tìm kiếm cây trong các nhiệm vụ lập kế hoạch và lý luận nhiều bước phức tạp, hiệu quả giảm thiểu lan truyền lỗi. Một ví dụ trực quan về cách ToolChain∗ dần dần bỏ đường dẫn lỗi và giảm thiểu lan truyền lỗi có sẵn trong Hình 7 trong Phụ lục D.4. (2) Từ các nghiên cứu trường hợp trong Hình 4, 7, và 8, ToolChain∗ điều hướng đường dẫn hướng tới một giải pháp tối ưu bằng cách hình thành không gian hành động như một cây quyết định, do đó mở rộng rộng rãi không gian khám phá. (3) Từ Hình 5 và 9, ToolChain∗ tăng tốc đáng kể quá trình tìm kiếm so với các phương pháp dựa trên tìm kiếm cây khác, đạt được hiệu suất thời gian thậm chí tương đương với các hệ thống vòng lặp đóng không có cấu trúc cây. (4) Từ sử dụng công cụ trong ToolBench đến các bài toán toán trong GSM8K, chúng tôi cho thấy ToolChain∗ là một khung tổng quát plug-and-play có thể áp dụng cho một phạm vi rộng các vấn đề lập kế hoạch và lý luận. Đáng chú ý, nó thể hiện khả năng đặc biệt trong việc giải quyết các nhiệm vụ thách thức hơn, như ToolQA, so với các baseline. Các kết quả bổ sung trong Phụ lục E và F cho thấy ToolChain∗ có thể tổng quát hóa cho một phạm vi rộng các nhiệm vụ lý luận phức tạp và các LLM mã nguồn mở (ví dụ: LLaMA 2 (Touvron et al., 2023)). (5) Có một sự đánh đổi giữa độ sâu tìm kiếm (tức là giới hạn về số bước) và chất lượng của đường dẫn giải pháp (Hình 6). ToolChain∗ hiệu quả tìm kiếm các giải pháp tối ưu trong các bước hạn chế, tạo ra sự cân bằng giữa khám phá và khai thác.

5 CÁC CÔNG TRÌNH LIÊN QUAN
LLM cho Sử dụng Công cụ. Những tiến bộ gần đây đã tận dụng LLM làm các tác nhân tự động để làm chủ các công cụ và tạo ra các kế hoạch giải pháp cho các vấn đề phức tạp (Qin et al., 2023a;b; Mialon et al., 2023). Tương tác với các công cụ khác nhau, các tác nhân LLM có thể tăng cường bản thân với kiến thức thực tế thời gian thực (Nakano et al., 2022; Yang et al., 2023a), hiểu biết đa phương thức (Shen et al., 2023; Lu et al., 2023; Yang et al., 2023c), khả năng tính toán (Schick et al., 2023; Parisi et al., 2022), khả năng diễn giải mã (Gao et al., 2022; Paranjape et al., 2023), và các chức năng cụ thể theo lĩnh vực (Zhang, 2023; Jin et al., 2023). Tuy nhiên, nhiều phương pháp hiện tại hoặc tập trung vào các tình huống sử dụng công cụ riêng lẻ (Schick et al., 2023; Parisi et al., 2022) hoặc đơn giản tiêm các quy tắc sắp xếp heuristic do con người tạo ra cho việc sử dụng nhiều công cụ (Shen et al., 2023; Lu et al., 2023). Với số lượng tăng của các hàm API tiềm năng ở mỗi bước và chuỗi hành động gia tăng cho các giải pháp vấn đề phức tạp, không gian hành động mở rộng theo cấp số nhân, do đó làm giảm hiệu quả của chúng. ToolChain∗ khung thách thức lập kế hoạch trên các công cụ khác nhau như điều hướng qua không gian hành động để hiệu quả xác định một đường dẫn giải pháp hợp lệ.

LLM với Thuật toán Tìm kiếm. Phần lớn các tác nhân dựa trên LLM với các hệ thống vòng lặp mở hoặc đóng dựa vào cấu trúc lý luận hoặc lập kế hoạch tuyến tính. Để khám phá nhiều nhánh trong không gian hành động, tự nhất quán (Wang et al., 2022b) lấy mẫu nhiều chuỗi suy nghĩ, có thể được coi như nhiều đường dẫn giải pháp i.i.d. trong không gian quyết định, chọn câu trả lời tốt nhất thông qua bỏ phiếu đa số. Maieutic prompting (Jung et al., 2022) tạo ra một cây giải thích, thực thi tính nhất quán logic. Xie et al. (2023) áp dụng tìm kiếm beam để giải mã và cải thiện chuỗi lý luận Chain-of-Thoughts. CoRe (Zhu et al., 2023) đề xuất fine-tune cả bộ tạo bước lý luận và bộ xác minh để giải quyết các bài toán từ toán, kết hợp MCTS cho giải mã lý luận. Tree-of-Thoughts (Yao et al., 2023a) sử dụng các phương pháp heuristic, bao gồm tìm kiếm theo chiều sâu và chiều rộng đầu tiên để xác định các đường dẫn lý luận tốt hơn. Ngoài ra, RAP (Hao et al., 2023a) kết hợp một mô hình thế giới với phần thưởng trong một phương pháp tìm kiếm MCTS tiên tiến. Tuy nhiên, nhiều phương pháp lập kế hoạch được hướng dẫn bởi tìm kiếm đối mặt với sự đánh đổi giữa khám phá hiệu quả của không gian hành động rộng lớn và khai thác hiệu quả các giải pháp tối ưu toàn cục. Để tránh khám phá toàn diện như MCTS, chúng tôi đề xuất ToolChain∗ để kết hợp tìm kiếm A∗ hiệu quả với khả năng lý luận hiệu quả của LLM.

--- TRANG 8 ---
Bản thảo
6 KẾT LUẬN
Trong bài báo này, chúng tôi đề xuất ToolChain∗, một thuật toán lập kế hoạch dựa trên tìm kiếm cây A∗ để tăng cường LLM với các công cụ bên ngoài cho các nhiệm vụ lập kế hoạch và lý luận phức tạp trong thế giới thực. So với các tác nhân LLM vòng lặp mở hoặc đóng hiện tại, ToolChain∗ hình thành không gian hành động như một cây quyết định, do đó hiệu quả giảm thiểu lan truyền lỗi và mở rộng rộng rãi không gian tìm kiếm. Hơn nữa, ToolChain∗ tăng tốc đáng kể quá trình tìm kiếm so với các phương pháp dựa trên tìm kiếm cây khác, cho phép tìm kiếm cây trong không gian hành động phức tạp và tạo ra sự cân bằng động giữa khám phá và khai thác. Chúng tôi chứng minh ToolChain∗ như một khung tổng quát trong một phạm vi rộng các nhiệm vụ lập kế hoạch và lý luận với cả LLM đóng và mở nguồn. Bằng cách đạt được những cải thiện đáng kể so với các baseline hiện đại, ToolChain∗ thể hiện tiềm năng của nó như một thuật toán lập kế hoạch hiệu quả, điều hướng các tác nhân dựa trên LLM trong việc giải quyết các thách thức phức tạp trong thế giới thực.

TÀI LIỆU THAM KHẢO
[Danh sách tài liệu tham khảo được giữ nguyên như trong bản gốc]

--- TRANG 9 ---
[Tiếp tục với phần còn lại của tài liệu...]
