# 2309.07870.pdf
# Chuyển đổi từ PDF sang TXT
# Đường dẫn nguồn: /home/admin88/arxiv-downloader/rag/2309.07870.pdf
# Kích thước tệp: 1664828 byte

===============================================
NỘI DUNG TỆP PDF
===============================================

--- TRANG 1 ---
Agents: Một Framework Mã nguồn Mở
cho các Tác nhân Ngôn ngữ Tự động
Wangchunshu Zhou1∗Yuchen Eleanor Jiang1*Long Li1*Jialong Wu1*
Tiannan Wang1Shi Qiu1Jintian Zhang1Jing Chen1Ruipu Wu1Shuai Wang1
Shiding Zhu1Jiyu Chen1Wentao Zhang1Xiangru Tang Ningyu Zhang2Huajun Chen2
Peng Cui3Mrinmaya Sachan3
1AIWaves Inc.2Đại học Triết Giang3ETH Zürich
Tóm tắt
Những tiến bộ gần đây trong các mô hình ngôn ngữ lớn (LLM) cho phép các nhà nghiên cứu và
nhà phát triển xây dựng các tác nhân ngôn ngữ tự động có thể tự động giải quyết các
nhiệm vụ khác nhau và tương tác với môi trường, con người và các tác nhân khác bằng
giao diện ngôn ngữ tự nhiên. Chúng tôi coi các tác nhân ngôn ngữ là một hướng đầy hứa hẹn
hướng tới trí tuệ nhân tạo tổng quát và phát hành AGENTS, một thư viện mã nguồn mở
với mục tiêu mở ra những tiến bộ này cho đối tượng rộng hơn không phải chuyên gia. AGENTS được thiết kế cẩn thận để hỗ trợ các tính năng quan trọng bao
gồm lập kế hoạch, bộ nhớ, sử dụng công cụ, giao tiếp đa tác nhân, và điều khiển
ký hiệu tinh vi. AGENTS thân thiện với người dùng vì nó cho phép những người không chuyên
xây dựng, tùy chỉnh, kiểm tra, điều chỉnh và triển khai các tác nhân ngôn ngữ tự động tiên tiến
mà không cần nhiều mã hóa. Thư viện cũng thân thiện với nghiên cứu vì thiết kế mô-đun hóa của nó làm cho nó dễ dàng mở rộng cho các nhà nghiên cứu. AGENTS có sẵn tại
https://github.com/aiwaves-cn/agents.

1 Giới thiệu
"Một tác nhân tự động là một hệ thống nằm trong và là một phần của môi trường mà cảm nhận môi trường
và hành động trên nó, theo thời gian, để theo đuổi chương trình nghị sự của riêng mình và do đó để tác động lên những gì nó cảm nhận trong tương lai."
Đó có phải là một Tác nhân, hay chỉ là một Chương trình?: Một Phân loại cho các Tác nhân Tự động [Franklin và Graesser, 1996]

Các Mô hình Ngôn ngữ Lớn (LLM) [Brown et al., 2020, Ouyang et al., 2022, OpenAI, 2023] như
ChatGPT làm cho việc xây dựng các tác nhân tự động có thể tự động giải quyết các nhiệm vụ phức tạp
và tương tác với môi trường, con người, hoặc các tác nhân khác bằng cách nhận thức, lý luận, lập kế hoạch,
và hành động trong thế giới [Weng, 2023]. Các tác nhân ngôn ngữ là một bước đầy hứa hẹn hướng tới trí tuệ
nhân tạo tổng quát (AGI) và có thể giúp giảm nỗ lực của con người trong một số vai trò như dịch vụ khách hàng,
tư vấn, lập trình, viết, giảng dạy, v.v. Một số demo gần đây như AutoGPT [Richards và
et al., 2023] và BabyAGI [Nakajima, 2023] đã chứng minh tiềm năng của các tác nhân ngôn ngữ và
đã thu hút sự quan tâm lớn từ các nhà phát triển, nhà nghiên cứu, cũng như đối tượng ít kỹ thuật hơn.

Mặc dù thú vị, hầu hết các demo hoặc kho lưu trữ này không thân thiện cho việc tùy chỉnh, điều chỉnh, và
triển khai các tác nhân mới ngay cả đối với các nhà phát triển hoặc nhà nghiên cứu có kinh nghiệm. Hạn chế này xuất phát từ
thực tế là các demo này thường là bằng chứng về khái niệm thể hiện khả năng của các tác nhân ngôn ngữ,
thay vì là các framework lớn hơn có thể được sử dụng để xây dựng và tùy chỉnh các tác nhân ngôn ngữ theo thời gian.
Hơn nữa, hầu hết các kho lưu trữ mã nguồn mở này chỉ bao gồm một phần nhỏ của các khả năng cốt lõi của
các tác nhân ngôn ngữ bao gồm phân rã nhiệm vụ [Nye et al., 2022], bộ nhớ dài-ngắn hạn [Zhou

∗Đóng góp ngang nhau. Liên hệ: chunshu@aiwaves.cn
Bản thảo. Công việc đang tiến hành.arXiv:2309.07870v3 [cs.CL] 12 Dec 2023

--- TRANG 2 ---
SOP
Lập kế hoạchLập kế hoạchĐiều hướng WebĐiều hướng WebSử dụng Công cụ
Tương tác Người-Tác nhânSử dụng Công cụĐa-tác nhânTác nhân 1Tác nhân 2（ví dụ Editor）（ví dụ Writer）Giao tiếpHình 1: Minh họa framework AGENTS.

et al., 2023a], điều hướng web [Nakano et al., 2021], sử dụng công cụ [Schick et al., 2023], và giao tiếp
đa tác nhân [Foerster et al., 2016]. Ngoài ra, hầu hết (nếu không phải tất cả) các framework tác nhân ngôn ngữ hiện tại
chỉ phụ thuộc vào một mô tả nhiệm vụ ngắn và dựa hoàn toàn vào khả năng của LLM để
lập kế hoạch và hành động. Điều này dẫn đến sự ngẫu nhiên và không nhất quán đáng kể qua các lần chạy khác nhau, mang lại
trải nghiệm người dùng không thỏa mãn và làm cho việc tùy chỉnh và điều chỉnh các tác nhân ngôn ngữ trở nên khó khăn.

Chúng tôi tin rằng các hạn chế nói trên là những rào cản quan trọng để những tiến bộ gần đây trong các tác nhân ngôn ngữ
tiếp cận đối tượng không chuyên rộng hơn và tác động tích cực đến xã hội của chúng ta. Để giải quyết vấn đề này,
chúng tôi phát hành AGENTS, một thư viện và framework mã nguồn mở cho các tác nhân ngôn ngữ được
thiết kế để hỗ trợ các tác nhân ngôn ngữ được hỗ trợ bởi LLM. Triết lý của AGENTS là làm cho việc tùy chỉnh, điều chỉnh,
và triển khai các tác nhân ngôn ngữ trở nên đơn giản nhất có thể ngay cả đối với những người không chuyên trong khi vẫn duy trì
khả năng mở rộng dễ dàng cho các nhà phát triển và nhà nghiên cứu. Ngoài ra, thư viện cũng cung cấp các
tính năng chính sau đây làm cho nó trở thành một framework đa năng cho các tác nhân ngôn ngữ:

Bộ nhớ dài-ngắn hạn Theo Franklin và Graesser [1996], một điểm khác biệt chính giữa
các tác nhân tự động và các chương trình máy tính (hoặc các mô hình học máy) là các mô hình học máy
chỉ cần phản hồi với một đầu vào/truy vấn duy nhất, trong khi các tác nhân tự động cần tương tác với
môi trường hoặc các tác nhân khác theo thời gian. Do đó, khả năng duy trì bộ nhớ dài-ngắn hạn là
rất quan trọng đối với các tác nhân tự động. AGENTS tích hợp các thành phần bộ nhớ trong [Zhou et al.,
2023a] và cho phép các tác nhân ngôn ngữ lưu trữ và truy xuất bộ nhớ dài hạn với VectorDB và
tìm kiếm ngữ nghĩa, và thường xuyên cập nhật bộ nhớ làm việc ngắn hạn với một scratchpad. Người dùng có thể
chọn trang bị một tác nhân với bộ nhớ dài hạn, bộ nhớ ngắn hạn, hoặc cả hai bằng cách đơn giản
điền vào một trường trong tệp cấu hình.

Sử dụng công cụ & Điều hướng Web Một tính năng quan trọng khác cho các tác nhân tự động là khả năng
sử dụng các công cụ bên ngoài và lướt internet. Điều này đặc biệt quan trọng đối với các tác nhân ngôn ngữ vì
chúng dựa vào giao diện ngôn ngữ và do đó cần sử dụng các công cụ bên ngoài để tương tác với môi trường
ngoài giao tiếp ngôn ngữ và điều hướng web để thu thập thông tin hữu ích. Theo [Patil
et al., 2023], AGENTS hỗ trợ một số API bên ngoài thường được sử dụng và cung cấp một lớp trừu tượng
cho phép các nhà phát triển tích hợp các công cụ khác một cách dễ dàng. Chúng tôi cũng cho phép các tác nhân điều hướng
internet và thu thập thông tin bằng cách định nghĩa tìm kiếm web và điều hướng web như các API chuyên biệt.

Giao tiếp đa tác nhân Ngoài các khả năng tác nhân đơn, AGENTS cũng hỗ trợ tùy chỉnh
các hệ thống đa tác nhân, có thể hữu ích cho một số ứng dụng như trò chơi [Park et al.,
2023], thí nghiệm xã hội [Li et al., 2023], phát triển phần mềm [Qian et al., 2023], v.v. Một tính năng mới
cho giao tiếp đa tác nhân trong AGENTS là tính năng "lập lịch động". Thay vì
lập lịch thứ tự cho các tác nhân hành động với các quy tắc được mã hóa cứng, lập lịch động cung cấp một
tùy chọn để định nghĩa một tác nhân điều khiển hoạt động như một "người điều phối" và quyết định tác nhân nào thực hiện
hành động tiếp theo xem xét vai trò của chúng và lịch sử hiện tại. Lập lịch động có tiềm năng
làm cho giao tiếp giữa nhiều tác nhân trở nên tự nhiên và linh hoạt hơn. Các nhà phát triển có thể dễ dàng
tùy chỉnh bộ điều khiển bằng cách chỉ định quy tắc của nó trong tệp cấu hình bằng ngôn ngữ tự nhiên.

Tương tác người-tác nhân Một hạn chế trong các framework tác nhân hiện tại là trong khi chúng cho phép
các tác nhân, hoặc đa tác nhân, tự động giải quyết các nhiệm vụ, việc người dùng tương tác với các tác nhân không dễ dàng
hoặc thậm chí không thể, đặc biệt trong kịch bản đa tác nhân. AGENTS hỗ trợ liền mạch
tương tác người-tác nhân trong cả kịch bản tác nhân đơn và đa tác nhân, làm cho một hoặc
nhiều người có thể giao tiếp và tương tác với các tác nhân ngôn ngữ.

Khả năng điều khiển Các framework tác nhân hiện tại thường chỉ định nghĩa và kiểm soát hành vi của tác nhân
chỉ bằng một lời nhắc hệ thống và sau đó để tác nhân lập kế hoạch và hành động tự do. Ngược lại, AGENTS cung cấp một
mô hình mới để xây dựng các tác nhân có thể điều khiển thông qua một kế hoạch ký hiệu, còn được gọi là các
quy trình vận hành tiêu chuẩn (SOP). Một SOP là một đồ thị của nhiều trạng thái định nghĩa các tình huống khác nhau mà một tác nhân có thể
gặp phải khi hoàn thành một nhiệm vụ, và các quy tắc chuyển đổi giữa các trạng thái. Tương tự như SOP
trong thế giới thực, một SOP trong AGENTS là một tập hợp các hướng dẫn từng bước được ghi chép tỉ mỉ
phác thảo cách một nhiệm vụ hoặc quy trình cụ thể nên được thực hiện bởi một tác nhân hoặc một nhóm tác nhân.
SOP có thể được tạo ra bởi một LLM và được chỉnh sửa bởi người dùng khi tùy chỉnh và điều chỉnh tác nhân.
Sau khi triển khai, một tác nhân sẽ hành xử theo các hướng dẫn và nguyên tắc cụ thể cho mỗi trạng thái
và tự động điều chỉnh trạng thái hiện tại của nó theo tương tác với môi trường, con người, hoặc
các tác nhân khác. Việc giới thiệu kế hoạch ký hiệu mang lại cơ hội để cung cấp điều khiển
tinh vi hành vi của tác nhân, làm cho hành vi của tác nhân ổn định/dự đoán được hơn và tạo điều kiện
điều chỉnh/tối ưu hóa tác nhân cùng lúc.

Ngoài ra, chúng tôi đề xuất một pipeline tạo SOP tự động để giảm lao động con người trong việc viết
SOP chi tiết và các tệp cấu hình khi tùy chỉnh các hệ thống tác nhân (đa). Pipeline tạo SOP tự động
là một "meta tác nhân" có thể tạo ra các tệp cấu hình cho các tác nhân ngôn ngữ với tạo tăng cường truy xuất
dựa trên một mô tả ngắn về nhiệm vụ.

AGENTS là một nỗ lực liên tục được duy trì bởi các nhà nghiên cứu và kỹ sư từ AIWaves2. Chúng tôi mong muốn
sự hỗ trợ từ những người đóng góp cộng đồng cho dự án. Thư viện và tài liệu chi tiết
và hướng dẫn có sẵn trên GitHub3.

2 Công trình Liên quan
2.1 Các Tác nhân Ngôn ngữ Tự động

Khái niệm tác nhân ngôn ngữ đã trở nên rất phổ biến gần đây và nhiều tác nhân ngôn ngữ khác nhau
nhắm vào các nhiệm vụ khác nhau đã được đề xuất. Ví dụ, Generative Agents [Park et al., 2023]
phát triển các tác nhân ngôn ngữ để mô phỏng hành vi xã hội của con người, WebAgent [Gur et al., 2023] chứng minh
khả năng xây dựng các tác nhân ngôn ngữ có thể hoàn thành các nhiệm vụ trên các trang web thực theo
hướng dẫn bằng ngôn ngữ tự nhiên, Qian et al. [2023] và MetaGPT [Hong et al., 2023] thí nghiệm với
phát triển phần mềm trong các thiết lập giao tiếp đa tác nhân, và Zhou et al. [2023a] xây dựng các tác nhân ngôn ngữ
hoạt động như trợ lý viết tương tác.

Ngoài các tác nhân ngôn ngữ nhắm vào các nhiệm vụ cụ thể, các dự án mã nguồn mở gần đây như Auto-
GPT [Richards và et al., 2023], BabyAGI [Nakajima, 2023], và SuperAGI [SuperAGI, 2023] được
nhắm vào mục tiêu xây dựng các tác nhân tự động làm bất cứ điều gì người dùng muốn và thu hút sự quan tâm lớn
từ cả nhà phát triển và đối tượng không chuyên.

2.2 Các Framework Tác nhân Ngôn ngữ

Gần đây hơn, một số framework mã nguồn mở cho các tác nhân ngôn ngữ đã được đề xuất. Ví dụ,
Transformers Agents [Wolf et al., 2020] xây dựng các tác nhân ngôn ngữ có thể tự động sử dụng công cụ
để giải quyết các nhiệm vụ được mô tả bằng ngôn ngữ tự nhiên; LangChain [LangChain, 2022] hỗ trợ end-to-end

2https://www.aiwaves.org/
3https://github.com/aiwaves-cn/agents

--- TRANG 3 ---

Bảng 1: So sánh các Framework Tác nhân Ngôn ngữ

Framework Sử dụng Công cụ Bộ nhớ Dài-ngắn hạn Đa-tác nhân Tương tác Người-Tác nhân Điều khiển Ký hiệu
Transformers Agents ✓ ✗ ✗ ✗ ✗
LangChain ✓ ✓ ✗ ✗ ✗
Auto-GPT ✓ ✗ ✗ ✗ ✗
Gentopia ✓ ✗ ✗ ✗ ✗
XLang ✓ ✗ ✗ ✗ ✗
Meta-GPT ✓ ✗ ✓ ✗ ✗
Camel ✓ ✗ ✓ ✗ ✗
AgentVerse ✓ ✓ ✓ ✓ ✗
AGENTS ✓ ✓ ✓ ✓ ✓

các tác nhân ngôn ngữ có thể tự động giải quyết các nhiệm vụ được chỉ định bằng ngôn ngữ tự nhiên; Camel [Li et al.,
2023] và AgentVerse [Chen et al., 2023] là các nền tảng được thiết kế riêng để xây dựng các hệ thống đa tác nhân;
Gentopia [Xu et al., 2023] và XLang4 là các thư viện để xây dựng các tác nhân tăng cường công cụ. Chúng tôi minh họa
các tính năng chính được hỗ trợ bởi các nền tảng này và AGENTS trong Bảng 1. Chúng ta có thể thấy rằng AGENTS là
framework duy nhất hỗ trợ sử dụng công cụ, bộ nhớ dài-ngắn hạn, và giao tiếp đa tác nhân cùng
một lúc. AGENTS cũng cung cấp tương tác người-tác nhân và khả năng điều khiển thông qua các
kế hoạch ký hiệu (SOP) lần đầu tiên.

3 Thiết kế Thư viện

Code 1: Mã ví dụ để khởi tạo và chạy hệ thống tác nhân (đa) với AGENTS
1def main ()
2 # agents là một dict của một hoặc nhiều tác nhân .
3 agents = Agent . from_config ("./ config . json ")
4 sop = SOP. from_config ("./ config . json ")
5 environment = Environment . from_config ("./ config . json ")
6 run (agents ,sop , environment )

AGENTS được thiết kế theo triết lý trong Franklin và Graesser [1996]: "một tác nhân tự động được
đặt trong một môi trường". Do đó, agent và environment là hai lớp chính trong
framework AGENTS. Ngoài hai lớp này, chúng tôi cũng bao gồm một lớp cho các kế hoạch ký hiệu,
được đặt tên là SOP (viết tắt của Standard Operating Procedure), để làm cho các tác nhân ngôn ngữ có thể điều khiển được hơn.
Các lớp chính này đều được khởi tạo từ một tệp cấu hình có thể được điền bằng văn bản thuần túy. Tóm lại, một
tập lệnh điển hình để khởi tạo và chạy hệ thống tác nhân (đa) với AGENTS được minh họa trong Code
1. Tệp cấu hình không chỉ định nghĩa các đối tượng cốt lõi này mà còn phân tách các lời nhắc phức tạp thành
các thành phần lời nhắc mô-đun hóa. Việc phân tách lời nhắc giảm đáng kể các yêu cầu chuyên môn
và nỗ lực để người dùng xây dựng các hệ thống tác nhân (đa). Sử dụng một tệp cấu hình duy nhất để định nghĩa
các tác nhân, kế hoạch, và môi trường cơ bản cũng tạo điều kiện cho việc chia sẻ các tác nhân ngôn ngữ (sẽ được
thảo luận trong phần Agent Hub). Mỗi trong ba lớp cốt lõi này bao gồm các API tiêu chuẩn hóa
có thể được ghi đè bởi các nhà phát triển và nhà nghiên cứu có kinh nghiệm. Chúng tôi mô tả các lớp này một cách
chi tiết:

Code 2: Mã ví dụ cho vòng lặp chạy của hệ thống tác nhân (đa) trong AGENTS
1def run( agents ,sop , environment ):
2 while not sop. finished :
3 agent , state =sop. step (agents , environment )
4 action = agent . step (state , environment )
5 environment . update (agent , action )
6 # tùy chọn , trong trường hợp lập kế hoạch động
7 # new_states = get_new_states ( action )
8 # sop . add_states ( new_states )

4https://github.com/xlang-ai/xlang

--- TRANG 4 ---

3.1 Agent

Lớp Agent trừu tượng hóa một tác nhân ngôn ngữ. UML của nó được minh họa trong Hình 1. Chúng ta có thể thấy
rằng một tác nhân duy trì bộ nhớ dài-ngắn hạn của nó và có các phương thức để quan sát môi trường
(agent._observe(environment)), hành động theo trạng thái hiện tại của nó (agent._act()) và cập nhật
bộ nhớ của nó (agent._update_memory()). Tất cả các phương thức này được bao bọc trong phương thức agent.step().
Việc phân tách này cho phép các nhà phát triển tùy chỉnh các tác nhân với các chức năng mới một cách dễ dàng.
Không giống như các framework tác nhân ngôn ngữ hiện tại giả định một tác nhân phải dựa trên LLM, chúng tôi
bao gồm một thuộc tính "_is_human" cho một tác nhân. Nếu nó được đặt thành "True", (agent._act()) sẽ chọn cung cấp
quan sát và thông tin bộ nhớ cho người dùng và chờ người dùng nhập
hành động. Thiết kế này cho phép tương tác người-tác nhân linh hoạt trong cả hệ thống tác nhân đơn và đa tác nhân
bằng cách cho phép người dùng đảm nhận vai trò của một hoặc nhiều tác nhân ngôn ngữ. Nó tạo điều kiện
cho các nhà phát triển xây dựng nhiều ứng dụng thú vị khác nhau như cho phép người dùng hành động như thành viên
của một đội trong cuộc tranh luận và hợp tác với đồng đội (dựa trên tác nhân hoặc con người) để đánh bại đội khác, hoặc
hành động như CTO/kỹ sư trong một công ty phần mềm và hợp tác với những người khác để phát triển phần mềm.

3.2 SOP

Lớp SOP chứa một đồ thị các trạng thái của các tác nhân. Mỗi trạng thái chỉ định một nhiệm vụ phụ hoặc
mục tiêu phụ cụ thể của tất cả các tác nhân khi hoàn thành nhiệm vụ được mô tả bởi SOP. Các trạng thái được trừu tượng hóa thành
một lớp State. Một đối tượng State chứa các lời nhắc mô-đun hóa cho tác nhân để tận dụng LLM
và các công cụ hoặc API khác nhau mà một tác nhân có thể sử dụng trong trạng thái. Chúng tôi trừu tượng hóa mọi thứ mà một tác nhân có thể
sử dụng cho hành động trong một trạng thái thành một lớp "Component". Lớp Component bao gồm hai lớp con
tương ứng với các phần khác nhau của lời nhắc và công cụ hoặc API bên ngoài, được đặt tên là "PromptComponent"
và "ToolComponent", tương ứng. PromptComponent bao gồm các lời nhắc mô-đun hóa chỉ định
nhiệm vụ/mục tiêu, quy tắc/ràng buộc, các minh họa (từng bước) cho việc học trong ngữ cảnh, và định dạng
đầu ra. ToolComponent hỗ trợ việc sử dụng phức tạp hơn ngoài các lời nhắc mô-đun hóa, bao gồm
các công cụ và API bên ngoài như tìm kiếm web, cơ sở kiến thức, v.v. Kết quả của các công cụ được
bao gồm trong lời nhắc hoặc được trả về trực tiếp và xử lý sau đó, theo tệp cấu hình.

Một đối tượng SOP cũng bao gồm một hàm điều khiển dựa trên LLM quyết định việc chuyển đổi giữa
các trạng thái khác nhau và tác nhân tiếp theo để hành động. Hàm chuyển đổi trạng thái được đặt tên là sop._transit()
và hàm định tuyến tác nhân được đặt tên là sop._route(). Cả hai hàm đều được bao bọc trong một
hàm sop.next() được sử dụng trong vòng lặp chính.

Hình 2: (a) Tác nhân dịch vụ khách hàng
Hình 3: (b) Tác nhân bán hàng

3.3 Environment

Lớp Environment trừu tượng hóa môi trường mà các tác nhân được đặt trong đó. Một môi trường
bao gồm hai hàm chính: environment._observed() và environment.update().
environment._observed() định nghĩa cách môi trường ảnh hưởng đến hành động của tác nhân (tức là, thông tin nào
nên được chuyển giao cho tác nhân khi quan sát, và environment.update()
định nghĩa cách hành động của tác nhân tác động đến môi trường.

--- TRANG 5 ---

Hình 4: Hệ thống Đa-Tác nhân: Fiction Studio.

Logic thực thi của hệ thống tác nhân (đa) dựa trên AGENTS rất trực quan. Như được minh họa trong
Code 2, trong mỗi lần lặp, SOP đầu tiên quyết định việc chuyển đổi trạng thái và chọn tác nhân tiếp theo để hành động
dựa trên các tác nhân và môi trường. Tác nhân sau đó thực hiện một hành động dựa trên trạng thái và môi trường của nó.
Sau đó môi trường cập nhật chính nó dựa trên hành động mới. Cuối cùng, nếu một quy trình làm việc
yêu cầu điều chỉnh kế hoạch một cách động dựa trên kết quả thực thi trung gian, người ta có thể phân tích
đầu ra từ một hành động, định nghĩa một trạng thái mới và thêm nó vào SOP hiện tại.

3.4 Chi tiết Triển khai của các Tính năng Cốt lõi

Bộ nhớ Dài-ngắn hạn: AGENTS triển khai bộ nhớ dài-ngắn hạn cho các tác nhân ngôn ngữ
theo Zhou et al. [2023a]. Cụ thể, bộ nhớ dài hạn là lịch sử hành động và được nhúng
bởi sentence-transformers [Reimers và Gurevych, 2019], lưu trữ trong VectorDB, và truy vấn thông qua
tìm kiếm ngữ nghĩa. Bộ nhớ ngắn hạn, hoặc bộ nhớ làm việc, ở dạng ngôn ngữ tự nhiên và
được cập nhật bởi LLM thông qua một lời nhắc được điều chỉnh cẩn thận.

Sử dụng Công cụ & Điều hướng Web: AGENTS hỗ trợ sử dụng công cụ và điều hướng web thông qua
ToolComponents. Đối với mỗi công cụ hoặc API bên ngoài, nhà phát triển có thể bao bọc cuộc gọi API trong
phương thức ToolComponent.func(). Đối với các công cụ phức tạp mà cuộc gọi API phụ thuộc vào ngữ cảnh,
AGENTS tích hợp tính năng "Function-calling" của OpenAI's GPT APIs để cho phép
LLM quyết định cách sử dụng các công cụ. Điều hướng web được thực hiện bằng cách triển khai tìm kiếm web như một
công cụ chuyên biệt.

Giao tiếp Đa-Tác nhân: Khác với hầu hết các framework hiện tại cho các hệ thống đa tác nhân
sử dụng các quy tắc được định nghĩa trước (ví dụ, để mỗi tác nhân hành động theo thứ tự tuần tự) để kiểm soát thứ tự cho
hành động của tác nhân, AGENTS bao gồm một hàm điều khiển quyết định một cách động tác nhân nào sẽ thực hiện
hành động tiếp theo bằng LLM bằng cách xem xét các hành động trước đó, môi trường, và mục tiêu của
các trạng thái hiện tại. Điều này làm cho giao tiếp đa tác nhân linh hoạt hơn.

Tương tác Người-Tác nhân: AGENTS hỗ trợ tương tác người-tác nhân trong các hệ thống đa tác nhân bằng
cách cho phép người dùng thay đổi trường "is_human" cho một tác nhân cụ thể trong tệp cấu hình thành "True".
Trong trường hợp này, người dùng có thể đóng vai trò của tác nhân bằng chính mình và nhập các hành động của mình
và tương tác với các tác nhân ngôn ngữ khác trong môi trường.

--- TRANG 6 ---

Hình 5: Tương tác Người-Tác nhân trong một cuộc tranh luận.

3.5 Triển khai

Các framework mã nguồn mở hiện tại cho các tác nhân ngôn ngữ tập trung vào việc xây dựng các tác nhân ngôn ngữ
proof-of-concept chạy trong terminal hoặc trên Gradio [Abid et al., 2019]. Ngược lại, AGENTS hỗ trợ
triển khai các tác nhân ngôn ngữ như API với FastAPI5. Điều này tạo điều kiện lớn cho các nhà phát triển
tích hợp các tác nhân ngôn ngữ trong các ứng dụng thế giới thực.

3.6 Agent Hub

AGENTS không chỉ nhằm tạo điều kiện cho việc phát triển, kiểm tra, và điều chỉnh hệ thống tác nhân ngôn ngữ
mà còn làm cho việc phân phối và chia sẻ các tác nhân ngôn ngữ dễ dàng hơn. Để đạt mục tiêu này, chúng tôi giới thiệu
AGENT HUB, một nền tảng cho phép người dùng chia sẻ các tác nhân ngôn ngữ được điều chỉnh tinh của họ cũng như
tìm kiếm/tải xuống các tác nhân ngôn ngữ hữu ích mà những người khác chia sẻ trên nền tảng. Bằng cách này, người ta có thể dễ dàng
tùy chỉnh các tác nhân ngôn ngữ bằng cách bắt đầu từ các tác nhân cộng đồng và sửa đổi chúng một chút. Điều này
giảm đáng kể nỗ lực thiết kế, kiểm tra, và điều chỉnh các tác nhân ngôn ngữ từ đầu.

3.7 Tạo Tự động các Hệ thống Tác nhân

Trong khi sử dụng SOP để cung cấp điều khiển tinh vi cho các tác nhân ngôn ngữ, đôi khi nó có thể tốn công
cho người dùng chỉ định SOP từ đầu một cách thủ công vì nó yêu cầu đặt các trạng thái khác nhau, kết nối của chúng,
và các lời nhắc và công cụ cho mỗi Component cho tất cả các trạng thái. Do đó, chúng tôi cẩn thận
triển khai một pipeline để tạo SOP tự động. Framework tạo SOP của chúng tôi dựa trên
retrieval-augmented generation (RAG) [Lewis et al., 2020]. Pipeline tạo SOP cũng
dựa trên framework AGENTS và có SOP đầu tiên chỉ định các tác nhân cần thiết, sau đó
lập kế hoạch các trạng thái và kết nối của chúng, và cuối cùng tạo ra các Components. Do đó, pipeline này
có thể được coi là một "meta tác nhân" có thể tạo ra các tác nhân và hệ thống đa tác nhân khác.
Mô tả chi tiết về framework tạo tác nhân tự động được mô tả trong [Zhou et al., 2023b].

5https://fastapi.tiangolo.com/

--- TRANG 7 ---

4 Nghiên cứu Tình huống

Sau đó chúng tôi trình bày một số nghiên cứu tình huống về các tác nhân ngôn ngữ khác nhau được xây dựng với thư viện,
bao gồm các hệ thống tác nhân đơn, hệ thống đa tác nhân, và các hệ thống yêu cầu tương tác người-tác nhân. Tất cả
các demo đều có sẵn tại http://www.aiwaves-agents.com/.

4.1 Hệ thống tác nhân đơn

Chúng tôi triển khai một số hệ thống tác nhân đơn với AGENTS bao gồm một bot trò chuyện, hai tác nhân
dịch vụ khách hàng dựa trên cơ sở kiến thức và công cụ tìm kiếm web, một tác nhân trợ lý mua sắm, và một
tác nhân bán hàng. Các tác nhân chứng minh các tính năng khác nhau của thư viện và khả năng xây dựng
các tác nhân ngôn ngữ của các trường hợp sử dụng khác nhau bằng AGENTS. Chúng tôi trình bày ảnh chụp màn hình của
tác nhân dịch vụ khách hàng và tác nhân bán hàng trong Hình 2 và 3, tương ứng.

4.2 Hệ thống đa tác nhân

Chúng tôi cũng chứng minh cách người ta có thể xây dựng một hệ thống đa tác nhân bao gồm nhiều tác nhân tương tác
với nhau trong một môi trường. Chúng tôi chọn ba kịch bản bao gồm một studio tiểu thuyết, một cuộc tranh luận, và
một công ty phần mềm. Các kịch bản này bao gồm cả các kịch bản hợp tác và cạnh tranh, là
hai loại chính của các hệ thống đa tác nhân. Tất cả các kịch bản đều bao gồm nhiều nhiệm vụ phụ được
kiểm soát thông qua các kế hoạch ký hiệu, tức là SOP. Người ta có thể dễ dàng quan sát hành vi của các tác nhân ngôn ngữ
trong mỗi nhiệm vụ phụ và thiết kế các lời nhắc tương ứng để tùy chỉnh và cải thiện hệ thống.
Chúng tôi trình bày ảnh chụp màn hình hệ thống của hệ thống studio tiểu thuyết trong Hình 4. Chúng tôi cũng trình bày
tính năng tương tác người-tác nhân của framework trong một nghiên cứu tình huống mà một người dùng tham gia
vào một cuộc tranh luận với các tác nhân ngôn ngữ trong Hình 5.

5 Kết luận

LLM và các tác nhân ngôn ngữ được hỗ trợ bởi chúng đang đóng vai trò ngày càng quan trọng trong cả
cộng đồng NLP/AI và xã hội nói chung. AGENTS, là một framework thống nhất và thư viện mã nguồn mở
cho các tác nhân ngôn ngữ. AGENTS nhằm tạo điều kiện cho các nhà phát triển xây dựng ứng dụng với các tác nhân ngôn ngữ,
các nhà nghiên cứu tiến hành nghiên cứu tác nhân ngôn ngữ, và đối tượng không kỹ thuật nói chung xây dựng
và tùy chỉnh các tác nhân ngôn ngữ cá nhân hóa.

Tài liệu Tham khảo

Stan Franklin và Art Graesser. Đó có phải là một tác nhân, hay chỉ là một chương trình?: Một phân loại cho các tác nhân tự động
. Trong International workshop on agent theories, architectures, and languages, trang 21–35.
Springer, 1996.

Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal,
Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel
Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel Ziegler,
Jeffrey Wu, Clemens Winter, Chris Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray,
Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever,
và Dario Amodei. Các mô hình ngôn ngữ là những người học few-shot. Trong H. Larochelle, M. Ranzato,
R. Hadsell, M.F. Balcan, và H. Lin, biên tập viên, Advances in Neural Information Processing Systems,
tập 33, trang 1877–1901. Curran Associates, Inc., 2020. URL https://proceedings.
neurips.cc/paper/2020/file/1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf.

Long Ouyang, Jeffrey Wu, Xu Jiang, Diogo Almeida, Carroll Wainwright, Pamela Mishkin, Chong
Zhang, Sandhini Agarwal, Katarina Slama, Alex Gray, John Schulman, Jacob Hilton, Fraser Kelton,
Luke Miller, Maddie Simens, Amanda Askell, Peter Welinder, Paul Christiano, Jan Leike, và
Ryan Lowe. Huấn luyện các mô hình ngôn ngữ để tuân theo hướng dẫn với phản hồi của con người. Trong Alice H. Oh,
Alekh Agarwal, Danielle Belgrave, và Kyunghyun Cho, biên tập viên, Advances in Neural Information
Processing Systems, 2022. URL https://openreview.net/forum?id=TG8KACxEON.

OpenAI. Báo cáo kỹ thuật GPT-4, 2023.

--- TRANG 8 ---

Lilian Weng. Các tác nhân tự động được hỗ trợ bởi llm. lilianweng.github.io, Jun 2023. URL https:
//lilianweng.github.io/posts/2023-06-23-agent/.

Toran Bruce Richards và et al. Auto-gpt: Một thí nghiệm gpt-4 tự động, 2023. URL https:
//github.com/Significant-Gravitas/Auto-GPT. [Phần mềm].

Yohei Nakajima. Babyagi, 2023. URL https://github.com/yoheinakajima/babyagi. [Phần
mềm].

Maxwell Nye, Anders Johan Andreassen, Guy Gur-Ari, Henryk Michalewski, Jacob Austin, David
Bieber, David Dohan, Aitor Lewkowycz, Maarten Bosma, David Luan, Charles Sutton, và
Augustus Odena. Hiển thị công việc của bạn: Scratchpad cho tính toán trung gian với các mô hình ngôn ngữ
, 2022. URL https://openreview.net/forum?id=iedYJm92o0a.

Wangchunshu Zhou, Yuchen Eleanor Jiang, Peng Cui, Tiannan Wang, Zhenxin Xiao, Yifan Hou,
Ryan Cotterell, và Mrinmaya Sachan. Recurrentgpt: Tạo tương tác của văn bản dài (tùy ý)
, 2023a.

Reiichiro Nakano, Jacob Hilton, Suchir Balaji, Jeff Wu, Long Ouyang, Christina Kim, Christopher
Hesse, Shantanu Jain, Vineet Kosaraju, William Saunders, Xu Jiang, Karl Cobbe, Tyna Eloundou,
Gretchen Krueger, Kevin Button, Matthew Knight, Benjamin Chess, và John Schulman. Webgpt:
Trả lời câu hỏi được hỗ trợ bởi trình duyệt với phản hồi của con người. CoRR, abs/2112.09332, 2021.

Timo Schick, Jane Dwivedi-Yu, Roberto Dessì, Roberta Raileanu, Maria Lomeli, Luke Zettlemoyer,
Nicola Cancedda, và Thomas Scialom. Toolformer: Các mô hình ngôn ngữ có thể tự dạy mình
sử dụng công cụ. CoRR, abs/2302.04761, 2023.

Jakob N. Foerster, Yannis M. Assael, Nando de Freitas, và Shimon Whiteson. Học giao tiếp
với học tăng cường đa tác nhân sâu. Trong NIPS, trang 2137–2145, 2016.

Shishir G. Patil, Tianjun Zhang, Xin Wang, và Joseph E. Gonzalez. Gorilla: Mô hình ngôn ngữ lớn
được kết nối với nhiều api khổng lồ. arXiv preprint arXiv:2305.15334, 2023.

Joon Sung Park, Joseph C. O'Brien, Carrie J. Cai, Meredith Ringel Morris, Percy Liang, và
Michael S. Bernstein. Các tác nhân tạo sinh: Mô phỏng tương tác của hành vi con người, 2023.

Guohao Li, Hasan Abed Al Kader Hammoud, Hani Itani, Dmitrii Khizbullin, và Bernard Ghanem.
Camel: Các tác nhân giao tiếp để khám phá "tâm trí" của xã hội mô hình ngôn ngữ quy mô lớn, 2023.

Chen Qian, Xin Cong, Cheng Yang, Weize Chen, Yusheng Su, Juyuan Xu, Zhiyuan Liu, và Maosong
Sun. Các tác nhân giao tiếp cho phát triển phần mềm, 2023.

Izzeddin Gur, Hiroki Furuta, Austin Huang, Mustafa Safdari, Yutaka Matsuo, Douglas Eck, và
Aleksandra Faust. Một webagent thế giới thực với lập kế hoạch, hiểu ngữ cảnh dài, và tổng hợp chương trình
, 2023.

Sirui Hong, Xiawu Zheng, Jonathan Chen, Yuheng Cheng, Jinlin Wang, Ceyao Zhang, Zili Wang,
Steven Ka Shing Yau, Zijuan Lin, Liyang Zhou, Chenyu Ran, Lingfeng Xiao, và Chenglin Wu.
Metagpt: Meta programming cho framework hợp tác đa tác nhân, 2023.

SuperAGI. Superagi, 2023. URL https://github.com/TransformerOptimus/SuperAGI. [Phần
mềm].

Thomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony
Moi, Pierric Cistac, Tim Rault, Remi Louf, Morgan Funtowicz, Joe Davison, Sam Shleifer,
Patrick von Platen, Clara Ma, Yacine Jernite, Julien Plu, Canwen Xu, Teven Le Scao, Sylvain
Gugger, Mariama Drame, Quentin Lhoest, và Alexander Rush. Transformers: Xử lý ngôn ngữ tự nhiên
tiên tiến. Trong Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing: System Demonstrations, trang 38–45, Online, October
2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.emnlp-demos.6. URL
https://aclanthology.org/2020.emnlp-demos.6.

LangChain. Kho lưu trữ langchain. https://github.com/langchain-ai/langchain, 2022.

--- TRANG 9 ---

Weize Chen, Yusheng Su, Jingwei Zuo, Cheng Yang, Chenfei Yuan, Chen Qian, Chi-Min Chan, Yujia
Qin, Yaxi Lu, Ruobing Xie, Zhiyuan Liu, Maosong Sun, và Jie Zhou. Agentverse: Tạo điều kiện
hợp tác đa tác nhân và khám phá các hành vi nổi lên trong các tác nhân, 2023.

Binfeng Xu, Xukun Liu, Hua Shen, Zeyu Han, Yuhan Li, Murong Yue, Zhiyuan Peng, Yuchen Liu,
Ziyu Yao, và Dongkuan Xu. Gentopia: Một nền tảng hợp tác cho các llm tăng cường công cụ, 2023.

Nils Reimers và Iryna Gurevych. Sentence-BERT: Nhúng câu sử dụng các mạng BERT-
Siamese. Trong Proceedings of the 2019 Conference on Empirical Methods in Natural Language
Processing. Association for Computational Linguistics, 11 2019. URL https://arxiv.org/
abs/1908.10084.

Abubakar Abid, Ali Abdalla, Ali Abid, Dawood Khan, Abdulrahman Alfozan, và James Zou.
Gradio: Chia sẻ và kiểm tra các mô hình ml không rắc rối trong tự nhiên. arXiv preprint arXiv:1906.02569,
2019.

Patrick S. H. Lewis, Ethan Perez, Aleksandra Piktus, Fabio Petroni, Vladimir Karpukhin, Naman
Goyal, Heinrich Küttler, Mike Lewis, Wen-tau Yih, Tim Rocktäschel, Sebastian Riedel, và Douwe
Kiela. Tạo tăng cường truy xuất cho các nhiệm vụ NLP tập trung kiến thức. Trong NeurIPS, 2020.

Wangchunshu Zhou, Yuchen Eleanor Jiang, Long Li, Jialong Wu, Tiannan Wang, Shi Qiu, Jintian
Zhang, Jing Chen, Ruipu Wu, Shuai Wang, Shiding Zhu, Jiyu Chen, Wentao Zhang, Ningyu Zhang,
Huajun Chen, Peng Cui, và Mrinmaya Sachan. Hướng tới các tác nhân ngôn ngữ thống nhất chủ nghĩa kết nối và chủ nghĩa ký hiệu. 2023b. Sẽ được xuất bản.

--- TRANG 10 ---
