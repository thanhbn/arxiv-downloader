# Khám phá việc Tạo ra Bố cục Giao diện Di động 
# sử dụng Mô hình Ngôn ngữ Lớn được Hướng dẫn bởi Ngữ pháp Giao diện

Yuwen Lu1 Ziang Tong1 Qinyi Zhao2 Chengzhi Zhang3 Toby Jia-Jun Li1

Tóm tắt

Những tiến bộ gần đây trong Mô hình Ngôn ngữ Lớn (LLMs) đã kích thích sự quan tâm của các nhà nghiên cứu và chuyên gia trong ngành, đặc biệt là trong việc ứng dụng chúng vào các tác vụ liên quan đến giao diện người dùng di động (UI). Bài báo định hướng này điều tra việc sử dụng LLMs để tạo ra bố cục UI. Trọng tâm của việc khám phá của chúng tôi là việc giới thiệu ngữ pháp UI –– một phương pháp tiểu thuyết mà chúng tôi đề xuất để biểu diễn cấu trúc phân cấp vốn có trong các màn hình UI. Mục tiêu của phương pháp này là hướng dẫn khả năng sinh của LLMs một cách hiệu quả hơn và cải thiện khả năng giải thích và kiểm soát của quy trình. Các thí nghiệm ban đầu được tiến hành với GPT-4 đã cho thấy khả năng hứa hẹn của LLMs trong việc tạo ra giao diện người dùng chất lượng cao thông qua học trong ngữ cảnh. Hơn nữa, nghiên cứu so sánh sơ bộ của chúng tôi cho thấy tiềm năng của phương pháp dựa trên ngữ pháp trong việc cải thiện chất lượng của kết quả sinh trong các khía cạnh cụ thể.

1. Giới thiệu

1.1. Tạo ra Bố cục Giao diện Di động

Việc tạo ra bố cục cho Giao diện Người dùng (UI), hoặc Giao diện Đồ họa (GUI), đã được các nhà nghiên cứu khám phá trong lĩnh vực AI và Tương tác Người-Máy tính (HCI). Từ góc độ học máy, các đặc tính đa phương thức vốn có của UI đặt ra những thách thức nghiên cứu thú vị cho việc mô hình hóa, hiểu và tạo ra UI hiệu quả (Jiang et al., 2023; 2022); từ góc độ HCI, UI đã được nghiên cứu chuyên sâu như một phương tiện cho trải nghiệm người dùng tốt (UX). Nhiều phương pháp nghiên cứu nhu cầu (Dow et al., 2005; Zimmerman & Forlizzi, 2017; Martelaro & Ju, 2017) và nghiên cứu khả năng sử dụng (Nielsen, 1994; 2005) đã được phát triển cả trong học thuật và công nghiệp để cải thiện khả năng sử dụng, chức năng và tính thân thiện với người dùng của UI. Việc giải quyết những thách thức này được coi là một bước sớm để cải thiện trải nghiệm người dùng quy mô lớn và giảm khối lượng công việc cho các nhà thiết kế UI/UX (Lu et al., 2022; Knearem et al., 2023).

Sau khi phát hành bộ dữ liệu UI di động quy mô lớn RICO (Deka et al., 2017), một số kiến trúc mô hình AI cho việc tạo ra bố cục UI di động đã được đề xuất. Những kiến trúc này bao gồm nhưng không giới hạn ở Mạng Đối kháng Sinh (GAN) (Li et al., 2019; Kikuchi et al., 2021), Bộ Mã hóa Tự động Biến phân (VAE) (Arroyo et al., 2021; Jing et al., 2023), Mô hình Khuếch tán (Cheng et al., 2023; Hui et al., 2023), Mạng Nơ-ron Đồ thị (GNN) (Lee et al., 2020), và các mạng nơ-ron dựa trên Transformer khác (Li et al., 2020; Gupta et al., 2021; Huang et al., 2021; Kong et al., 2022; Sobolevsky et al., 2023).

1.2. Mô hình Ngôn ngữ Lớn cho Các Tác vụ UI

Các nghiên cứu gần đây đã khám phá một số khả năng của LLMs trong các tác vụ khác nhau liên quan đến UI. Wang et al. (2023) đã sử dụng Mô hình Ngôn ngữ Lớn (LLMs) để tiến hành 4 tác vụ mô hình hóa UI thông qua học trong ngữ cảnh và nhắc nhở chuỗi suy nghĩ. Liu et al. (2023) đã tiến hành kiểm thử GUI tự động bằng cách mô phỏng các tương tác giống con người với GUI sử dụng LLMs. Kargaran et al. (2023) đã khám phá thiết kế menu giao diện người dùng với LLMs thông qua các mô tả ngôn ngữ tự nhiên về ý định và mục tiêu thiết kế của các nhà thiết kế. Những nỗ lực này đã chứng minh khả năng của LLMs trong việc làm việc hiệu quả với UI với thiết kế tương tác cẩn thận và các kỹ thuật nhắc nhở. Một số thí nghiệm cũng cho thấy hiệu suất cạnh tranh trên các chỉ số đánh giá tác vụ UI, mà không cần đến các bộ dữ liệu quy mô lớn hoặc quy trình huấn luyện mở rộng.

1.3. Vấn đề nghiên cứu và mục tiêu

Trong công trình này, chúng tôi tìm cách khám phá tiềm năng của LLMs trong việc tạo ra bố cục UI di động. Cụ thể, chúng tôi đặt ra mục tiêu xác định cách thức khả năng học trong ngữ cảnh của LLMs có thể được khai thác trong một kịch bản học một lần để tạo ra bố cục UI chất lượng cao. Một thách thức chính ở đây liên quan đến việc biểu diễn và tích hợp cấu trúc phân cấp vốn có trong các phần tử UI vào quy trình tạo ra.

Để đáp ứng vấn đề này, chúng tôi đề xuất ngữ pháp UI — một phương pháp tiểu thuyết biểu diễn chính xác các mối quan hệ phân cấp giữa các phần tử UI. Phương pháp này phục vụ để hướng dẫn quy trình tạo ra của LLMs, từ đó làm cho việc tạo ra có cấu trúc hơn và phù hợp với ngữ cảnh hơn. Từ góc độ lấy con người làm trung tâm, chúng tôi thảo luận về cách việc bao gồm ngữ pháp UI cung cấp một lớp biểu diễn trung gian có thể cải thiện khả năng giải thích và kiểm soát của LLMs trong quy trình tạo ra. Người dùng có thể hiểu rõ hơn và điều khiển các cơ chế tạo ra nội tại của LLMs bằng cách xem xét và chỉnh sửa ngữ pháp được sử dụng để đưa ra kết quả cuối cùng.

Mục tiêu của chúng tôi ở đây có hai mặt. Đầu tiên, chúng tôi nhằm đánh giá hiệu suất của LLMs trong việc tạo ra bố cục UI. Thứ hai, chúng tôi đặt ra mục tiêu đánh giá tác động của ngữ pháp UI được đề xuất của chúng tôi đối với quy trình tạo ra của LLMs. Chúng tôi đã đánh giá so sánh chất lượng tạo ra có/không có sự tích hợp của ngữ pháp UI trong các nhắc nhở so với 3 chỉ số phổ biến cho các tác vụ tạo ra bố cục: Giao điểm tối đa trên hợp (MaxIoU), Căn chỉnh và Chồng lấp. Kết quả thí nghiệm sơ bộ của chúng tôi đã chứng minh khả năng của LLMs trong việc tạo ra bố cục UI di động chất lượng cao thông qua học trong ngữ cảnh và cho thấy tính hữu ích của ngữ pháp UI trong việc cải thiện các khía cạnh nhất định của chất lượng tạo ra.

2. Nhắc nhở LLM cho Việc Tạo ra Bố cục UI

Wang et al. (2023) đã thảo luận một vài khía cạnh chính trong việc xây dựng các nhắc nhở LLM cho các tác vụ UI di động, bao gồm biểu diễn màn hình, thuộc tính phần tử UI và ánh xạ lớp. Trong khi việc nhắc nhở LLMs vẫn là một lĩnh vực nghiên cứu mở, ở đây, chúng tôi tiếp tục dòng thảo luận này bằng cách xem xét các kỹ thuật từ công trình gần đây về việc điều chỉnh UI để tạo ra các nhắc nhở LLM. Sau đó chúng tôi đề xuất chiến lược nhắc nhở riêng của mình, được thiết kế cụ thể cho việc tạo ra bố cục UI, và cung cấp các lý do của chúng tôi.

2.1. Biểu diễn UI cho Học trong Ngữ cảnh

LLMs đã cho thấy khả năng ấn tượng trong học trong ngữ cảnh, bao gồm việc thích ứng với một số lượng hạn chế các ví dụ do người dùng cung cấp trong khi duy trì hiệu suất cạnh tranh trên nhiều tác vụ khác nhau (Brown et al., 2020). Khả năng này, được xác nhận là một khả năng nổi lên khi kích thước của các mô hình ngôn ngữ tăng lên (Wei et al., 2022a), cung cấp một thay thế hợp lý hơn cho quy trình tinh chỉnh các mô hình được huấn luyện trước với các bộ dữ liệu lớn để thích ứng miền.

Dữ liệu UI vốn có tính đa phương thức và thường có thể được biểu diễn trong nhiều định dạng dữ liệu khác nhau. Những định dạng này bao gồm, nhưng không giới hạn ở, ảnh chụp màn hình, cây phân cấp view Android, triển khai mã và mô tả ngôn ngữ tự nhiên (ví dụ: "một trang chào mừng cho ứng dụng đọc truyện tranh"). Trong các bộ dữ liệu UI hiện có, chẳng hạn như RICO (Deka et al., 2017), mỗi màn hình UI thường được cung cấp trong nhiều định dạng dữ liệu. Phương pháp này phục vụ để nắm bắt thông tin trực quan, cấu trúc và ngữ cảnh của các màn hình UI.

Điều này tạo ra thách thức trong việc cung cấp các ví dụ UI cho LLMs để học trong ngữ cảnh, đặc biệt là với cửa sổ ngữ cảnh hạn chế và phương thức đầu vào/đầu ra chỉ văn bản cho các LLMs hiện có. Ở đây, chúng tôi xem xét các phương pháp của công trình gần đây trong việc điều chỉnh đầu vào UI cho việc nhắc nhở LLM:

• Wang et al. (2023) đã phân tích UI thành các tệp HTML để đưa vào PALM cho 4 tác vụ UI di động, tức là tạo câu hỏi màn hình, tóm tắt màn hình, trả lời câu hỏi màn hình và ánh xạ hướng dẫn tới hành động UI. Họ đã sử dụng các thuộc tính class, text, source id, content desc để bao gồm thông tin chi tiết của các widget màn hình.

• Liu et al. (2023) đã điều tra việc sử dụng GPT-3 cho kiểm thử GUI di động tự động thông qua các cuộc trò chuyện ngôn ngữ tự nhiên. Họ đã trích xuất các ngữ cảnh tĩnh sử dụng các thuộc tính của ứng dụng và widget màn hình từ tệp AndroidManifest.xml tương ứng, bao gồm AppName, ActivityName, WidgetText và WidgetID, và xây dựng các câu ngôn ngữ tự nhiên mô tả trạng thái UI với các thuộc tính này.

• Mặc dù Feng et al. (2023) không làm việc trực tiếp với dữ liệu UI, họ đã sử dụng GPT-3.5 cho việc tạo ra bố cục hình ảnh 2D, một tác vụ chia sẻ nhiều điểm tương đồng với việc tạo ra bố cục UI di động. Họ đã phân tích vị trí của các phần tử hình ảnh thành các đoạn CSS (viết tắt của Cascading Style Sheets) với các giá trị vị trí được chuẩn hóa làm đầu vào GPT.

2.2. Cấu trúc Phân cấp như Ngữ pháp UI

Các phần tử UI trong một màn hình có các mối quan hệ phân cấp (Li et al., 2021; 2018), có thể được phản ánh trong nguyên tắc thiết kế nguyên tử (Frost, 2016), tính năng nhóm của các công cụ thiết kế UI như Figma, và cây phân cấp view Android. Một số công trình trước đây (Huang et al., 2021) đã làm phẳng cấu trúc phân cấp của các phần tử UI và giảm tác vụ tạo ra bố cục thành việc dự đoán một chuỗi phẳng các phần tử và các hộp giới hạn đi kèm. Tuy nhiên, giả định của chúng tôi là việc bảo tồn mối quan hệ phân cấp giữa các phần tử UI và sử dụng chúng để hướng dẫn ngầm quy trình tạo ra có thể cải thiện chất lượng tạo ra.

Để bao gồm thông tin phân cấp như vậy vào nhắc nhở của chúng tôi để hướng dẫn LLMs trong việc tạo ra, ở đây chúng tôi lấy cảm hứng từ công trình trước đây (Kong et al., 2008; Talton et al., 2012) và định nghĩa Ngữ pháp UI như một cách có thể để biểu diễn mối quan hệ phân cấp giữa các phần tử UI.

Ngữ pháp UI được định nghĩa là một tập hợp các quy tắc sản xuất để mô tả các mối quan hệ cha-con giữa các phần tử UI trong một cấu trúc cây phân cấp màn hình cho trước. Mỗi quy tắc sản xuất có dạng A → B, trong đó A biểu diễn một phần tử UI cha và B biểu diễn một chuỗi một hoặc nhiều phần tử con. Định nghĩa này tương tự như ngữ pháp phi ngữ cảnh trong phân tích cú pháp (Earley, 1970), do đó có tên là Ngữ pháp UI.

Hình 1. Ví dụ cấu trúc phân cấp UI. Ở đây chúng ta có thể phân tích ra ngữ pháp UI Root→Container Button và Container →Pictogram Text.

Ví dụ, đối với một cấu trúc UI đơn giản được hình dung trong Hình 1, chúng ta có thể phân tích ra ngữ pháp UI sau dựa trên các mối quan hệ cha-con: Root →Container Button, Container →Pictogram Text.

Trong công trình này, chúng tôi tiến hành một nghiên cứu so sánh ban đầu giữa việc tạo ra bố cục UI sử dụng LLMs có và không có sự hướng dẫn của ngữ pháp UI như một phần của nhắc nhở.

2.3. Định nghĩa Vấn đề và Thiết kế Nhắc nhở

Chúng tôi định nghĩa tác vụ tạo ra bố cục UI của mình như sau:
Cho một tóm tắt ngôn ngữ tự nhiên của một màn hình UI di động S, chúng tôi sử dụng LLM để tạo ra một chuỗi phân cấp mục tiêu của các phần tử UI T={oj|j= 1,2, . . . , nu} trong đó oj biểu thị một tuple của (label, bounding box) cho phần tử UI j. Hai trường này trong tuple biểu diễn loại và vị trí của phần tử UI trên màn hình.

Với định nghĩa vấn đề này, chúng tôi thiết kế nhắc nhở của mình với các mục tiêu sau:
1. Sử dụng một định dạng UI dễ hiểu và tạo ra bố cục cho LLMs
2. Đóng gói mối quan hệ phân cấp giữa các phần tử UI thông qua ngữ pháp UI
3. Loại bỏ thông tin phi trực quan dư thừa không cần thiết cho việc tạo ra bố cục

Dựa trên những mục tiêu này, chúng tôi chọn sử dụng JSON làm định dạng dữ liệu để biểu diễn UI trong việc tạo ra bố cục UI. Chúng tôi đã chọn JSON do các lợi ích của nó trong các khía cạnh sau:

• Tương thích: JSON lý tưởng và thường được sử dụng cho dữ liệu có các mối quan hệ cấu trúc phân cấp. Ngoài ra, cho rằng nhiều LLMs sử dụng mã lập trình trong dữ liệu huấn luyện và các nhắc nhở nằm trong phân phối dữ liệu huấn luyện có xu hướng hoạt động tốt hơn (Wang et al., 2023), JSON là một định dạng dữ liệu tương thích ở cả hai đầu cho tác vụ của chúng tôi.

• Linh hoạt: JSON hỗ trợ nhiều loại thuộc tính cho mỗi phần tử, phù hợp để biểu diễn string.label và danh sách các tọa độ số nguyên cho bounding box

• Đơn giản Xử lý: Các bộ dữ liệu UI như RICO đã sử dụng JSON để biểu diễn cây phân cấp view UI, giảm nỗ lực xử lý.

Để so sánh hiệu quả của việc tạo ra bố cục UI có và không có sự hướng dẫn từ ngữ pháp UI, chúng tôi đã tạo ra hai pipeline tương tự cho quy trình tạo ra (Hình 2, Hình 3). Sự khác biệt chính giữa các pipeline này nằm ở việc bao gồm ngữ pháp UI trong các nhắc nhở của chúng tôi cho LLMs. Chúng tôi sẽ thảo luận trước về pipeline hoạt động mà không có ngữ pháp UI, sau đó giới thiệu cách chúng tôi tích hợp ngữ pháp UI vào nhắc nhở để điều khiển LLMs trong việc tạo ra bố cục UI.

Thay vì làm việc trực tiếp với bộ dữ liệu RICO chứa khoảng 66k màn hình UI duy nhất, chúng tôi đã sử dụng một bộ dữ liệu cải tiến CLAY (Li et al., 2022) dựa trên RICO. CLAY đã loại bỏ nhiễu từ dữ liệu UI RICO bằng cách phát hiện các loại phần tử UI và sự không khớp biểu diễn trực quan và gán các loại có ý nghĩa ngữ nghĩa cho mỗi nút. Nó chứa 59k bố cục màn hình được chú thích bởi con người và chứa dữ liệu bố cục UI trực quan ít nhiễu hơn. Chúng tôi cũng sử dụng bộ dữ liệu SCREEN2WORDS (Wang et al., 2021) chứa các tóm tắt ngôn ngữ tự nhiên của các màn hình UI trong RICO để xây dựng nhắc nhở của chúng tôi.

2.3.1. NHẮC NHỞ KHÔNG CÓ NGỮ PHÁP UI

Để tạo ra bố cục mà không liên quan đến ngữ pháp UI (Hình 2), trước tiên chúng tôi chọn ngẫu nhiên một màn hình từ CLAY để sử dụng làm ví dụ cho việc học trong ngữ cảnh của chúng tôi (tức là nhắc nhở 1 lần) và loại trừ nó khỏi việc tạo ra để ngăn rò rỉ dữ liệu. Đối với mỗi màn hình UI trong CLAY, chúng tôi truy xuất mô tả ngôn ngữ tự nhiên tương ứng từ SCREEN2WORDS làm mô tả cho mục tiêu tạo ra của chúng tôi. Để kiểm soát kết quả tạo ra và chỉ nhận các bố cục với các phần tử UI có ý nghĩa, chúng tôi đã sử dụng danh sách 25 nhãn phần tử UI có ý nghĩa ngữ nghĩa được định nghĩa trong CLAY và bao gồm điều đó trong nhắc nhở của chúng tôi như một ràng buộc. Chúng tôi cũng kiểm soát định dạng phản hồi API của LLM để phân tích dễ dàng hơn kết quả tạo ra, như được hiển thị trong Hình 2.

2.3.2. NHẮC NHỞ VỚI NGỮ PHÁP UI

Đối với pipeline và thiết kế nhắc nhở thứ hai của chúng tôi (Hình 3), chúng tôi giới thiệu ngữ pháp UI như một bước trung gian trong việc tạo ra bố cục UI với một kiến trúc tương tự như các mô hình neuro-symbolic (Sarker et al., 2021). Thay vì yêu cầu LLMs trực tiếp tạo ra bố cục màn hình cuối cùng, trong ví dụ 1 lần, chúng tôi mô tả việc tạo ra bố cục UI như một quy trình 2 bước: đầu tiên, chúng tôi giới thiệu danh sách ngữ pháp UI trong màn hình, sau đó giải thích cách chúng tôi có thể tạo ra bố cục UI ví dụ sử dụng ngữ pháp UI được cung cấp.

Một bước quan trọng trong việc xây dựng nhắc nhở với ngữ pháp UI là chọn những màn hình nào từ bộ dữ liệu CLAY để phân tích ngữ pháp từ đó. Khi tạo ra một bố cục sử dụng mô tả của màn hình S từ bộ dữ liệu CLAY gốc, nếu chúng tôi cũng đưa các ngữ pháp được phân tích từ S vào nhắc nhở, sẽ xảy ra rò rỉ dữ liệu vì màn hình S có thể được tái tạo từ các ngữ pháp riêng của nó một cách đơn giản. Để tránh điều này, chúng tôi tiến hành phân chia ngẫu nhiên 20/80 của bộ dữ liệu CLAY và sử dụng các ngữ pháp được phân tích từ tập ngữ pháp 20% để hướng dẫn việc tạo ra của tập tạo ra 80%.

Ngoài ra, từ quan sát của chúng tôi, nhiều màn hình từ cùng các gói ứng dụng trong CLAY chia sẻ cấu trúc bố cục tương tự. Do đó, chúng tôi đã phân chia bộ dữ liệu theo ứng dụng để tránh rò rỉ dữ liệu gây ra bởi việc có các màn hình từ cùng một gói ứng dụng trong cả hai tập.

3. Thí nghiệm Ban đầu

Vào tháng 5 năm 2023, chúng tôi đã sử dụng API GPT-4 của OpenAI để tiến hành một thí nghiệm sơ bộ so sánh 2 pipeline được đề xuất cho việc tạo ra bố cục UI. Chúng tôi đã sử dụng phiên bản gpt-4-0314 của GPT-4 với maxtoken là 2,000 và temperature là 0.7.

Bộ dữ liệu Đối với cả hai thiết kế nhắc nhở, chúng tôi tiền xử lý các tệp cây phân cấp view UI từ CLAY bằng cách loại bỏ tất cả các thuộc tính của các phần tử UI trừ label và bounds, vì tất cả các thuộc tính khác không cần thiết cho tác vụ tạo ra bố cục của chúng tôi. Để đảm bảo thêm chất lượng tạo ra, chúng tôi làm việc với một tập con của 10k màn hình UI hàng đầu từ CLAY với đánh giá ứng dụng cao hơn 4.3 và lượt tải xuống hơn 10k trong Google Play Store cho việc tạo ra của chúng tôi. Hai ngưỡng này phục vụ như các bộ lọc chất lượng và được định nghĩa thủ công để cân bằng nhu cầu về kích thước mẫu đủ lớn với mong muốn biểu diễn ứng dụng chất lượng cao.

Cho rằng tỷ lệ phản hồi API và giới hạn cuộc gọi của OpenAI, việc nhanh chóng tạo ra một số lượng lớn kết quả là khó khăn. Trong công trình đang tiến hành này, chúng tôi đã tiến hành một thí nghiệm ban đầu trên một lô 192 màn hình UI từ các ứng dụng hàng đầu trong CLAY và báo cáo các kết quả đánh giá sơ bộ như sau. Hình ảnh hóa các ví dụ kết quả tạo ra được hiển thị trong Hình 4.

4. Đánh giá Sơ bộ

Ở đây chúng tôi báo cáo các đánh giá sơ bộ của kết quả tạo ra bố cục UI của chúng tôi so với 3 chỉ số phổ biến thường được sử dụng trong lĩnh vực này: Giao điểm Tối đa Trên Hợp (MaxIoU), Căn chỉnh và Chồng lấp. Giá trị MaxIoU được tính toán giữa màn hình tạo ra S' và màn hình gốc S từ CLAY các tóm tắt màn hình được cung cấp như một phần của nhắc nhở. Căn chỉnh và Chồng lấp đều được tính toán chỉ trên kết quả được tạo ra S.

Xin lưu ý rằng để đánh giá chính xác hơn chất lượng trực quan của các bố cục UI được tạo ra, chúng tôi đã loại bỏ 5 loại phần tử UI thường không nhìn thấy trên màn hình khỏi kết quả trước khi đánh giá.

Kết quả Trong Bảng 1, chúng ta có thể thấy rằng trong thí nghiệm ban đầu của chúng tôi, GPT-4 đã hoạt động tốt về chồng lấp mà không có ngữ pháp, và về căn chỉnh có và không có ngữ pháp, có hiệu suất chỉ số gần hoặc thậm chí tốt hơn dữ liệu thực. Kết quả chồng lấp cho cả hai thiết kế nhắc nhở đạt 0.00, có nghĩa là mọi phần tử căn chỉnh với ít nhất 1 phần tử khác trên màn hình. Điều này phù hợp với hình thức trực quan của kết quả tạo ra. Mặc dù chúng tôi không đề cập cụ thể đến nhu cầu căn chỉnh các phần tử UI hoặc tránh chồng lấp phần tử trong nhắc nhở của mình, GPT-4 đã có thể tạo ra kết quả chất lượng cao so với các chỉ số này. Ngoài ra, việc giới thiệu ngữ pháp UI để hướng dẫn quy trình tạo ra bố cục của GPT-4 đã tăng nhẹ hiệu suất MaxIoU. Về chỉ số này, GPT-4 với ngữ pháp có thể so sánh với một số mô hình tạo ra bố cục tổng quát được huấn luyện trên các bộ dữ liệu lớn như được báo cáo trong (Jing et al., 2023), chứng minh khả năng học trong ngữ cảnh của LLMs trong việc tạo ra bố cục UI di động.

Mặc dù chúng tôi không hạn chế rõ ràng GPT-4 chỉ sử dụng tập ngữ pháp được cung cấp, 83.8% các quy tắc mà GPT-4 báo cáo đang sử dụng để tạo ra đến từ ngữ pháp được cung cấp. Điều này cho thấy GPT-4 không hoàn toàn bị hạn chế bởi ngữ pháp mà chúng tôi cung cấp, chứng minh tính linh hoạt của mô hình và phương pháp của chúng tôi.

5. Thảo luận và Công việc Tương lai

Thí nghiệm của chúng tôi với LLMs cho việc tạo ra bố cục UI đã chứng minh khả năng hứa hẹn của LLMs trong tác vụ này. Tuy nhiên, chúng tôi tin rằng LLMs như GPT-4 cũng có khả năng tiềm năng tạo ra nội dung cùng với bố cục để tạo ra các nguyên mẫu từ mid-fi đến high-fi. Tiềm năng kết hợp LLMs với các mẫu UI hiện có hoặc hệ thống thiết kế như Google Material Design sẽ cho phép các kỹ thuật tạo nguyên mẫu UI tự động, tùy chỉnh và hiệu quả hơn.

Chúng tôi lập luận rằng ngoài việc cải thiện chất lượng tạo ra của LLMs trên các chỉ số như MaxIoU, bằng cách giới thiệu ngữ pháp UI như một biểu diễn trung gian trong quy trình tạo ra, phương pháp của chúng tôi có thể tăng khả năng giải thích và khả năng kiểm soát của người dùng đối với các LLMs hộp đen đã được huấn luyện trước:

• Khả năng giải thích: Bằng cách xem xét ngữ pháp UI được sử dụng trong quy trình tạo ra của LLMs, người dùng có thể hiểu rõ hơn về các cơ chế tạo ra nội tại của LLMs. Phương pháp của chúng tôi khác với một yêu cầu giải thích hậu hoc cho LLMs, ở chỗ phương pháp của chúng tôi có thể được xác minh dễ dàng hơn thông qua một so sánh dễ dàng giữa các ngữ pháp được sử dụng và cấu trúc UI cuối cùng. Mặt khác, các yêu cầu giải thích hậu hoc (ví dụ: một câu hỏi tiếp theo như "giải thích tại sao bạn tạo ra kết quả này"), mặc dù tương tự như cách con người cung cấp lý do, không nhất thiết phản ánh cơ chế tạo ra thực tế.

• Khả năng kiểm soát: Với ngữ pháp UI như một biểu diễn trung gian trong quy trình tạo ra, người dùng có thể có được khả năng kiểm soát cao hơn đối với kết quả tạo ra nếu được cho phép sửa đổi hoặc thay thế ngữ pháp được cung cấp cho LLMs trong các nhắc nhở. Các ứng dụng tương lai có thể xây dựng dựa trên kiến trúc mô hình như vậy và cung cấp cho người dùng nhiều cách hơn để tương tác với ngữ pháp UI trong các nhắc nhở (ví dụ: trực tiếp chọn ứng dụng nào để trích xuất ngữ pháp từ đó) để cải thiện khả năng kiểm soát của LLMs trong các tác vụ tạo ra tương tự.

Trong Phần 2.3.2 chúng tôi đã thảo luận về tiềm năng rò rỉ dữ liệu khi sử dụng mô tả ngôn ngữ tự nhiên và ngữ pháp UI được lấy từ cùng một màn hình. Nhưng mặt khác, vì ngữ pháp UI biểu diễn các cách khác nhau để tổ chức và thiết kế các phần tử UI trên một màn hình, chúng ta có thể sử dụng ngữ pháp UI như một proxy để kiểm soát các đặc tính của kết quả tạo ra. Một trường hợp sử dụng có thể là tạo ra các kiểu UI nhất định, bằng cách trích xuất ngữ pháp cụ thể từ các màn hình tuân thủ hướng dẫn thiết kế của một công ty.

Tiếp tục nghiên cứu ban đầu này, chúng tôi đã lên kế hoạch các chương trình nghị sự dưới đây cho công việc tiếp theo của chúng tôi:

1. Cải thiện pipeline và cấu trúc nhắc nhở của chúng tôi bằng cách mở rộng ngữ pháp UI với xác suất xuất hiện của mỗi quy tắc;

2. Tích hợp các bước lý luận cho người dùng mục tiêu, thông tin hiển thị và các hành động được hỗ trợ của một UI thông qua nhắc nhở Chuỗi Suy nghĩ (Wei et al., 2022b), một quy trình làm việc tương tự như của các nhà thiết kế UI con người;

3. Tiến hành các đánh giá tạo ra bố cục đa mặt liên quan đến các đánh giá viên con người và nhiều chỉ số định lượng hơn (ví dụ: khoảng cách Fréchet inception) ở quy mô lớn hơn, để đảm bảo độ bền vững và khả năng áp dụng của các mô hình của chúng tôi;

4. Thí nghiệm tính khả thi của việc tạo ra các nguyên mẫu UI độ trung thực cao với LLMs, như đã thảo luận ở trên, và có thể xây dựng các công cụ hỗ trợ thiết kế tương tác để tăng tốc việc tạo nguyên mẫu UI.

6. Kết luận

Trong công trình này, chúng tôi đã khám phá khả năng của Mô hình Ngôn ngữ Lớn trong việc tạo ra bố cục giao diện người dùng di động thông qua học trong ngữ cảnh 1 lần. Chúng tôi đã đề xuất ngữ pháp UI, một phương pháp tiểu thuyết để biểu diễn mối quan hệ phân cấp giữa các phần tử UI, và đã tích hợp nó vào các nhắc nhở của chúng tôi để điều khiển việc tạo ra bố cục UI. Kết quả sơ bộ của chúng tôi đã chứng minh khả năng của LLMs trong việc tạo ra bố cục UI chất lượng cao với hiệu suất cạnh tranh, cũng như tính hữu ích của ngữ pháp UI trong việc cải thiện các khía cạnh nhất định của chất lượng tạo ra. Chúng tôi kết thúc bằng việc thảo luận về các tác động của việc sử dụng LLMs và ngữ pháp UI cho nghiên cứu tương lai.

Tài liệu Tham khảo

[Phần tài liệu tham khảo được dịch theo định dạng gốc với các tên tác giả, tiêu đề và thông tin xuất bản được duy trì như bản gốc]
