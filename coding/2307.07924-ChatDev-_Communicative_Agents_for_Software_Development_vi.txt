# ChatDev: Các Agent Giao Tiếp cho Phát triển Phần mềm

Chen Qian⋆Wei Liu⋆Hongzhang Liu♠Nuo Chen⋆Yufan Dang⋆
Jiahao Li⋆Cheng Yang♣Weize Chen⋆Yusheng Su⋆Xin Cong⋆
Juyuan Xu⋆Dahai Li♦Zhiyuan Liu⋆BMaosong Sun⋆B
⋆Đại học Thanh Hoa♠Đại học Sydney♣BUPT♦Modelbest Inc.
qianc62@gmail.com liuzy@tsinghua.edu.cn sms@tsinghua.edu.cn

## Tóm tắt

Phát triển phần mềm là một nhiệm vụ phức tạp đòi hỏi sự hợp tác giữa nhiều thành viên có kỹ năng đa dạng. Nhiều nghiên cứu đã sử dụng deep learning để cải thiện các giai đoạn cụ thể trong mô hình thác nước, như thiết kế, lập trình và kiểm thử. Tuy nhiên, mô hình deep learning trong mỗi giai đoạn đòi hỏi các thiết kế độc nhất, dẫn đến sự không nhất quán về mặt kỹ thuật giữa các giai đoạn khác nhau, kết quả là một quy trình phát triển phân mảnh và không hiệu quả. Trong bài báo này, chúng tôi giới thiệu ChatDev, một framework phát triển phần mềm được hỗ trợ bởi chat, trong đó các agent chuyên biệt được điều khiển bởi các mô hình ngôn ngữ lớn (LLM) được hướng dẫn về việc giao tiếp gì (thông qua chuỗi chat) và cách giao tiếp (thông qua loại bỏ ảo giác giao tiếp). Các agent này tích cực đóng góp vào các giai đoạn thiết kế, lập trình và kiểm thử thông qua giao tiếp thống nhất dựa trên ngôn ngữ, với các giải pháp được rút ra từ các cuộc đối thoại đa lượt của họ. Chúng tôi phát hiện rằng việc sử dụng ngôn ngữ tự nhiên có lợi cho thiết kế hệ thống, và giao tiếp bằng ngôn ngữ lập trình tỏ ra hữu ích trong việc gỡ lỗi. Mô hình này chứng minh cách giao tiếp ngôn ngữ học tạo điều kiện cho sự hợp tác đa agent, thiết lập ngôn ngữ như một cầu nối thống nhất cho việc giải quyết nhiệm vụ tự động giữa các agent LLM. Code và dữ liệu có sẵn tại https://github.com/OpenBMB/ChatDev.

## 1 Giới thiệu

Các mô hình ngôn ngữ lớn (LLM) đã dẫn đến những chuyển đổi quan trọng nhờ khả năng tích hợp dễ dàng kiến thức rộng lớn được biểu đạt bằng ngôn ngữ (Brown et al., 2020; Bubeck et al., 2023), kết hợp với khả năng đóng vai mạnh mẽ trong các vai trò được chỉ định (Park et al., 2023; Hua et al., 2023; Chen et al., 2023b). Tiến bộ này loại bỏ nhu cầu về các thiết kế cụ thể cho từng mô hình và mang lại hiệu suất ấn tượng trong các ứng dụng downstream đa dạng. Hơn nữa, các agent tự động (Richards, 2023; Zhou et al., 2023a) đã thu hút sự chú ý trong việc nâng cao khả năng của LLM với các tính năng tiên tiến như bộ nhớ nhận thức ngữ cảnh (Sumers et al., 2023), lập kế hoạch đa bước (Liu et al., 2023), và sử dụng công cụ chiến lược (Schick et al., 2023).

Phát triển phần mềm là một nhiệm vụ phức tạp đòi hỏi sự hợp tác giữa nhiều thành viên có kỹ năng đa dạng (ví dụ: kiến trúc sư, lập trình viên và người kiểm thử) (Basili, 1989; Sawyer và Guinan, 1998). Điều này đòi hỏi giao tiếp rộng rãi giữa các vai trò khác nhau để hiểu và phân tích yêu cầu thông qua ngôn ngữ tự nhiên, đồng thời bao gồm phát triển và gỡ lỗi bằng ngôn ngữ lập trình (Ernst, 2017; Banker et al., 1998). Nhiều nghiên cứu sử dụng deep learning để cải thiện các giai đoạn cụ thể của mô hình thác nước trong phát triển phần mềm, như thiết kế, lập trình và kiểm thử (Pudlitz et al., 2019; Martín và Abran, 2015; Gao et al., 2019; Wang et al., 2016). Do những sự không nhất quán về mặt kỹ thuật này, các phương pháp được sử dụng trong các giai đoạn khác nhau vẫn tách biệt cho đến nay. Mỗi giai đoạn, từ thu thập và gán nhãn dữ liệu đến huấn luyện và suy luận mô hình, đòi hỏi các thiết kế độc nhất riêng, dẫn đến một quy trình phát triển phân mảnh và kém hiệu quả trong lĩnh vực này (Freeman et al., 2001; Ernst, 2017; Winkler et al., 2020).

Được thúc đẩy bởi tiềm năng giống như chuyên gia của các agent tự động, chúng tôi nhằm thiết lập ngôn ngữ như một cầu nối thống nhất - sử dụng nhiều agent được hỗ trợ bởi LLM với các vai trò chuyên biệt để phát triển phần mềm hợp tác thông qua giao tiếp dựa trên ngôn ngữ qua các giai đoạn khác nhau; các giải pháp trong các giai đoạn khác nhau được rút ra từ các cuộc đối thoại đa lượt của họ, dù xử lý văn bản hay code. Tuy nhiên, do xu hướng ảo giác của LLM (Dhuliawala et al., 2023; Zhang et al., 2023b), chiến lược tạo phần mềm thông qua các agent giao tiếp có thể dẫn đến thách thức không nhỏ về ảo giác lập trình, bao gồm việc tạo mã nguồn không đầy đủ, không thể thực thi hoặc không chính xác, cuối cùng không đáp ứng được các yêu cầu dự định (Agnihotri và Chug, 2020). Sự xuất hiện thường xuyên của ảo giác lập trình lần lượt phản ánh khả năng tự động bị hạn chế của các agent trong việc hoàn thành nhiệm vụ, không thể tránh khỏi đòi hỏi can thiệp thủ công bổ sung và do đó cản trở khả năng sử dụng và độ tin cậy ngay lập tức của phần mềm được tạo (Ji et al., 2023).

Trong bài báo này, chúng tôi đề xuất ChatDev (xem Hình 1), một framework phát triển phần mềm được hỗ trợ bởi chat tích hợp nhiều "agent phần mềm" để tham gia tích cực vào ba giai đoạn cốt lõi của vòng đời phần mềm: thiết kế, lập trình và kiểm thử. Về mặt kỹ thuật, ChatDev sử dụng chuỗi chat để chia mỗi giai đoạn thành các nhiệm vụ con nhỏ hơn, cho phép giao tiếp đa lượt của các agent để hợp tác đề xuất và phát triển giải pháp (ví dụ: ý tưởng sáng tạo hoặc mã nguồn). Quy trình làm việc có cấu trúc chuỗi hướng dẫn các agent về việc giao tiếp gì, thúc đẩy hợp tác và liên kết mượt mà các nhiệm vụ con ngôn ngữ tự nhiên và ngôn ngữ lập trình để thúc đẩy giải quyết vấn đề. Ngoài ra, để giảm thiểu ảo giác lập trình, ChatDev bao gồm một cơ chế loại bỏ ảo giác giao tiếp, cho phép các agent chủ động yêu cầu chi tiết cụ thể hơn trước khi đưa ra phản hồi trực tiếp. Mô hình giao tiếp này hướng dẫn các agent về cách giao tiếp, cho phép trao đổi thông tin chính xác để tối ưu hóa giải pháp hiệu quả đồng thời giảm ảo giác lập trình. Chúng tôi đã xây dựng một bộ dữ liệu toàn diện chứa các mô tả yêu cầu phần mềm và tiến hành phân tích toàn diện. Kết quả cho thấy ChatDev cải thiện đáng kể chất lượng phần mềm, dẫn đến sự cải thiện về tính đầy đủ, khả năng thực thi và sự nhất quán tốt hơn với yêu cầu. Các nghiên cứu sâu hơn tiết lộ rằng giao tiếp ngôn ngữ tự nhiên đóng góp vào thiết kế hệ thống toàn diện, trong khi giao tiếp ngôn ngữ lập trình thúc đẩy tối ưu hóa phần mềm. Tóm lại, mô hình đề xuất chứng minh cách giao tiếp ngôn ngữ học tạo điều kiện cho sự hợp tác đa agent, thiết lập ngôn ngữ như một cầu nối thống nhất cho việc giải quyết nhiệm vụ tự động giữa các agent LLM.

## 2 Công trình liên quan

Được huấn luyện trên các bộ dữ liệu khổng lồ để hiểu và thao tác hàng tỷ tham số, LLM đã trở thành trụ cột trong xử lý ngôn ngữ tự nhiên do khả năng tích hợp liền mạch kiến thức rộng lớn (Brown et al., 2020; Bubeck et al., 2023; Vaswani et al., 2017; Radford et al.; Touvron et al., 2023; Wei et al., 2022a; Shanahan et al., 2023; Chen et al., 2021; Brants et al., 2007; Chen et al., 2021; Ouyang et al., 2022; Yang et al., 2023a; Qin et al., 2023b; Kaplan et al., 2020). Hơn nữa, LLM đã chứng minh khả năng đóng vai mạnh mẽ (Li et al., 2023a; Park et al., 2023; Hua et al., 2023; Chan et al., 2023; Zhou et al., 2023b; Chen et al., 2023b,a; Cohen et al., 2023; Li et al., 2023b). Tiến bộ gần đây, đặc biệt trong lĩnh vực các agent tự động (Zhou et al., 2023a; Wang et al., 2023a; Park et al., 2023; Wang et al., 2023e; Richards, 2023; Osika, 2023; Wang et al., 2023d), phần lớn được quy cho những tiến bộ nền tảng trong LLM. Những agent này sử dụng khả năng mạnh mẽ của LLM, thể hiện kỹ năng đáng chú ý trong bộ nhớ (Park et al., 2023; Sumers et al., 2023), lập kế hoạch (Chen et al., 2023b; Liu et al., 2023) và sử dụng công cụ (Schick et al., 2023; Cai et al., 2023; Qin et al., 2023a; Ruan et al., 2023; Yang et al., 2023b), cho phép họ lý luận trong các tình huống phức tạp (Wei et al., 2022b; Zhao et al., 2023; Zhou et al., 2023a; Ma et al., 2023; Zhang et al., 2023a; Wang et al., 2023b; Ding et al., 2023; Weng, 2023).

Phát triển phần mềm là một quá trình đa diện và phức tạp đòi hỏi sự hợp tác của nhiều chuyên gia từ các lĩnh vực khác nhau (Yilmaz et al., 2012; Acuna et al., 2006; Basili, 1989; Sawyer và Guinan, 1998; Banker et al., 1998; France và Rumpe, 2007), bao gồm phân tích yêu cầu và thiết kế hệ thống bằng ngôn ngữ tự nhiên (Pudlitz et al., 2019; Martín và Abran, 2015; Nahar et al., 2022), cùng với phát triển hệ thống và gỡ lỗi bằng ngôn ngữ lập trình (Gao et al., 2019; Wang et al., 2016; Wan et al., 2022). Nhiều nghiên cứu sử dụng mô hình thác nước, một vòng đời phát triển phần mềm cụ thể, để phân đoạn quá trình thành các giai đoạn riêng biệt (ví dụ: thiết kế, lập trình, kiểm thử) và áp dụng deep learning để cải thiện hiệu quả của một số giai đoạn nhất định (Winkler et al., 2020; Ezzini et al., 2022; Thaller et al., 2019; Zhao et al., 2021; Nijkamp et al., 2023; Wan et al., 2018; Wang et al., 2021).

## 3 ChatDev

Chúng tôi giới thiệu ChatDev, một framework phát triển phần mềm được hỗ trợ bởi chat tích hợp nhiều "agent phần mềm" với các vai trò xã hội khác nhau (ví dụ: chuyên viên phân tích yêu cầu, lập trình viên chuyên nghiệp và kỹ sư kiểm thử) hợp tác trong các giai đoạn cốt lõi của vòng đời phần mềm, xem Hình 1. Về mặt kỹ thuật, để tạo điều kiện cho giao tiếp hợp tác, ChatDev giới thiệu chuỗi chat để tiếp tục chia nhỏ mỗi giai đoạn thành các nhiệm vụ con nhỏ hơn và dễ quản lý, hướng dẫn giao tiếp đa lượt giữa các vai trò khác nhau để đề xuất và xác thực giải pháp cho mỗi nhiệm vụ con. Ngoài ra, để giảm thiểu ảo giác bất ngờ, một mô hình giao tiếp được gọi là loại bỏ ảo giác giao tiếp được thiết kế, trong đó các agent yêu cầu thông tin chi tiết hơn trước khi phản hồi trực tiếp và sau đó tiếp tục vòng giao tiếp tiếp theo dựa trên những chi tiết này.

### 3.1 Chuỗi Chat

Mặc dù LLM cho thấy sự hiểu biết tốt về ngôn ngữ tự nhiên và lập trình, việc chuyển đổi hiệu quả các yêu cầu văn bản thành phần mềm chức năng trong một bước duy nhất vẫn là thách thức đáng kể. Do đó ChatDev áp dụng các nguyên tắc cốt lõi của mô hình thác nước, sử dụng chuỗi chat (C) với các giai đoạn tuần tự (P), mỗi giai đoạn bao gồm các nhiệm vụ con tuần tự (T). Cụ thể, ChatDev phân đoạn quá trình phát triển phần mềm thành ba giai đoạn tuần tự: thiết kế, lập trình và kiểm thử. Giai đoạn lập trình được chia nhỏ thêm thành các nhiệm vụ con viết code và hoàn thiện, và giai đoạn kiểm thử được phân đoạn thành review code (kiểm thử tĩnh) và kiểm thử hệ thống (kiểm thử động), như được minh họa trong Hình 2. Trong mỗi nhiệm vụ con, hai agent, mỗi agent có vai trò chuyên biệt riêng (ví dụ: reviewer có kỹ năng xác định vòng lặp vô hạn và lập trình viên giỏi thiết kế GUI), thực hiện chức năng của một người hướng dẫn (I) và một trợ lý (A). Agent hướng dẫn khởi xướng hướng dẫn, điều hướng (→) cuộc đối thoại hướng tới việc hoàn thành nhiệm vụ con, trong khi agent trợ lý tuân theo những hướng dẫn này và phản hồi với (;) các giải pháp phù hợp. Họ tham gia vào một cuộc đối thoại đa lượt (C), làm việc hợp tác cho đến khi đạt được sự đồng thuận, trích xuất (τ) các giải pháp có thể từ văn bản (ví dụ: định nghĩa một điểm chức năng phần mềm) đến code (ví dụ: tạo phiên bản ban đầu của mã nguồn), cuối cùng dẫn đến việc hoàn thành nhiệm vụ con. Toàn bộ quá trình giải quyết nhiệm vụ dọc theo quy trình làm việc agentic có thể được công thức hóa như:

C=⟨P1,P2, . . . ,P|C|⟩
Pi=⟨T1,T2, . . . ,T|Pi|⟩
Tj=τ
C(I,A)
C(I,A) =⟨I → A ,A;I⟩⟲(1)

Thiết kế giao tiếp hai agent đơn giản hóa việc giao tiếp bằng cách tránh các topology đa agent phức tạp, làm gọn hiệu quả quá trình đạt được sự đồng thuận (Yin et al., 2023; Chen et al., 2023b). Sau đó, các giải pháp từ các nhiệm vụ trước đó phục vụ như cầu nối đến giai đoạn tiếp theo, cho phép chuyển tiếp mượt mà giữa các nhiệm vụ con. Cách tiếp cận này tiếp tục cho đến khi tất cả nhiệm vụ con được hoàn thành. Đáng chú ý là cấu trúc kiểu chuỗi đơn giản về mặt khái niệm nhưng mạnh mẽ thực nghiệm hướng dẫn các agent về việc giao tiếp gì, thúc đẩy hợp tác và liên kết mượt mà các nhiệm vụ con ngôn ngữ tự nhiên và ngôn ngữ lập trình. Nó cũng cung cấp cái nhìn minh bạch về toàn bộ quá trình phát triển phần mềm, cho phép kiểm tra các giải pháp trung gian và hỗ trợ xác định các vấn đề có thể có.

**Agentization** Để nâng cao chất lượng và giảm can thiệp của con người, ChatDev triển khai kỹ thuật prompt engineering chỉ diễn ra ở đầu mỗi vòng nhiệm vụ con. Ngay khi giai đoạn giao tiếp bắt đầu, người hướng dẫn và trợ lý sẽ giao tiếp với nhau trong một vòng lặp tự động, tiếp tục trao đổi này cho đến khi nhiệm vụ kết thúc. Tuy nhiên, việc đơn giản trao đổi phản hồi không thể đạt được giao tiếp đa vòng hướng nhiệm vụ hiệu quả, vì nó chắc chắn phải đối mặt với những thách thức đáng kể bao gồm lật vai trò, lặp lại hướng dẫn và phản hồi giả. Kết quả là, có sự thất bại trong việc thúc đẩy tiến bộ của giao tiếp hiệu quả và cản trở việc đạt được các giải pháp có ý nghĩa. Do đó ChatDev sử dụng cơ chế khởi tạo prompting (Li et al., 2023a) để khởi xướng, duy trì và kết thúc giao tiếp của các agent nhằm đảm bảo quy trình làm việc mạnh mẽ và hiệu quả. Cơ chế này bao gồm prompt hệ thống người hướng dẫn PI và prompt hệ thống trợ lý PA. Các prompt hệ thống cho cả hai vai trò hầu hết đối xứng, bao gồm tổng quan và mục tiêu của nhiệm vụ con hiện tại, vai trò chuyên biệt, công cụ bên ngoài có thể truy cập, giao thức giao tiếp, điều kiện kết thúc và các ràng buộc hoặc yêu cầu để tránh hành vi không mong muốn. Sau đó, một người hướng dẫn I và một trợ lý A được khởi tạo bằng cách thôi miên LLM thông qua PI và PA:

I=ρ(LLM, PI),A=ρ(LLM, PA)(2)

trong đó ρ là thao tác tùy chỉnh vai trò, được triển khai thông qua gán thông điệp hệ thống.

**Bộ nhớ** Lưu ý rằng độ dài ngữ cảnh hạn chế của LLM thông thường thường hạn chế khả năng duy trì lịch sử giao tiếp hoàn chỉnh giữa tất cả agent và giai đoạn. Để giải quyết vấn đề này, dựa trên bản chất của chuỗi chat, chúng tôi phân đoạn tương ứng bộ nhớ ngữ cảnh của các agent dựa trên các giai đoạn tuần tự của họ, dẫn đến hai loại bộ nhớ khác biệt về chức năng: bộ nhớ ngắn hạn và bộ nhớ dài hạn. Bộ nhớ ngắn hạn được sử dụng để duy trì tính liên tục của cuộc đối thoại trong một giai đoạn duy nhất, trong khi bộ nhớ dài hạn được tận dụng để bảo tồn nhận thức ngữ cảnh qua các giai đoạn khác nhau.

Chính thức, bộ nhớ ngắn hạn ghi lại những phát ngôn của agent trong giai đoạn hiện tại, hỗ trợ ra quyết định nhận thức ngữ cảnh. Tại thời điểm t trong giai đoạn Pi, chúng tôi sử dụng Ii
t để đại diện cho hướng dẫn của người hướng dẫn và Ai
t cho phản hồi của trợ lý. Bộ nhớ ngắn hạn M thu thập các phát ngôn đến thời điểm t như:

Mi
t=⟨(Ii
1,Ai
1),(Ii
2,Ai
2), . . . , (Ii
t,Ai
t)⟩(3)

Ở bước thời gian tiếp theo t+ 1, người hướng dẫn sử dụng bộ nhớ hiện tại để tạo hướng dẫn mới Ii
t+1, sau đó được truyền đến trợ lý để tạo phản hồi mới Ai
t+1. Bộ nhớ ngắn hạn cập nhật lặp đi lặp lại cho đến khi số lần giao tiếp đạt đến giới hạn trên |Mi|:

Ii
t+1=I(Mi
t),Ai
t+1=A(Mi
t,Ii
t+1)
Mi
t+1=Mi
t∪(Ii
t+1,Ai
t+1)(4)

Để nhận thức các cuộc đối thoại qua các giai đoạn trước, chuỗi chat chỉ truyền các giải pháp từ các giai đoạn trước đó như bộ nhớ dài hạn ˜M, tích hợp chúng ở đầu giai đoạn tiếp theo và cho phép truyền qua giai đoạn của các cuộc đối thoại dài:

Ii+1
1=˜Mi∪Pi+1
I,˜Mi=i[
j=1τ(Mj
|Mj|)(5)

trong đó P tượng trưng cho một prompt được xác định trước xuất hiện duy nhất ở đầu mỗi giai đoạn.

Bằng cách chỉ chia sẻ các giải pháp của mỗi nhiệm vụ con thay vì toàn bộ lịch sử giao tiếp, ChatDev giảm thiểu nguy cơ bị choáng ngợp bởi quá nhiều thông tin, tăng cường tập trung vào mỗi nhiệm vụ và khuyến khích hợp tác có mục tiêu hơn, đồng thời tạo điều kiện cho tính liên tục ngữ cảnh qua giai đoạn.

### 3.2 Loại bỏ Ảo giác Giao tiếp

Ảo giác LLM biểu hiện khi các mô hình tạo ra đầu ra vô nghĩa, không chính xác về mặt thực tế hoặc không chính xác (Dhuliawala et al., 2023; Zhang et al., 2023b). Vấn đề này đặc biệt đáng lo ngại trong phát triển phần mềm, nơi ngôn ngữ lập trình đòi hỏi cú pháp chính xác - việc thiếu thậm chí một dòng duy nhất có thể dẫn đến lỗi hệ thống. Chúng tôi đã quan sát thấy rằng LLM thường tạo ra ảo giác lập trình, bao gồm các vấn đề tiềm ẩn như triển khai không đầy đủ, code không thể thực thi và sự không nhất quán không đáp ứng yêu cầu. Ảo giác lập trình thường xuất hiện khi trợ lý gặp khó khăn trong việc tuân theo hướng dẫn một cách chính xác, thường do tính mơ hồ và tổng quát của một số hướng dẫn nhất định đòi hỏi nhiều điều chỉnh, khiến các agent khó đạt được sự tuân thủ đầy đủ. Lấy cảm hứng từ điều này, chúng tôi giới thiệu loại bỏ ảo giác giao tiếp, khuyến khích trợ lý chủ động tìm kiếm các gợi ý chi tiết hơn từ người hướng dẫn trước khi đưa ra phản hồi chính thức.

Cụ thể, một mô hình giao tiếp vanilla giữa trợ lý và người hướng dẫn tuân theo định dạng hướng dẫn-phản hồi đơn giản:

⟨I → A ,A;I⟩⟲ (6)

Ngược lại, cơ chế loại bỏ ảo giác giao tiếp của chúng tôi có một "đảo vai trò" có chủ ý, nơi trợ lý đảm nhận vai trò giống như người hướng dẫn, chủ động tìm kiếm thông tin cụ thể hơn (ví dụ: tên chính xác của một dependency bên ngoài và class liên quan của nó) trước khi đưa ra phản hồi kết luận. Sau khi người hướng dẫn cung cấp gợi ý sửa đổi cụ thể, trợ lý tiến hành thực hiện tối ưu hóa chính xác:

⟨I → A ,⟨A → I ,I;A⟩⟲,A;I⟩⟲(7)

Vì cơ chế này giải quyết một vấn đề cụ thể tại một thời điểm, nó đòi hỏi nhiều vòng giao tiếp để tối ưu hóa các vấn đề tiềm ẩn khác nhau. Mô hình giao tiếp hướng dẫn các agent về cách giao tiếp, cho phép trao đổi thông tin chi tiết hơn để tối ưu hóa giải pháp hiệu quả, điều này thực tế hỗ trợ giảm ảo giác lập trình.

## 4 Đánh giá

**Baseline** Chúng tôi chọn một số phương pháp phát triển phần mềm dựa trên LLM đại diện làm baseline. GPT-Engineer (Osika, 2023) là một phương pháp single-agent cơ bản trong các agent phần mềm được điều khiển bởi LLM với sự hiểu biết chính xác về yêu cầu nhiệm vụ và ứng dụng lý luận một bước, làm nổi bật hiệu quả của nó trong việc tạo giải pháp phần mềm chi tiết ở cấp độ repository. MetaGPT (Hong et al., 2023) là một framework tiên tiến phân bổ các vai trò cụ thể cho các agent phần mềm được điều khiển bởi LLM khác nhau và kết hợp các quy trình vận hành tiêu chuẩn để cho phép sự tham gia đa agent. Trong mỗi bước, các agent với vai trò cụ thể tạo ra giải pháp bằng cách tuân theo các hướng dẫn tĩnh được định nghĩa trước bởi các chuyên gia con người.

**Bộ dữ liệu** Lưu ý rằng, hiện tại, không có bộ dữ liệu có thể truy cập công khai chứa các mô tả văn bản về yêu cầu phần mềm trong bối cảnh phát triển phần mềm được điều khiển bởi agent. Để đạt được mục tiêu này, chúng tôi đang tích cực làm việc để phát triển một bộ dữ liệu toàn diện cho các mô tả yêu cầu phần mềm, mà chúng tôi gọi là SRDD (Software Requirement Description Dataset). Dựa trên công trình trước đây (Li et al., 2023a), chúng tôi sử dụng các mô tả phần mềm hiện có làm ví dụ ban đầu, sau đó được phát triển thêm thông qua một quá trình kết hợp tạo tự động dựa trên LLM với tinh chế hậu xử lý được hướng dẫn bởi con người. Kết quả là, bộ dữ liệu này bao gồm các danh mục phần mềm quan trọng từ các nền tảng phổ biến như Ubuntu, Google Play, Microsoft Store và Apple Store. Nó bao gồm 1.200 prompt nhiệm vụ phần mềm đã được phân loại cẩn thận thành 5 lĩnh vực chính: Giáo dục, Công việc, Cuộc sống, Trò chơi và Sáng tạo. Tất cả các lĩnh vực này được chia nhỏ thêm thành 40 danh mục con, và mỗi danh mục con chứa 30 prompt nhiệm vụ độc nhất.

**Metrics** Đánh giá phần mềm cũng là một nhiệm vụ thách thức, đặc biệt khi cố gắng đánh giá nó ở cấp độ toàn diện. Dưới hạn chế hiện tại của tài nguyên benchmark khan hiếm, các metrics tạo code hướng chức năng truyền thống (ví dụ: pass@k) không thể chuyển giao liền mạch cho đánh giá toàn diện của toàn bộ hệ thống phần mềm. Lý do chính cho điều này là thường không thực tế để phát triển các test case thủ công hoặc tự động cho các loại phần mềm khác nhau, đặc biệt là những phần mềm liên quan đến giao diện phức tạp, tương tác người dùng thường xuyên hoặc phản hồi không xác định. Như một chiến lược ban đầu, chúng tôi áp dụng ba chiều cơ bản và khách quan phản ánh các khía cạnh khác nhau của ảo giác lập trình để đánh giá phần mềm được tạo bởi agent, và sau đó tích hợp chúng để tạo điều kiện cho đánh giá toàn diện hơn:

• **Tính đầy đủ** đo lường khả năng của phần mềm trong việc hoàn thành code trong phát triển phần mềm, được định lượng là tỷ lệ phần trăm phần mềm không có bất kỳ đoạn code "placeholder" nào. Điểm cao hơn cho thấy xác suất hoàn thành tự động cao hơn.

• **Khả năng thực thi** đánh giá khả năng của phần mềm chạy đúng trong môi trường biên dịch, được định lượng là tỷ lệ phần trăm phần mềm biên dịch thành công và có thể chạy trực tiếp. Điểm cao hơn cho thấy xác suất thực thi thành công cao hơn.

• **Tính nhất quán** đo lường mức độ code phần mềm được tạo phù hợp với mô tả yêu cầu ban đầu, được định lượng là khoảng cách cosine giữa các embedding ngữ nghĩa của yêu cầu văn bản và code phần mềm được tạo¹. Điểm cao hơn cho thấy mức độ nhất quán lớn hơn với yêu cầu.

• **Chất lượng** là một metric toàn diện tích hợp các yếu tố khác nhau để đánh giá chất lượng tổng thể của phần mềm, được định lượng bằng cách nhân² tính đầy đủ, khả năng thực thi và tính nhất quán. Điểm chất lượng cao hơn gợi ý sự hài lòng tổng thể cao hơn với phần mềm được tạo, ngụ ý nhu cầu can thiệp thủ công thêm thấp hơn.

**Chi tiết triển khai** Chúng tôi chia phát triển phần mềm thành 5 nhiệm vụ con trong 3 giai đoạn, gán các vai trò cụ thể như CEO, CTO, lập trình viên, reviewer và tester. Một nhiệm vụ con sẽ kết thúc và đưa ra kết luận sau hai lần sửa đổi code không thay đổi hoặc sau 10 vòng giao tiếp. Trong quá trình hoàn thiện code, review và testing, loại bỏ ảo giác giao tiếp được kích hoạt. Để dễ dàng xác định giải pháp, trợ lý bắt đầu phản hồi với "<SOLUTION>" khi đạt được sự đồng thuận. Chúng tôi sử dụng ChatGPT-3.5 với nhiệt độ 0.2 và tích hợp Python-3.11.4 để phản hồi. Tất cả baseline trong đánh giá chia sẻ cùng siêu tham số và cài đặt để đảm bảo công bằng.

### 4.1 Hiệu suất Tổng thể

Như được minh họa trong Bảng 1, ChatDev vượt trội so với tất cả các phương pháp baseline qua tất cả metrics, cho thấy mức cải thiện đáng kể. Đầu tiên, sự cải thiện của ChatDev và MetaGPT so với GPT-Engineer chứng minh rằng các nhiệm vụ phức tạp khó giải quyết trong giải pháp một bước. Do đó, việc phân tách rõ ràng vấn đề khó thành nhiều nhiệm vụ con nhỏ hơn, dễ quản lý hơn nâng cao hiệu quả hoàn thành nhiệm vụ. Ngoài ra, so với MetaGPT, ChatDev tăng đáng kể Chất lượng từ 0.1523 lên 0.3953. Tiến bộ này phần lớn được quy cho các agent sử dụng phương pháp giao tiếp hợp tác, bao gồm việc tự động đề xuất và liên tục tinh chế mã nguồn thông qua sự pha trộn của ngôn ngữ tự nhiên và lập trình, thay vì chỉ đưa ra phản hồi dựa trên hướng dẫn được định nghĩa trước bởi con người. Các agent giao tiếp hướng dẫn mỗi nhiệm vụ con hướng tới các giải pháp tích hợp và tự động, vượt qua hiệu quả các hạn chế thường liên quan đến các quy tắc tối ưu hóa được thiết lập thủ công, và cung cấp một framework linh hoạt và thích ứng hơn cho giải quyết vấn đề.

Để hiểu rõ hơn sở thích của người dùng trong các cài đặt thực tế, chúng tôi sử dụng cài đặt được áp dụng bởi Li et al. (2023a), nơi các giải pháp được tạo bởi agent được so sánh theo cặp bởi cả người tham gia và mô hình GPT-4 phổ biến để xác định giải pháp được ưa thích. Bảng 2 cho thấy ChatDev luôn vượt trội so với các baseline khác, với tỷ lệ thắng trung bình cao hơn trong cả đánh giá GPT-4 và con người.

Hơn nữa, thống kê phần mềm được trình bày trong Bảng 3 cho thấy rằng mô hình đa agent, mặc dù chậm hơn và tiêu thụ nhiều token hơn so với phương pháp single-agent, tạo ra số lượng file code lớn hơn và codebase lớn hơn, điều này có thể nâng cao chức năng và tính toàn vẹn của phần mềm. Phân tích các cuộc đối thoại của các agent gợi ý rằng phương pháp giao tiếp đa agent thường dẫn các agent tự động cung cấp các cải tiến chức năng (ví dụ: tạo GUI hoặc tăng độ khó game), do đó có thể dẫn đến việc kết hợp các tính năng có lợi không được chỉ định rõ ràng trong yêu cầu. Xem xét tất cả các yếu tố này, chúng tôi cho rằng các đặc điểm cơ bản của phát triển phần mềm đa agent có ý nghĩa lớn hơn, vượt qua những lo ngại ngắn hạn như thời gian và chi phí kinh tế trong bối cảnh hiện tại.

### 4.2 Nghiên cứu Ablation

Phần này kiểm tra các thành phần hoặc cơ chế chính trong framework hợp tác đa agent của chúng tôi bằng cách loại bỏ các giai đoạn cụ thể trong chuỗi chat, loại bỏ ảo giác giao tiếp hoặc các vai trò được gán cho tất cả agent trong prompt hệ thống của họ. Hình 4 cho thấy giai đoạn hoàn thiện code nâng cao Tính đầy đủ, với testing quan trọng cho Khả năng thực thi. Chất lượng tăng đều qua mỗi bước, gợi ý rằng tối ưu hóa phát triển phần mềm được đạt dần thông qua giao tiếp đa giai đoạn giữa các agent thông minh. Trong khi đó, loại bỏ loại bỏ ảo giác giao tiếp dẫn đến giảm qua tất cả metrics, cho thấy hiệu quả của nó trong việc giải quyết ảo giác lập trình. Thú vị nhất, tác động đáng kể nhất đến hiệu suất xảy ra khi các vai trò của tất cả agent được loại bỏ khỏi prompt hệ thống của họ. Phân tích đối thoại chi tiết cho thấy việc gán vai trò "prefer GUI design" cho lập trình viên dẫn đến mã nguồn được tạo với các triển khai GUI liên quan; khi không có chỉ định vai trò như vậy, nó mặc định triển khai các chương trình chỉ command-line không thân thiện. Tương tự, gán vai trò như "careful reviewer for bug detection" nâng cao cơ hội phát hiện lỗ hổng code; không có vai trò như vậy, phản hồi có xu hướng ở mức cao, dẫn đến điều chỉnh hạn chế bởi lập trình viên. Phát hiện này nhấn mạnh tầm quan trọng của việc gán vai trò trong việc gợi ra phản hồi từ LLM, nhấn mạnh ảnh hưởng đáng kể của hợp tác đa agent đến chất lượng phần mềm.

### 4.3 Phân tích Giao tiếp

Mô hình phát triển phần mềm được điều khiển bởi agent của chúng tôi thúc đẩy các agent hợp tác thông qua giao tiếp hiệu quả để tối ưu hóa giải pháp tự động. Các giai đoạn trong chuỗi chat có các mức độ tham gia khác nhau trong ngôn ngữ tự nhiên và lập trình. Chúng tôi bây giờ phân tích nội dung giao tiếp của họ để hiểu các hiệu ứng ngôn ngữ.

Hình 3 mô tả sự phân chia giao tiếp, với ngôn ngữ tự nhiên ở 57.20%. Trong giai đoạn ngôn ngữ tự nhiên (tức là thiết kế), giao tiếp ngôn ngữ tự nhiên đóng vai trò quan trọng trong thiết kế toàn diện của hệ thống, với các agent tự động thảo luận và thiết kế các khía cạnh như người dùng mục tiêu, quản lý dữ liệu và giao diện người dùng. Các giai đoạn sau thiết kế cho thấy sự pha trộn cân bằng của các hoạt động lập trình, hoàn thiện code và testing, với hầu hết giao tiếp xảy ra trong quá trình review code. Xu hướng này do các agent tự review và sửa code liên tục thúc đẩy phát triển phần mềm; ngược lại, tiến bộ dừng lại khi các cập nhật liên tiếp không cho thấy thay đổi đáng kể, dẫn đến giảm tự nhiên trong giao tiếp review code.

Chúng tôi khám phá các thuộc tính của động lực gỡ lỗi tĩnh trong review code do giao tiếp giữa reviewer và lập trình viên, như được mô tả trong Hình 4. Dữ liệu tiết lộ rằng trong giai đoạn review, reviewer có thể phát hiện các vấn đề khác nhau thông qua tương tác ngôn ngữ. Can thiệp của lập trình viên có thể chuyển đổi một số vấn đề thành những vấn đề khác hoặc trạng thái không cần gợi ý thêm; tỷ lệ tăng của cái sau cho thấy tối ưu hóa phần mềm thành công. Đặc biệt, vấn đề "Method Not Implemented" phổ biến nhất trong giao tiếp giữa reviewer và lập trình viên trong quá trình review code, chiếm 34.85% thảo luận. Vấn đề này thường phát sinh từ yêu cầu văn bản không rõ ràng và việc sử dụng thẻ "placeholder" trong code Python, đòi hỏi điều chỉnh thủ công bổ sung. Hơn nữa, vấn đề "Module Not Imported" thường phát sinh do tạo code bỏ sót các chi tiết quan trọng. Ngoài những vấn đề phổ biến, reviewer thường tập trung vào việc nâng cao độ mạnh mẽ của code bằng cách xác định các ngoại lệ hiếm, class không sử dụng hoặc vòng lặp vô hạn tiềm ẩn.

Tương tự, chúng tôi phân tích giao tiếp tester-programmer trong giai đoạn testing, minh họa động lực gỡ lỗi động trong tương tác đa lượt của họ với phản hồi compiler, như được mô tả trong Hình 5. Khả năng biên dịch thành công ở mỗi bước thường cao hơn so với gặp lỗi, với hầu hết lỗi tồn tại và xác suất thấp hơn chuyển đổi thành các lỗi khác. Lỗi thường xuyên nhất là "ModuleNotFound" (45.76%), tiếp theo là "NameError" và "ImportError" (mỗi cái ở 15.25%). Quan sát này làm nổi bật xu hướng của mô hình bỏ qua các yếu tố cơ bản như câu lệnh "import", nhấn mạnh khó khăn của nó trong việc quản lý các chi tiết phức tạp trong quá trình tạo code. Bên cạnh đó, tester cũng phát hiện các lỗi hiếm hơn như GUI được khởi tạo không đúng, gọi method không chính xác, thiếu dependency file và module không sử dụng. Cơ chế loại bỏ ảo giác giao tiếp hiệu quả giải quyết một số lỗi nhất định, thường dẫn đến "compilation success" sau thay đổi code. Có cơ hội thấp đáng kể quay lại trạng thái lỗi từ biên dịch thành công. Theo thời gian, quá trình giao tiếp đa lượt thống kê cho thấy sự giảm nhất quán trong lỗi, đều đặn hướng tới thực thi phần mềm thành công.

## 5 Kết luận

Chúng tôi đã giới thiệu ChatDev, một framework hợp tác đa agent sáng tạo cho phát triển phần mềm sử dụng nhiều agent được hỗ trợ bởi LLM để tích hợp các giai đoạn phân mảnh của mô hình thác nước thành một hệ thống giao tiếp gắn kết. Nó có chuỗi chat tổ chức mục tiêu giao tiếp và loại bỏ ảo giác để giải quyết ảo giác lập trình. Kết quả chứng minh sự vượt trội của nó và làm nổi bật lợi ích của giao tiếp đa lượt trong tối ưu hóa phần mềm. Chúng tôi hướng đến việc các insight này thúc đẩy các agent LLM hướng tới tính tự động tăng cường và làm sáng tỏ những hiệu ứng sâu sắc của "ngôn ngữ" và vai trò trao quyền của nó qua một phổ ứng dụng rộng hơn.

## 6 Hạn chế

Nghiên cứu của chúng tôi khám phá tiềm năng của các agent tự động hợp tác trong phát triển phần mềm, nhưng một số hạn chế và rủi ro nhất định phải được các nhà nghiên cứu và thực hành xem xét. Đầu tiên, khả năng của các agent tự động trong sản xuất phần mềm có thể bị đánh giá quá cao. Mặc dù họ nâng cao chất lượng phát triển, các agent thường triển khai logic đơn giản, dẫn đến mật độ thông tin thấp. Không có yêu cầu rõ ràng, chi tiết, các agent gặp khó khăn để nắm bắt ý tưởng nhiệm vụ. Ví dụ, hướng dẫn mơ hồ trong phát triển game Snake dẫn đến biểu diễn cơ bản; trong hệ thống quản lý thông tin, các agent có thể truy xuất placeholder key-value tĩnh thay vì cơ sở dữ liệu bên ngoài. Do đó, việc định nghĩa rõ ràng các yêu cầu phần mềm chi tiết là quan trọng. Hiện tại, những công nghệ này phù hợp hơn cho hệ thống nguyên mẫu thay vì ứng dụng thực tế phức tạp. Thứ hai, không giống như tạo code cấp độ chức năng truyền thống, việc tự động hóa đánh giá phần mềm mục đích chung là rất phức tạp. Mặc dù một số nỗ lực đã tập trung vào Human Revision Cost (Hong et al., 2023), xác minh thủ công cho các bộ dữ liệu lớn là không thực tế. Bài báo của chúng tôi nhấn mạnh tính đầy đủ, khả năng thực thi, tính nhất quán và chất lượng tổng thể, nhưng nghiên cứu tương lai nên xem xét các yếu tố bổ sung như chức năng, độ mạnh mẽ, an toàn và thân thiện với người dùng. Thứ ba, so với các phương pháp single-agent, nhiều agent đòi hỏi nhiều token và thời gian hơn, tăng nhu cầu tính toán và tác động môi trường. Nghiên cứu tương lai nên nhằm nâng cao khả năng agent với ít tương tác hơn. Mặc dù có những hạn chế này, chúng tôi tin rằng việc thu hút đối tượng rộng hơn, có trình độ kỹ thuật có thể mở khóa các hướng tiềm năng bổ sung trong hợp tác đa agent được hỗ trợ bởi LLM.

## Lời cảm ơn

Công việc này được hỗ trợ bởi Chương trình R&D Quan trọng Quốc gia của Trung Quốc (Số 2022ZD0116312), Chương trình Nghiên cứu sau Tiến sĩ của CPSF dưới Grant Number GZB20230348, và Chương trình Nghiên cứu Tập trung Tencent Rhino-Bird.
