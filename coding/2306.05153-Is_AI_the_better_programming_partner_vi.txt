AI có phải là đối tác lập trình tốt hơn không?
Lập trình cặp đôi Người-Người so với Lập trình cặp đôi pAIr Người-AI

Qianou Ma∗
Đại học Carnegie Mellon
Pittsburgh, USA
qianouma@cmu.edu

Tongshuang Wu
Đại học Carnegie Mellon
Pittsburgh, USA
sherryw@cs.cmu.edu

Kenneth Koedinger
Đại học Carnegie Mellon
Pittsburgh, USA
koedinger@cmu.edu

TÓM TẮT
Sự xuất hiện của các mô hình ngôn ngữ lớn (LLM) xuất sắc trong việc tạo mã và các sản phẩm thương mại như GitHub's Copilot đã khơi dậy sự quan tâm đến lập trình cặp đôi người-AI (được gọi là "lập trình pAIr") nơi một hệ thống AI cộng tác với một lập trình viên con người. Trong khi lập trình cặp đôi truyền thống giữa con người đã được nghiên cứu rộng rãi, vẫn chưa chắc chắn liệu các phát hiện của nó có thể được áp dụng cho lập trình cặp đôi người-AI hay không. Chúng tôi so sánh lập trình cặp đôi người-người và người-AI, khám phá những điểm tương đồng và khác biệt trong tương tác, đo lường, lợi ích và thách thức. Chúng tôi thấy rằng hiệu quả của cả hai phương pháp đều không nhất quán trong tài liệu (mặc dù các biện pháp được sử dụng cho lập trình pAIr không toàn diện bằng). Chúng tôi tóm tắt các yếu tố điều tiết thành công của lập trình cặp đôi người-người, điều này mang lại cơ hội cho nghiên cứu lập trình pAIr. Ví dụ, chuyên môn không phù hợp làm cho lập trình cặp đôi kém hiệu quả hơn, do đó các trợ lý lập trình AI được thiết kế tốt có thể thích ứng với sự khác biệt về mức độ chuyên môn.

TỪ KHÓA
Lập trình Cặp đôi, LLM, Tương tác Người-AI, Copilot, Lập trình Hỗ trợ AI

1 GIỚI THIỆU
Lập trình cặp đôi được giới thiệu lần đầu vào những năm 1990 như một phần của thực hành phát triển phần mềm Agile [9]. Trong định nghĩa ban đầu, lập trình cặp đôi mô tả thực hành hai lập trình viên làm việc cùng nhau trên cùng một nhiệm vụ sử dụng một máy tính, bàn phím và chuột. Một lập trình viên trong cặp, "người lái," thực hiện việc mã hóa (gõ phím) và triển khai nhiệm vụ, trong khi lập trình viên khác, "người dẫn đường," hỗ trợ trong việc lập kế hoạch, xem xét, gỡ lỗi và đề xuất cải tiến và lựa chọn thay thế. Theo thời gian, lập trình cặp đôi đã phát triển và thích ứng với các bối cảnh và mục đích khác nhau. Hiện tại, nó được sử dụng trong nhiều môi trường khác nhau, bao gồm giáo dục, công nghiệp và phát triển phần mềm nguồn mở [5,83].

Những tiến bộ gần đây trong các mô hình ngôn ngữ lớn tạo mã đã dẫn đến sự phổ biến rộng rãi của các công cụ hỗ trợ lập trình được hỗ trợ bởi AI thương mại như GitHub Copilot [26], tự quảng cáo mình là "lập trình viên cặp đôi AI của bạn." Đối với lập trình pAIr, thay vì hai con người làm việc trên một máy tính, đó là lập trình viên và AI dựa trên LLM làm việc cùng nhau trên cùng một nhiệm vụ. Sự thay đổi trong mô hình đặt ra các câu hỏi: Đối tác lập trình AI có thể so sánh được với một lập trình viên cặp đôi con người không? Chúng có thể áp dụng cho cùng các bối cảnh, có thể đạt được hiệu suất tương tự hoặc tốt hơn, và mọi người có nên tương tác với chúng theo cùng một cách không?

Trong công trình này, chúng tôi đi sâu vào tình trạng hiện tại của nghiên cứu về lập trình cặp đôi người-người và người-AI để khám phá những điểm tương đồng và khác biệt của chúng, và chúng tôi hy vọng sẽ truyền cảm hứng cho các đánh giá và thiết kế tốt hơn của các LLM tạo mã như một lập trình viên pAIr. Chúng tôi bắt đầu bằng việc xem xét bối cảnh ứng dụng, phương pháp và nhiệm vụ cho cả tài liệu lập trình cặp đôi người-người và người-AI (Phần 2), sau đó đi sâu vào so sánh chi tiết các phép đo thành công của chúng (Phần 3), cũng như các điều tiết đóng góp, ví dụ như các yếu tố tương thích cặp đôi như chuyên môn (Phần 4).

Chúng tôi thấy rằng (1) công trình trước đây về cả hai mô hình lập trình cặp đôi đã quan sát thấy kết quả không nhất quán về chất lượng, năng suất, sự hài lòng, học tập và chi phí, (2) lập trình pAIr vẫn chưa phát triển các phép đo toàn diện, và (3) các yếu tố chính cho thành công của pAIr phần lớn chưa được khám phá.

Dựa trên khám phá của chúng tôi, sau đó chúng tôi thảo luận về quan điểm và thách thức của việc mô tả AI như một lập trình viên cặp đôi, và trình bày chi tiết về các cơ hội tương lai để phát triển các thực hành tốt nhất và hướng dẫn cho lập trình cặp đôi người-AI (Phần 5). Đầu tiên, chúng tôi lập luận rằng các yếu tố điều tiết mang lại thách thức cho lập trình cặp đôi người-người (ví dụ, tương thích và giao tiếp) làm bật lên cơ hội cải thiện lập trình cặp đôi người-AI. Có thể hứa hẹn khi khai thác sự khác biệt giữa con người và đối tác AI (ví dụ, mức độ chuyên môn có thể tùy chỉnh hơn và phong cách giao tiếp thích ứng hơn) để thiết kế cho những trải nghiệm lập trình cặp đôi người-AI thành công hơn. Thứ hai, chúng tôi khuyến khích nghiên cứu tương lai khám phá môi trường triển khai tốt nhất cho lập trình cặp đôi người-AI. Trong khi hầu hết các công trình lập trình cặp đôi người-AI đã tập trung vào hỗ trợ các nhà phát triển chuyên nghiệp, chúng tôi hy vọng truyền cảm hứng cho nhiều công trình tương lai hơn trong bối cảnh học tập (hoặc, lập trình cặp đôi sinh viên-AI), và chúng tôi nhấn mạnh các thách thức tiềm ẩn liên quan.

2 BỐI CẢNH, PHƯƠNG PHÁP VÀ NHIỆM VỤ
Lập trình cặp đôi người-người có nguồn gốc từ một thực hành trong ngành công nghiệp kỹ thuật phần mềm [9] và sau đó trở thành một thực hành học tập hợp tác phổ biến trong lớp học [83]. Do đó, trong bài báo này, chúng tôi so sánh lập trình cặp đôi người-người và người-AI trong cả bối cảnh công nghiệp và giáo dục, vì chúng là những bối cảnh phổ biến nhất.

Chúng tôi tuân thủ định nghĩa ban đầu của lập trình cặp đôi người-người để gần gũi với tương tác người-AI trên một thiết bị đơn. Các chế độ tương tác khác tồn tại để so sánh nhóm người và người-AI trong các nhiệm vụ lập trình, chẳng hạn như học tập hợp tác được trung gian bởi máy tính [71] và lập trình cặp đôi phân tán [19], nhưng chúng nằm ngoài phạm vi của bài báo này.

Đối với lập trình cặp đôi người-AI, hầu hết các công trình hiện tại đã đánh giá Copilot sử dụng các nghiên cứu tình huống (ví dụ, [12]) hoặc nghiên cứu thực nghiệm (ví dụ, [84]) với các lập trình viên có kinh nghiệm trong ngành. Tương tự như lập trình cặp đôi người-người, các nhà nghiên cứu đã cố gắng mô phỏng một môi trường phát triển chuyên nghiệp thực tế trong thiết lập nhiệm vụ của họ. Ví dụ, Barke et al. [8] đã mời 20 người tham gia, chủ yếu là sinh viên tiến sĩ và kỹ sư phần mềm, hoàn thành các nhiệm vụ như phát triển Chat Client và Server. Tuy nhiên, thiếu các nghiên cứu quan sát thực địa không xâm lấn như những gì các nghiên cứu lập trình cặp đôi người-người đã làm [65,75].

Một số công trình gần đây đã khám phá việc sử dụng môi trường lập trình dựa trên LLM hoặc Copilot với sinh viên. Ví dụ, Kazemitabaar et al. [39] đã sử dụng một nghiên cứu thực nghiệm có kiểm soát với 69 sinh viên mới bắt đầu từ 10 đến 17 tuổi làm việc trên 45 nhiệm vụ viết mã và sửa đổi mã Python. Tuy nhiên, các công trình hiện tại về lập trình cặp đôi người-AI chủ yếu là trong các thí nghiệm phòng lab, và vẫn thiếu nghiên cứu quy mô lớn [51] và triển khai lớp học [57,87] như trong tài liệu lập trình cặp đôi người-người.

Khi thiết lập các nhóm so sánh, các công trình lập trình pAIr hiện tại đã so sánh cặp đôi người-AI với người-người [35] hoặc người đơn lẻ (ví dụ, so sánh công việc của các nhà phát triển khi họ sử dụng Copilot hoặc công cụ hoàn thành mã mặc định) [84]. Không có nghiên cứu hiện tại nào thiết lập so sánh ba chiều cho người-AI, người-người và người đơn lẻ.

Tóm tắt: So với các công trình lập trình cặp đôi người-người, các nghiên cứu pAIr hiện tại thiếu triển khai thực tế trong không gian làm việc hoặc lớp học, và kích thước mẫu lớn hơn cũng sẽ là mong muốn. Các nhà nghiên cứu của cả hai mô hình lập trình cặp đôi sử dụng các thiết kế nghiên cứu khác nhau để kiểm tra những gì ảnh hưởng đến hiệu quả của lập trình cặp đôi. Trong Phần 3 và Phần 4, chúng tôi so sánh các biến và phép đo mà họ đã sử dụng để tiếp tục khám phá những gì còn thiếu trong các nghiên cứu pAIr.

3 KẾT QUẢ KHÔNG NHẤT QUÁN
Các đánh giá tài liệu về lập trình cặp đôi người-người đã đề xuất các lợi ích khác nhau cũng như các hiệu ứng không nhất quán. Trong bối cảnh công nghiệp, theo Alves De Lima Salge và Berente [5], lập trình cặp đôi cải thiện chất lượng mã, tăng năng suất và nâng cao kết quả học tập. Tuy nhiên, theo Hannay et al. [31], lập trình cặp đôi cải thiện chất lượng và rút ngắn thời gian, nhưng nó tăng nỗ lực, chất lượng cao hơn đi kèm với chi phí nỗ lực đáng kể hơn, và thời gian hoàn thành giảm đi kèm với chất lượng thấp hơn. Trong bối cảnh giáo dục, lập trình cặp đôi mang lại lợi ích bao gồm phần mềm chất lượng cao hơn, sự tự tin của sinh viên trong các giải pháp, điểm bài tập tăng, điểm thi, tỷ lệ thành công/đỗ trong các khóa học giới thiệu và duy trì [29,52,83]. Tất cả các đánh giá về lập trình cặp đôi người-người đều thừa nhận rằng mặc dù phân tích meta có thể hiển thị xu hướng tổng thể và kích thước hiệu ứng đáng kể, các nghiên cứu riêng lẻ có thể báo cáo các kết quả mâu thuẫn (xem ví dụ trong Bảng 1).

Đối với lập trình cặp đôi người-AI, các công trình hiện tại chủ yếu tập trung vào chất lượng, năng suất và sự hài lòng, và đã thể hiện kết quả không nhất quán về chất lượng và năng suất [8, 35,84] (xem ví dụ trong Bảng 1). Ngoài ra, không có đủ nghiên cứu cho một đánh giá toàn diện, vì vậy chúng tôi không thể đưa ra kết luận nào về hiệu quả của lập trình cặp đôi người-AI. Cũng khó so sánh tài liệu lập trình cặp đôi người-người và người-AI, vì chúng khác nhau về các kết quả và phép đo mà chúng áp dụng.

Do đó, trong các hàng trên cùng của Bảng 1, chúng tôi liệt kê các biến kết quả phổ biến nhất trong cả hai tài liệu (chất lượng, năng suất, sự hài lòng, học tập và chi phí) và một số công trình mẫu để thể hiện các kết quả không nhất quán và các biện pháp khác nhau. Chúng tôi trình bày chi tiết về sự đa dạng của các cách đo lường một số kết quả được liệt kê như sau.

3.1 Chất lượng
Trong tài liệu lập trình cặp đôi người-người, chất lượng có thể được đo bằng mật độ khiếm khuyết, thước đo nỗ lực nhận thức, khả năng đọc, khả năng chức năng, số lượng trường hợp thử nghiệm đỗ, độ phức tạp mã, điểm số, ý kiến chuyên gia, v.v. [5, 70, 79].

3.2 Năng suất
Trong tài liệu lập trình cặp đôi người-người, thời gian, nỗ lực và năng suất đều là các loại kết quả "hiệu quả" liên quan đến thời gian và thành tựu. Năng suất có thể được đo bằng số lượng nhiệm vụ hoàn thành trong một đơn vị thời gian cố định, thời gian có thể được đo là lượng thời gian trôi qua hoặc tổng thời gian được sử dụng để hoàn thành một số lượng nhiệm vụ cố định theo một tiêu chuẩn nhất định, và nỗ lực có thể được đo là gấp đôi thời gian, số giờ-người cần thiết, v.v. [5]. Chúng tôi sử dụng năng suất như một biến kết quả tổng hợp của các biện pháp khác nhau, để nhất quán với tài liệu người-AI.

Trong các công trình người-AI hiện tại, một số biện pháp được cho là quá đơn giản hóa như là các chỉ số đánh giá, ví dụ, Imai [35] đã sử dụng số lượng dòng mã được thêm vào như thước đo năng suất; tuy nhiên, bản chất của tương tác với Copilot (tab để chấp nhận đề xuất) có khả năng đóng góp vào nhiều dòng được thêm vào hơn trong điều kiện người-Copilot, và mức độ hợp lệ mà nó đại diện cho khái niệm năng suất là có thể nghi ngờ.

Lưu ý rằng một số nhà nghiên cứu đã kiểm tra năng suất được nhận thức của lập trình viên khi làm việc với Copilot và thấy rằng nó tương quan mạnh nhất với tỷ lệ chấp nhận chung của mã được tạo bởi AI [90]. Điều này không được bao gồm trong Bảng 1 để duy trì nhất quán với tài liệu lập trình cặp đôi người-người, vì năng suất được nhận thức là một biện pháp khác với năng suất thực tế.

3.3 Học tập
Trong tài liệu lập trình cặp đôi người-người, học tập có thể được đánh giá bằng các biện pháp định lượng như điểm bài tập, điểm thi, tỷ lệ đỗ và tỷ lệ duy trì, hoặc các biện pháp định tính về kỹ năng tư duy bậc cao [29, 52, 83].

3.4 Chi phí
Về mặt chi phí, có quan sát rằng những người tham gia gặp khó khăn trong việc hiểu và gỡ lỗi mã được tạo bởi Copilot, điều này dẫn đến giả thuyết rằng lập trình cặp đôi người-AI có thể tốn thêm nỗ lực và cản trở hiệu quả giải quyết nhiệm vụ của lập trình viên [12,84]. Tuy nhiên, Dakhel et al. [21] cho thấy rằng mặc dù mã của Copilot có thể ít chính xác hơn mã của con người, nhưng các lỗi của nó dễ gỡ lỗi hơn các lỗi của con người. Hiện tại không có công trình nào mô tả thực nghiệm chi phí của lập trình cặp đôi người-AI.

Tóm tắt: Tài liệu về lập trình cặp đôi người-người đã cho thấy kết quả không nhất quán trong nhiều biến kết quả, bao gồm chất lượng, năng suất, sự hài lòng, học tập và chi phí. Đối với lập trình cặp đôi người-AI, hoặc chủ yếu là người-Copilot trong bài báo này, vẫn chỉ có ít công trình với các biện pháp không toàn diện, nhưng cũng quan sát thấy kết quả không nhất quán. Chúng tôi tiếp tục xem xét các nguyên nhân tiềm ẩn của kết quả không nhất quán của cả hai chế độ lập trình cặp đôi trong Phần 4.

4 CÁC YẾU TỐ ĐIỀU TIẾT
Trong việc tìm kiếm lời giải thích cho tỷ lệ chi phí-lợi ích của trải nghiệm lập trình cặp đôi người-người, các nhà nghiên cứu đã tìm thấy các yếu tố điều tiết như loại nhiệm vụ & độ phức tạp [31], các yếu tố tương thích như chuyên môn [6,67], giao tiếp [17,24, 65], các yếu tố hợp tác như sự phụ thuộc quá mức và chuyển đổi vai trò [30,70,87], và khó khăn logistics bao gồm lập lịch và đào tạo [11, 31] (như được hiển thị trong các hàng dưới của Bảng 1). Những yếu tố chính này ảnh hưởng đến thành công của lập trình cặp đôi người-người. Nếu chúng hoạt động tốt, lập trình cặp đôi giúp lập trình viên phát hiện lỗi dễ dàng hơn, giải quyết vấn đề nhanh hơn, xem xét mã kỹ lưỡng hơn và tạo ra mã chất lượng cao hơn tổng thể; nó cũng thúc đẩy chia sẻ kiến thức giữa các thành viên trong nhóm, điều này có thể dẫn đến một nhóm gắn kết và hiệu quả hơn. Nếu không, các thách thức như lập lịch và tìm kiếm các cặp phù hợp với phong cách làm việc tương thích thường dẫn đến hiệu quả chi phí thấp trong lập trình cặp đôi, và làm chậm quá trình phát triển nếu có xung đột hoặc bất đồng giữa các đối tác cặp đôi [11, 18].

Đối với các yếu tố điều tiết của lập trình cặp đôi người-AI, phần lớn chưa được khám phá – chúng ta không biết điều gì có thể làm cho lập trình cặp đôi người-AI hiệu quả hơn hoặc kém hiệu quả hơn. Do đó, trong phần này, chúng tôi thảo luận về các yếu tố điều tiết chính được kiểm tra trong tài liệu lập trình cặp đôi người-người, và các ví dụ riêng lẻ về hiệu ứng điều tiết được cung cấp trong Bảng 1.

4.1 Loại Nhiệm vụ & Độ phức tạp
Đối với loại nhiệm vụ và độ phức tạp nhiệm vụ, Chaparro et al. [16] thấy rằng các nhiệm vụ gỡ lỗi dẫn đến ít sự hài lòng và hiệu quả được nhận thức hơn so với các nhiệm vụ hiểu và tái cấu trúc. Hannay et al. [31] thấy rằng thời gian ngắn hơn cho các nhiệm vụ độ phức tạp thấp, với cái giá của kết quả chất lượng thấp hơn, và chất lượng cao hơn khi độ phức tạp cao hơn, nhưng nó đòi hỏi nỗ lực đáng kể hơn. Arisholm et al. [6] thấy rằng hiệu ứng điều tiết của độ phức tạp cũng phụ thuộc vào chuyên môn của cặp đôi, nơi "lợi ích của độ chính xác trên hệ thống phức tạp áp dụng chủ yếu cho người mới, trong khi việc giảm thời gian để thực hiện các nhiệm vụ một cách chính xác trên hệ thống đơn giản áp dụng chủ yếu cho người trung cấp và cao cấp."

4.2 Tương thích
Salleh et al. [70] liệt kê nhiều yếu tố cho tương thích cặp đôi, như tính cách, kỹ năng được nhận thức, kỹ năng thực tế (chuyên môn), lòng tự trọng, giới tính và đạo đức làm việc. Thomas et al. [81] thấy rằng các sinh viên được ghép cặp với mức độ tự tin tương tự tạo ra công việc tốt nhất của họ. Hannay et al. [30] thấy rằng các đặc điểm tính cách Big Five chỉ có giá trị dự đoán khiêm tốn về hiệu suất lập trình cặp đôi, và chuyên môn, độ phức tạp nhiệm vụ và quốc gia có sức mạnh dự đoán mạnh hơn để so sánh. Cũng có vẻ như có bằng chứng rằng phụ nữ hưởng lợi từ lập trình cặp đôi nhiều hơn nam giới [29, 67].

Chuyên môn như một yếu tố tương thích đã được nghiên cứu rộng rãi trong tài liệu lập trình cặp đôi người-người. Ví dụ, các nhà nghiên cứu thấy rằng một cặp sinh viên hoạt động tốt nhất khi chuyên môn của họ tương tự [70] và sinh viên thích được ghép cặp với các đối tác có kỹ năng tương tự [16]. Tuy nhiên, trong ngành, Jensen [36] báo cáo rằng khi cả hai thành viên đều gần cùng mức khả năng và có ý kiến mạnh mẽ, sự hợp tác là phản tác dụng và gây rắc rối.

Trong bối cảnh lập trình giới thiệu, Lui và Chan [45] thấy rằng ghép cặp những người mới bắt đầu dẫn đến cải thiện năng suất lớn hơn so với ghép cặp các chuyên gia. Tuy nhiên, có mối lo ngại về rủi ro của "người mù dẫn người mù" nếu họ không có chuyên gia để tham khảo [4]. Các nhà nghiên cứu cũng thấy rằng sinh viên kém kỹ năng học và thích thú nhiều hơn sinh viên có kỹ năng cao hơn trong lập trình cặp đôi [16,47]. Tuy nhiên, khi khoảng cách kiến thức quá lớn, sinh viên có thể ít hài lòng hơn và lợi ích về chất lượng có thể nhỏ hơn [60]. Chong và Hurlbutt [17] báo cáo rằng một lập trình viên mới bắt đầu hợp tác với một chuyên gia có thể trở nên không tham gia, có lòng tự trọng thấp hơn và sợ làm chậm hoặc làm phiền đối tác có kỹ năng cao hơn của họ [4].

4.3 Giao tiếp
Theo Freudenberg et al. [24], "chìa khóa thành công của lập trình cặp đôi [là] sự phổ biến của cuộc nói chuyện ở mức độ chi tiết trung gian trong các cuộc trò chuyện của lập trình viên cặp đôi." Các nhà nghiên cứu cũng thấy rằng lập trình cặp đôi loại bỏ hoạt động gây xao nhãng và cho phép lập trình viên tập trung vào hoạt động hiệu quả [75], điều này có thể là lý do tại sao giao tiếp tích cực đóng góp vào thành công của lập trình cặp đôi.

Murphy et al. [55] sử dụng phân tích giao dịch để chia nhỏ giao tiếp theo các loại giao dịch khác nhau, và họ thấy rằng cố gắng giải quyết nhiều vấn đề hơn có liên quan đến nhiều giao dịch hoàn thành hơn và thành công gỡ lỗi tương quan với nhiều giao dịch phê bình hơn. Một số công trình khác chỉ ra khía cạnh hỗ trợ xã hội của giao tiếp [17] và hiệu ứng giải thích nơi việc diễn đạt quá trình tư duy làm cho nó rõ ràng hơn [12].

Trong lập trình cặp đôi người-người, lập trình viên dành khoảng 1/3 thời gian chủ yếu tập trung vào giao tiếp [65], điều này buộc họ phải tập trung, hợp lý hóa và giải thích suy nghĩ của mình [31,75]. Trong lập trình cặp đôi người-AI, Mozannar et al. [53] đã cho thấy rằng một lượng thời gian tương tự 1/3 được dành để giao tiếp với Copilot, chẳng hạn như suy nghĩ và xác minh (22,4%) đề xuất của Copilot, điều này có thể sao chép hiệu ứng tự giải thích theo một cách nào đó, và tạo prompt, chiếm 11,56% thời gian. Những hoạt động này có thể được coi là nỗ lực để hiểu và giao tiếp với Copilot. Tuy nhiên, không có người khác để đồng xác minh câu trả lời, và không có nghiên cứu nào đánh giá bản chất giao tiếp của tương tác người-Copilot như lập trình cặp đôi người-người.

4.4 Hợp tác
Cách thức các đối tác hợp tác tốt đã là những yếu tố quan trọng ảnh hưởng đến hiệu quả lập trình cặp đôi [4,79], và hành vi hợp tác và sự phụ thuộc tích cực là chìa khóa thành công lập trình cặp đôi [67].

Hợp tác có thể thất bại theo nhiều cách khác nhau trong một cặp người-người. Ví dụ, vấn đề người ăn theo, nơi toàn bộ khối lượng công việc nằm trên một đối tác trong khi người kia vẫn là người chơi biên, có thể dẫn đến ít sự hài lòng và học tập hơn [57,87]. Trong lập trình cặp đôi người-AI, các nhà giáo dục lo lắng rằng các công cụ tạo mã dễ có sẵn có thể dẫn đến gian lận, và sự phụ thuộc quá mức vào AI có thể cản trở việc học của sinh viên [10]. Tuy nhiên, không có nghiên cứu nào đánh giá chính thức điều này.

Đối với lập trình cặp đôi người-người, có một mô hình hợp tác được đề xuất về chuyển đổi vai trò – hai nhà phát triển phần mềm định kỳ và thường xuyên chuyển đổi giữa viết mã (người lái) và đề xuất mã (người dẫn đường), nhằm đảm bảo rằng cả hai đều tham gia vào nhiệm vụ và giảm bớt tải trọng vật lý và nhận thức mà người lái gánh chịu [5, 65].

Một số nhà nghiên cứu Freudenberg et al. [24] lập luận rằng thành công của lập trình cặp đôi nên được quy cho giao tiếp hơn là "sự khác biệt trong hành vi hoặc tập trung giữa người lái và người dẫn đường," vì họ thấy cả người lái và người dẫn đường đều làm việc ở các mức độ trừu tượng tương tự. Tuy nhiên, các giảng viên vẫn khuyến nghị người lái và người dẫn đường thường xuyên luân phiên vai trò để đảm bảo trải nghiệm học tập công bằng [83].

Trong tương tác người-AI, với khả năng tuyệt vời của Copilot trong việc viết mã bằng các ngôn ngữ khác nhau, một số người đã lập luận rằng Copilot có thể đảm nhận vai trò "người lái" trong lập trình cặp đôi, cho phép một lập trình viên đơn lẻ đảm nhận vai trò "người dẫn đường" và tập trung vào việc hiểu mã ở mức độ cao hơn [35]. Tuy nhiên, mặc dù con người có thể chuyển giao một số việc tra cứu API và chi tiết cú pháp cho Copilot, con người vẫn cần phải nhảy trở lại ghế người lái thường xuyên và linh hoạt chuyển đổi giữa các hoạt động suy nghĩ và viết [53]. Cuối cùng, trách nhiệm duy nhất của lập trình viên con người là hiểu mã ở cấp độ câu lệnh [72].

4.5 Logistics
Các thách thức logistics, bao gồm khó khăn lập lịch, giảng dạy và đánh giá hợp tác cho cặp đôi, và tìm ra trách nhiệm và tính trách nhiệm cá nhân [11,67], có thể thêm vào chi phí quản lý của lập trình cặp đôi người-người [4, 79].

Trong lập trình cặp đôi người-AI, một số người có thể lập luận rằng con người chịu trách nhiệm duy nhất trong cặp người-AI [72], nhưng tính trách nhiệm của những LLM dựa trên AI tạo sinh này vẫn đang được tranh luận [10]. Có thể có các vấn đề logistics mới cho cặp người-AI, chẳng hạn như dạy con người cách hợp tác tốt nhất với Copilot. Cũng có thể có những thách thức độc đáo như trong mọi tình huống tương tác người-AI, chẳng hạn như thiên lệch, niềm tin và hạn chế kỹ thuật – còn nhiều điều cần khám phá. Cần nhiều nghiên cứu hơn để xác minh thực nghiệm và thử nghiệm các hiệu ứng điều tiết của các biến khác nhau trong lập trình cặp đôi người-AI.

Tóm tắt: Tài liệu lập trình cặp đôi người-người đã tìm thấy các yếu tố điều tiết bao gồm loại nhiệm vụ & độ phức tạp, tương thích, giao tiếp, hợp tác và logistics. Tuy nhiên, thiếu kiểm tra sâu về các hiệu ứng điều tiết tiềm ẩn trong các công trình pAIr hiện tại.

5 THẢO LUẬN VÀ CÔNG VIỆC TƯƠNG LAI

5.1 LLM, Lập trình viên pAIr của bạn?
Trước khi xuất hiện các công cụ dựa trên LLM tuyên bố là "lập trình viên cặp đôi AI của bạn [26]," mọi người đã phát triển các hệ thống được hỗ trợ bởi AI để hỗ trợ lập trình viên, chẳng hạn như công cụ hoàn thành mã (ví dụ, Tabnine), hệ thống tái cấu trúc mã và xác minh chính thức, và công cụ tổng hợp và gỡ lỗi mã. Trọng tâm đánh giá chủ yếu là về thiết kế khả năng sử dụng, hiệu quả chi phí và năng suất [53,56], nhưng không phải về tính khả thi của việc sử dụng các công cụ lập trình hỗ trợ AI này như đối tác lập trình cặp đôi.

Với những tiến bộ gần đây trong công nghệ LLM tạo sinh, các công cụ AI thương mại như Copilot có khả năng cung cấp đề xuất và phản hồi mã theo thời gian thực vượt ra ngoài tự động hoàn thành dường như có sự tương đồng gần gũi hơn với một đối tác lập trình cặp đôi [12]. Nhiều nghiên cứu đã đánh giá và phê bình khả năng của Copilot trong việc tạo mã chính xác, hiệu quả [21,58], an toàn [7,62], có thể đọc được [3] và có thể xác minh được [88]. Không nghi ngờ gì, Copilot tạo ra khiếm khuyết và lỗi trong mã được đề xuất của nó, nhưng con người cũng xa mới hoàn hảo. Một lập trình viên không thể và không cần phải hoàn hảo để mang lại lợi ích vào trải nghiệm lập trình cặp đôi, nhưng liệu Copilot có đủ điều kiện làm đối tác lập trình không?

Trong việc trả lời câu hỏi này, các nhà nghiên cứu bắt đầu xem xét động lực tương tác giữa lập trình viên và lập trình viên cặp đôi AI được tuyên bố. Một số nhà nghiên cứu lập luận chống lại việc mô tả lập trình hỗ trợ AI như lập trình cặp đôi. Họ tin rằng phép tương tự với lập trình cặp đôi người-AI khá hời hợt, vì những gì làm cho lập trình cặp đôi người-người hiệu quả (ví dụ, giao tiếp hiệu quả) biến mất trong lập trình cặp đôi người-AI. Theo Sarkar et al. [72], "lập trình hỗ trợ LLM nên được xem như một cách lập trình mới với các thuộc tính và thách thức riêng biệt."

Chúng tôi sử dụng cụm từ "lập trình pAIr người-AI" trong bài báo này, đơn giản vì chúng tôi áp dụng định nghĩa lập trình cặp đôi rằng một cặp làm việc trên cùng một thiết bị và cùng một nhiệm vụ, vì vậy chúng tôi có thể so sánh thuận tiện con người và AI như một đối tác lập trình cặp đôi. Như đã xem xét trong Phần 3 và Phần 4, Copilot và một đối tác con người chia sẻ nhiều kết quả tương tự trong lập trình cặp đôi, nhưng các yếu tố điều tiết cho lập trình cặp đôi người-AI ít được kiểm tra hơn. Chúng tôi tin rằng so sánh này có ý nghĩa vì nó giúp chúng ta rút ra những hiểu biết để tiếp tục cải thiện các công cụ lập trình dựa trên LLM.

Lưu ý rằng trong bài báo này, chúng tôi chủ yếu đề cập đến các nghiên cứu sử dụng VSCode Extension Copilot. Các công cụ như ChatGPT có thể hỗ trợ khía cạnh giao tiếp tốt hơn Copilot [82], và cũng có Bard được phát triển bởi Google [27] và phiên bản thử nghiệm của Copilot Labs bởi Github [25], hỗ trợ nhiều chức năng hơn như sửa lỗi, làm sạch và prompt có thể tùy chỉnh. Những công cụ đó có thể đã cải thiện tương tác lập trình cặp đôi người-AI theo một số cách, vì vậy các nghiên cứu tương lai cũng có thể so sánh qua nhiều công cụ lập trình dựa trên LLM khác nhau.

Có một thách thức khác trong việc mô tả AI như một lập trình viên cặp đôi, theo cuộc tranh luận về việc nhân cách hóa giao diện người dùng [74] và thảo luận đang diễn ra khi AI thể hiện khả năng ngày càng tăng để sao chép hành vi con người [43,80]. Mối lo ngại là AI được nhân cách hóa có thể đánh lạc hướng các nhà thiết kế và lừa dối người dùng, cản trở quyền hành động và trách nhiệm của người dùng, có rủi ro đạo đức và xã hội sâu sắc hơn, và có thể không hiệu quả hơn.

Tuy nhiên, trong tài liệu giáo dục, các nhà nghiên cứu đã cố gắng làm cho các tác nhân cung cấp các tương tác tự nhiên và giống con người với sinh viên, sử dụng các tác nhân có thể dạy được [13,59], các tác nhân sư phạm [44,46,49], tác nhân đối thoại [69,71], v.v. Kuttal et al. [41] đã khám phá sự đánh đổi của việc sử dụng con người so với tác nhân AI như đối tác lập trình cặp đôi. Họ thấy rằng người-người và người-AI dẫn đến kết quả năng suất, chất lượng mã và tự hiệu quả tương tự, và sinh viên "tin tưởng và thể hiện sự khiêm tốn đối với các tác nhân." Họ cũng thấy rằng các tác nhân AI thành công trong việc tạo điều kiện chuyển giao kiến thức trong khi thất bại trong việc cung cấp giải thích hoặc thảo luận logic.

Những tác nhân được nhân cách hóa đó chủ yếu dường như hiệu quả trong việc cải thiện học tập và động lực [32,73]. Một số giải thích các hiệu ứng sử dụng lý thuyết tác nhân xã hội [49], lý thuyết tải trọng nhận thức [44], và các nguyên tắc học tập đa phương tiện liên quan đến tín hiệu xã hội [48]. Chúng ta có thể áp dụng những lý thuyết này cho các tác nhân AI được hỗ trợ bởi LLM như thế nào, và điều gì khác biệt trong bối cảnh công nghiệp so với bối cảnh giáo dục sẽ thú vị để khám phá. Nhiều công trình hơn được chào đón để tạo ra một từ vựng chung cho lĩnh vực này.

5.2 LLM, Một lập trình viên pAIr tốt hơn?
Như đã xem xét trong Phần 3, tài liệu trước đây đã khám phá nhiều biện pháp khác nhau để đánh giá các khía cạnh khác nhau của lập trình cặp đôi người-người, trong khi khám phá hiện tại trong lập trình cặp đôi người-AI khá hạn chế. Murillo và D'Angelo [54] đã đề xuất các chỉ số đánh giá cho các trợ lý viết mã sáng tạo dựa trên LLM trong kỹ thuật phần mềm. Nhiều công trình hơn có thể sử dụng các biện pháp hợp lệ hơn trong tài liệu lập trình cặp đôi người-người để khám phá cách tốt nhất giúp con người và trợ lý lập trình AI dựa trên LLM hợp tác cùng nhau. Cũng sẽ thú vị khi có một thiết lập nghiên cứu với ba điều kiện – người-người, người-AI và người đơn lẻ – làm việc trên cùng một nhiệm vụ.

Tài liệu trước đây đề xuất một số yếu tố chính trong thành công của lập trình cặp đôi người-người, như được tóm tắt trong Bảng 1. Những yếu tố điều tiết gây ra thách thức cho lập trình cặp đôi người-người có thể mang lại cơ hội để khám phá trong lập trình cặp đôi người-AI (Bảng 2). Ví dụ, tự hiệu quả có thể dẫn đến sự khác biệt trong sự hài lòng [81] và giới tính có thể dẫn đến sự khác biệt trong học tập [47], những yếu tố điều tiết tương thích này có ảnh hưởng đến pAIr không? Chúng ta có thể cải thiện kết quả pAIr bằng cách sử dụng những hiểu biết rút ra từ tài liệu người-người không (ví dụ, mô phỏng một đối tác AI với mức độ tự hiệu quả tương tự và cùng giới tính)? Do đó, nói chung, chúng ta có thể đặt các câu hỏi sau cho các công trình tương lai: Những yếu tố này có thể được thực hiện cho lập trình cặp đôi người-AI không? Chúng sẽ làm cho lập trình cặp đôi người-AI hiệu quả hơn, kém hiệu quả hơn hay không có ảnh hưởng, và tại sao?

Loại Nhiệm vụ & Độ phức tạp. Như chúng ta biết từ tài liệu lập trình cặp đôi người-người, một nhiệm vụ hợp tác tốt với độ phức tạp phù hợp là quan trọng, nhưng việc tạo ra hoặc chọn những nhiệm vụ như vậy có thể khó khăn. Trong khi đó, LLM giúp các nhà giáo dục tạo ra các tài liệu giảng dạy một cách hiệu quả như câu hỏi [85], câu hỏi-trả lời [40], phản hồi [20] và gợi ý [61], có thể có chất lượng tương tự như nội dung do con người tạo ra. Cũng có công trình đề xuất thành công sơ bộ trong việc sử dụng LLM để chia nhỏ vấn đề thành các câu hỏi con [78]. Do đó, dựa trên hiểu biết từ tài liệu lập trình cặp đôi người-người và khả năng đã biết của LLM, có một câu hỏi mở để khám phá trong lập trình pAIr người-AI: LLM có thể được cấu hình để tạo ra một loại nhiệm vụ với mục tiêu học tập hợp tác và tùy chỉnh độ phức tạp nhiệm vụ cho một lập trình viên không?

Tương thích - Chuyên môn. Về mặt yếu tố tương thích chuyên môn, tài liệu lập trình cặp đôi cho rằng việc ghép các đối tác với mức độ chuyên môn tương tự có thể là tốt nhất trong việc thúc đẩy năng suất và học tập [5,16, 31]. Các nghiên cứu đánh giá cho thấy rằng các mô hình dựa trên GPT3 có thể là một sinh viên trên trung bình trong lớp học CS1 [22,68] và hiệu suất của nó trở nên tệ hơn khi mã trở nên phức tạp hơn [89]. GPT4 thậm chí còn làm tốt hơn trong việc giải quyết các vấn đề lập trình giới thiệu và cơ bản (mặc dù độ chính xác của nó vẫn không thể so sánh với một nhà phát triển trong thực tế) [14]. Chúng ta cũng có thể cố ý tạo ra lỗi và để các mô hình phạm sai lầm [38], vì vậy có khả năng, chúng ta có thể tạo ra một đối tác AI với mức độ kỹ năng tương tự với sinh viên mới bắt đầu. Các công trình tương lai có thể kiểm tra cách cấu hình AI để thích ứng với mức độ kỹ năng của sinh viên và liệu nó có hiệu quả hay không.

Các Yếu tố Tương thích Khác. Các nhà nghiên cứu đã khám phá cách để LLM tạo ra tương tác dựa trên một nhân vật được thiết kế và sao chép hành vi con người một cách hợp lý [1,34], và trong giáo dục, Cao [15] để LLM tương tác với sinh viên trong khi đóng vai như các nhân vật hư cấu khác nhau để giúp giảm lo lắng của sinh viên và tăng động lực. Có khả năng cá nhân hóa một đối tác AI với các đặc điểm tính cách khác nhau hoặc các yếu tố tương thích cặp đôi khác như giới tính, dân tộc và lòng tự trọng mà Salleh et al. [70] đề xuất. Có thể, nó có thể được sử dụng để tăng động lực và/hoặc sự tham gia của lập trình viên, nhưng mức độ hữu ích của nó đối với lập trình cặp đôi người-AI vẫn chưa được kiểm tra.

Giao tiếp. Đối với giao tiếp, chúng ta biết khía cạnh xã hội của cuộc trò chuyện quan trọng [17] và một số loại diễn ngôn có thể hiệu quả hơn để tạo điều kiện gỡ lỗi [55] trong lập trình cặp đôi người-người. Do đó, vì các công cụ dựa trên LLM như ChatGPT có thể mô phỏng tương tác xã hội, sẽ thú vị khi khám phá nếu LLM có thể hỗ trợ các loại giao tiếp khác nhau, các thành phần khác nhau của giao tiếp có thể được sao chép trong một trợ lý lập trình dựa trên LLM không, và liệu nó có hiệu quả hay không.

Hợp tác. Về mặt hợp tác, thường được báo cáo rằng việc tạo ra hợp tác mượt mà là thách thức trong cả bối cảnh công nghiệp [11] và giáo dục [57,87]. Với việc vấn đề người ăn theo làm giảm hiệu quả của lập trình cặp đôi [57] và chuyển đổi vai trò thường xuyên có khả năng giảm bớt tải trọng nhận thức của người lái và đảm bảo kết quả học tập cân bằng [5,83], sẽ thú vị khi khám phá nếu AI dựa trên LLM có thể được cấu hình để tránh hỗ trợ quá mức, hỗ trợ chuyển đổi vai trò, và cách tốt nhất để hỗ trợ cặp người-AI hợp tác.

Logistics. Về mặt logistics, việc sử dụng Copilot như một đối tác lập trình có thể có lợi thế đặc biệt là tránh logistics lập lịch, nhưng cũng có mối lo ngại về tính trách nhiệm cần được giải quyết [12,22]. Nói chung, sẽ có rủi ro đạo đức và tác động xã hội của việc sử dụng AI trong lập trình cặp đôi tại nơi làm việc và trong bối cảnh giáo dục, điều này cần kiểm tra sâu hơn trong các công trình tương lai.

5.3 LLM, Lập trình viên pAIr của sinh viên?
Như đã xem xét trong Phần 2, hầu hết các nghiên cứu hiện tại đánh giá hiệu quả của Copilot được thực hiện với các nhà phát triển phần mềm có kinh nghiệm. Nếu chúng ta ước tính khả năng giải quyết vấn đề của Copilot như một sinh viên trung bình trong các lớp lập trình giới thiệu, việc đánh giá hiệu suất của nó khi ghép cặp với một nhà phát triển phần mềm chuyên nghiệp có nhiều chuyên môn hơn có thể không mang lại đủ lợi ích cho người chuyên nghiệp. Do đó, làm việc với khả năng hiện tại của LLM, có vẻ như thiết lập lập trình cặp đôi sinh viên-AI sẽ là hứa hẹn nhất để khám phá, vì vậy câu hỏi tiếp theo là: chúng ta nên hỗ trợ lập trình cặp đôi sinh viên-AI như thế nào cho tốt nhất?

Ưu tiên lại kỹ năng lập trình. Đồng làm việc với AI đòi hỏi một bộ kỹ năng đặc biệt, và công việc tương lai có thể khám phá cách hỗ trợ sinh viên phát triển tốt hơn những kỹ năng quan trọng này. Bird et al. [12] lập luận rằng sự phổ biến của các trợ lý lập trình dựa trên LLM sẽ dẫn đến tầm quan trọng ngày càng tăng của việc xem xét mã như một kỹ năng cho các nhà phát triển. Tuy nhiên, trong cuộc phỏng vấn của Perscheid et al. [64], không ai trong số các nhà phát triển chuyên nghiệp nhớ được đào tạo về gỡ lỗi ở trường. Đã có tài liệu phong phú về hướng dẫn gỡ lỗi và kiểm thử [2,50,77], nhưng các thách thức logistics như thiếu thời gian giảng dạy vẫn tồn tại [23,50], và các nhà giáo dục cần chuẩn bị tốt hơn cho sinh viên với các kỹ năng gỡ lỗi và kiểm thử cần thiết để làm việc với AI không đáng tin cậy.

Tích hợp các framework AIEd. Về mặt lý thuyết, Holstein et al. [33] đã phát triển một framework để ánh xạ các cách tăng cường lẫn nhau giữa con người và AI trong giáo dục, ví dụ, bằng cách tăng cường giải thích, hành động, khả năng mở rộng và năng lực. Các công trình tương lai có thể sử dụng các lý thuyết hiện có trong không gian giáo dục AI để cải thiện thiết kế của đối tác lập trình pAIr AI, và điều tra thêm nếu LLM mang lại trọng tâm và khả năng mới cho các framework giáo dục người-AI trước đây.

Hỗ trợ giải thích và giao tiếp với sinh viên. Các nỗ lực trước đây sử dụng tác nhân AI như đối tác lập trình cặp đôi đã cho thấy một số thành công sơ bộ trong chuyển giao kiến thức và duy trì [28,69], và hạn chế được thảo luận là thiếu thảo luận và giải thích [41]. Ngày nay, khi một tác nhân dựa trên LLM có thể hỗ trợ tương tác tự nhiên hơn và cung cấp giải thích chất lượng tốt trong bối cảnh lập trình giới thiệu [42], sẽ thú vị khi khám phá nếu AI dựa trên LLM có thể giải quyết một số hạn chế được đề cập trong các công trình tác nhân sư phạm và đối thoại trước đây. Các kỹ thuật tự phản ánh và giải thích cũng có thể được áp dụng để bù đắp cho khía cạnh giao tiếp như trong lập trình cặp đôi người-người.

Phù hợp chuyên môn với sinh viên. Như đã thảo luận trong Phần 4, việc phù hợp chuyên môn là một vấn đề phức tạp. Lui và Chan [45] thấy rằng cặp chuyên gia-chuyên gia có thể không có được nhiều lợi thế so với một lập trình viên chuyên gia đơn lẻ, so với cặp mới bắt đầu-mới bắt đầu so với một người mới bắt đầu đơn lẻ. Trong khi đó, việc ghép hai người mới bắt đầu cùng nhau làm dấy lên mối lo ngại về "người mù dẫn người mù," nhưng việc ghép một người mới bắt đầu với một chuyên gia có thể dẫn đến lòng tự trọng thấp hơn của người mới bắt đầu [4]. Với tất cả những phức tạp này, khi nói đến cặp sinh viên-AI và khi chúng ta chỉ quan tâm đến lợi ích học tập của sinh viên, có rất nhiều câu hỏi nghiên cứu để đặt ra. Nếu chúng ta có toàn quyền kiểm soát mức độ kỹ năng được nhận thức của đối tác AI, chúng ta nên cấu hình nó tương tự như sinh viên, có kỹ năng cao hơn một chút, hay tốt hơn nhiều? Liệu có lợi khi có cả tác nhân AI đồng đẳng nhưng cũng có tác nhân AI gia sư để hỗ trợ nếu sinh viên gặp khó khăn?

Tránh hỗ trợ quá mức sinh viên. Đối với người học lập trình, sẽ quan trọng khi cấu hình trợ lý lập trình dựa trên LLM để tránh hỗ trợ quá mức. Trong số ít nghiên cứu kiểm tra tương tác của người mới bắt đầu với Copilot [66] hoặc môi trường lập trình tùy chỉnh dựa trên mô hình tạo mã dựa trên LLM Codex [39]. Prather et al. [66] thấy rằng người mới bắt đầu có những mô hình tương tác độc đáo với Copilot và xu hướng phụ thuộc và tin tưởng vào mã được tạo quá mức. Kazemitabaar et al. [39] thảo luận về các tác động thiết kế bao gồm kiểm soát việc sử dụng quá mức và hỗ trợ người mới bắt đầu hoàn toàn. Cũng có mối lo ngại về tính toàn vẹn học thuật và thay đổi nhận thức về học tập khi các công cụ lập trình dựa trên LLM trở nên dễ tiếp cận với sinh viên [10,66,68], điều này cần khám phá thêm cho lập trình cặp đôi sinh viên-AI.

Tăng cường sự tự tin của sinh viên. Cuối cùng nhưng không kém phần quan trọng, lập trình cặp đôi đã được chứng minh là có lợi cho sinh viên có mức độ tự hiệu quả và tự tin thấp hơn [81] và phụ nữ [47] nhiều hơn, điều này có thể làm cho nó trở thành một công cụ sư phạm để thu hút các nhóm dân số dễ bị tổn thương hoặc ít được đại diện hơn trong CS. Khi AI được giới thiệu trong lập trình cặp đôi, liệu cùng lợi ích có được duy trì? Chúng ta nên trình bày AI khác nhau như thế nào để làm cho nó tương thích với sinh viên có mức độ tự tin khác nhau? Chúng ta giảm thiểu rủi ro của AI không đáng tin cậy nhưng có vẻ có thẩm quyền như thế nào? LLM có thể là một cơ hội để giải quyết một số thách thức hiện tại trong lập trình cặp đôi sinh viên-sinh viên (như được tóm tắt trong Bảng 2), nhưng vẫn còn rất nhiều câu hỏi mở để đặt ra.

6 KẾT LUẬN
Bài báo này đã thảo luận về khái niệm lập trình cặp đôi người-AI (lập trình pAIr). Chúng tôi thấy rằng cả lập trình cặp đôi người-người và người-AI đều có lợi ích và thách thức, nhưng nghiên cứu hiện tại không đưa ra cho chúng ta câu trả lời rõ ràng về hiệu quả của lập trình cặp đôi người-AI. Tài liệu lập trình cặp đôi người-người mang lại những hiểu biết về thiết kế nghiên cứu nào mà các nhà nghiên cứu pAIr nên áp dụng (ví dụ, quan sát thực tế hơn), kết quả và biện pháp nào mà các nhà nghiên cứu pAIr nên sử dụng để đánh giá công việc của họ (ví dụ, sử dụng các phép đo chất lượng và năng suất hợp lệ hơn, và điều tra thêm chi phí), và các yếu tố điều tiết nào mà các nhà nghiên cứu pAIr nên xem xét để phân tích thêm quá trình pAIr và cải thiện thiết kế pAIr (ví dụ, tương thích, giao tiếp, v.v.).

Kết luận, cần các phép đo hợp lệ và toàn diện hơn để đánh giá pAIr, có thể rút ra nhiều so sánh hơn giữa lập trình cặp đôi người-người so với người-AI, và nhiều công trình hơn có thể khám phá cách hỗ trợ tốt nhất lập trình hỗ trợ LLM với những hiểu biết từ tài liệu phong phú về lập trình cặp đôi người-người.
