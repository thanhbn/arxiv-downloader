*Bản thảo
LAYOUT NUWA: KHÁM PHÁ CHUYÊN MÔN BỐ CỤC ẨN CỦA CÁC MÔ HÌNH NGÔN NGỮ LỚN

Zecheng Tang1,2∗ Chenfei Wu2∗ Juntao Li1 Nan Duan2†
1Đại học Soochow 2Microsoft Research Asia
{zctang@stu., ljt}@suda.edu.cn, {chewu,nanduan}@microsoft.com

<svg width="100" height="150">
<rect data-category="title", x=<M>, y=<M>, width=<M>, height=<M>/>
<rect data-category="table", x=<M>, y=<M>, width=<M>, height=<M>/>
<rect data-category="text", x=<M>, y=<M>, width=<M>, height=<M>/>
</svg>

Bố cục đầu ra
Tiêu đề
Bảng
Văn bản
width=100
height=150

Đầu vào
Khởi tạo mã
Kết xuất mã

Hướng dẫn: Tôi muốn tạo bố cục theo phong cách tài liệu.
Vui lòng tạo theo các danh mục tôi cung cấp:

Mô hình Ngôn ngữ Lớn
(CR) (CI)
Hoàn thiện mã (CC)

<svg width="100" height="150">
<rect data-category="title", x="15", y="5", width="70", height="20"/>
<rect data-category="table", x="10", y="30", width="80", height="30"/>
<rect data-category="text", x="10", y="65", width="80", height="80"/>
</svg>

MÃ

Hình 1: Tổng quan về LayoutNUWA, trong đó chúng tôi coi việc tạo bố cục như một nhiệm vụ tạo mã để tăng cường thông tin ngữ nghĩa trong bố cục cũng như tự nhiên khai thác chuyên môn bố cục ẩn của các mô hình ngôn ngữ lớn. Cụ thể, chúng tôi đề xuất phương pháp Điều chỉnh Hướng dẫn Mã (CIT) bao gồm ba mô-đun: 1) mô-đun Khởi tạo Mã (CI) lượng hóa các điều kiện số và khởi tạo chúng như mã HTML với các mặt nạ; 2) mô-đun Hoàn thiện Mã (CC) sử dụng kiến thức của các mô hình ngôn ngữ lớn để hoàn thiện các phần bị che dấu trong mã HTML; 3) mô-đun Kết xuất Mã (CR) trực tiếp kết xuất mã đã hoàn thiện thành bố cục đồ họa cuối cùng.

TÓM TẮT

Tạo bố cục đồ họa, một lĩnh vực nghiên cứu đang phát triển, đóng vai trò quan trọng trong việc thu hút người dùng và nhận thức thông tin. Các phương pháp hiện tại chủ yếu coi việc tạo bố cục như một nhiệm vụ tối ưu hóa số, tập trung vào các khía cạnh định lượng trong khi bỏ qua thông tin ngữ nghĩa của bố cục, chẳng hạn như mối quan hệ giữa các phần tử bố cục. Trong bài báo này, chúng tôi đề xuất LayoutNUWA, mô hình đầu tiên coi việc tạo bố cục như một nhiệm vụ tạo mã để tăng cường thông tin ngữ nghĩa và khai thác chuyên môn bố cục ẩn của các mô hình ngôn ngữ lớn (LLM). Cụ thể hơn, chúng tôi phát triển phương pháp Điều chỉnh Hướng dẫn Mã (CIT) bao gồm ba mô-đun liên kết: 1) mô-đun Khởi tạo Mã (CI) lượng hóa các điều kiện số và khởi tạo chúng như mã HTML với các mặt nạ được đặt chiến lược; 2) mô-đun Hoàn thiện Mã (CC) sử dụng kiến thức định dạng của LLM để điền vào các phần bị che dấu trong mã HTML; 3) mô-đun Kết xuất Mã (CR) chuyển đổi mã đã hoàn thiện thành đầu ra bố cục cuối cùng, đảm bảo quy trình tạo bố cục có thể diễn giải và minh bạch cao, ánh xạ trực tiếp mã thành bố cục trực quan. Chúng tôi đạt được hiệu suất tiên tiến đáng kể (thậm chí cải thiện hơn 50%) trên nhiều bộ dữ liệu, thể hiện khả năng mạnh mẽ của LayoutNUWA. Mã nguồn của chúng tôi có sẵn tại https://github.com/ProjectNUWA/LayoutNUWA.

∗Cả hai tác giả đều đóng góp như nhau cho nghiên cứu này. Trong thời gian thực tập của Zecheng dưới sự hướng dẫn của Chenfei tại MSRA.
†Tác giả liên hệ.

1. GIỚI THIỆU

Bố cục đồ họa, đề cập đến việc tổ chức và định vị các phần tử thiết kế, có ảnh hưởng đáng kể đến cách người dùng tương tác và nhận thức thông tin được trình bày (Lee et al., 2020). Là một lĩnh vực nghiên cứu đang phát triển, việc tạo bố cục (Li et al., 2019; Yang et al., 2020) nhằm mục đích tạo ra các bố cục đa dạng và thực tế để hợp lý hóa quy trình thiết kế và phục vụ các ứng dụng khác nhau, chẳng hạn như giao diện người dùng (Deka et al., 2017; Jiang et al., 2022), cảnh nội thất (Di & Yu, 2021; Feng et al., 2023), bố cục tài liệu (Zheng et al., 2019; Yamaguchi, 2021), slide thuyết trình (Fu et al., 2022), v.v.

Các phương pháp hiện tại (Jyothi et al., 2019; Li et al., 2019; Arroyo et al., 2021; Zhang et al., 2023a) coi mỗi phần tử trong bố cục như các bộ số (c, x, y, w, h), trong đó c chỉ danh mục phần tử, x và y biểu thị tọa độ, w và h tương ứng với chiều rộng và chiều cao. Ví dụ, các phương pháp dựa trên tự hồi quy (Yang et al., 2020; Jiang et al., 2022) coi bộ như một chuỗi và dự đoán các giá trị của chúng tuần tự, trong khi các phương pháp dựa trên khuếch tán (Chai et al., 2023; Inoue et al., 2023) coi bộ như một tổng thể và dự đoán các giá trị của chúng thông qua phương pháp khử nhiễu. Mặc dù áp dụng các mô hình tạo khác nhau, tất cả các phương pháp này về cơ bản coi việc tạo bố cục như một nhiệm vụ tối ưu hóa bộ số. Tuy nhiên, việc biểu diễn bố cục như các bộ số có những hạn chế, vì nó chủ yếu tập trung vào việc nắm bắt các khía cạnh định lượng của bố cục, chẳng hạn như vị trí và kích thước, trong khi thiếu thông tin ngữ nghĩa, ví dụ, thuộc tính của mỗi giá trị số, điều này có thể hạn chế khả năng của mô hình trong việc nắm bắt thông tin bố cục phức tạp và phong phú hơn.

Một câu hỏi sâu sắc xuất hiện từ các hạn chế của các phương pháp hiện tại trong việc tạo bố cục: liệu chúng ta có thể tích hợp thông tin ngữ nghĩa vào quy trình tạo bố cục để làm phong phú biểu diễn tổng thể và nâng cao chất lượng của các bố cục được tạo? Việc giải quyết câu hỏi này mang lại hai lợi ích chính: thứ nhất, nó tăng cường sự hiểu biết về mối quan hệ giữa các phần tử bố cục khác nhau, và thứ hai, nó cho phép chúng ta khai thác các khả năng ngữ nghĩa của LLM (Tang et al., 2023), dẫn đến các bố cục phức tạp và liên quan đến ngữ cảnh hơn cho nhiều ứng dụng (Jiang et al., 2022). Xem xét bản chất logic cố hữu của bố cục, bao gồm các mối quan hệ phụ thuộc giữa các phần tử bố cục, và thực tế là mỗi bố cục đồ họa có thể được biểu diễn với chuỗi cấu trúc cố định, các ngôn ngữ mã xuất hiện như một thay thế hứa hẹn. Các ngôn ngữ mã có thể bao hàm thông tin số và ngữ nghĩa trong khi sở hữu nền tảng logic mạnh mẽ (Chen et al., 2022), do đó có thể thu hẹp khoảng cách giữa các phương pháp hiện tại và biểu diễn được làm phong phú mong muốn.

Dựa trên các quan sát trên, chúng tôi đề xuất LayoutNUWA, một mô hình đột phá cách mạng hóa nhiệm vụ tạo bố cục bằng cách coi nó như một nhiệm vụ tạo mã. Phương pháp sáng tạo của chúng tôi được thiết kế không chỉ để tăng cường thông tin ngữ nghĩa trong bố cục mà còn liền mạch tận dụng chuyên môn của LLM trong quy trình tạo bố cục. Để đạt được điều này, chúng tôi thiết kế phương pháp Điều chỉnh Hướng dẫn Mã (CIT) bao gồm ba mô-đun liên kết: 1) đầu tiên, mô-đun Khởi tạo Mã (CI) lượng hóa các điều kiện số và khởi tạo chúng như mã HTML với các mặt nạ được đặt chiến lược, mở đường cho các bố cục có ý nghĩa và mạch lạc hơn; 2) thứ hai, mô-đun Hoàn thiện Mã (CC) sử dụng kiến thức định dạng của LLM để điền vào các phần bị che dấu trong mã HTML, từ đó khai thác sức mạnh của LLM để cải thiện độ chính xác và tính nhất quán của các bố cục được tạo; 3) cuối cùng, mô-đun Kết xuất Mã (CR) chuyển đổi mã đã hoàn thiện thành đầu ra bố cục cuối cùng, đảm bảo quy trình tạo bố cục có thể diễn giải và minh bạch cao, ánh xạ trực tiếp mã thành bố cục trực quan.

Các thí nghiệm trên nhiều nhiệm vụ tạo bố cục có điều kiện trên ba bộ dữ liệu, tức là Rico (Deka et al., 2017), PubLayNet (Zhong et al., 2019) và Magazine (Zheng et al., 2019), làm nổi bật sự ưu việt của phương pháp chúng tôi, trong đó LayoutNUWA có thể vượt trội đáng kể so với tất cả các baseline và cho thấy kết quả tương đương với các mô hình cụ thể cho từng nhiệm vụ. Hơn nữa, LayoutNUWA có thể đạt được ít nhất 50% cải thiện hiệu suất so với baseline tốt nhất trên các bộ dữ liệu ít tài nguyên, ví dụ như bộ dữ liệu Magazine. Tóm lại, các đóng góp của chúng tôi có thể được phác thảo như sau:

• Chúng tôi giới thiệu LayoutNUWA, mô hình đầu tiên coi nhiệm vụ tạo bố cục như một nhiệm vụ tạo mã, hiệu quả khai thác chuyên môn bố cục ẩn của LLM.
• Chúng tôi đề xuất Điều chỉnh Hướng dẫn Mã, trao quyền cho mô hình tuân thủ hướng dẫn và làm phong phú thông tin ngữ nghĩa của bố cục, dẫn đến mã chính xác và chuẩn hóa.
• Chúng tôi đạt được hiệu suất tiên tiến đáng kể trên nhiều bộ dữ liệu, thể hiện khả năng mạnh mẽ của LayoutNUWA.

2. NGHIÊN CỨU LIÊN QUAN

2.1 TẠO BỐ CỤC

Tạo bố cục tự động, một nhiệm vụ quan trọng cho thiết kế đồ họa tự động cho các tình huống khác nhau như bố cục tài liệu (Zheng et al., 2019; Zhong et al., 2019; Yamaguchi, 2021; Fu et al., 2022), poster (Yang et al., 2016; Guo et al., 2021; Li et al., 2023) và giao diện người dùng (Deka et al., 2017), đã được nghiên cứu rộng rãi gần đây. Các phương pháp ban đầu cho việc tạo bố cục bao gồm việc nhúng các quy tắc thiết kế vào các hàm năng lượng được định nghĩa thủ công (O'Donovan et al., 2014; O'Donovan et al., 2015), trong khi các phương pháp khác đã khám phá các mô hình tạo như GAN và VAE để tạo bố cục đồ họa và cảnh số, bao gồm LayoutGAN (Li et al., 2019), LayoutVAE (Jyothi et al., 2019), LayoutGAN++ (Kikuchi et al., 2021), NDN (Lee et al., 2020) và READ (Patil et al., 2020).

Ngoài chúng, các phương pháp dựa trên transformer sử dụng cơ chế tự chú ý để học các mối quan hệ ngữ cảnh số giữa các phần tử và đạt được việc hoàn thiện bố cục dựa trên đầu vào bố cục một phần (Yang et al., 2020; Kong et al., 2022; Feng et al., 2023). Gần đây, với sự phổ biến của các mô hình khuếch tán, một số công trình cũng đã áp dụng mô hình khuếch tán để giải quyết phạm vi rộng hơn của việc tạo bố cục có điều kiện (Chai et al., 2023; Inoue et al., 2023; Zhang et al., 2023a; Hui et al., 2023; Cheng et al., 2023). Tuy nhiên, các phương pháp hiện tại chủ yếu coi việc tạo bố cục như một nhiệm vụ tối ưu hóa số, tập trung vào các khía cạnh định lượng trong khi bỏ qua thông tin ngữ nghĩa của bố cục, chẳng hạn như mối quan hệ giữa các phần tử bố cục. Khác với các công trình trước đây, chúng tôi chuyển đổi nhiệm vụ tạo bố cục thành nhiệm vụ tạo mã để trực tiếp tạo bố cục bằng ngôn ngữ mã và do đó sử dụng kiến thức phong phú từ LLM, có thể cải thiện đáng kể FID 50% trong bộ dữ liệu Magazine trong § 4.2.

2.2 ĐIỀU CHỈNH HƯỚNG DẪN

Điều chỉnh hướng dẫn đại diện cho quá trình tinh chỉnh LLM trên bộ dữ liệu hướng dẫn theo cách có giám sát, thu hẹp khoảng cách giữa cách dự đoán từ tiếp theo của LLM và mục tiêu của người dùng là có LLM tuân thủ hướng dẫn của con người (Zhang et al., 2023c). Các nỗ lực ban đầu về điều chỉnh hướng dẫn bao gồm đào tạo đa nhiệm vụ với các mô tả được viết thủ công về các nhiệm vụ khác nhau (Mishra et al., 2021; Wei et al., 2021; Sanh et al., 2021; Xu et al., 2022; Muennighoff et al., 2022; Iyer et al., 2022) hoặc các hướng dẫn được tạo tự động (Wang et al., 2022; Gu et al., 2022; Zhang et al., 2023b; Honovich et al., 2022a;b). Ngoài việc kiểm soát LLM thông qua hướng dẫn đầu vào, Nye et al. (2021) cho thấy LLM có thể xử lý các nhiệm vụ phức tạp hơn bằng cách tạo các bước trung gian và Wei et al. (2022) đề xuất kỹ thuật chuỗi suy nghĩ bằng cách làm phong phú hướng dẫn với các mô tả bước lý luận trung gian, trao cho LLM hiệu suất tốt hơn (Wang et al., 2022; Zelikman et al., 2022; Wu et al., 2023; Xu et al., 2023). Tuy nhiên, các phương pháp điều chỉnh hướng dẫn được đề cập ở trên chủ yếu dành cho các nhiệm vụ tạo văn bản và không lý tưởng cho các nhiệm vụ tạo bố cục, bao gồm tối ưu hóa số. Do đó, chúng tôi đề xuất phương pháp điều chỉnh hướng dẫn mã được thiết kế đặc biệt cho nhiệm vụ tạo bố cục. Các thí nghiệm trong § 5.1 chỉ ra rằng hiệu suất giảm đáng kể nếu không áp dụng điều chỉnh hướng dẫn mã.

3. PHƯƠNG PHÁP LUẬN

3.1 CÔNG THỨC BÀI TOÁN

Nhiệm vụ tạo bố cục nhằm mục đích tạo một bố cục được tổ chức tốt S={si}^N_{i=1}, với N biểu thị số lượng phần tử trong bố cục. Mỗi phần tử, si = (ci, xi, yi, wi, hi), bao gồm các thành phần sau: ci là danh mục, xi, yi chỉ vị trí trung tâm, và wi, hi biểu thị chiều rộng và chiều cao tương ứng. Trong nghiên cứu này, chúng tôi tập trung vào nhiệm vụ tạo bố cục có điều kiện, trong đó các thành phần một phần trong si được che dấu bằng M, và bố cục hoàn chỉnh S phải được dự đoán bởi mô hình fθ có điều kiện trên các thành phần còn lại S\M:

S = fθ(S\M) (1)

Các công trình trước đây (Jyothi et al., 2019; Yang et al., 2020; Inoue et al., 2023) coi mỗi phần tử si như một chuỗi các giá trị số, ví dụ (0, 10, 20, 25, 30), và đào tạo mô hình để trực tiếp tạo các giá trị này. Tuy nhiên, phương pháp này bỏ qua thông tin ngữ nghĩa của các thành phần, do đó hạn chế sự hiểu biết của mô hình về ngữ nghĩa bố cục. Dựa trên quan sát này, chúng tôi đề xuất định nghĩa bài toán mới, nơi chúng tôi chuyển đổi đầu vào S\M và đầu ra S thành ngôn ngữ mã và coi nhiệm vụ tạo bố cục như một nhiệm vụ tạo mã:

CODE(S) = fθ(CODE(S\M)) (2)

Phương trình 2 có 3 ưu điểm sau so với phương trình 1:

• Hiểu biết ngữ nghĩa: Bằng cách chuyển đổi các giá trị số thành ngôn ngữ mã, mô hình có thể nắm bắt tốt hơn các mối quan hệ ngữ nghĩa giữa các thành phần khác nhau của bố cục.
• Sử dụng LLM: Bằng cách sử dụng ngôn ngữ mã, mô hình có thể tiếp tục tận dụng kiến thức của Mô hình Ngôn ngữ Lớn (LLM) và do đó nâng cao chất lượng của các bố cục được tạo.
• Khả năng mở rộng mô hình: Ngôn ngữ mã có khả năng biểu đạt mạnh hơn so với các giá trị số, cho phép thêm nhiều thuộc tính hơn cho các phần tử bố cục.

3.2 ĐIỀU CHỈNH HƯỚNG DẪN MÃ

Như được hiển thị trong Hình 1, chúng tôi đề xuất Điều chỉnh Hướng dẫn Mã (CIT) với ba mô-đun: (1) mô-đun Khởi tạo Mã chuyển đổi bố cục thành ngôn ngữ mã bị che dấu với các mẫu động; (2) mô-đun Hoàn thiện Mã nhập mã bị che dấu vào LLM để tạo mã hoàn chỉnh; (3) mô-đun Kết xuất Mã trực tiếp kết xuất mã thành bố cục đồ họa cuối cùng. Chúng tôi minh họa các mô-đun này dưới đây.

3.2.1 KHỞI TẠO MÃ

Lượng hóa phần tử: Chúng tôi lượng hóa các giá trị số của vị trí phần tử thứ i {xi, yi} và kích thước {wi, hi} trong bố cục bằng phương pháp Lượng hóa Thích ứng (Inoue et al., 2023) áp dụng thuật toán k-Means (MacQueen et al., 1967) để phân cụm thông tin vị trí và kích thước của mỗi phần tử, giải quyết phân bố rất mất cân bằng của các giá trị này, ví dụ các phần tử có thể chồng lên nhau hoặc tập trung lại với nhau. Khác với các công trình trước đây (Chai et al., 2023; Zhang et al., 2023a; Inoue et al., 2023), chúng tôi sử dụng vị trí tuyệt đối để biểu thị tọa độ thay vì vị trí tương đối. Điều này phù hợp với ngôn ngữ mã và cho phép kết xuất trực tiếp bố cục mà không cần chuyển đổi tọa độ, từ đó ngăn ngừa mất thông tin tiềm ẩn. Chúng tôi duy trì độ chính xác đến một chữ số thập phân và trực tiếp chuyển đổi kết quả được phân cụm thành chuỗi.

Xây dựng mẫu: Tổng quan về xây dựng mẫu được hiển thị trong Hình 2. Chúng tôi xây dựng các mẫu dựa trên mã bố cục trang web phổ biến nhất, HTML, chứa nhiều thông tin và dễ dàng được LLM truy cập trong quá trình tiền đào tạo (Touvron et al., 2023; Rozière et al., 2023). Cụ thể, trong mã HTML, mỗi phần tử được mô tả bằng một thẻ cung cấp thông tin về nội dung hoặc cấu trúc phần tử. Vì các phần tử trong bố cục là hình vuông thông thường, chúng tôi chọn thẻ <rect> làm thẻ nội dung để mô tả mỗi phần tử:

<rect data-category={ci} x={xi} y={yi} width={wi} height={hi}>

trong đó ci là danh mục phần tử ở định dạng văn bản và {xi, yi, wi, hi} là vị trí và kích thước được lượng hóa của phần tử thứ i. Sau đó, để kết hợp tất cả các phần tử thành một cấu trúc thống nhất, chúng tôi sử dụng thẻ mở và thẻ đóng để xác định ranh giới của mỗi bố cục, có thể được viết như:

<html><body><svg width={W} height={H}> ... </svg></body></html>

trong đó W và H là chiều rộng và chiều cao nền của bố cục.

Để hỗ trợ việc học bố cục tốt hơn trong các lĩnh vực và nhiệm vụ khác nhau và tận dụng khả năng tuân theo hướng dẫn của LLM, chúng tôi thiết kế các lời nhắc sau:

Tôi muốn tạo bố cục theo phong cách {Domain}. Vui lòng tạo bố cục theo {Task Condition} tôi cung cấp:

trong đó {domain} và {Task Condition} sẽ thay đổi theo các lĩnh vực và nhiệm vụ khác nhau. Ví dụ, đối với bộ dữ liệu RICO, chúng tôi đặt Domain là "mobile UI", và đối với nhiệm vụ hoàn thiện bố cục, chúng tôi đặt Task Condition là "remaining values". Sau đó, chúng tôi thêm hướng dẫn nhiệm vụ trước mã bố cục.

3.2.2 HOÀN THIỆN MÃ

Để xây dựng đầu vào có điều kiện của nhiệm vụ tạo bố cục, chúng tôi sử dụng các token mặt nạ của LLM để biểu thị các giá trị bị che dấu M và để mô hình dự đoán các giá trị bị che dấu trong mã HTML. Khác với các công trình trước đây (Chai et al., 2023; Zhang et al., 2023a; Inoue et al., 2023) đã áp dụng từ vựng số tùy chỉnh, chúng tôi sử dụng trực tiếp từ vựng token của LLM. Bằng cách làm như vậy, chúng tôi có thể tận dụng kiến thức của các token số có sẵn trong LLM. Xem xét rằng hầu như tất cả LLM đều tuân theo cách tạo tự hồi quy và điều này mang lại hạn chế đáng kể cho nhiệm vụ tạo bố cục vì mô hình phải dự đoán cùng một bố cục dưới các thứ tự phần tử khác nhau, ngay cả khi bố cục không có thứ tự được định nghĩa tự nhiên (Yang et al., 2020). Do đó, chúng tôi thiết kế chiến lược tự nhất quán hoán vị ngẫu nhiên thứ tự của các phần tử đầu vào trong bố cục trong một mini-batch. Đồng thời, để thích ứng LLM với các nhiệm vụ tạo bố cục có điều kiện khác nhau, chúng tôi đã thực hiện mô hình hóa đa nhiệm vụ trên cùng một bố cục, sử dụng các điều kiện khác nhau và thực hiện mất mát kết hợp cho các nhiệm vụ này. Cho số lần hoán vị K và số nhiệm vụ T, mất mát kết hợp cho mỗi bố cục S có thể được viết là:

L(S|θ) = ∑^T_{t=1} ∑^N_{j=1} ∑^K_{k=1} L(s^{(k)}_j\M^{(t)}_j|θ), (3)

trong đó θ là các tham số mô hình và sj biểu thị phần tử thứ j trong bố cục S.

3.2.3 KẾT XUẤT MÃ

Hầu hết các công trình hiện tại yêu cầu bước chuyển đổi bổ sung để kết xuất bố cục đồ họa (Yang et al., 2020; Chai et al., 2023; Zhang et al., 2023a), ví dụ chuyển đổi vị trí tương đối thành vị trí tuyệt đối, gây ra mất thông tin. Khác với công trình trước đây, LayoutNUWA cho phép kết xuất ngay lập tức vì nó tạo vị trí tuyệt đối trực tiếp. Bên cạnh đó, xem xét các vấn đề đầu ra tiềm ẩn như tràn ranh giới (Inoue et al., 2023) và lỗi định dạng, chúng tôi sử dụng biểu thức chính quy để loại bỏ các định dạng không khớp và thực hiện các thao tác cắt cho các phần tử vượt quá kích thước nền.

4. THÍ NGHIỆM

4.1 CÀI ĐẶT THÍ NGHIỆM

Bộ dữ liệu: Chúng tôi đánh giá hiệu suất mô hình trên ba bộ dữ liệu công khai được sử dụng rộng rãi. RICO (Deka et al., 2017) là bộ dữ liệu thiết kế giao diện người dùng cho ứng dụng di động chứa 25 danh mục phần tử và 66K+ bố cục UI. PubLayNet (Zhong et al., 2019) bao gồm 360K+ bố cục cho tài liệu với 5 danh mục phần tử. Magazine (Zheng et al., 2019) là bộ dữ liệu bố cục tạp chí ít tài nguyên chứa khoảng 4K bố cục được chú thích và 6 danh mục phần tử. Chúng tôi theo LayoutDM (Inoue et al., 2023) để coi dữ liệu xác thực gốc là tập kiểm tra và tiền xử lý cả ba bộ dữ liệu bằng cách loại bỏ các bố cục chứa hơn 25 phần tử cũng như chia dữ liệu đã lọc thành tập đào tạo và tập xác thực mới theo tỷ lệ 95% và 5%.

Chỉ số đánh giá: Chúng tôi sử dụng bốn chỉ số để đánh giá kết quả tạo một cách toàn diện, bao gồm Khoảng cách Frechet Inception (FID), Giao trên Hợp tối đa (mIoU), Căn chỉnh (Align.) và Chồng lấp. Trong số đó, FID so sánh phân bố của các bố cục được tạo và thực tế. Tương tự như công trình trước đây (Inoue et al., 2023), chúng tôi sử dụng mô hình trích xuất đặc trưng cải tiến cho bố cục (Kikuchi et al., 2021) để tính điểm FID. Chúng tôi đo độ tương tự có điều kiện giữa các bố cục được tạo và thực tế bằng mIoU, được thực hiện bằng cách tính IoU tối đa giữa các hộp giới hạn của bố cục được tạo và thực tế với cùng một tập loại. Điểm Căn chỉnh và Chồng lấp được tính theo công trình trước đây (Li et al., 2019) để đánh giá việc căn chỉnh phần tử phù hợp và chồng lấp trong bố cục được tạo, và đáng chú ý là chúng tôi bỏ qua các chồng lấp bình thường, ví dụ các phần tử trên nền, và loại bỏ các bố cục không tạo được. Để tham khảo, chúng tôi hiển thị kết quả đánh giá giữa tập xác thực và tập kiểm tra như Dữ liệu thực.

Nhiệm vụ và Baseline: Chúng tôi đánh giá LayoutNUWA trên ba nhiệm vụ tạo bố cục có điều kiện. Bao gồm nhiệm vụ Danh mục thành Kích thước và Vị trí (C→S+P), nhiệm vụ Danh mục và Kích thước thành Vị trí (C+S→P), và nhiệm vụ Hoàn thiện. Cụ thể hơn, nhiệm vụ C→S+P yêu cầu mô hình dự đoán vị trí và kích thước của phần tử dựa trên danh mục của nó. Đối với nhiệm vụ C+S→P, mô hình dự đoán vị trí của phần tử dựa trên cả kích thước và danh mục của nó. Cuối cùng, trong nhiệm vụ hoàn thiện, các giá trị kích thước và vị trí của phần tử được che dấu ngẫu nhiên lên đến 80%, và mô hình dự đoán toàn bộ bố cục bằng các giá trị còn lại. Chúng tôi so sánh LayoutNUWA với sáu baseline mạnh, bao gồm LayoutTrans (Yang et al., 2020), BLT (Kong et al., 2022), LayoutGAN++ (Li et al., 2019), MaskGIT (Chang et al., 2022), DiffusionLM (Li et al., 2022) và LayoutDM (Inoue et al., 2023).

Chi tiết triển khai: Chúng tôi triển khai LayoutNUWA với hai LLM 7B: LLaMA2 (L2) (Touvron et al., 2023) và CodeLLaMA (CL) (Rozière et al., 2023). Chúng tôi đào tạo LayoutNUWA với hai cài đặt: (1) cài đặt Cụ thể Lĩnh vực (DS), nơi mô hình được đào tạo trên các bộ dữ liệu riêng biệt, và (2) cài đặt Bất khả tri Lĩnh vực (DA), nơi mô hình được đào tạo trên cả ba bộ dữ liệu, bao gồm RICO, PubLayNet và Magazine. Cấu hình mặc định cho LayoutNUWA sử dụng CodeLLaMA (CL) và Bất khả tri Lĩnh vực (DA), tức là LayoutNUWA-L2-DS. Chúng tôi đặt số lần hoán vị K = 10 và số nhiệm vụ T = 3. Để đào tạo mô hình, chúng tôi sử dụng Thư viện DeepSpeed (Rajbhandari et al., 2020) để chạy tất cả thí nghiệm trên 64 GPU NVIDIA V100. Chúng tôi áp dụng lấy mẫu Top-p (Holtzman et al., 2019) để suy luận, trong đó p = 0.9 và nhiệt độ là 0.6, và đặt độ dài tạo tối đa là 512.

4.2 ĐÁNH GIÁ ĐỊNH LƯỢNG

Chúng tôi báo cáo hiệu suất mô hình trên ba bộ dữ liệu: bộ dữ liệu Magazine trong Bảng 1, bộ dữ liệu RICO và PubLayNet trong Bảng 2. Đối với bộ dữ liệu Magazine, LayoutNUWA thể hiện hiệu suất đáng chú ý bằng cách vượt trội đáng kể so với tất cả các biện pháp baseline trong tất cả các nhiệm vụ. Hơn nữa, nó vượt trội hơn baseline mạnh LayoutDM hơn 50% khi được đánh giá bằng chỉ số FID. Các cải thiện đáng kể trong Bảng 1 là do ba khía cạnh: 1) các phương pháp trước đây tạo ra các giá trị số, trong khi LayoutNUWA tạo mã với nhãn, điều này rất có lợi cho mô hình bằng cách sử dụng thông tin ngữ nghĩa của các thuộc tính bố cục như chiều rộng, chiều cao, vị trí và danh mục; 2) không có phương pháp nào trước đây sử dụng LLM. Tuy nhiên, chúng tôi đã giới thiệu LLM lần đầu tiên, dẫn đến cải thiện hiệu suất đáng kể, tức là hiệu suất đã cải thiện từ 19.206 thành 9.741. Hơn nữa, khi chúng tôi sử dụng CodeLLaMA, được điều chỉnh trên ngôn ngữ mã, hiệu suất cải thiện thêm nữa thành 8.985; 3) vì các lĩnh vực khác nhau yêu cầu các định dạng bố cục riêng biệt, các phương pháp dựa trên số ban đầu chỉ có thể được đào tạo theo cách cụ thể lĩnh vực. Tuy nhiên, LayoutNUWA dựa trên cấu trúc mã, có thể được đào tạo theo cách bất khả tri lĩnh vực, cho phép bổ sung giữa dữ liệu từ các lĩnh vực khác nhau, do đó cải thiện thêm FID thành 8.791.

Chúng tôi cũng đã tiến hành các thí nghiệm rộng rãi trên hai bộ dữ liệu khác: RICO và PubLayNet, như được hiển thị trong Bảng 2. LayoutNUWA vượt trội đáng kể so với tất cả các phương pháp baseline trong phần lớn các nhiệm vụ. Mặc dù nó không đạt được hiệu suất tốt nhất trong hai nhiệm vụ cụ thể, nó vẫn đảm bảo ít nhất hiệu suất cao thứ hai trong những trường hợp đó. Điều này cho thấy khả năng tổng quát hóa mạnh mẽ của LayoutNUWA. Đáng chú ý là mô hình của chúng tôi cũng đạt được điểm Align. và Overlap gần hơn với Dữ liệu Thực so với các baseline. Mặc dù công trình trước đây đã đề xuất rằng các quy trình tinh chỉnh và phân biệt có thể đóng góp vào việc cải thiện điểm Align. và Overlap (Inoue et al., 2023; Li et al., 2019), phương pháp của chúng tôi đạt được kết quả tốt hơn mà không sử dụng các bước này.

4.3 ĐÁNH GIÁ ĐỊNH TÍNH

Chúng tôi kết xuất mã bố cục được tạo bằng phương pháp Kết xuất Mã (CR), và Hình 3 hiển thị kết quả kết xuất mẫu của bộ dữ liệu PubLayNet. Bằng cách so sánh với các baseline khác, chúng tôi có thể quan sát thấy các bố cục được tạo bởi LayoutNUWA thể hiện việc căn chỉnh phần tử xuất sắc, và tỷ lệ chồng lấp giữa các phần tử là tối thiểu. Ngoài ra, kết quả của chúng tôi nhất quán nhất với dữ liệu Thiết kế Thực, tức là kích thước và vị trí của phần tử được tạo về cơ bản nhất quán với thiết kế thực tế, cho thấy bằng cách coi nhiệm vụ tạo bố cục như một nhiệm vụ tạo mã, LayoutNUWA đã thành công học được phân bố của bố cục tài liệu, do đó dẫn đến các bố cục chính xác và thực tế hơn. Các trường hợp mẫu khác có thể tham khảo tại Hình 5.

5. NGHIÊN CỨU LOẠI BỎ

Chúng tôi điều tra hiệu quả của phương pháp điều chỉnh CIT trong Mục 5.1 và so sánh tác động của các định dạng đầu ra khác nhau và tinh chỉnh trong Mục 5.2. Cụ thể hơn, chúng tôi đặt mô hình LayoutNUWA-L2-DS làm cài đặt cơ bản và tiến hành các nghiên cứu loại bỏ trên bộ dữ liệu Magazine.

5.1 TÁC ĐỘNG CỦA CÁC PHƯƠNG PHÁP ĐIỀU CHỈNH

Chúng tôi giảm dần các mô-đun trong CIT và tinh chỉnh mô hình bằng dữ liệu được xây dựng tương ứng. Cụ thể, chúng tôi đầu tiên loại trừ mẫu mã và trực tiếp chuyển đổi thông tin phần tử thành chuỗi có thứ tự S với hướng dẫn nhiệm vụ trước nó, tức là phương pháp điều chỉnh hướng dẫn. Sau đó, chúng tôi tiếp tục loại bỏ hướng dẫn nhiệm vụ và trực tiếp tinh chỉnh mô hình bằng dữ liệu từ các nhiệm vụ khác nhau riêng biệt, tức là phương pháp điều chỉnh số. Như được hiển thị trong Bảng 3, chúng tôi có thể quan sát thấy hiệu suất mô hình đã giảm đáng kể mà không có mẫu mã, và nó chỉ có thể hoạt động trong cài đặt DS vì mô hình có thể đơn giản tạo ra kết quả lặp lại và không theo thứ tự không nhất quán với chuỗi phần tử trong cài đặt DA. Hơn nữa, phương pháp điều chỉnh số chỉ có thể hỗ trợ cài đặt DS vì không có hướng dẫn nhiệm vụ cho mô hình phân biệt giữa các nhiệm vụ khác nhau, và hiệu suất mô hình kém hơn rất nhiều so với CIT vì phương pháp như vậy bỏ qua thông tin ngữ nghĩa phong phú giữa các phần tử và không thể hiệu chỉnh kiến thức mã trước của LLM.

5.2 TÁC ĐỘNG CỦA ĐỊNH DẠNG ĐẦU RA VÀ TINH CHỈNH

Chúng tôi so sánh các tác động của mô hình đầu ra ở định dạng mã và định dạng số. Đối với định dạng đầu ra số, chúng tôi thiết kế nhiệm vụ Điền Mã, bao gồm việc làm cho LLM chỉ dự đoán các giá trị bị che dấu thay vì dự đoán toàn bộ chuỗi mã. Như được hiển thị trong Bảng 4, chúng tôi có thể thấy rằng tạo ra định dạng số sẽ tăng tỷ lệ thất bại của việc tạo mô hình, ví dụ mô hình sẽ tạo ra kết quả lặp lại, và giảm đáng kể hiệu suất mô hình. Điều này là do bố cục được tạo bởi nhiệm vụ tạo bố cục có điều kiện phải có logic, trong khi chỉ dự đoán các phần bị che dấu có thể dẫn đến các giá trị rời rạc thiếu logic. Bên cạnh đó, do ảnh hưởng của cách tự hồi quy, nơi nội dung được tạo ở bước tiếp theo phụ thuộc vào lịch sử trước đó, hiện tượng này có thể dẫn đến xác suất thất bại cao hơn của việc tạo mô hình khi dự đoán bố cục với nhiều giá trị bị che dấu hơn. Chúng tôi cũng tiến hành so sánh giữa LayoutNUWA và GPT-4 (Bubeck et al., 2023). Cụ thể, chúng tôi cho phép GPT-4 thực hiện suy luận bằng cách xây dựng đầu vào bằng phương pháp CIT. Bảng 5 cho thấy điều chỉnh hướng dẫn mã cho LLM là cần thiết, vì sử dụng LLM theo cách zero-shot dẫn đến tỷ lệ thất bại cao (100% tỷ lệ thất bại của LLaMA2 và khoảng 30% cho GPT-4).

6. KẾT LUẬN

Trong bài báo này, chúng tôi đề xuất LayoutNUWA, một phương pháp đột phá coi việc tạo bố cục như một nhiệm vụ tạo mã, hiệu quả làm phong phú thông tin ngữ nghĩa của bố cục và tận dụng chuyên môn ẩn của LLM. Các thí nghiệm rộng rãi trên nhiều bộ dữ liệu đã chứng minh sự ưu việt của phương pháp chúng tôi. Nghiên cứu này có tiềm năng cách mạng hóa lĩnh vực tạo bố cục và mở đường cho việc khám phá và phát triển thêm các phương pháp tạo bố cục nhận thức ngữ nghĩa trong các ứng dụng khác nhau.
