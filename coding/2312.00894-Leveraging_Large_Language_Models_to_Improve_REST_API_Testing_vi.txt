# 2312.00894.pdf
# Chuyển đổi từ PDF sang TXT
# Đường dẫn nguồn: /home/admin88/arxiv-downloader/coding/2312.00894.pdf
# Kích thước tệp: 548137 bytes

===============================================
NỘI DUNG TỆP PDF
===============================================


--- TRANG 1 ---
Tận dụng Mô hình Ngôn ngữ Lớn để Cải thiện Kiểm thử REST API
Myeongsoo Kim
Viện Công nghệ Georgia
Atlanta, Georgia, Hoa Kỳ
mkim754@gatech.eduTyler Stennett
Viện Công nghệ Georgia
Atlanta, Georgia, Hoa Kỳ
tstennett3@gatech.eduDhruv Shah
Viện Công nghệ Georgia
Atlanta, Georgia, Hoa Kỳ
dshah374@gatech.edu
Saurabh Sinha
IBM Research
Yorktown Heights, New York, Hoa Kỳ
sinhas@us.ibm.comAlessandro Orso
Viện Công nghệ Georgia
Atlanta, Georgia, Hoa Kỳ
orso@cc.gatech.edu
TÓM TẮT
Việc áp dụng rộng rãi các REST API, cùng với độ phức tạp và quy mô ngày càng tăng của chúng, đã dẫn đến nhu cầu về các công cụ kiểm thử REST API tự động. Các công cụ hiện tại tập trung vào dữ liệu có cấu trúc trong các đặc tả REST API nhưng thường bỏ qua những thông tin quý giá có sẵn trong các mô tả bằng ngôn ngữ tự nhiên không có cấu trúc trong các đặc tả, điều này dẫn đến độ bao phủ kiểm thử không tối ưu. Gần đây, để giải quyết khoảng trống này, các nhà nghiên cứu đã phát triển các kỹ thuật trích xuất quy tắc từ những mô tả có thể đọc được bởi con người này và truy vấn các cơ sở tri thức để tạo ra các giá trị đầu vào có ý nghĩa. Tuy nhiên, các kỹ thuật này bị hạn chế về các loại quy tắc mà chúng có thể trích xuất và dễ tạo ra kết quả không chính xác. Bài báo này trình bày RESTGPT, một phương pháp tiên tiến tận dụng sức mạnh và khả năng nhận thức ngữ cảnh vốn có của Mô hình Ngôn ngữ Lớn (LLM) để cải thiện kiểm thử REST API.
RESTGPT nhận một đặc tả API làm đầu vào, trích xuất các quy tắc có thể diễn giải bằng máy, và tạo ra các giá trị tham số ví dụ từ các mô tả bằng ngôn ngữ tự nhiên trong đặc tả. Sau đó nó bổ sung đặc tả gốc với những quy tắc và giá trị này. Các đánh giá của chúng tôi cho thấy RESTGPT vượt trội hơn các kỹ thuật hiện có trong cả trích xuất quy tắc và tạo giá trị. Với những kết quả đầy hứa hẹn này, chúng tôi vạch ra các hướng nghiên cứu tương lai để thúc đẩy kiểm thử REST API thông qua LLM.

KHÁI NIỆM CCS
•Hệ thống thông tin →Dịch vụ web RESTful ;•Phần mềm
và kỹ thuật của nó →Kiểm thử và gỡ lỗi phần mềm .

TỪ KHÓA
Mô hình Ngôn ngữ Lớn cho Kiểm thử, Phân tích Đặc tả OpenAPI

1 GIỚI THIỆU
Trong kỷ nguyên số hóa ngày nay, các ứng dụng web và hệ thống dựa trên đám mây đã trở nên phổ biến khắp nơi, khiến cho các Giao diện Lập trình Ứng dụng (API) Chuyển giao Trạng thái Đại diện (REST) trở thành các yếu tố then chốt trong phát triển phần mềm [ 29]. REST API cho phép các hệ thống khác nhau giao tiếp và trao đổi dữ liệu một cách liền mạch, tạo điều kiện thuận lợi cho việc tích hợp một loạt rộng các dịch vụ và chức năng [ 11]. Khi độ phức tạp và sự phổ biến của chúng tăng lên, kiểm thử hiệu quả các REST API đã nổi lên như một thách thức đáng kể [12, 19, 40].

Các công cụ kiểm thử REST API tự động (ví dụ, [ 3,5,6,9,14–16,18,20,
22,39]) chủ yếu tạo ra các ca kiểm thử từ các đặc tả API [ 2,23,25,
34]. Việc họ gặp khó khăn trong việc đạt được độ bao phủ mã cao [ 19] thường bắt nguồn từ khó khăn trong việc hiểu ngữ nghĩa và các ràng buộc có mặt trong tên tham số và mô tả [ 1,17,19]. Để giải quyết những vấn đề này, các công cụ hỗ trợ đã được phát triển. Những công cụ này tận dụng Xử lý Ngôn ngữ Tự nhiên (NLP) để trích xuất ràng buộc từ mô tả tham số [ 17] và truy vấn tên tham số đối với cơ sở dữ liệu [ 1], chẳng hạn như DBPedia [ 7]. Tuy nhiên, đạt được độ chính xác cao vẫn là một thách thức đáng kể đối với những công cụ này. Hơn nữa, chúng bị hạn chế về các loại và độ phức tạp của quy tắc mà chúng có thể trích xuất.

Bài báo này giới thiệu RESTGPT, một phương pháp mới khai thác Mô hình Ngôn ngữ Lớn (LLM) để nâng cao các đặc tả REST API bằng cách xác định ràng buộc và tạo ra các giá trị tham số liên quan. Với một Đặc tả OpenAPI [ 25], RESTGPT bổ sung nó bằng cách tạo ra ràng buộc và giá trị ví dụ. Các phương pháp hiện có như NLP2REST [ 17] yêu cầu một quy trình xác thực để cải thiện độ chính xác, bao gồm không chỉ việc trích xuất ràng buộc mà còn thực hiện các yêu cầu đối với API để kiểm tra động những ràng buộc này. Quá trình như vậy đòi hỏi nỗ lực kỹ thuật đáng kể và một phiên bản dịch vụ đã triển khai, khiến nó trở nên cồng kềnh và tốn thời gian. Ngược lại, RESTGPT đạt được độ chính xác cao hơn mà không yêu cầu xác thực tốn kém. Hơn nữa, không giống như ARTE [ 1], RESTGPT xuất sắc trong việc hiểu ngữ cảnh của tên tham số dựa trên phân tích mô tả tham số, do đó tạo ra các giá trị phù hợp với ngữ cảnh hơn.

Kết quả sơ bộ của chúng tôi chứng minh lợi thế đáng kể của phương pháp chúng tôi so với các công cụ hiện có. So với NLP2REST không có mô-đun xác thực, phương pháp của chúng tôi cải thiện độ chính xác từ 50% lên 97%. Ngay cả khi so sánh với NLP2REST được trang bị mô-đun xác thực, phương pháp của chúng tôi vẫn tăng độ chính xác từ 79% lên 97%. Ngoài ra, RESTGPT thành công tạo ra cả đầu vào hợp lệ về mặt cú pháp và ngữ nghĩa cho 73% các tham số trong các dịch vụ được phân tích và các hoạt động của chúng, một cải thiện đáng kể so với ARTE, chỉ có thể tạo ra đầu vào hợp lệ cho 17% tham số. Với những kết quả khích lệ này, chúng tôi vạch ra một số hướng nghiên cứu để tận dụng LLM theo những cách khác để nâng cao hơn nữa kiểm thử REST API.

2 BỐI CẢNH VÀ VÍ DỤ TẠO ĐỘNG LỰC

2.1 REST API và Đặc tả OpenAPI
REST API là các giao diện được xây dựng dựa trên các nguyên tắc của Chuyển giao Trạng thái Đại diện (REST), một mô hình thiết kế cho các ứng dụng mạng [ 11]. Được thiết kế cho web, REST API tạo điều kiện trao đổi dữ liệu giữa khách hàng và máy chủ thông qua các điểm cuối được xác định trước chủ yếu sử dụng giao thức HTTP [ 30,35]. Mỗi tương tác của khách hàng có thể

--- TRANG 2 ---
/ institutions :
get:
operationId: searchInstitutions
produces:
- application / json
parameters:
- name: filters
in: query
required: false
type: string
description: Bộ lọc cho tìm kiếm ngân hàng .
Ví dụ :
* Lọc theo tên Tiểu bang
`STNAME :\" West Virginia \" `
* Lọc cho bất kỳ một trong nhiều tên Tiểu bang
`STNAME : (\" West Virginia \",\" Delaware \") `
- name: sort_order
in: query
required: false
type: string
description: Chỉ báo nếu tăng dần ( ASC ) hoặc giảm dần (
DESC )
responses:
'200':
description: hoạt động thành công
schema:
type: object

Hình 1: Một phần của đặc tả OpenAPI của FDIC Bank Data.

bao gồm tiêu đề và một tải trọng, trong khi phản hồi tương ứng thường chứa tiêu đề, nội dung, và một mã trạng thái HTTP chỉ ra kết quả.

Đặc tả OpenAPI (OAS) [ 25] có thể nói là tiêu chuẩn ngành để định nghĩa các giao diện API RESTful. Nó cung cấp lợi thế có thể đọc được bằng máy, hỗ trợ các quy trình tự động hóa, đồng thời cũng trình bày thông tin ở định dạng rõ ràng, có thể đọc được bởi con người. Các tính năng chính của OAS bao gồm định nghĩa các điểm cuối, các phương thức HTTP liên quan, các tham số đầu vào dự kiến, và các phản hồi tiềm năng.

Ví dụ, Hình 1 cho thấy một phần của đặc tả API của FDIC Bank Data. Phần này của đặc tả minh họa cách một người có thể truy vấn thông tin về các tổ chức. Nó cũng chi tiết một phản hồi dự kiến, chẳng hạn như mã trạng thái 200, chỉ ra một tình huống được xử lý thành công.

2.2 Kiểm thử REST API và Công cụ Hỗ trợ
Các công cụ kiểm thử REST API tự động [ 5,6,9,14–16,18,20,22,39] tạo ra các ca kiểm thử từ các đặc tả được chấp nhận rộng rãi, chủ yếu là OpenAPI [ 25]. Tuy nhiên, những công cụ này thường gặp khó khăn trong việc đạt được độ bao phủ toàn diện [ 19]. Một lý do quan trọng cho điều này là khả năng không thể diễn giải các phần có thể đọc được bởi con người của đặc tả [ 17,19].

Đối với các tham số như filters và sort_order được hiển thị trong Hình 1, các công cụ kiểm thử có xu hướng tạo ra các giá trị chuỗi ngẫu nhiên, thường không phải là đầu vào hợp lệ cho các tham số như vậy.

Để đáp ứng những thách thức này, các công cụ hỗ trợ đã được giới thiệu để nâng cao khả năng của những công cụ kiểm thử này. Ví dụ, ARTE [ 1] khai thác DBPedia [ 7] để tạo ra các giá trị ví dụ tham số liên quan. Tương tự, NLP2REST áp dụng xử lý ngôn ngữ tự nhiên để trích xuất giá trị ví dụ và ràng buộc từ các phần văn bản mô tả của các đặc tả [17].

2.3 Mô hình Ngôn ngữ Lớn
Mô hình Ngôn ngữ Lớn (LLM) [ 13,24,36] đại diện cho một bước nhảy vọt mang tính chuyển đổi trong các lĩnh vực xử lý ngôn ngữ tự nhiên (NLP) và Học máy. Được đặc trưng bởi kích thước khổng lồ của chúng, thường chứa hàng tỷ tham số, những mô hình này được đào tạo trên các kho ngữ liệu văn bản rộng lớn để tạo ra, hiểu và thao tác văn bản giống con người [ 28]. Kiến trúc đằng sau LLM chủ yếu là các thiết kế dựa trên transformer [ 37]. Các mô hình đáng chú ý dựa trên kiến trúc này bao gồm GPT (Generative Pre-trained Transformer) [ 27], được thiết kế chủ yếu cho việc tạo văn bản, và BERT (Bidirectional Encoder Representations from Transformers) [ 10], xuất sắc trong việc hiểu ngữ cảnh. Những mô hình này nắm bắt các sắc thái ngôn ngữ học phức tạp và ngữ cảnh ngữ nghĩa, khiến chúng thành thạo trong một loạt rộng các nhiệm vụ từ tạo văn bản đến trả lời câu hỏi.

2.4 Ví dụ Tạo Động lực
Đặc tả OpenAPI cho API của Dữ liệu Ngân hàng Tập đoàn Bảo hiểm Tiền gửi Liên bang (FDIC), được hiển thị trong Hình 1, phục vụ để cung cấp thông tin chi tiết về dữ liệu ngân hàng. Sử dụng ví dụ này, chúng tôi làm nổi bật những thách thức trong việc tạo giá trị tham số mà các công cụ hỗ trợ kiểm thử REST API hiện tại phải đối mặt và minh họa cách RESTGPT giải quyết những thách thức này.

(1)Tham số filters : Mặc dù mô tả cung cấp hướng dẫn về cách tham số nên được sử dụng, sự phụ thuộc của ARTE vào DBPedia dẫn đến không có việc tạo giá trị liên quan nào cho filters . NLP2REST, với việc trích xuất dựa trên từ khóa của nó, xác định các ví dụ từ mô tả, đặc biệt được hỗ trợ bởi thuật ngữ "example". Do đó, các mẫu như STNAME: "West Virginia" và STNAME: ("West Virginia", "Delaware") được nắm bắt chính xác.

(2)Tham số sort_order : Ở đây, cả hai công cụ đều thể hiện những hạn chế. ARTE, trong khi truy vấn DBPedia, lấy các giá trị không liên quan như "List of colonial heads of Portuguese Timor", làm nổi bật sự không đầy đủ về ngữ cảnh của nó. Trong trường hợp không có từ khóa có thể xác định được, NLP2REST không thể xác định "ASC" hoặc "DESC" như các giá trị tiềm năng.

Ngược lại với những công cụ này, RESTGPT hiệu quả hơn nhiều: với sự hiểu biết ngữ nghĩa sâu sắc hơn, RESTGPT chính xác nhận ra rằng tham số filters được ngữ cảnh hóa xung quanh tên tiểu bang gắn liền với hồ sơ ngân hàng, và tạo ra các giá trị kiểm thử như STNAME: "California" và các bộ lọc đa tiểu bang như STNAME: ("California", "New York") . Ngoài ra, nó thành công xác định các giá trị "ASC" hoặc "DESC" từ mô tả của tham số sort_order. Ví dụ này minh họa sự hiểu biết ngữ cảnh vượt trội của RESTGPT, cho phép nó vượt trội hơn các phương pháp bị ràng buộc hoặc mù về ngữ cảnh của các công cụ hiện có.

--- TRANG 3 ---
3 PHƯƠNG PHÁP CỦA CHÚNG TÔI

3.1 Tổng quan
Hình 2 minh họa quy trình làm việc của RESTGPT, bắt đầu bằng việc phân tích cú pháp đặc tả OpenAPI đầu vào. Trong giai đoạn này, cả các phần có thể đọc được bằng máy và có thể đọc được bởi con người của mỗi tham số đều được xác định. Các phần có thể đọc được bởi con người cung cấp thông tin chi tiết về bốn loại ràng buộc: ràng buộc hoạt động, ràng buộc tham số, loại và định dạng tham số, và ví dụ tham số [17].

Bộ Tạo Quy tắc, sử dụng một tập hợp các lời nhắc được chế tác, trích xuất bốn quy tắc này. Chúng tôi đã chọn GPT-3.5 Turbo làm LLM cho công việc này, với độ chính xác và hiệu quả của nó, như được nêu bật trong một báo cáo gần đây của OpenAI [ 24]. Việc bao gồm học few-shot tiếp tục tinh chỉnh đầu ra của mô hình. Bằng cách cung cấp cho LLM các hướng dẫn và ví dụ ngắn gọn, phong phú về ngữ cảnh, các lời nhắc few-shot đảm bảo các đầu ra được tạo ra vừa liên quan vừa chính xác [ 8,21].

Cuối cùng, RESTGPT kết hợp các quy tắc được tạo ra với đặc tả gốc để tạo ra một đặc tả nâng cao.

3.2 Bộ Tạo Quy tắc
Để hướng dẫn mô hình tốt nhất về diễn giải quy tắc và định dạng đầu ra, các lời nhắc của chúng tôi được thiết kế xung quanh bốn thành phần cốt lõi: hướng dẫn, trường hợp, điểm nổi bật ngữ pháp, và cấu hình đầu ra.

Hướng dẫn
1. Xác định tham số bằng tên và mô tả của nó.
2. Trích xuất ràng buộc logic từ mô tả tham số, tuân thủ nghiêm ngặt định dạng được cung cấp.
3. Diễn giải mô tả theo cách ít ràng buộc nhất.

Các hướng dẫn được cung cấp phục vụ như các chỉ dẫn nền tảng cho mô hình, định hình quan điểm của nó và làm rõ các mục tiêu chính của nó. Sử dụng các hướng dẫn làm cơ sở, RESTGPT sau đó có thể tiến hành với việc nhắc nhở cụ thể hơn.

Trường hợp
Trường hợp 1: Nếu mô tả không xác định về yêu cầu tham số: Đầu ra "None".
...
Trường hợp 10: Đối với mối quan hệ phức tạp giữa các tham số: Kết hợp quy tắc từ ngữ pháp.

Việc triển khai các trường hợp trong việc nhắc nhở mô hình đóng vai trò then chốt trong việc hướng dẫn hành vi của mô hình, đảm bảo rằng nó tuân thủ các tiêu chí chính xác như được miêu tả trong ví dụ. Lấy cảm hứng từ việc nhắc nhở Chuỗi Suy nghĩ [ 38], chúng tôi phân tách việc trích xuất quy tắc thành các phần cụ thể, có thể quản lý được để giảm thiểu sự mơ hồ và do đó, cải thiện khả năng xử lý của mô hình.

Điểm nổi bật Ngữ pháp
Toán tử Quan hệ: '<', '>', '<=', '>=', '==', '!='
Toán tử Số học: '+', '−', '∗', '/'
Toán tử Phụ thuộc: 'AllOrNone', 'ZeroOrOne', ...

Điểm nổi bật Ngữ pháp nhấn mạnh các toán tử và từ vựng chính mà mô hình nên nhận dạng và sử dụng trong quá trình trích xuất quy tắc. Bằng cách cung cấp cho mô hình một ngôn ngữ cụ thể theo ngữ cảnh cơ bản, RESTGPT xác định quy tắc trong văn bản.

Cấu hình Đầu ra
Ví dụ Ràng buộc Tham số: min [tối thiểu], max [tối đa], default [mặc định]

Ví dụ Định dạng Tham số: type [loại], items [loại mục], format [định dạng], collectionFormat [định dạng bộ sưu tập]

Sau khi hướng dẫn mô hình thông qua quá trình trích xuất quy tắc qua việc nhắc nhở cụ thể, cuối cùng chúng tôi định nghĩa định dạng đầu ra để biên dịch các phát hiện của mô hình thành một cấu trúc đơn giản cho việc xử lý tiếp theo.

Ngoài ra, Bộ Tạo Quy tắc cũng giám sát quá trình tạo giá trị, được thực hiện trong quá trình trích xuất quy tắc ví dụ tham số. Tạo phẩm của chúng tôi [ 31,32] cung cấp chi tiết về tất cả các lời nhắc và kết quả tương ứng của chúng.

3.3 Nâng cao Đặc tả
Mục tiêu chính của RESTGPT là cải thiện hiệu quả của các công cụ kiểm thử REST API. Chúng tôi thực hiện điều này bằng cách tạo ra các đặc tả OpenAPI nâng cao, được bổ sung với các quy tắc được tạo ra từ các mô tả bằng ngôn ngữ tự nhiên có thể đọc được bởi con người kết hợp với các từ khóa OpenAPI có thể đọc được bằng máy [33].

Như được minh họa trong Hình 2, giai đoạn Phân tích Đặc tả trích xuất các thành phần có thể đọc được bằng máy và có thể đọc được bởi con người từ đặc tả API. Sau khi các quy tắc từ các đầu vào ngôn ngữ tự nhiên đã được xác định bởi Bộ Tạo Quy tắc , giai đoạn Xây dựng Đặc tả bắt đầu. Trong giai đoạn này, các đầu ra từ mô hình được xử lý và kết hợp với các thành phần có thể đọc được bằng máy, đảm bảo rằng không có xung đột giữa các hạn chế. Ví dụ, đặc tả kết quả phải có thuộc tính style chỉ khi kiểu dữ liệu là array hoặc object . Kết quả cuối cùng là một đặc tả API được làm phong phú chứa ràng buộc, ví dụ, và quy tắc được trích xuất từ các mô tả có thể đọc được bởi con người.

4 KẾT QUẢ SƠ BỘ

4.1 Phương pháp Đánh giá
Chúng tôi đã thu thập chín dịch vụ RESTful từ nghiên cứu NLP2REST. Động lực đằng sau việc lựa chọn này là sự có sẵn của một ground truth về các quy tắc được trích xuất trong công việc NLP2REST [ 17]. Có dữ liệu này, chúng tôi có thể dễ dàng so sánh công việc của mình với NLP2REST.

Để thiết lập một tiêu chuẩn đánh giá toàn diện, chúng tôi cũng đã kết hợp một so sánh với ARTE. Phương pháp của chúng tôi được hướng dẫn bởi bài báo ARTE, từ đó chúng tôi trích xuất các số liệu cần thiết để so sánh. Tuân thủ việc phân loại giá trị đầu vào của ARTE thành Hợp lệ về Cú pháp và Hợp lệ về Ngữ nghĩa [ 1], hai tác giả đã kiểm tra tỉ mỉ các giá trị đầu vào được tạo ra bởi RESTGPT và ARTE. Đáng chú ý, chúng tôi đã mô phỏng phương pháp của ARTE trong các tình huống mà hơn mười giá trị được tạo ra bằng cách chọn ngẫu nhiên mười từ nhóm để phân tích.

4.2 Kết quả và Thảo luận
Bảng 1 trình bày một so sánh về khả năng trích xuất quy tắc của NLP2REST và RESTGPT. RESTGPT xuất sắc về độ chính xác, recall, và điểm F 1 trên phần lớn các dịch vụ REST. NLP2REST, mặc dù hiệu quả, phụ thuộc vào một quy trình xác thực bao gồm đánh giá phản hồi máy chủ để lọc ra các quy tắc không thành công. Phương pháp này đòi hỏi nỗ lực kỹ thuật, và hiệu quả của nó bị hạn chế bởi hiệu suất của bộ xác thực.

Ngược lại, RESTGPT loại bỏ hoàn toàn nhu cầu xác thực như vậy với độ chính xác cao của nó. Ấn tượng là độ chính xác 97% của RESTGPT vượt trội ngay cả độ chính xác của NLP2REST sau xác thực, ở mức 79%. Điều này nhấn mạnh rằng RESTGPT có thể mang lại kết quả vượt trội mà không cần giai đoạn xác thực. Kết quả này cho thấy khả năng vượt trội của LLM trong việc phát hiện quy tắc tinh tế, không giống như các kỹ thuật NLP thông thường phụ thuộc rất nhiều vào từ khóa cụ thể.

Hơn nữa, Bảng 2 trình bày dữ liệu về độ chính xác của ARTE và RESTGPT. Dữ liệu vẽ ra một bức tranh rõ ràng: RESTGPT liên tục đạt được độ chính xác cao hơn ARTE trên tất cả các dịch vụ. Điều này có thể được quy cho khả năng nhận thức ngữ cảnh của LLM, như đã thảo luận trong Phần 2. Ví dụ, trong dịch vụ language-tool, chúng tôi thấy rằng, đối với tham số language, ARTE tạo ra các giá trị như "Arabic", "Chinese", "English", và "Spanish". Tuy nhiên, RESTGPT hiểu ngữ cảnh của tham số language, và tạo ra mã ngôn ngữ như "en-US" và "de-DE".

5 KẾ HOẠCH TƯƠNG LAI
Với những kết quả khích lệ của chúng tôi về việc trích xuất quy tắc dựa trên LLM, tiếp theo chúng tôi vạch ra một số hướng nghiên cứu mà chúng tôi dự định theo đuổi trong việc tận dụng LLM để cải thiện kiểm thử REST API một cách rộng rãi hơn.

Cải thiện Mô hình. Có hai cách mà chúng tôi dự định tạo ra các mô hình được cải thiện để hỗ trợ kiểm thử REST API. Thứ nhất, chúng tôi sẽ thực hiện tinh chỉnh đặc thù cho nhiệm vụ của LLM sử dụng dữ liệu từ APIs-guru [ 4] và RapidAPI [ 26], chứa hàng nghìn đặc tả API thực tế. Chúng tôi sẽ tinh chỉnh RESTGPT với những bộ dữ liệu này, điều này sẽ nâng cao khả năng của mô hình trong việc hiểu các ngữ cảnh và sắc thái API đa dạng. Chúng tôi tin rằng việc tinh chỉnh dựa trên bộ dữ liệu này sẽ giúp RESTGPT hiểu một phổ rộng hơn các đặc tả và tạo ra các đề xuất kiểm thử thậm chí còn chính xác hơn.

Thứ hai, chúng tôi sẽ tập trung vào việc tạo ra các mô hình nhẹ để hỗ trợ kiểm thử REST API, sao cho các mô hình không yêu cầu tài nguyên tính toán đắt đỏ và có thể được triển khai trên CPU thông thường. Để đạt mục tiêu này, chúng tôi sẽ khám phá các phương pháp cắt giảm mô hình, tập trung vào việc giữ lại các neuron và lớp thiết yếu quan trọng cho nhiệm vụ của chúng tôi.

Cải thiện việc phát hiện lỗi. RESTGPT hiện tại bị hạn chế trong việc phát hiện lỗi chỉ biểu hiện dưới dạng mã phản hồi máy chủ 500. Bằng cách tận dụng LLM, chúng tôi dự định mở rộng các loại lỗi có thể được phát hiện, chẳng hạn như lỗi liên quan đến lỗi ngữ nghĩa CRUD hoặc sự khác biệt trong mối quan hệ producer-consumer. Bằng cách nâng cao khả năng tìm lỗi của RESTGPT theo cách này, chúng tôi nhằm làm cho kiểm thử REST API tự động hiệu quả hơn và hữu ích hơn trong thực tế.

Phương pháp Kiểm thử dựa trên LLM. Chúng tôi nhằm phát triển một công cụ kiểm thử REST API tận dụng thông điệp máy chủ. Mặc dù thông điệp máy chủ thường chứa thông tin có giá trị, các công cụ kiểm thử hiện tại không tận dụng được thông tin này [ 17]. Ví dụ, nếu một gợi ý máy chủ đề xuất tạo ra một yêu cầu hợp lệ cụ thể, RESTGPT, với sự hiểu biết ngữ nghĩa của nó, có thể tự động tạo ra các kiểm thử liên quan. Điều này sẽ không chỉ nâng cao quy trình kiểm thử mà còn đảm bảo rằng các lỗ hổng tiềm ẩn mà thông điệp máy chủ có thể chỉ ra sẽ không bị bỏ qua.

NHẬN TẠ
Công việc này được hỗ trợ một phần bởi NSF, theo grant CCF-0725202,
DOE, theo hợp đồng DE-FOA-0002460, và các khoản tài trợ từ Facebook,
Google, IBM Research, và Microsoft Research.

TÀI LIỆU THAM KHẢO
[1]J. C. Alonso, A. Martin-Lopez, S. Segura, J. Garcia, và A. Ruiz-Cortes. 2023. ARTE:
Tạo Tự động Đầu vào Kiểm thử Thực tế cho Web API. IEEE Transactions
on Software Engineering 49, 01 (jan 2023), 348–363. https://doi.org/10.1109/TSE.
2022.3150618
[2] API Blueprint. 2023. API Blueprint. https://apiblueprint.org/
[3] Apiary. 2023. Dredd. https://github.com/apiaryio/dredd
[4] APIs.guru. 2023. APIs-guru. https://apis.guru/
[5]Andrea Arcuri. 2019. Tạo Ca Kiểm thử Tự động cho RESTful API với Evo-
Master. ACM Transactions on Software Engineering and Methodology (TOSEM) 28,
1, Article 3 (jan 2019), 37 trang. https://doi.org/10.1145/3293455
[6]Vaggelis Atlidakis, Patrice Godefroid, và Marina Polishchuk. 2019. RESTler:
Fuzzing REST API Có trạng thái. Trong Proceedings of the 41st International Conference on
Software Engineering (Montreal, Quebec, Canada) (ICSE '19) . IEEE Press, Piscat-
away, NJ, USA, 748–758. https://doi.org/10.1109/ICSE.2019.00083
[7]Christian Bizer, Jens Lehmann, Georgi Kobilarov, Sören Auer, Christian Becker,
Richard Cyganiak, và Sebastian Hellmann. 2009. Dbpedia-một điểm kết tinh
cho web dữ liệu. Journal of web semantics 7, 3 (2009), 154–165.
[8]Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan,
Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda

--- TRANG 4 ---
Bảng 1: Hiệu quả của NLP2REST và RESTGPT.

Số Quy tắc trong NLP2REST Không có Quy trình Xác thực NLP2REST Có Quy trình Xác thực RESTGPT
Dịch vụ REST Ground Truth TP FP FN Precision Recall F1 TP FP FN Precision Recall F1 TP FP FN Precision Recall F1
FDIC 45 42 36 3 54% 93% 68% 42 25 3 63% 93% 75% 44 0 1 100% 98% 99%
Genome Nexus 81 79 3 2 96% 98% 97% 79 3 2 96% 98% 97% 75 0 6 100% 93% 96%
LanguageTool 20 20 12 0 63% 100% 77% 18 2 2 90% 90% 90% 18 0 3 100% 86% 92%
OCVN 17 15 2 2 88% 88% 88% 13 1 4 93% 76% 84% 15 2 1 88% 94% 91%
OhSome 14 13 66 1 16% 93% 28% 12 11 2 52% 80% 63% 12 3 2 80% 86% 83%
OMDb 2 2 0 0 100% 100% 100% 2 0 0 100% 100% 100% 2 0 0 100% 100% 100%
REST Countries 32 28 1 4 97% 88% 92% 28 0 4 100% 88% 93% 30 0 2 100% 94% 97%
Spotify 88 83 68 5 55% 94% 69% 82 28 6 75% 93% 83% 86 2 4 98% 96% 97%
YouTube 34 30 126 4 19% 88% 32% 28 9 6 76% 82% 79% 24 2 8 92% 75% 83%
Tổng 333 312 314 21 50% 94% 65% 304 79 29 79% 91% 85% 306 9 27 97% 92% 94%

Bảng 2: Độ chính xác của ARTE và RESTGPT.
Tên Dịch vụ ARTE RESTGPT
FDIC 25.35% 77.46%
Genome Nexus 9.21% 38.16%
Language-Tool 0% 82.98%
OCVN 33.73% 39.76%
OhSome 4.88% 87.80%
OMDb 36.00% 96.00%
REST-Countries 29.66% 92.41%
Spotify 14.79% 76.06%
Youtube 0% 65.33%
Trung bình 16.93% 72.68%

Askell, và cộng sự .2020. Mô hình ngôn ngữ là người học few-shot. Advances in neural
information processing systems 33 (2020), 1877–1901.
[9]Davide Corradini, Amedeo Zampieri, Michele Pasqua, Emanuele Viglianisi,
Michael Dallago, và Mariano Ceccato. 2022. Kiểm thử black-box tự động
của các tình huống danh nghĩa và lỗi trong RESTful API. Software Testing, Verification
and Reliability 32 (01 2022). https://doi.org/10.1002/stvr.1808
[10] Jacob Devlin, Ming-Wei Chang, Kenton Lee, và Kristina Toutanova. 2019. BERT:
Đào tạo trước Transformer Hai chiều Sâu cho Hiểu Ngôn ngữ.
arXiv:1810.04805 [cs.CL]
[11] Roy Thomas Fielding. 2000. Phong cách Kiến trúc và Thiết kế Kiến trúc Phần mềm Dựa trên Mạng . Ph. D. Dissertation. University of California, Irvine.
[12] Amid Golmohammadi, Man Zhang, và Andrea Arcuri. 2023. Kiểm thử RESTful
API: Một Khảo sát. ACM Trans. Softw. Eng. Methodol. 33, 1, Article 27 (nov 2023),
41 trang. https://doi.org/10.1145/3617175
[13] Google. 2023. Google Bard. https://bard.google.com/
[14] Zac Hatfield-Dodds và Dmitry Dygalo. 2022. Tạo ra Fuzzer Nhận thức Ngữ nghĩa từ Lược đồ Web API. Trong Proceedings of the ACM/IEEE 44th International Confer-
ence on Software Engineering: Companion Proceedings (Pittsburgh, Pennsylvania)
(ICSE '22) . Association for Computing Machinery, New York, NY, USA, 345–346.
https://doi.org/10.1145/3510454.3528637
[15] Stefan Karlsson, Adnan Causevic, và Daniel Sundmark. 2020. QuickREST:
Tạo Kiểm thử Dựa trên Thuộc tính của RESTful API được Mô tả bằng OpenAPI. Trong 2020
IEEE 13th International Conference on Software Testing, Validation and Verifica-
tion (ICST) . IEEE Press, Piscataway, NJ, USA, 131–141. https://doi.org/10.1109/
ICST46399.2020.00023
[16] Stefan Karlsson, Adnan Čaušević, và Daniel Sundmark. 2021. Tự động
Kiểm thử Dựa trên Thuộc tính của GraphQL API. Trong 2021 IEEE/ACM International Con-
ference on Automation of Software Test (AST) . IEEE Press, Piscataway, NJ, USA,
1–10. https://doi.org/10.1109/AST52587.2021.00009
[17] Myeongsoo Kim, Davide Corradini, Saurabh Sinha, Alessandro Orso, Michele
Pasqua, Rachel Tzoref-Brill, và Mariano Ceccato. 2023. Nâng cao Kiểm thử REST API
với Kỹ thuật NLP. Trong Proceedings of the 32nd ACM SIGSOFT In-
ternational Symposium on Software Testing and Analysis (ISSTA 2023) . Asso-
ciation for Computing Machinery, New York, NY, USA, 1232–1243. https:
//doi.org/10.1145/3597926.3598131
[18] Myeongsoo Kim, Saurabh Sinha, và Alessandro Orso. 2023. Kiểm thử REST
API Thích ứng với Học Củng cố. Trong 2023 38th IEEE/ACM International
Conference on Automated Software Engineering (ASE) . IEEE Press, Piscataway, NJ,
USA, 446–458. https://doi.org/10.1109/ASE56229.2023.00218
[19] Myeongsoo Kim, Qi Xin, Saurabh Sinha, và Alessandro Orso. 2022. Tạo
Kiểm thử Tự động cho REST API: Chưa có Thời gian để Nghỉ ngơi. Trong Proceedings of the 31st
ACM SIGSOFT International Symposium on Software Testing and Analysis (Virtual,
South Korea) (ISSTA 2022) . Association for Computing Machinery, New York, NY,
USA, 289–301. https://doi.org/10.1145/3533767.3534401
[20] Kerry Kimbrough. 2023. Tcases. https://github.com/Cornutum/tcases
[21] Pengfei Liu, Weizhe Yuan, Jinlan Fu, Zhengbao Jiang, Hiroaki Hayashi, và
Graham Neubig. 2023. Đào tạo trước, nhắc nhở, và dự đoán: Một khảo sát hệ thống về
các phương pháp nhắc nhở trong xử lý ngôn ngữ tự nhiên. Comput. Surveys 55, 9 (2023),
1–35.

--- TRANG 5 ---
[22] Alberto Martin-Lopez, Sergio Segura, và Antonio Ruiz-Cortés. 2021. RESTest:
Kiểm thử Black-Box Tự động của RESTful Web API. Trong Proceedings of the 30th
ACM SIGSOFT International Symposium on Software Testing and Analysis (Virtual,
Denmark) (ISSTA 2021) . Association for Computing Machinery, New York, NY,
USA, 682–685. https://doi.org/10.1145/3460319.3469082
[23] MuleSoft, LLC, một công ty của Salesforce. 2020. RAML. https://raml.org/
[24] OpenAI. 2023. Báo cáo Kỹ thuật GPT-4. arXiv:2303.08774 [cs.CL]
[25] OpenAPI. 2023. Tiêu chuẩn OpenAPI. https://www.openapis.org.
[26] R Software Inc. 2023. RapidAPI. https://rapidapi.com/terms/
[27] Alec Radford, Karthik Narasimhan, Tim Salimans, Ilya Sutskever, và cộng sự .2018.
Cải thiện hiểu biết ngôn ngữ bằng đào tạo trước sinh tạo.
[28] Alec Radford, Jeffrey Wu, Dario Amodei, Daniela Amodei, Jack Clark, Miles
Brundage, và Ilya Sutskever. 2019. Mô hình ngôn ngữ tốt hơn và những hàm ý của chúng.
[29] Leonard Richardson, Mike Amundsen, và Sam Ruby. 2013. RESTful Web APIs:
Dịch vụ cho Thế giới Đang thay đổi . O'Reilly Media, Inc., Sebastopol, CA, USA.
[30] Alex Rodriguez. 2008. Dịch vụ web restful: Những điều cơ bản. IBM developerWorks 33,
2008 (2008), 18.
[31] SE@GT. 2024. Cơ sở hạ tầng thí nghiệm, dữ liệu, và kết quả cho RESTGPT (GitHub).
https://github.com/selab-gatech/RESTGPT.
[32] SE@GT. 2024. Cơ sở hạ tầng thí nghiệm, dữ liệu, và kết quả cho RESTGPT (Zenodo).
https://doi.org/10.5281/zenodo.10467805.
[33] SmartBear Software. 2023. Mô hình dữ liệu OpenAPI. https://swagger.io/docs/
specification/data-models/keywords/.
[34] SmartBear Software. 2023. Swagger. https://swagger.io/specification/v2/.
[35] Stefan Tilkov. 2007. Giới thiệu ngắn gọn về REST.
[36] Hugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne
Lachaux, Timothée Lacroix, Baptiste Rozière, Naman Goyal, Eric Hambro,
Faisal Azhar, Aurelien Rodriguez, Armand Joulin, Edouard Grave, và Guil-
laume Lample. 2023. LLaMA: Mô hình Ngôn ngữ Nền tảng Mở và Hiệu quả.
arXiv:2302.13971 [cs.CL]
[37] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones,
Aidan N Gomez, Ł ukasz Kaiser, và Illia Polosukhin. 2017. Attention is All
you Need. Trong Advances in Neural Information Processing Systems , I. Guyon, U. Von
Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, và R. Garnett (Eds.),
Vol. 30. Curran Associates, Inc., Red Hook, NY, USA. https://proceedings.neurips.
cc/paper_files/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf
[38] Jason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, Fei Xia, Ed Chi,
Quoc V Le, Denny Zhou, và cộng sự .2022. Nhắc nhở chuỗi suy nghĩ gợi ra lý luận
trong mô hình ngôn ngữ lớn. Advances in Neural Information Processing Systems 35
(2022), 24824–24837.
[39] Huayao Wu, Lixin Xu, Xintao Niu, và Changhai Nie. 2022. Kiểm thử Tổ hợp
của RESTful API. Trong Proceedings of the 44th International Conference
on Software Engineering (Pittsburgh, Pennsylvania) (ICSE '22) . Association for
Computing Machinery, New York, NY, USA, 426–437. https://doi.org/10.1145/
3510003.3510151
[40] Man Zhang và Andrea Arcuri. 2023. Vấn đề Mở trong Fuzzing RESTful API:
Một So sánh Công cụ. ACM Trans. Softw. Eng. Methodol. 32, 6, Article 144 (sep
2023), 45 trang. https://doi.org/10.1145/3597205
