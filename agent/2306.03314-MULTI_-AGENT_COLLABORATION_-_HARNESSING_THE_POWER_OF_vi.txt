# 2306.03314.pdf
# Chuyển đổi từ PDF sang TXT
# Đường dẫn nguồn: /home/admin88/arxiv-downloader/agent/2306.03314.pdf
# Kích thước tệp: 205755 bytes

===============================================
NỘI DUNG TỆP PDF
===============================================


--- TRANG 1 ---
CỘNG TÁC ĐA TÁC NHÂN: KHAI THÁC SỨC MẠNH CỦA
CÁC TÁC NHÂN LLM THÔNG MINH
Yashar Talebirad
Đại học Alberta
Edmonton, Alberta, Canada
talebira@ualberta.ca
Amirhossein Nadiri
Đại học York
Toronto, Ontario, Canada
anadiri@yorku.ca
TÓM TẮT
Trong bài báo này, chúng tôi trình bày một khung công tác mới để nâng cao khả năng của các mô hình ngôn ngữ lớn
(LLM) bằng cách tận dụng sức mạnh của hệ thống đa tác nhân. Khung công tác của chúng tôi giới thiệu một môi trường
cộng tác nơi nhiều thành phần tác nhân thông minh, mỗi thành phần có các đặc điểm và vai trò riêng biệt, làm việc cùng nhau
để xử lý các nhiệm vụ phức tạp một cách hiệu quả và có hiệu lực hơn. Chúng tôi chứng minh tính thực tiễn và tính đa dạng
của khung công tác thông qua các nghiên cứu tình huống về trí tuệ nhân tạo tổng quát (AGI), đặc biệt tập trung vào các mô hình
Auto-GPT và BabyAGI. Chúng tôi cũng xem xét mô hình "Gorilla", tích hợp các API bên ngoài vào LLM. Khung công tác
của chúng tôi giải quyết các hạn chế và thách thức như vấn đề lặp vô hạn, rủi ro bảo mật, khả năng mở rộng, đánh giá hệ thống
và các cân nhắc đạo đức. Bằng cách mô hình hóa các lĩnh vực khác nhau như mô phỏng tòa án và các tình huống phát triển
phần mềm, chúng tôi thể hiện các ứng dụng tiềm năng và lợi ích của hệ thống đa tác nhân được đề xuất. Khung công tác của
chúng tôi cung cấp một con đường để nâng cao khả năng và hiệu suất của LLM thông qua cộng tác và trao đổi kiến thức giữa
các tác nhân thông minh.

1 Giới thiệu
Lĩnh vực trí tuệ nhân tạo đang phát triển nhanh chóng, mang theo sự phức tạp và thách thức trong việc triển khai các
mô hình AI để quản lý một loạt các nhiệm vụ. Để đáp ứng những thách thức này, các nhà nghiên cứu đang tìm hiểu
các hệ thống đa tác nhân nơi nhiều thực thể AI cộng tác hướng tới một mục tiêu chung [1]. Một hệ thống đa tác nhân
như vậy có thể được thấy trong công trình của [2], họ đã giới thiệu các tác nhân tạo sinh mô phỏng hành vi con người
hợp lý trong một môi trường hộp cát tương tác. Một ví dụ khác của việc khám phá này là Camel [3], trong đó một hệ thống
được giới thiệu tận dụng Mô hình Ngôn ngữ Lớn (LLM) để tạo ra các hướng dẫn đa dạng và chi tiết cho một loạt các
nhiệm vụ. Nó kết hợp các kịch bản nhập vai nơi hai tác nhân tương tác, từ đó chứng minh tiềm năng của các hệ thống
như vậy trong việc xử lý các tình huống thực tế phức tạp. Theo hướng tương tự, bài báo của chúng tôi đề xuất sử dụng
nhiều LLM, mỗi LLM mang các đặc điểm đa dạng, để nâng cao hiệu suất trên một loạt các nhiệm vụ.

Chúng tôi tập trung đặc biệt vào các phiên bản gần đây của các mô hình Transformer Tạo sinh Được Huấn luyện Trước
(GPT), GPT-4 và GPT-3.5-turbo. Từ tạo nội dung và hệ thống hỏi đáp đến dịch thuật ngôn ngữ, các mô hình GPT đã
thể hiện tiềm năng to lớn trên nhiều ứng dụng. Các thí nghiệm sớm với GPT-4 [4] củng cố sự thật này, cho thấy khả năng
của GPT-4 trong việc giải quyết các nhiệm vụ phức tạp trên các lĩnh vực đa dạng, tiếp cận hiệu suất ở mức con người.
Do đó, sự thành thạo của các mô hình này trong việc quản lý các nhiệm vụ ngôn ngữ phức tạp khiến chúng trở thành
ứng viên lý tưởng cho mục đích của chúng tôi. Tiến về phía trước, chúng tôi sẽ sử dụng thuật ngữ "Tác nhân Tạo sinh
Thông minh" (IGA) để chỉ một loạt các tác nhân, mỗi tác nhân được trang bị các đặc điểm và vai trò độc đáo. Các mô hình
GPT, bất chấp khả năng tạo văn bản đáng khen ngợi, hoạt động như các thực thể cô lập trong hình thức truyền thống của chúng.
Chúng thiếu khả năng cộng tác với các tác nhân khác hoặc rút ra từ các kho kiến thức bên ngoài. Điểm yếu vốn có này
hạn chế tính hữu dụng của chúng trong các tình huống phức tạp đòi hỏi nỗ lực cộng tác và chia sẻ thông tin giữa nhiều
hệ thống thông minh.

Việc sử dụng nhiều IGA được đề xuất của chúng tôi xuất phát từ quan niệm rằng sự đa dạng trong một hệ thống nâng cao
hiệu suất. Ý tưởng dựa trên nguyên tắc phân công lao động, nơi mỗi tác nhân chuyên về một chức năng cụ thể, từ đó cải thiện
hiệu quả và hiệu lực của toàn bộ hệ thống. Điều này phản ánh khái niệm làm việc nhóm trong các hệ thống con người, nơi
các cá nhân khác nhau đóng góp chuyên môn của họ để hoàn thành một nhiệm vụ. Một tập hợp đa dạng các tác nhân, mỗi tác nhân
được cấu hình với các điểm mạnh độc đáo, có thể xử lý tập thể một phạm vi rộng hơn các đầu vào, đầu ra và chiến lược xử lý tiềm năng.
Hơn nữa, việc ủy thác các vai trò khác nhau cho mỗi tác nhân mang lại sự linh hoạt và hiệu quả hơn trong bối cảnh quản lý nhiệm vụ.
Điều này mang đến khái niệm "hệ thống đa tác nhân", trong đó nhiều IGA tương tác và cộng tác để đạt được một mục tiêu chung.
Các tác nhân này có khả năng tạo ra các nhiệm vụ con, tìm kiếm thông tin và xin trợ giúp từ nhau, và cũng có thể tham gia
vào đánh giá cạnh tranh để có kết quả tốt hơn. Việc nhấn mạnh vào cộng tác và trao đổi kiến thức trong các hệ thống đa tác nhân
có thể củng cố khả năng giải quyết vấn đề của các mô hình GPT, từ đó mở đường cho các hệ thống thông minh tinh vi hơn.
Trên thực tế, hệ thống đa tác nhân được đề xuất của chúng tôi cũng nhằm mục đích tiến bộ hướng tới đạt được một
mức độ cao hơn của trí tuệ nhân tạo tổng quát (AGI). Việc phát triển và triển khai các mô hình AI tạo sinh tiên tiến
như GPT-4, đại diện cho những bước tiến đáng kể hướng tới AGI [5]. Bằng cách thúc đẩy cộng tác và trao đổi kiến thức
giữa nhiều IGA, hệ thống của chúng tôi tìm cách thúc đẩy thêm tiến trình này. Nó nhằm mục đích mô phỏng các khả năng
giải quyết vấn đề đa dạng và thích ứng là đặc trưng của một AGI, từ đó đẩy ranh giới của những gì AI có thể đạt được.

Trừu tượng hóa được đề xuất của chúng tôi cho phép người dùng tương tác với một "hộp đen" bằng cách cung cấp một lời nhắc
ban đầu và nhận đầu ra cuối cùng mà không cần phải vật lộn với các phức tạp cơ bản của cộng tác và tương tác giữa các tác nhân.
Ví dụ, lấy cảm hứng từ thành công của Mạng Đối kháng Tạo sinh (GAN), nơi hai mạng (một bộ tạo và một bộ phân biệt)
làm việc cộng tác để tạo ra kết quả tốt hơn, một hệ thống đa tác nhân đơn giản nhưng hiệu quả có thể được tạo ra sử dụng
hai IGA: Một có bộ nhớ và một có quyền truy cập Internet. Bằng cách kết hợp điểm mạnh của chúng, các tác nhân này
có thể hợp tác để giảm sự xuất hiện của 'ảo giác' hoặc tạo thông tin sai, từ đó tăng độ tin cậy của đầu ra [6]. Điều này
có thể đặc biệt có lợi trong các nhiệm vụ mà độ chính xác và kiểm tra sự thật là quan trọng.

Các mục tiêu của bài báo này là khám phá và chứng minh tiềm năng của việc có nhiều tác nhân trong một môi trường
hộp đen để tăng cường cộng tác và giải quyết vấn đề. Các mục tiêu cụ thể được nêu như sau:

• Giới thiệu Khung Công tác Tổng quát: Mục tiêu chính là mở đường cho việc tạo ra các mô hình AGI mạnh mẽ hơn.
Bằng cách cung cấp một khung công tác tổng quát cho các hệ thống đa tác nhân sử dụng LLM, chúng tôi nhằm mục đích
đẩy ranh giới của những gì AI có thể đạt được, từ đó đóng góp vào tiến bộ hướng tới Trí tuệ Nhân tạo Tổng quát.

• Hệ thống Thích ứng và Động: Chúng tôi giới thiệu một hệ thống thích ứng và có thể thay đổi chính nó để phù hợp
với các nhiệm vụ trong tầm tay. Có cấu trúc tĩnh sẽ giới hạn một hệ thống vào một tập hợp các nhiệm vụ được định
trước. Khả năng thêm và loại bỏ các tác nhân trong hệ thống sẽ làm cho nó linh hoạt và có khả năng giải quyết các
vấn đề phức tạp hơn.

• Cộng tác Đa Tác nhân: Trong bài báo này, chúng tôi khám phá việc sử dụng nhiều LLM theo cách cộng tác.
Sự cộng tác này nhằm mục đích nâng cao hiệu suất trên các nhiệm vụ đa dạng, tận dụng điểm mạnh của mỗi tác nhân
và khuyến khích mối quan hệ hiệp đồng giữa chúng.

Bằng cách giải quyết hiệu quả các mục tiêu này, bài báo này nhằm mục đích nâng cao đáng kể sự hiểu biết và sử dụng
cộng tác đa tác nhân trong lĩnh vực IGA. Việc khám phá và chứng minh mô hình cộng tác như vậy phục vụ như một bước
đệm cho nghiên cứu tương lai trong lĩnh vực này.

Phần còn lại của bài báo này được tổ chức như sau: Chúng tôi bắt đầu bằng việc đặt nền tảng cho cuộc thảo luận của chúng tôi
trong Phần 2, nơi chúng tôi giới thiệu các thành phần thiết yếu tạo nên khung công tác được đề xuất. Tiếp theo, Phần 3 cung cấp
mô tả toàn diện về khung công tác đa tác nhân được đề xuất và các chức năng của nó. Trong Phần 4, chúng tôi khám phá
các trường hợp sử dụng và ứng dụng tiềm năng khác nhau của khung công tác này, chứng minh tính đa dạng và khả năng
thích ứng của nó. Phần 5 sau đó thảo luận về các thách thức tiềm năng liên quan đến cách tiếp cận của chúng tôi, làm sáng tỏ
các hạn chế của nó. Chúng tôi kết thúc cuộc thảo luận trong Phần 6, nơi chúng tôi tóm tắt các điểm chính của cuộc thảo luận,
rút ra kết luận cuối cùng và đề xuất hướng cho nghiên cứu tương lai trong lĩnh vực này.

2 Các Khối Xây dựng của Hệ thống Đa Tác nhân

Môi trường mà hệ thống đa tác nhân hoạt động có thể được coi là một hộp đen. Điều này là do bản chất vốn có của IGA,
được huấn luyện trên lượng dữ liệu khổng lồ và tạo ra đầu ra dựa trên các tính toán nội bộ phức tạp không thể quan sát
trực tiếp hoặc diễn giải được. Môi trường hộp đen này là một không gian làm việc kỹ thuật số nơi nhiều phiên bản IGA
tương tác và cộng tác. Không gian làm việc này cung cấp một nền tảng chung cho các tác nhân giao tiếp, trao đổi thông tin
và thực hiện nhiệm vụ. Ngoài ra, các plugin có thể được sử dụng để cung cấp chức năng hoặc khả năng bổ sung cho các tác nhân.
Chúng có thể được xem như một công cụ hoặc dịch vụ chuyên biệt mà các tác nhân có thể sử dụng để thực hiện các nhiệm vụ
cụ thể hoặc truy cập các tài nguyên nhất định (nội bộ hoặc bên ngoài). Bất kỳ tác nhân hoặc plugin nào cũng có thể chịu
trách nhiệm nhận lời nhắc ban đầu từ người dùng hoặc phản hồi cho người dùng chính.

Chúng tôi ký hiệu môi trường hộp đen như một đồ thị G(V, E), trong đó V là tập hợp các đỉnh đại diện cho các IGA và
các plugin, và E là tập hợp các cạnh đại diện cho các kênh kết nối giữa các tác nhân và các plugin, và giữa chính các tác nhân.

2.1 Biểu diễn Tác nhân

Mỗi tác nhân i ∈ V được biểu diễn như một tuple Ai = (Li, Ri, Si, Ci, Hi), trong đó:

• Li đề cập đến phiên bản mô hình ngôn ngữ được sử dụng bởi tác nhân. Điều này bao gồm loại mô hình (như GPT-4
hoặc GPT-3.5-turbo) và các tham số cấu hình cụ thể của nó, bao gồm cài đặt 'nhiệt độ' ảnh hưởng đến mức độ
ngẫu nhiên trong đầu ra của tác nhân. Việc lựa chọn mô hình ngôn ngữ có thể được quyết định bởi yêu cầu nhiệm vụ.
Ví dụ, trong khi GPT-4, do khả năng lý luận đặc biệt của nó, có thể được giao các nhiệm vụ đòi hỏi hiểu biết sâu sắc
và giải quyết vấn đề phức tạp, GPT-3.5-turbo có thể được sử dụng cho các nhiệm vụ yêu cầu thực thi nhanh hơn
do hiệu suất nhanh hơn của nó.

• Ri là vai trò của tác nhân. Vai trò xác định trách nhiệm của tác nhân và cung cấp cho tác nhân ý thức về mục đích
và hướng đi, hướng dẫn các hành động và tương tác của nó. Cụ thể hơn, những trách nhiệm này là các nhiệm vụ
hoặc chức năng mà tác nhân được mong đợi thực hiện trong hệ thống. Ví dụ, trách nhiệm của một tác nhân có thể
bao gồm xử lý và phản hồi các truy vấn của người dùng, điều phối tương tác giữa các tác nhân khác, quản lý tài nguyên,
hoặc giám sát một khía cạnh cụ thể của hoạt động hệ thống.

• Si là trạng thái của tác nhân, bao gồm cơ sở kiến thức hiện tại và "suy nghĩ" của nó. Trạng thái của tác nhân phát triển
theo thời gian dựa trên các nhiệm vụ nó thực hiện và các tương tác nó có với các tác nhân khác hoặc môi trường.
  – Thành phần "kiến thức" của trạng thái có thể được xem như một biểu diễn của sự hiểu biết hoặc nhận thức
  hiện tại của tác nhân về môi trường, nhiệm vụ và tương tác của nó. Nó được cập nhật bất cứ khi nào tác nhân
  học thông tin mới hoặc đạt được hiểu biết mới.
  – "Suy nghĩ" trong bối cảnh này có thể được diễn giải như tiêu điểm hoặc ý định hiện tại của tác nhân [7].
  Chúng đại diện cho những gì tác nhân hiện đang suy xét hoặc lập kế hoạch, dựa trên kiến thức và nhiệm vụ
  trong tầm tay. Suy nghĩ có thể thông báo cho hành động tiếp theo của tác nhân và có thể được cập nhật sau
  mỗi hoạt động. Chúng cũng có thể bao gồm đối thoại nội tâm hoặc quá trình lý luận của tác nhân khi nó
  làm việc hướng tới mục tiêu.

• Ci là thuộc tính boolean chỉ ra liệu một tác nhân có khả năng tạo ra các tác nhân mới hay không. Bằng cách đặt thuộc tính
này thành true, một tác nhân có thể tạo ra động các tác nhân mới trong hệ thống.

• Hi là tập hợp các tác nhân mà tác nhân này có quyền dừng lại. Bằng cách chỉ định các tác nhân có thể bị dừng,
một tác nhân có thể thực thi quyền kiểm soát việc thực thi các tác nhân khác trong hệ thống.

2.2 Biểu diễn Plugin

Mỗi plugin j ∈ V được biểu diễn như một tuple Pj = (Fj, Cj, Uj), trong đó:

• Fj là tập hợp các chức năng của plugin, là các hành động mà một tác nhân có thể thực hiện. Điều này có thể bao gồm
truy cập và thao tác các tài nguyên kỹ thuật số trong môi trường này, như tệp và cơ sở dữ liệu, và tương tác với
các hệ thống bên ngoài thông qua API và các giao diện khác.

• Cj là các cấu hình liên quan đến plugin. Tham số là các biến được đặt khi plugin được khởi tạo. Ví dụ bao gồm
khóa API để truy cập các dịch vụ cụ thể, hoặc giá trị ngưỡng để xác định hành vi cụ thể. Tham số giúp tùy chỉnh
chức năng của plugin theo nhiệm vụ hoặc ứng dụng trong tầm tay.

• Uj là tập hợp các ràng buộc sử dụng hoặc điều kiện chi phối việc sử dụng plugin. Những ràng buộc này xác định
ranh giới và khả năng của plugin và có thể bao gồm các hạn chế về tài nguyên tính toán, loại dữ liệu đầu vào
và khả năng đầu ra.

2.3 Biểu diễn Kết nối và Thông điệp

Mỗi cạnh eij ∈ E kết nối một tác nhân Ai với một plugin Pj hoặc một tác nhân khác Aj sử dụng một kênh giao tiếp.
Mỗi tác nhân có thể gửi thông điệp thông qua các kênh mà nó được kết nối, và mỗi thông điệp m ∈ Mij, được gửi từ
tác nhân Ai đến Aj, được biểu diễn như một tuple m = (Sm, Am, Dm), trong đó:

• Sm là nội dung của thông điệp.
• Am là hành động liên quan đến thông điệp, có thể là một phân công nhiệm vụ, một báo cáo, một yêu cầu,
hoặc bất kỳ hành động nào khác.
• Dm là siêu dữ liệu liên quan đến thông điệp, có thể bao gồm thông tin như dấu thời gian, người gửi, người nhận
và có thể là dữ liệu cụ thể theo ngữ cảnh bổ sung.

Một cách tiếp cận khác để truyền dữ liệu giữa các tác nhân có thể liên quan đến việc sử dụng plugin. Ví dụ, các plugin
được thiết kế để lưu trữ dữ liệu có thể phục vụ như cơ sở dữ liệu chia sẻ, cho phép các tác nhân khác nhau truy cập
và lấy thông tin được lưu trữ bởi các tác nhân khác. Mở rộng khái niệm này hơn nữa, một plugin có thể hoạt động như
một bảng giao tiếp, cho phép giao tiếp đa hướng giữa nhiều tác nhân. Điều này về cơ bản tạo thành một nền tảng
giao tiếp nhiều-với-nhiều trong hệ thống.

3 Chi tiết Khung Công tác Được Đề xuất

Trong bất kỳ hệ thống đa tác nhân nào, bản chất của tương tác và cộng tác giữa các tác nhân đóng vai trò quan trọng
trong việc xác định hiệu suất tổng thể của hệ thống. Phần này khám phá các cách mà những tương tác này có thể được
quản lý và tối ưu hóa, đặc biệt trong bối cảnh của một hệ thống gồm nhiều IGA.

3.1 Thiết kế Hệ thống

Thiết kế một hệ thống đa tác nhân liên quan đến việc xác định số lượng tác nhân, các plugin cần thiết, thiết lập kết nối
giữa các tác nhân và plugin, tạo kết nối giữa các tác nhân để cho phép giao tiếp, và gán vai trò và thuộc tính của các tác nhân.
Thiết kế này nhằm mục đích tối ưu hóa cấu hình và điều chỉnh nó với mục tiêu cuối cùng mong muốn của hệ thống,
cho phép cộng tác và tương tác hiệu quả giữa các tác nhân.

Khi thiết kế hệ thống, các bước sau được thực hiện:

• Vai trò Tác nhân: Các vai trò cho các tác nhân được xác định và định nghĩa trong môi trường, dựa trên các yêu cầu
cụ thể của nhiệm vụ trong tầm tay. Mỗi tác nhân được gán một vai trò, chỉ định trách nhiệm và nhiệm vụ của chúng
trong hệ thống.

• Kết nối Tác nhân-Plugin: Các kết nối giữa tác nhân và plugin được thiết lập để cung cấp cho các tác nhân chức năng
bổ sung. Bằng cách kết nối các tác nhân với plugin, các tác nhân có quyền truy cập vào công cụ, tài nguyên hoặc
dịch vụ bên ngoài nâng cao khả năng của chúng. Những kết nối này cho phép các tác nhân tận dụng các chức năng
của plugin.

• Kết nối Tác nhân-Tác nhân: Các kết nối giữa các tác nhân được tạo ra để cho phép giao tiếp và cộng tác. Những kết nối
này cho phép các tác nhân trao đổi thông điệp, chia sẻ thông tin và hợp tác hướng tới đạt được mục tiêu chung.

• Hoạt động Hệ thống: Các tác nhân có thể được cấp quyền cụ thể để tạo ra các tác nhân mới hoặc dừng một tập hợp
cụ thể các tác nhân. Ngoài ra, bất kỳ plugin hoặc tác nhân nào có thể chịu trách nhiệm nhận lời nhắc ban đầu từ
người dùng hoặc phản hồi cho họ.

Bằng cách thiết kế cẩn thận hệ thống với các tác nhân, plugin được định nghĩa rõ ràng và các kết nối giữa chúng,
khung công tác cho phép tương tác và cộng tác đa tác nhân hiệu quả. Thiết kế này cho phép các tác nhân giao tiếp
hiệu quả, điều phối và làm việc cùng nhau hướng tới đạt được mục tiêu chung trong môi trường hộp đen.

3.2 Thêm Tác nhân Động

Trong một số tình huống nhất định, một tác nhân có khả năng tạo ra các tác nhân mới có thể thêm động các tác nhân
bổ sung vào hệ thống. Khả năng này cho phép các tác nhân phân phối khối lượng công việc và gán trách nhiệm cụ thể
để tăng cường cộng tác và quản lý khối lượng công việc. Nhu cầu này có thể phát sinh như một sản phẩm phụ của
sự gia tăng đột ngột trong khối lượng công việc của hệ thống.

Khi một tác nhân mới được tạo ra, người tạo gán cho tác nhân mới một vai trò, cấp cho nó các thuộc tính cần thiết
và thiết lập kết nối với các tác nhân và plugin khác. Những thuộc tính và kết nối này là tập con của những thuộc tính
có sẵn cho tác nhân tạo. Ngoài ra, một kết nối đến người tạo được thiết lập.

Khi tác nhân mới được tạo ra và khởi tạo, nó hoạt động độc lập trong vai trò được định nghĩa. Tác nhân tạo đặt
một mục tiêu rõ ràng cho tác nhân mới, cung cấp hướng dẫn ban đầu để đảm bảo quá trình chuyển giao trách nhiệm
diễn ra suôn sẻ. Bằng cách cho phép các tác nhân tạo ra động các tác nhân mới và ủy thác nhiệm vụ, hệ thống có thể
quản lý hiệu quả khối lượng công việc, tăng cường khả năng xử lý song song và cải thiện hiệu suất hệ thống tổng thể.
Cách tiếp cận động này thúc đẩy một môi trường cộng tác nơi các tác nhân có thể tổ chức và phân phối nhiệm vụ
một cách động, cuối cùng đóng góp vào việc đạt được mục tiêu chung.

Thực tế là một nhà thiết kế đã thiết kế hệ thống và định nghĩa khả năng, kết nối và quyền của các tác nhân không
mâu thuẫn với việc thêm động các tác nhân và khả năng phân phối khối lượng công việc và ủy thác trách nhiệm.
Mặc dù nhà thiết kế đã thiết kế khung công tác ban đầu, việc thêm động các tác nhân cho phép sự linh hoạt và thích ứng
trong hệ thống được thiết kế. Nó trao quyền cho chính các tác nhân đưa ra quyết định và tạo ra các tác nhân mới
dựa trên đánh giá riêng của họ về khối lượng công việc và nhu cầu hỗ trợ. Vai trò của nhà thiết kế là cung cấp
cấu trúc và hướng dẫn ban đầu, nhưng hệ thống cho phép sự tự chủ và tự tổ chức của tác nhân.

Do đó, thiết kế hệ thống và việc thêm động các tác nhân hoạt động hòa hợp. Khung công tác ban đầu do nhà thiết kế
đặt ra phục vụ như một nền tảng vững chắc, trong khi khả năng thích ứng động và phân phối khối lượng công việc
của các tác nhân đảm bảo sự linh hoạt và khả năng phục hồi dưới các điều kiện và yêu cầu thay đổi.

3.3 Cơ chế Phản hồi và Tự Phản hồi

Các cơ chế phản hồi đóng vai trò then chốt trong các hệ thống đa tác nhân, cho phép các tác nhân học từ kinh nghiệm
của họ và thích ứng các chiến lược để cải thiện hiệu suất. Những cơ chế này có thể được phân loại thành phản hồi
giữa các tác nhân và tự phản hồi [8,9,10]. Phản hồi giữa các tác nhân liên quan đến việc các tác nhân cung cấp phê bình
mang tính xây dựng cho nhau dựa trên tương tác và cộng tác của họ. Phản hồi như vậy có thể giúp các tác nhân xác định
các lĩnh vực cần cải thiện và thích ứng chiến lược của họ tương ứng, cho phép học tập và cải thiện liên tục trong hệ thống [8].
Một số hệ thống đa tác nhân sử dụng phản hồi giữa các tác nhân bằng cách cho các tác nhân tham gia vào nhập vai.
Cách tiếp cận này liên quan đến việc thiết kế các lời nhắc cụ thể (được ký hiệu là Inception Prompting trong [3]) để
hướng dẫn các tác nhân trò chuyện hướng tới hoàn thành nhiệm vụ trong khi duy trì tính nhất quán với mục tiêu chính.
Cách tiếp cận này có thể được tích hợp trong mô hình được đề xuất, giao các vai trò khác nhau cho nhiều tác nhân
và kết nối chúng lại với nhau.

Mặt khác, tự phản hồi liên quan đến việc các tác nhân đánh giá hiệu suất của chính họ và xác định các lĩnh vực cần cải thiện.
Điều này có thể được đạt được thông qua một cơ chế tự đánh giá nơi các tác nhân đánh giá hiệu suất của họ dựa trên
các tiêu chí hoặc mục tiêu được định trước. Tự đánh giá này có thể giúp các tác nhân xác định điểm mạnh và điểm yếu
của họ, thích ứng chiến lược và cải thiện khả năng giải quyết vấn đề [9]. Trong mô hình được đề xuất, tự phản hồi có thể
được mô phỏng bởi một cặp tác nhân được kết nối: một có vai trò đưa ra phản hồi và một được giao nhiệm vụ tinh chỉnh
phản hồi dựa trên phản hồi nhận được. Lưu ý rằng việc mô phỏng này loại bỏ nhu cầu của con người yêu cầu khả năng
tinh chỉnh phản hồi.

3.4 Tác nhân Oracle

Tác nhân oracle là một loại tác nhân độc đáo trong hệ thống hoạt động theo cách không trạng thái và không có bộ nhớ.
Không giống như các tác nhân khác có thể duy trì trạng thái hoặc bộ nhớ để hướng dẫn hành động của họ, tác nhân oracle
thực hiện các hành động dựa hoàn toàn trên đầu vào hiện tại mà nó nhận được, mà không xem xét bất kỳ đầu vào hoặc
đầu ra trong quá khứ. Đặc điểm này làm cho các tác nhân oracle đặc biệt hữu ích trong các tình huống mà nhiệm vụ
trong tầm tay độc lập với các tương tác hoặc trạng thái trước đó.

Mỗi tương tác với tác nhân oracle được coi như một sự kiện cô lập, độc lập với bất kỳ tương tác trước đó nào. Điều này
làm cho các tác nhân oracle có tính dự đoán cao, vì hành động của chúng chỉ được xác định bởi đầu vào hiện tại và
không bị ảnh hưởng bởi bất kỳ sự kiện trong quá khứ nào. Các tác nhân oracle chủ yếu được thiết kế để được sử dụng
bởi các tác nhân khác. Ví dụ, một tác nhân oracle có thể đưa ra phản hồi về phản hồi của các tác nhân khác, và để
họ tinh chỉnh phản hồi trước khi tiếp tục.

3.5 Cơ chế Dừng và Giám sát

Khung công tác được đề xuất kết hợp một cơ chế thiết yếu theo đó một tác nhân có thể dừng các tác nhân khác trong
một số điều kiện nhất định. Khả năng này rất quan trọng để quản lý và điều phối hiệu quả các nhiệm vụ trong một
hệ thống đa tác nhân. Cụ thể, khả năng này có thể được cấp cho bất kỳ tác nhân nào trong hệ thống, bao gồm những
tác nhân tạo ra các tác nhân mới. Quyền dừng trở nên vốn có cần thiết cho những tác nhân cha mẹ này để duy trì
kiểm soát và đảm bảo hoạt động đúng đắn của các tác nhân được tạo ra.

Trong thực tế, một tác nhân dừng một tác nhân khác sẽ liên quan đến việc báo hiệu cho tác nhân mục tiêu ngừng
hoạt động hiện tại của nó. Việc báo hiệu này có thể ở dạng lệnh hoặc thông điệp được truyền qua các giao diện
giao tiếp được định nghĩa trong hệ thống. Khi nhận được tín hiệu này, tác nhân bị dừng sẽ ngay lập tức dừng hoạt động
hiện tại và chờ hướng dẫn thêm. Tùy thuộc vào thiết kế hệ thống, nó có thể vào trạng thái nhàn rỗi hoặc thực hiện
một hoạt động mặc định trong những trường hợp như vậy. Đối với các tác nhân tạo và các tác nhân mà họ tạo ra,
cơ chế dừng hoạt động tương tự. Nếu một tác nhân tạo xác định hoạt động không mong muốn trong tác nhân được tạo,
nó có thể khởi tạo lệnh dừng, khiến chúng dừng hoạt động hiện tại ngay lập tức. Tương tác này nhấn mạnh vai trò
giám sát của tác nhân tạo, đảm bảo rằng tác nhân được tạo hoạt động đúng và không lệch khỏi vai trò dự định.

Trên thực tế, vai trò giám sát này có thể được tăng cường bằng việc giới thiệu một "Tác nhân Giám sát" chuyên biệt.
Tác nhân Giám sát này có thể theo dõi tiến trình và danh sách nhiệm vụ của tác nhân chính, cung cấp phản hồi kịp thời
khi cần thiết. Ví dụ, nếu một tác nhân bị kẹt trong vòng lặp hoặc lệch khỏi nhiệm vụ được giao, Tác nhân Giám sát
có thể phát hiện những vấn đề này bằng cách xem xét các hoạt động gần đây. Khi phát hiện như vậy, Tác nhân Giám sát
có thể khởi tạo lệnh dừng, nhắc nhở tác nhân chính ngừng hoạt động hiện tại và thay đổi hướng hành động. Cơ chế này
không chỉ tạo điều kiện quản lý nhiệm vụ tốt hơn mà còn giảm nhu cầu giám sát và can thiệp liên tục của con người
trong quá trình phản hồi.

3.6 Thiết kế Hệ thống Tự động

Một khía cạnh đáng chú ý của khung công tác được đề xuất là vai trò tiềm năng của một LLM thông minh như nhà thiết kế
hệ thống. Khả năng độc đáo của IGA mở rộng ra ngoài việc chỉ là một tác nhân trong môi trường, vì nó có khả năng
đảm nhận vai trò thiết kế chính hệ thống. Nó có thể xem xét các mục tiêu, ràng buộc và chức năng mong muốn của
hệ thống để định nghĩa các vai trò và trách nhiệm được giao cho mỗi tác nhân. Ngoài ra, IGA có thể sử dụng kiến thức
về các giao thức giao tiếp và khung công tác cộng tác để xác định các tương tác và kết nối tối ưu giữa các tác nhân,
plugin và các thành phần hệ thống khác. Dựa vào sự hiểu biết toàn diện về lĩnh vực vấn đề, kết hợp với việc hình thành
hệ thống chính xác và các mục tiêu được chỉ định, IGA có thể thiết kế một hệ thống hiệu quả giải quyết tối ưu nhiệm vụ
trong tầm tay. Ngoài ra, sau khi con người thiết kế hệ thống ban đầu, một IGA có thể phân tích cấu trúc hệ thống,
vai trò, tương tác và kết nối, và cung cấp phản hồi và tinh chỉnh cho một hệ thống đã được thiết kế. IGA cũng có thể
sử dụng khả năng tạo ngôn ngữ tự nhiên để truyền đạt thiết kế hệ thống cho chủ sở hữu hệ thống. Nó có thể cung cấp
mô tả rõ ràng và ngắn gọn về vị trí, vai trò và tương tác của các tác nhân, cho phép hiểu biết toàn diện về cấu trúc
và hoạt động của hệ thống.

4 Các Trường hợp Sử dụng và Ứng dụng

Phần này nhằm mục đích chứng minh tính thực tiễn và tính đa dạng của khung công tác đa tác nhân được đề xuất bằng cách
xem xét khả năng áp dụng của nó cho các mô hình AI hiện có. Chúng tôi tập trung cụ thể vào hai mô hình trí tuệ nhân tạo
tổng quát (AGI) tiên tiến, Auto-GPT và BabyAGI, và xem xét cách khung công tác của chúng tôi có thể tiềm năng nâng cao
thiết kế và hoạt động của chúng. Chúng tôi khám phá các thành phần chính của các mô hình, hoạt động và hạn chế của chúng,
và cách khung công tác của chúng tôi có thể được áp dụng để cải thiện hiệu suất của chúng. Ngoài ra, chúng tôi thảo luận
về các sửa đổi tiềm năng mà khung công tác của chúng tôi có thể thêm vào, từ đó cung cấp sự hiểu biết rộng hơn về
các ứng dụng tiềm năng và lợi ích của hệ thống đa tác nhân được đề xuất.

4.1 Trí tuệ Nhân tạo Tổng quát: Auto-GPT

Auto-GPT là một ứng dụng AI mã nguồn mở thử nghiệm đã nhận được sự chú ý đáng kể do khả năng tự động đầy hứa hẹn.
Nó được coi là một bước hướng tới AGI, một loại AI có thể thực hiện các nhiệm vụ trí tuệ ở mức con người. Auto-GPT
có quyền truy cập internet, quản lý bộ nhớ dài hạn và ngắn hạn, GPT-4 để tạo văn bản, và lưu trữ và tóm tắt tệp với
GPT-3.5. Nó có thể thực hiện các nhiệm vụ mà ChatGPT [11] có thể làm, như gỡ lỗi mã và viết email, nhưng nó cũng
có thể hoàn thành các nhiệm vụ nâng cao hơn với ít lời nhắc hơn. Thiết kế của Auto-GPT dựa trên khái niệm suy nghĩ,
về cơ bản là các bước nó thực hiện để hoàn thành một nhiệm vụ.

4.1.1 Mô hình

Khung công tác mà Auto-GPT chạy trên có thể được mô hình hóa bằng khung công tác được đề xuất của chúng tôi.
Chúng ta có thể coi tác nhân chính của Auto-GPT như một tác nhân duy nhất trong mô hình của chúng ta. Mục tiêu
của tác nhân là thực hiện các nhiệm vụ tự động bằng cách nối các suy nghĩ lại với nhau, trong khi làm việc hướng tới
các mục tiêu được chỉ định bởi người dùng. Trạng thái của tác nhân bao gồm nhiệm vụ hiện tại mà nó đang làm việc,
và chuỗi suy nghĩ mà nó đã tạo ra cho đến nay. Tác nhân này cũng có thể tạo ra các tác nhân khác và dừng bất kỳ
tác nhân nào trong số chúng. Plugin có thể được biểu diễn như các dịch vụ hoặc công cụ bên ngoài mà tác nhân sử dụng
để thực hiện các nhiệm vụ của nó. Ví dụ, duyệt internet, quản lý bộ nhớ, tương tác với tệp, thực thi mã, tạo hình ảnh
và các nhiệm vụ tương tự có thể được xác định như plugin trong khung công tác của chúng tôi. Cũng sẽ có một tác nhân
oracle, chịu trách nhiệm cho các nhiệm vụ như tóm tắt và phê bình phản hồi của tác nhân chính. Những plugin này,
cùng với các tác nhân mà tác nhân chính tạo ra, đều có thể được coi như các nút trong đồ thị tương ứng với hệ thống,
và các kết nối giữa tác nhân Auto-GPT và các plugin của nó, cùng với các kết nối giữa tác nhân và các tác nhân khác
mà nó tạo ra, có thể được biểu diễn như các cạnh trong đồ thị. Thông điệp được gửi qua những kết nối này có thể bao gồm
phân công nhiệm vụ, yêu cầu thông tin hoặc lệnh thực thi các hoạt động nhất định.

4.1.2 Hạn chế và Cải thiện Có thể

Bất chấp tiềm năng của nó, Auto-GPT đối mặt với một số thách thức và hạn chế. Một trở ngại đáng kể là nó có thể
bị kẹt trong vòng lặp, làm cho nó không thể hoạt động đúng cách. Vấn đề lặp vô hạn là kết quả của việc hệ thống dựa
vào việc nối các suy nghĩ lại với nhau để thực hiện nhiệm vụ. Trong khi cách tiếp cận này cho phép hệ thống thực hiện
các nhiệm vụ phức tạp, nó cũng làm cho nó dễ bị kẹt trong vòng lặp, đặc biệt khi đối phó với các vấn đề phức tạp
hoặc mơ hồ. Tuy nhiên, các tính năng được đề xuất trong khung công tác của chúng tôi có thể giải quyết điểm yếu này
và mở ra các con đường cải thiện thêm. Ví dụ, sự bất lực của tác nhân trong việc nhận ra khi nó đã bị kẹt hoặc chú ý
rằng nó đã lệch khỏi nhiệm vụ có thể tiềm năng được giảm thiểu bằng cách thêm "Tác nhân Giám sát" đã được giới thiệu
trong Phần 3.5.

Như một ví dụ khác, người ta có thể thực hiện khái niệm đồng tác nhân, nơi nhiều phiên bản tự động của Auto-GPT
có thể cộng tác, chia sẻ không gian làm việc cho tệp và giao tiếp trong một bảng, về cơ bản mô phỏng một nhóm người
làm việc từ xa, mỗi người có một vai trò cụ thể.

Ngoài ra, khả năng của hệ thống tương tác với tệp và thực thi mã mở ra một loạt khả năng cho việc sử dụng của nó,
nhưng nó cũng giới thiệu các rủi ro bảo mật tiềm năng. Những rủi ro này có thể được giảm thiểu bằng cách có con người
cung cấp phản hồi và ủy quyền cho mỗi bước, nhưng bước này hoàn toàn bị bỏ qua khi sử dụng chế độ "liên tục"
của ứng dụng. Điều này có nghĩa là hệ thống nên được thiết kế với các biện pháp bảo mật mạnh mẽ để ngăn chặn
truy cập trái phép hoặc lạm dụng. Điều này có thể được thực hiện bằng cách sử dụng một tác nhân oracle không trạng thái,
có thể giám sát mỗi nhiệm vụ nhạy cảm và quyết định xem nó có thực sự độc hại hay không.

4.2 Trí tuệ Nhân tạo Tổng quát: BabyAGI

BabyAGI là một tác nhân AI có thể tạo ra và cố gắng thực thi các nhiệm vụ dựa trên một mục tiêu được đưa ra. BabyAGI
hoạt động dựa trên ba chuỗi LLM: Chuỗi tạo nhiệm vụ, Chuỗi ưu tiên nhiệm vụ và Chuỗi thực thi.

4.2.1 Mô hình

Trong khung công tác được đề xuất của chúng tôi, BabyAGI có thể được mô hình hóa như một hệ thống các tác nhân
kết nối với nhau, mỗi tác nhân có một vai trò cụ thể. Các tác nhân trong BabyAGI bao gồm một tác nhân tạo nhiệm vụ,
một tác nhân ưu tiên nhiệm vụ và một tác nhân thực thi. Ngoài những tác nhân này, BabyAGI sử dụng một cơ sở dữ liệu
vector để lưu trữ và truy xuất kết quả nhiệm vụ cho ngữ cảnh. Điều này có thể được mô hình hóa như một plugin
trong khung công tác của chúng tôi tương tác với cơ sở dữ liệu vector, với các hoạt động lưu trữ và truy xuất dữ liệu.
Hơn nữa, có thể có một tác nhân bổ sung trong khung công tác của chúng tôi tương tác với người dùng, tinh chỉnh đầu vào
và đặt nó vào lưu trữ nhiệm vụ.

4.2.2 Hạn chế và Cải thiện Có thể

Khung công tác của chúng tôi có thể tiềm năng cải thiện triển khai hiện tại của BabyAGI bằng cách cung cấp một
cách tiếp cận có cấu trúc và mô-đun hơn để thiết kế hệ thống. Bằng cách mô hình hóa từng tác nhân, plugin và hoạt động
một cách rõ ràng, khung công tác của chúng tôi có thể làm cho việc hiểu và sửa đổi hệ thống dễ dàng hơn. Hơn nữa,
sự hỗ trợ của khung công tác chúng tôi cho vòng phản hồi có thể cho phép các tác nhân trong BabyAGI học từ hiệu suất
của chính họ và cải thiện theo thời gian.

4.3 Mô hình "Gorilla"

4.3.1 Mô hình

Hệ thống Gorilla [12] dựa trên một mô hình LLaMA [13] được tinh chỉnh với khả năng bổ sung để truy xuất tài liệu
và tích hợp thông tin này trong cả quá trình huấn luyện và suy luận. Nó có khả năng mở rộng ra ngoài việc chỉ mô hình hóa
ngôn ngữ thuần túy, áp dụng các tính năng cho phép tương tác với các API bên ngoài, xử lý truy xuất tài liệu và thích ứng
với các thay đổi phiên bản. Trong hệ thống này, các cuộc gọi API và tài liệu của chúng được sử dụng để hướng dẫn LLM
về các nhiệm vụ cụ thể mà mỗi API có thể xử lý. Mô hình học cách ánh xạ lời nhắc tới cuộc gọi API bằng cách sử dụng
một hệ thống truy xuất để truy cập tài liệu API cập nhật nhất từ cơ sở dữ liệu. Gorilla cũng giảm thiểu ảo giác và thích ứng
với các thay đổi trong tài liệu API bằng cách sử dụng một bộ truy xuất trong quá trình huấn luyện và suy luận.

Trong khung công tác của chúng tôi, chúng ta cần một tác nhân duy nhất để mô hình hóa hệ thống Gorilla. Để xử lý
các API, mô hình của chúng ta có thể sử dụng plugin, có thể được xem như các phần mở rộng hoặc mô-đun được thiết kế
để xử lý các nhiệm vụ cụ thể. Điều này dẫn đến sự linh hoạt và tính đa dạng tăng cường trong hệ thống cho phép nó
xử lý một phạm vi rộng hơn các nhiệm vụ.

4.3.2 Hạn chế và Cải thiện Có thể

Mặc dù việc tích hợp thông tin trong cả quá trình huấn luyện và suy luận cho thấy cải thiện đáng kể so với GPT-4
trong việc viết cuộc gọi API, mô hình của chúng tôi cung cấp một khung công tác tổng quát và mạnh mẽ hơn có thể
được tùy chỉnh cho các trường hợp sử dụng khác nhau. Ví dụ, mô hình của chúng tôi có thể xử lý các cập nhật thời gian
thực cho API và tài liệu của chúng hiệu quả hơn bằng cách cập nhật cơ sở kiến thức của tác nhân liên quan, thay vì
phải cập nhật toàn bộ mô hình. Ngoài ra, nó có thể xử lý chức năng chồng chéo giữa các API khác nhau một cách
trang nhã hơn bằng cách quyết định giữa các tác nhân khác nhau dựa trên chức năng của chúng.

Mô hình của chúng tôi cũng có thể tiềm năng cải thiện quá trình giảm thiểu ảo giác bằng cách sử dụng một tác nhân
chuyên dụng cho nhiệm vụ này. Tác nhân này có thể xác minh phản hồi của tác nhân chính để tìm ra khi nào tác nhân
đang ảo giác và can thiệp để sửa chữa đầu ra.

Mô hình của chúng tôi có thể cải thiện thêm quá trình tương tác với API bằng cách sử dụng các tác nhân khác nhau
cho các API khác nhau, mỗi tác nhân được trang bị plugin cho tài liệu API liên quan. Điều này sẽ cho phép mô hình
của chúng tôi xử lý các nhiệm vụ và tương tác phức tạp hơn, vì nó có thể tận dụng khả năng kết hợp của nhiều tác nhân
cùng một lúc.

4.4 Nghiên cứu Tình huống

Trong phần này, chúng tôi sẽ đi sâu vào hai nghiên cứu tình huống riêng biệt để minh họa các ứng dụng thực tiễn
của hệ thống đa tác nhân được đề xuất. Những nghiên cứu tình huống này, cụ thể là mô phỏng tòa án và tình huống
phát triển phần mềm, đã được chọn do tính phức tạp vốn có và sự cần thiết của các vai trò và tương tác đa dạng trong chúng.
Cả hai tình huống đều liên quan đến vô số nhiệm vụ và trách nhiệm cần được điều phối hiệu quả để đạt được kết quả
thành công. Bằng cách sử dụng khung công tác đa tác nhân của chúng tôi, chúng tôi nhằm mục đích chứng minh cách
các quá trình phức tạp như vậy có thể được mô hình hóa trong một khung công tác chung. Mỗi tác nhân trong hệ thống
sẽ được gán một vai trò cụ thể, phản ánh các vai trò thực tế trong những tình huống này. Chúng sẽ được trang bị
các công cụ và khả năng cần thiết để thực hiện trách nhiệm của mình, từ đó đóng góp vào mục tiêu tổng thể.

4.4.1 Mô phỏng Tòa án

Trước khi giới thiệu các LLM mới, các nỗ lực mô phỏng môi trường như tòa án đòi hỏi huấn luyện với dữ liệu cụ thể [14].
Tuy nhiên, với những tiến bộ gần đây trong lĩnh vực mô hình ngôn ngữ, quá trình huấn luyện có thể không cần thiết nữa.
Trong bối cảnh này, khung công tác của chúng tôi có thể được sử dụng để mô hình hóa các vai trò và tương tác khác nhau
diễn ra trong tòa án. Điều này bao gồm các vai trò của thẩm phán, bồi thẩm đoàn, luật sư, nhân chứng và thậm chí
thư ký tòa án. Mỗi vai trò này có thể được đại diện bởi một tác nhân trong hệ thống, với các trách nhiệm và khả năng
cụ thể được gán cho chúng.

• Tác nhân Thẩm phán: Tác nhân Thẩm phán chịu trách nhiệm giám sát thủ tục, đưa ra phán quyết về các vấn đề
pháp lý và cuối cùng đưa ra phán quyết trong các phiên tòa không có bồi thẩm đoàn. Tác nhân này sẽ cần một plugin
cung cấp quyền truy cập vào cơ sở dữ liệu toàn diện về kiến thức pháp lý và tiền lệ, cho phép nó đưa ra quyết định
có thông tin.

• Tác nhân Bồi thẩm đoàn: Tác nhân Bồi thẩm đoàn chịu trách nhiệm xác định sự thật của vụ án và đưa ra phán quyết
trong các phiên tòa có bồi thẩm đoàn. Tác nhân này sẽ cần một plugin cho phép nó hiểu và đánh giá bằng chứng
được trình bày trong phiên tòa.

• Tác nhân Luật sư: Các Tác nhân Luật sư đại diện cho công tố và bào chữa trong phiên tòa. Họ chịu trách nhiệm
trình bày các vụ án tương ứng, thẩm vấn chéo nhân chứng và đưa ra lập luận kết thúc. Những tác nhân này sẽ cần
plugin cung cấp quyền truy cập vào kiến thức pháp lý, cũng như plugin cho phép chúng hiểu và tạo ra các lập luận
thuyết phục.

• Tác nhân Nhân chứng: Các Tác nhân Nhân chứng cung cấp lời khai trong phiên tòa. Họ sẽ cần plugin cho phép
chúng nhớ lại và mô tả sự kiện một cách chính xác.

• Tác nhân Thư ký Tòa án: Tác nhân Thư ký Tòa án chịu trách nhiệm các nhiệm vụ hành chính như duy trì hồ sơ
tòa án và tuyên thệ. Tác nhân này sẽ cần plugin cho phép nó quản lý và truy xuất tài liệu, cũng như plugin cho phép
nó thực hiện các nhiệm vụ hành chính.

Các tương tác giữa những tác nhân này sẽ được điều chỉnh bởi một tập hợp các quy tắc và giao thức được định trước,
mô phỏng các thủ tục được tuân theo trong một tòa án thực. Ví dụ, Tác nhân Thẩm phán có thể đưa ra hướng dẫn
cho các tác nhân khác, các Tác nhân Luật sư có thể hỏi các Tác nhân Nhân chứng, và Tác nhân Bồi thẩm đoàn có thể
yêu cầu làm rõ hoặc thông tin bổ sung từ bất kỳ tác nhân nào khác.

Về mặt hoạt động, quá trình mô phỏng sẽ tiến hành theo từng giai đoạn, tương tự như một phiên tòa thực. Các tác nhân
Luật sư sẽ trình bày lời mở đầu, tiếp theo là việc trình bày bằng chứng và lời khai nhân chứng. Tác nhân Bồi thẩm đoàn
sau đó sẽ cân nhắc và đưa ra phán quyết, sau đó Tác nhân Thẩm phán sẽ kết thúc thủ tục.

Mô phỏng này có thể được sử dụng cho nhiều mục đích khác nhau, như đào tạo cho sinh viên luật, thử nghiệm các
lý thuyết pháp lý mới, hoặc thậm chí tự động hóa một số khía cạnh của quá trình pháp lý. Tuy nhiên, điều quan trọng
cần lưu ý là trong khi khung công tác của chúng tôi có thể mô phỏng quá trình và tương tác trong tòa án, nó không thể
tái tạo hoàn toàn sự phức tạp của việc ra quyết định và phán xét của con người. Do đó, bất kỳ kết quả nào được tạo ra
bởi mô phỏng nên được diễn giải một cách thận trọng.

4.4.2 Phát triển Phần mềm

Mô hình của chúng tôi có thể được sử dụng hiệu quả trong bối cảnh phát triển phần mềm, cho phép tạo ra một
hệ thống đa tác nhân nơi mỗi tác nhân thể hiện một vai trò cụ thể không thể thiếu trong quá trình phát triển phần mềm.
Bằng cách gán trách nhiệm riêng biệt cho từng tác nhân, quá trình phát triển có thể được tối ưu hóa và hợp lý hóa
đáng kể. Các vai trò chính, như được rút ra từ cấu trúc nhóm phát triển phần mềm, có thể được biểu diễn như sau:

• Nhà Thiết kế Trải nghiệm Người dùng: Tác nhân này chịu trách nhiệm hiểu và thiết kế trải nghiệm người dùng.
Nó có thể sử dụng một plugin mô phỏng tương tác người dùng để thử nghiệm các thiết kế khác nhau và thu thập
dữ liệu về sở thích của người dùng. Tác nhân sau đó có thể sử dụng dữ liệu này để tinh chỉnh thiết kế.

• Quản lý Sản phẩm: Quản lý Sản phẩm chịu trách nhiệm hiểu nhu cầu của người dùng và định nghĩa các tính năng
của sản phẩm tương ứng. Nó có thể sử dụng một plugin thu thập và phân tích phản hồi của người dùng để hiểu
những tính năng nào quan trọng nhất đối với người dùng. Tác nhân này cũng có thể tương tác với Tác nhân Nhà Thiết kế
Trải nghiệm Người dùng để đảm bảo rằng thiết kế sản phẩm phù hợp với nhu cầu của người dùng.

• Kiến trúc sư Phần mềm: Tác nhân Kiến trúc sư Phần mềm chịu trách nhiệm thiết kế kiến trúc của phần mềm.
Nó có thể sử dụng một plugin mô phỏng các thiết kế kiến trúc khác nhau để kiểm tra hiệu suất và khả năng mở rộng
của chúng. Tác nhân này cũng có thể tương tác với Tác nhân Nhà Phát triển Phần mềm để đảm bảo rằng kiến trúc
được triển khai đúng cách.

• Nhà Phát triển Phần mềm: Nhà Phát triển Phần mềm chịu trách nhiệm viết mã thực hiện các tính năng của phần mềm.
Nó có thể sử dụng một plugin cung cấp quyền truy cập vào kho mã để lưu trữ và quản lý mã. Tác nhân này cũng có thể
tương tác với Tác nhân Kiến trúc sư Phần mềm để đảm bảo rằng mã phù hợp với kiến trúc.

• Nhà Kiểm thử Phần mềm: Nhà Kiểm thử Phần mềm chịu trách nhiệm kiểm thử phần mềm để đảm bảo rằng nó
hoạt động đúng cách. Nó có thể sử dụng một plugin tự động hóa quá trình kiểm thử, chạy một bộ kiểm thử trên mã
và báo cáo bất kỳ lỗi nào. Tác nhân này cũng có thể tương tác với Tác nhân Nhà Phát triển Phần mềm để giúp xác định
và sửa chữa bất kỳ lỗi nào trong mã.

• Nhà Thiết kế Giao diện Người dùng: Nhà Thiết kế Giao diện Người dùng chịu trách nhiệm thiết kế giao diện
người dùng của phần mềm. Nó có thể sử dụng một plugin mô phỏng tương tác người dùng để thử nghiệm các thiết kế
khác nhau và thu thập dữ liệu về sở thích của người dùng. Tác nhân này sau đó có thể sử dụng dữ liệu này để tinh chỉnh
thiết kế.

• Bộ Gỡ lỗi: Bộ Gỡ lỗi chịu trách nhiệm xác định và sửa chữa lỗi trong mã. Nó có thể sử dụng một plugin cung cấp
công cụ gỡ lỗi để giúp xác định nguyên nhân của bất kỳ lỗi nào. Tác nhân này cũng có thể tương tác với Tác nhân
Nhà Phát triển Phần mềm để giúp sửa chữa lỗi.

• Tác nhân Oracle: Tác nhân oracle trong bối cảnh này có thể được sử dụng để cung cấp phản hồi về quá trình
phát triển phần mềm tổng thể. Nó có thể đánh giá hiệu suất của các tác nhân khác và cung cấp phản hồi để giúp
chúng cải thiện. Ví dụ, nó có thể đề xuất rằng Tác nhân Nhà Phát triển Phần mềm cần viết mã hiệu quả hơn,
hoặc Tác nhân Nhà Thiết kế Trải nghiệm Người dùng cần xem xét một cách tiếp cận thiết kế khác.

Theo cách này, mô hình của chúng tôi có thể được sử dụng để tạo ra một quá trình phát triển phần mềm hiệu quả
và có hiệu lực hơn. Bằng cách gán các vai trò cụ thể cho mỗi tác nhân và sử dụng plugin để tăng cường khả năng
của chúng, chúng ta có thể tạo ra một hệ thống có khả năng tự động hóa quá trình phát triển của một phần mềm
chất lượng cao, dựa trên nhu cầu của người dùng.

5 Thách thức và Hạn chế

Các hệ thống đa tác nhân, bản chất của chúng, là những thực thể phức tạp. Chúng liên quan đến sự tương tác của
nhiều tác nhân tự động, mỗi tác nhân có khả năng và mục tiêu riêng. Sự phức tạp này, trong khi là nguồn sức mạnh
của hệ thống, cũng tạo ra một loạt thách thức và hạn chế. Trong các phần con sau, chúng tôi sẽ khám phá một số
thách thức này, làm sáng tỏ các trở ngại tiềm năng cần được vượt qua trong bối cảnh các hệ thống đa tác nhân.

5.1 Thách thức của Hệ thống Động

Việc thêm động các tác nhân, trong khi cung cấp tiềm năng cho sự linh hoạt và khả năng thích ứng tăng cường, cũng
đưa ra một số thách thức. Một trong những mối quan tâm chính là rủi ro tăng sinh quá mức các tác nhân, có thể dẫn đến
cạn kiệt tài nguyên hoặc sự kém hiệu quả trong hệ thống. Để giảm thiểu rủi ro này, hệ thống cần kết hợp các cơ chế
để giám sát và kiểm soát việc tạo ra các tác nhân mới.

Cụ thể, hệ thống cần sử dụng một mô-đun quản lý tài nguyên theo dõi các tài nguyên tính toán được tiêu thụ bởi
mỗi tác nhân và hệ thống tổng thể. Mô-đun này có thể cảnh báo hệ thống khi việc sử dụng tài nguyên tiếp cận một
ngưỡng được định trước, kích hoạt các biện pháp để ngăn chặn cạn kiệt tài nguyên. Những biện pháp này có thể bao gồm
dừng việc tạo ra các tác nhân mới.

Ngoài quản lý tài nguyên, hệ thống cũng cần đảm bảo rằng việc thêm động các tác nhân không dẫn đến sự kém hiệu quả
hoặc xung đột. Điều này được đạt được thông qua một cơ chế điều phối giám sát việc gán vai trò và nhiệm vụ cho
các tác nhân. Khi một tác nhân mới được tạo ra, cơ chế này đảm bảo rằng vai trò và nhiệm vụ của nó không chồng chéo
đáng kể với những tác nhân hiện có, từ đó ngăn chặn sự dư thừa và xung đột tiềm năng.

5.2 Khả năng Mở rộng

Khả năng mở rộng là một thách thức đáng kể khác trong các hệ thống đa tác nhân. Khi hệ thống phát triển về quy mô
và độ phức tạp, việc duy trì hiệu suất và hiệu quả của hệ thống có thể trở nên ngày càng khó khăn. Các tài nguyên tính toán
cần thiết để quản lý các tương tác và hoạt động của một số lượng lớn tác nhân có thể đáng kể. Ngoài ra, khi số lượng
tác nhân tăng, tiềm năng xung đột và sự không nhất quán cũng tăng, có thể ảnh hưởng thêm đến hiệu suất của hệ thống.

5.3 Đánh giá Hệ thống

Đánh giá hiệu suất của một hệ thống đa tác nhân có thể thách thức do sự phức tạp và đa dạng của các nhiệm vụ
mà hệ thống có thể xử lý. Các chỉ số đánh giá truyền thống có thể không đủ hoặc không phù hợp để đánh giá hiệu suất
của hệ thống. Do đó, các chỉ số đánh giá và phương pháp mới có thể cần được phát triển để đo lường chính xác hiệu suất
của hệ thống và các tác nhân cá nhân.

5.4 Cân nhắc Đạo đức

Việc sử dụng các hệ thống đa tác nhân cũng đặt ra một số cân nhắc đạo đức. Ví dụ, hệ thống có thể đưa ra quyết định
hoặc thực hiện các hành động có tác động đáng kể đến cá nhân hoặc xã hội. Do đó, điều quan trọng là đảm bảo rằng
hệ thống hoạt động một cách đạo đức và tôn trọng quyền và lợi ích của tất cả người dùng. Điều này đòi hỏi thiết kế
và giám sát cẩn thận của hệ thống, cũng như việc thực hiện các hướng dẫn và biện pháp bảo vệ đạo đức phù hợp.

6 Kết luận

Trong bài báo này, chúng tôi đã đề xuất một khung công tác mới để nâng cao hiệu suất và khả năng của LLM bằng cách
tận dụng sức mạnh của các hệ thống đa tác nhân. Khung công tác của chúng tôi giới thiệu một môi trường hộp đen nơi
nhiều IGA, mỗi IGA có các đặc điểm và vai trò độc đáo, cộng tác để xử lý các nhiệm vụ phức tạp hiệu quả và có hiệu lực hơn.
Bằng cách giới thiệu cộng tác và trao đổi kiến thức giữa những tác nhân này, hệ thống của chúng tôi tìm cách đẩy ranh giới
của những gì AI có thể đạt được, có thể mở đường hướng tới đạt được một mức độ cao hơn của AGI.

Bất chấp những lợi ích tiềm năng, khung công tác được đề xuất cũng đưa ra một số thách thức và hạn chế, bao gồm
các vấn đề liên quan đến bảo mật và quyền riêng tư, thiết kế và huấn luyện tác nhân, đánh giá hệ thống và các cân nhắc
đạo đức. Việc giải quyết những thách thức này sẽ đòi hỏi nghiên cứu và phát triển thêm, cũng như xem xét cẩn thận
các tác động đạo đức của việc triển khai các hệ thống như vậy. Một hướng đầy hứa hẹn khác cho công việc tương lai
có thể liên quan đến việc sử dụng khung công tác được đề xuất cho các trường hợp sử dụng hoặc lĩnh vực cụ thể.
Ví dụ, khung công tác có thể được thích ứng để xử lý các nhiệm vụ phức tạp trong các lĩnh vực như chăm sóc sức khỏe,
tài chính, giáo dục hoặc giao thông. Điều này có thể cung cấp những hiểu biết có giá trị về tính hữu dụng thực tiễn
và tác động tiềm năng của khung công tác được đề xuất.

Tài liệu tham khảo

[1] David Dohan, Winnie Xu, Aitor Lewkowycz, Jacob Austin, David Bieber, Raphael Gontijo Lopes, Yuhuai Wu,
Henryk Michalewski, Rif A. Saurous, Jascha Sohl-dickstein, Kevin Murphy, và Charles Sutton. Language model
cascades, 2022.

[2] Joon Sung Park, Joseph C. O'Brien, Carrie J. Cai, Meredith Ringel Morris, Percy Liang, và Michael S. Bernstein.
Generative agents: Interactive simulacra of human behavior, 2023.

[3] Guohao Li, Hasan Abed Al Kader Hammoud, Hani Itani, Dmitrii Khizbullin, và Bernard Ghanem. Camel:
Communicative agents for "mind" exploration of large scale language model society, 2023.

[4] Sébastien Bubeck, Varun Chandrasekaran, Ronen Eldan, Johannes Gehrke, Eric Horvitz, Ece Kamar, Peter Lee,
Yin Tat Lee, Yuanzhi Li, Scott Lundberg, Harsha Nori, Hamid Palangi, Marco Tulio Ribeiro, và Yi Zhang. Sparks
of artificial general intelligence: Early experiments with gpt-4, 2023.

[5] Chaoning Zhang, Chenshuang Zhang, Chenghao Li, Yu Qiao, Sheng Zheng, Sumit Kumar Dam, Mengchun
Zhang, Jung Uk Kim, Seong Tae Kim, Jinwoo Choi, Gyeong-Moon Park, Sung-Ho Bae, Lik-Hang Lee, Pan Hui,
In So Kweon, và Choong Seon Hong. One small step for generative ai, one giant leap for agi: A complete survey
on chatgpt in aigc era, 2023.

[6] Yejin Bang, Samuel Cahyawijaya, Nayeon Lee, Wenliang Dai, Dan Su, Bryan Wilie, Holy Lovenia, Ziwei Ji,
Tiezheng Yu, Willy Chung, Quyet V. Do, Yan Xu, và Pascale Fung. A multitask, multilingual, multimodal
evaluation of chatgpt on reasoning, hallucination, and interactivity, 2023.

[7] Jason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, Brian Ichter, Fei Xia, Ed Chi, Quoc Le, và Denny
Zhou. Chain-of-thought prompting elicits reasoning in large language models, 2023.

[8] Yao Fu, Hao Peng, Tushar Khot, và Mirella Lapata. Improving language model negotiation with self-play and
in-context learning from ai feedback, 2023.

[9] Xinyun Chen, Maxwell Lin, Nathanael Schärli, và Denny Zhou. Teaching large language models to self-debug,
2023.

[10] Aman Madaan, Niket Tandon, Prakhar Gupta, Skyler Hallinan, Luyu Gao, Sarah Wiegreffe, Uri Alon, Nouha
Dziri, Shrimai Prabhumoye, Yiming Yang, Shashank Gupta, Bodhisattwa Prasad Majumder, Katherine Hermann,
Sean Welleck, Amir Yazdanbakhsh, và Peter Clark. Self-refine: Iterative refinement with self-feedback, 2023.

[11] OpenAI. Introducing chatgpt. https://openai.com/blog/chatgpt, 2022. Truy cập: 2023-06-04.

[12] Shishir G. Patil, Tianjun Zhang, Xin Wang, và Joseph E. Gonzalez. Gorilla: Large language model connected
with massive apis, 2023.

[13] Hugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne Lachaux, Timothée Lacroix,
Baptiste Rozière, Naman Goyal, Eric Hambro, Faisal Azhar, et al. Llama: Open and efficient foundation language
models. arXiv preprint arXiv:2302.13971, 2023.

[14] Sil Hamilton. Blind judgement: Agent-based supreme court modelling with gpt, 2023.
