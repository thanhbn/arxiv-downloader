# LEGO Diffusion
HỌC CÁC KHỐI LEGO CÓ THỂ XẾP CHỒNG VÀ BỎ QUA ĐỂ MÔ HÌNH HÓA KHUẾCH TÁN HIỆU QUẢ, CÓ THỂ ĐỊNH CẤU HÌNH LẠI VÀ ĐỘ PHÂN GIẢI BIẾN ĐỔI

Huangjie Zheng1,2, Zhendong Wang1, Jianbo Yuan2, Guanghan Ning2
Pengcheng He3, Quanzeng You2, Hongxia Yang2, Mingyuan Zhou1
1Đại học Texas tại Austin, 2ByteDance Inc., 3Microsoft Azure AI

TÓM TẮT
Các mô hình khuếch tán xuất sắc trong việc tạo ra hình ảnh photo-realistic nhưng đi kèm với chi phí tính toán đáng kể cả trong huấn luyện và lấy mẫu. Trong khi các kỹ thuật khác nhau giải quyết những thách thức tính toán này, một vấn đề ít được khám phá hơn là thiết kế một xương sống mạng hiệu quả và có thể thích ứng cho quá trình tinh chỉnh lặp lại. Các lựa chọn hiện tại như U-Net và Vision Transformer thường dựa vào các mạng sâu tốn nhiều tài nguyên và thiếu tính linh hoạt cần thiết để tạo ra hình ảnh ở độ phân giải biến đổi hoặc với mạng nhỏ hơn so với việc sử dụng trong huấn luyện. Nghiên cứu này giới thiệu các khối LEGO, tích hợp liền mạch Làm giàu đặc trưng cục bộ và Điều phối nội dung toàn cục. Những khối này có thể được xếp chồng để tạo ra một xương sống khuếch tán có thể định cấu hình lại tại thời điểm kiểm tra, cho phép bỏ qua có chọn lọc các khối để giảm chi phí lấy mẫu và tạo ra hình ảnh độ phân giải cao hơn dữ liệu huấn luyện. Các khối LEGO làm giàu các vùng cục bộ với MLP và biến đổi chúng bằng khối Transformer trong khi duy trì hình ảnh độ phân giải đầy đủ nhất quán trên tất cả các khối. Kết quả thực nghiệm chứng minh rằng các khối LEGO nâng cao hiệu quả huấn luyện, đẩy nhanh hội tụ và tạo điều kiện thuận lợi cho việc tạo ra hình ảnh độ phân giải biến đổi trong khi duy trì hiệu suất sinh tạo mạnh mẽ. Hơn nữa, LEGO giảm đáng kể thời gian lấy mẫu so với các phương pháp khác, thiết lập nó như một cải tiến có giá trị cho các mô hình khuếch tán. Mã và trang dự án của chúng tôi có sẵn tại https://jegzheng.github.io/LEGODiffusion .

1 GIỚI THIỆU
Các mô hình khuếch tán, còn được gọi là các mô hình sinh tạo dựa trên điểm số, đã thu hút được sự quan tâm đáng kể trong nhiều lĩnh vực khác nhau nhờ vào hiệu quả đã được chứng minh trong việc tạo ra dữ liệu có chiều cao và cung cấp cài đặt đơn giản (Sohl-Dickstein et al., 2015; Song & Ermon, 2019; 2020; Ho et al., 2020; Song et al., 2021). Phân tách quá trình tạo dữ liệu thành các nhiệm vụ khử nhiễu đơn giản qua các bước thời gian phát triển với các mức nhiễu khác nhau, chúng đã đóng vai trò then chốt trong việc thúc đẩy tiến bộ trong một loạt các lĩnh vực rộng lớn, với sự nhấn mạnh đặc biệt vào những đóng góp của chúng cho việc tạo ra hình ảnh (Dhariwal & Nichol, 2021; Nichol et al., 2021; Ramesh et al., 2022; Saharia et al., 2022; Rombach et al., 2022).

Bất chấp những tiến bộ này, các mô hình khuếch tán vẫn tiếp tục đối mặt với một thách thức đáng kể: yêu cầu tính toán lớn, không chỉ trong quá trình huấn luyện mà còn trong quá trình lấy mẫu. Trong lấy mẫu, các mô hình khuếch tán thường đòi hỏi một số lượng lớn các đánh giá chức năng (NFE) để mô phỏng quá trình khuếch tán ngược. Để giải quyết thách thức này, nhiều chiến lược khác nhau đã được đề xuất, bao gồm các phương pháp nhằm đẩy nhanh quá trình lấy mẫu thông qua các bước ngược xấp xỉ (Song et al., 2020; Zhang & Chen, 2022; Lu et al., 2022; Karras et al., 2022), cũng như các phương pháp tích hợp khuếch tán với các mô hình sinh tạo khác (Zheng et al., 2022c; Pandey et al., 2022).

Một hạn chế rõ ràng khác là mạng được sử dụng trong lấy mẫu thường phải giống như mạng được sử dụng trong huấn luyện, trừ khi các kỹ thuật chưng cất tiến bộ được áp dụng (Salimans & Ho, 2022; Song et al., 2023). Có hoặc không có chưng cất, mạng được sử dụng để lấy mẫu thường thiếu khả năng định cấu hình lại và sẽ yêu cầu huấn luyện lại nếu muốn có dấu chân bộ nhớ hoặc tính toán nhỏ hơn.

Bên cạnh quá trình lấy mẫu tốn kém tính toán và cứng nhắc, việc huấn luyện các mô hình khuếch tán cũng đòi hỏi một số lượng lớn các lần lặp để đạt được hội tụ đến một checkpoint có thể chấp nhận được. Yêu cầu này phát sinh từ nhu cầu của mô hình cần học cách dự đoán giá trị trung bình của hình ảnh sạch có điều kiện trên đầu vào nhiễu, thể hiện các mức độ nhiễu khác nhau. Khái niệm này có thể được kết luận từ công thức Tweedie (Robbins, 1992; Efron, 2011), như được thảo luận trong Luo (2022) và Chung et al. (2022), hoặc phân kỳ Bregman (Banerjee et al., 2005), như được minh họa trong Zhou et al. (2023). Cơ chế này gây ra gánh nặng tính toán đáng kể, đặc biệt khi xử lý các tập dữ liệu lớn hơn và có chiều cao hơn. Để giảm thiểu chi phí huấn luyện, các phương pháp thường được sử dụng bao gồm huấn luyện mô hình khuếch tán trong không gian có chiều thấp hơn và sau đó khôi phục dữ liệu có chiều cao bằng cách sử dụng các kỹ thuật như bộ mã hóa tự động được huấn luyện trước (Rombach et al., 2022; Li et al., 2022b) hoặc các mô hình siêu phân giải tầng (Ho et al., 2022; Saharia et al., 2022). Một chiến lược thay thế bao gồm việc huấn luyện các mô hình khuếch tán ở mức đầu vào patch (Luhman & Luhman, 2022), yêu cầu các phương pháp bổ sung để đảm bảo các mẫu được tạo ra duy trì cấu trúc toàn cục mạch lạc. Những phương pháp này có thể bao gồm việc kết hợp hình ảnh kích thước đầy đủ theo định kỳ (Wang et al., 2023), sử dụng các đặc trưng ngữ nghĩa được mã hóa hoặc lấy mẫu xuống (Ding et al., 2023; Arakawa et al., 2023), hoặc sử dụng dự đoán transformer có mặt nạ (Zheng et al., 2023; Gao et al., 2023).

Bất chấp nhiều nỗ lực để đẩy nhanh các mô hình khuếch tán, một thách thức quan trọng nhưng tương đối ít được khám phá vẫn còn trong việc thiết kế một xương sống mạng hiệu quả và linh hoạt cho quá trình tinh chỉnh lặp lại trong cả huấn luyện và lấy mẫu. Về mặt lịch sử, lựa chọn thống trị cho xương sống đã được dựa trên U-Net (Ronneberger et al., 2015), nhưng gần đây, một xương sống thay thế dựa trên Vision Transformer (ViT) (Dosovitskiy et al., 2021) đã nổi lên như một lựa chọn hấp dẫn. Tuy nhiên, điều quan trọng cần lưu ý là cả mô hình U-Net và ViT vẫn yêu cầu bao gồm các mạng sâu với một số lượng lớn các lớp tích chập tốn kém tính toán hoặc các khối Transformer để đạt được hiệu suất thỏa đáng. Hơn nữa, điều quan trọng cần nhấn mạnh là không lựa chọn nào trong số này dễ dàng cho phép định cấu hình lại mạng trong quá trình lấy mẫu, và việc tạo ra hình ảnh ở độ phân giải cao hơn hình ảnh huấn luyện thường gặp phải thách thức đáng kể.

Mục tiêu chính của chúng tôi là giới thiệu "khối LEGO", một đơn vị mạng cơ bản tích hợp liền mạch hai thành phần thiết yếu: Làm giàu đặc trưng cục bộ và Điều phối nội dung toàn cục. Những khối này có thể được xếp chồng theo chiều dọc để tạo thành xương sống có thể định cấu hình lại của một mô hình khuếch tán mà giới thiệu sự tinh chỉnh không gian trong mỗi bước thời gian. Xương sống đa năng này không chỉ cho phép bỏ qua có chọn lọc các khối LEGO để giảm chi phí lấy mẫu mà còn có khả năng tạo ra hình ảnh ở độ phân giải cao hơn đáng kể so với tập huấn luyện.

Một mô hình khuếch tán LEGO được lắp ráp bằng cách xếp chồng một loạt các khối LEGO, mỗi khối có kích thước đầu vào khác nhau. Mỗi khối xử lý các patch cục bộ có kích thước được xác định bởi kích thước đầu vào riêng của nó, tất cả đều nhằm mục đích tinh chỉnh thông tin không gian của hình ảnh độ phân giải đầy đủ. Trong quá trình "Làm giàu đặc trưng cục bộ", một khối LEGO cụ thể nhận một patch phù hợp với kích thước đầu vào của nó (ví dụ, một patch nhiễu 16×16) cùng với dự đoán từ khối trước đó. Đầu vào cấp độ patch này được chia thành các trường thụ cảm cục bộ không chồng lấp (ví dụ, bốn patch 8×8), và chúng được biểu diễn bằng các vectơ đặc trưng cục bộ được chiếu với một lớp nhúng "token". Tiếp theo, "Điều phối nội dung toàn cục" bao gồm việc sử dụng các khối Transformer (Vaswani et al., 2017; Dosovitskiy et al., 2021), bao gồm attention đa đầu và các lớp MLP, để tái tập hợp các vectơ đặc trưng nhúng token cục bộ này thành một đầu ra được tinh chỉnh không gian phù hợp với kích thước đầu vào. Phương pháp này dẫn đến một đơn vị mạng hiệu quả đạt được thông qua việc trộn MLP nhấn mạnh các vùng cục bộ trong khi duy trì khoảng attention ngắn (ví dụ, một chuỗi bốn vectơ đặc trưng nhúng token). Quan trọng là, mỗi khối LEGO được huấn luyện bằng cách sử dụng các patch đầu vào được lấy mẫu thay vì toàn bộ hình ảnh, giảm đáng kể chi phí tính toán liên quan đến việc truyền tiến của mô hình. Phương pháp này không chỉ cho phép sử dụng linh hoạt các khối LEGO có kích thước khác nhau trong quá trình huấn luyện mà còn tạo điều kiện thuận lợi cho một kiến trúc có thể định cấu hình lại duy nhất trong quá trình tạo ra. Hơn nữa, nó trao quyền cho mô hình có khả năng tạo ra hình ảnh ở độ phân giải cao hơn đáng kể so với những hình ảnh có trong tập dữ liệu huấn luyện, như được minh họa trong Hình 1.

Tóm lại, các khối LEGO có thể xếp chồng và bỏ qua sở hữu một số đặc điểm đáng chú ý trong việc quản lý chi phí tính toán cả trong huấn luyện và lấy mẫu, cung cấp một xương sống linh hoạt và có thể định cấu hình lại tại thời điểm kiểm tra, và tạo điều kiện thuận lợi cho việc tạo ra độ phân giải biến đổi. Các đánh giá thực nghiệm của chúng tôi, như được hiển thị trong Hình 1 và 2, rõ ràng chứng minh rằng LEGO tạo ra sự cân bằng tốt giữa hiệu quả và hiệu suất trên các benchmark hình ảnh thách thức. LEGO nâng cao đáng kể hiệu quả huấn luyện, bằng chứng là giảm FLOP, hội tụ nhanh hơn và thời gian huấn luyện ngắn hơn, tất cả trong khi duy trì hiệu suất tạo ra mạnh mẽ. Những lợi thế này mở rộng liền mạch vào giai đoạn lấy mẫu, nơi LEGO đạt được sự giảm đáng chú ý 60% thời gian lấy mẫu so với DiT (Peebles & Xie, 2022), trong khi giữ nguyên NFE. Ngoài ra, LEGO có khả năng tạo ra hình ảnh ở độ phân giải cao hơn nhiều (ví dụ, 2048×600) so với hình ảnh huấn luyện (ví dụ, 256×256).

2 LÀM GIÀU ĐẶC TRƯNG CỤC BỘ VÀ ĐIỀU PHỐI NỘI DUNG TOÀN CỤC

2.1 ĐỘNG LỰC XÂY DỰNG CÁC KHỐI LEGO

Cả U-Net và ViT, hai lựa chọn kiến trúc nổi bật cho các mô hình khuếch tán, đều gây ra gánh nặng tính toán đáng kể. Mục tiêu chính của bài báo này là tạo ra một kiến trúc mô hình hóa khuếch tán hiệu quả tích hợp liền mạch các nguyên tắc làm giàu đặc trưng cục bộ, tinh chỉnh không gian tiến bộ và khử nhiễu lặp lại trong một khung thống nhất. Ngoài ra, mục tiêu của chúng tôi mở rộng đến một khả năng đáng chú ý: việc bỏ qua có chọn lọc các khối LEGO, hoạt động trên các kích thước patch khác nhau ở các bước thời gian khác nhau trong quá trình tạo ra. Khả năng có thể định cấu hình lại tại thời điểm kiểm tra độc đáo này làm cho thiết kế của chúng tôi khác biệt so với các phương pháp trước đó.

Các khối LEGO mà chúng tôi hình dung dự định sở hữu một số thuộc tính có lợi: 1) Hiệu quả không gian trong huấn luyện: Trong ensemble, phần lớn các khối LEGO được dành riêng để tạo ra các patch cục bộ sử dụng các mô-đun trộn MLP và attention tính toán nhẹ. Lựa chọn thiết kế này dẫn đến việc giảm đáng kể các Phép toán Dấu phẩy động (FLOP) tính toán và rút ngắn đáng kể thời gian huấn luyện tổng thể. 2) Hiệu quả không gian trong lấy mẫu: Trong quá trình lấy mẫu, các khối LEGO có thể được bỏ qua có chọn lọc ở mỗi bước thời gian mà không có sự suy giảm rõ ràng về hiệu suất tạo ra. Cụ thể, khi t lớn, cho thấy sự không chắc chắn lớn hơn trong cấu trúc không gian toàn cục, nhiều khối LEGO cấp độ patch có thể được bỏ qua một cách an toàn. Ngược lại, khi t nhỏ, biểu thị cấu trúc không gian toàn cục ổn định hơn, nhiều khối LEGO độ phân giải đầy đủ có thể được bỏ qua. 3) Tính linh hoạt: Các khối LEGO thể hiện tính linh hoạt đáng kể, phù hợp với cả huấn luyện đầu cuối và huấn luyện tuần tự từ khối dưới lên khối trên, tất cả trong khi cho phép tạo ra ở độ phân giải cao hơn đáng kể so với những độ phân giải được sử dụng trong quá trình huấn luyện. Hơn nữa, chúng dễ dàng hỗ trợ việc tích hợp các mô hình được huấn luyện trước hiện có như các khối LEGO, nâng cao khả năng thích ứng và dễ sử dụng của mô hình.

2.2 KIẾN THỨC CHUẨN BỊ KỸ THUẬT VỀ CÁC MÔ HÌNH SINH TẠO DỰA TRÊN KHUẾCH TÁN

Các mô hình sinh tạo dựa trên khuếch tán sử dụng một chuỗi khuếch tán tiến để dần dần làm hỏng dữ liệu thành nhiễu, và một chuỗi khuếch tán ngược dựa trên tinh chỉnh lặp lại để tái tạo dữ liệu. Chúng tôi sử dụng αt∈[0,1], một chuỗi giảm dần, để định nghĩa lịch biến thiên {βt= 1−αt/αt−1}T t=1 và ký hiệu x0 như một hình ảnh sạch và xt như một hình ảnh nhiễu. Chuỗi khuếch tán ngược có thể được tối ưu hóa bằng cách tối đa hóa giới hạn dưới bằng chứng (ELBO) (Blei et al., 2017) của một bộ mã hóa tự động biến thiên (Kingma & Welling, 2014), sử dụng một tiên nghiệm phân cấp với T lớp ngẫu nhiên (Ho et al., 2020; Song et al., 2020; 2021; Kingma et al., 2021; Zhou et al., 2023). Hãy biểu diễn phân phối dữ liệu là q(x0) và tiên nghiệm sinh tạo là p(xT). Các quá trình khuếch tán tiến và ngược được rời rạc hóa thành T bước có thể được biểu diễn như:

Tiến: q(x0:T) = q(x0)∏T t=1 q(xt|xt−1) = q(x0)∏T t=1 N(xt; √(αt/√αt−1)xt−1, (1−αt)/αt−1), (1)

Ngược: pθ(x0:T) = p(xT)∏T t=1 pθ(xt−1|xt) = p(xT)∏T t=1 q(xt−1|xt, x̂0=fθ(xt, t)), (2)

trong đó αt∈[0,1] là một chuỗi giảm dần, xác định lịch biến thiên {βt= 1−αt/αt−1}T t=1, và q(xt−1|xt,x0) là hậu nghiệm có điều kiện của chuỗi khuếch tán tiến mà cũng được sử dụng để xây dựng chuỗi khuếch tán ngược. Một đặc điểm nổi bật của cấu trúc này là cả biên tiến và điều kiện ngược đều phân tích, tuân theo phân phối Gaussian như

q(xt|x0) = N(xt; √αt x0, (1−αt)I), (3)

q(xt−1|xt,x0) = N(√(αt−1/(1−αt))(1−αt/αt−1)x0 + (1−αt−1)√(αt/(1−αt)√αt−1)xt, (1−αt−1)/(1−αt)(1−αt/αt−1)I). (4)

Hơn nữa, việc tối đa hóa ELBO có thể được tiến hành bằng cách lấy mẫu t∈ {1, . . . , T} và tối thiểu hóa

Lt = KL(q(xt−1|xt,x0)||q(xt−1|xt,x̂0=fθ(xt, t))) = (SNRt−1−SNRt)/2 ||x0−fθ(xt, t)||²2, (5)

trong đó SNRt := αt/(1−αt). Từ Phương trình 3, chúng ta có thể lấy mẫu xt qua tham số hóa lại như 
xt = √αt x0 + √(1−αt) ϵ, ϵ∼N(0,I), và do đó chúng ta có thể tham số hóa x̂0 như một tổ hợp tuyến tính của xt và dự đoán nhiễu ϵθ(xt, t) như

x̂0(xt, t;θ) = fθ(xt, t) = xt/√αt − √(1−αt)/√αt ϵθ(xt, t). (6)

Vì vậy chúng ta cũng có thể biểu diễn Lt trong Phương trình 5 theo dự đoán nhiễu như Lt = 1/2(SNRt−1/SNRt−1)||ϵ − ϵθ(xt, t)||²2. Tóm lại, tham số mạng θ có thể được huấn luyện bằng cách dự đoán x0 (Karras et al., 2022) hoặc nhiễu được tiêm ϵ trong khuếch tán tiến (Ho et al., 2020; Song et al., 2021):

θ⋆ = arg minθ Et,xt,ϵ[λ't ||x̂0(xt, t;θ)−x0||²2], hoặc θ⋆ = arg minθ Et,xt,ϵ[λt ||ϵθ(xt, t)−ϵ||²2], (7)

trong đó λt, λ't đều là các hệ số trọng phụ thuộc thời gian, thường được chọn khác với những gì được đề xuất bởi ELBO để nâng cao chất lượng tạo ra hình ảnh (Ho et al., 2020).

2.3 CÁC KHỐI LEGO CÓ THỂ XẾP CHỒNG VÀ BỎ QUA: HUẤN LUYỆN VÀ LẤY MẪU

Trong thiết kế kiến trúc của chúng tôi, chúng tôi sử dụng mất mát khuếch tán để huấn luyện các khối LEGO ở nhiều mức độ chi tiết không gian khác nhau, với mỗi mức tương ứng với các bước tinh chỉnh không gian cụ thể. Chúng tôi sử dụng các khối Transformer để nắm bắt nội dung toàn cục ở cấp độ patch, sắp xếp chúng với khối LEGO cụ thể đang hoạt động. Không giống như U-Net, tích chập các bộ lọc cục bộ qua tất cả các vị trí pixel, phương pháp của chúng tôi làm giàu các nhúng đặc trưng từ các vùng cục bộ không chồng lấp và không bao gồm các lớp lấy mẫu lên. Trái ngược với ViT, phương pháp của chúng tôi vận hành nhiều lớp mạng của nó tại các patch cục bộ có kích thước khác nhau. Điều này cho phép chúng tôi nắm bắt thông tin cục bộ một cách hiệu quả và tập hợp nó một cách tiến bộ.

2.3.1 ENSEMBLE KHỐI LEGO VÀ TINH CHỈNH KHÔNG GIAN THEO CHIỀU DỌC

Các mô hình khuếch tán sử dụng xương sống mạng của chúng để tinh chỉnh lặp lại việc tạo ra hình ảnh theo chiều thời gian. Khi sử dụng một xương sống bao gồm K khối LEGO xếp chồng, chúng ta có thể tinh chỉnh tiến bộ các đặc trưng không gian ở mỗi bước thời gian dọc theo chiều dọc. Khi một khối LEGO xử lý các patch của nó, nó độc lập tinh chỉnh mỗi patch trong cùng một khối. Ngoài ra, chúng tôi duy trì hình ảnh độ phân giải đầy đủ một cách nhất quán ở cả đầu vào và đầu ra của tất cả các khối. Điều này không chỉ cung cấp tính linh hoạt trong việc chọn cả kích thước patch và vị trí cho các khối khác nhau mà còn tạo ra một cấu trúc có thể định cấu hình lại tại thời điểm kiểm tra có thể bỏ qua các khối một cách chọn lọc để giảm đáng kể chi phí lấy mẫu.

Ký hiệu hình ảnh gốc với kích thước không gian H×W là x. Đối với khối LEGO thứ k, hoạt động trên các patch có kích thước rh(k)×rw(k), trong đó rh(k)≤H và rw(k)≤W, chúng ta trích xuất một tập hợp các patch có kích thước đó từ x. Để đơn giản, chúng ta giả sử kích thước khối rh(k) = rw(k) = rk, cả H/rk và W/rk đều là số nguyên, và hình ảnh được chia thành các patch không chồng lấp, được biểu diễn như:

x(k)(i,j) = x[(i−1)rk + 1 : irk, (j−1)rk + 1 : jrk]; i∈ {1, ..., H/rk}, j∈ {1, ..., W/rk}.

Chúng ta cũng ký hiệu m∈[−1,1]H×W là tọa độ được chuẩn hóa của các pixel hình ảnh, và tương tự, m(k)(i,j) là ma trận tọa độ của patch thứ (i, j) tại khối LEGO thứ k.

Về mặt toán học, đối với khối LEGO thứ k được tham số hóa bởi θk, và ký hiệu z(k)t,(i,j) là patch thứ (i, j) được trích xuất tại thời gian t từ đầu ra của nó (với z(0)t,(i,j) = ∅), hoạt động LEGO có thể được biểu diễn như:

z(k)t,(i,j) = fθk(x(k)t,(i,j), m(k)(i,j), z(k−1)t,(i,j), t), (8)

nhận các patch tại cùng vị trí không gian từ cả bước thời gian trước đó và khối dưới làm đầu vào. Hiện tại, chúng tôi xử lý khối LEGO dựa trên hoạt động cấp độ patch này như một hộp đen và sẽ không đi sâu vào chi tiết của nó cho đến khi chúng tôi hoàn thành việc mô tả ensemble và mất mát huấn luyện dựa trên đệ quy của nó. Để hợp lý hóa cuộc thảo luận, chúng tôi sẽ bỏ qua các chỉ số patch và tọa độ khi phù hợp.

Ensemble đệ quy của các khối LEGO: Bước khử nhiễu khuếch tán vanilla, như trong Phương trình 6, được phân tách thành K khối LEGO liên tiếp, xếp chồng từ trên xuống dưới như sau:

x̂0(xt, t;θ) = z(K)t, trong đó z(k)t = fθk(xt, z(k−1)t, t) cho k = K, . . . , 1, (9)

với z(0)t := ∅, θ := {θk}1,K, và z(k)t biểu thị một lưới các patch được tinh chỉnh dựa trên các patch tương ứng từ đầu ra của khối LEGO dưới tại thời gian t. Chúng tôi lưu ý rằng vì mỗi khối LEGO bắt đầu với hình ảnh độ phân giải đầy đủ và kết thúc với hình ảnh độ phân giải đầy đủ được tinh chỉnh, chúng ta có tính linh hoạt để chọn kích thước khối mục tiêu cho mỗi khối LEGO. Trong minh họa của chúng tôi được hiển thị trong Hình 3, chúng tôi tuân theo một cấu trúc dựa trên tăng trưởng tiến bộ, nơi kích thước patch của các khối LEGO xếp chồng tăng đơn điệu khi di chuyển từ khối dưới lên khối trên. Cách khác, chúng ta có thể áp đặt một ràng buộc giảm đơn điệu, tương ứng với tinh chỉnh tiến bộ. Trong công việc này, chúng tôi khám phá cả tăng trưởng tiến bộ và tinh chỉnh như hai ví dụ đặc biệt, và tiếp tục trình bày một biến thể cấu trúc lấy cảm hứng từ Unet kết hợp cả hai. Tối ưu hóa tổ hợp kích thước khối cho các khối LEGO trong stack là một chủ đề đáng được điều tra thêm.

Mất mát huấn luyện: Ký hiệu một patch bị hỏng nhiễu tại thời gian t là x(k)t, chúng ta có các chuỗi khuếch tán như

Tiến: q(x(k)0:T) = q(x(k)0)∏T t=1 N(x(k)t; √(αt/√αt−1)x(k)t−1, (1−αt)/αt−1), (10)

Ngược: pθ(x0:T) = p(xT)∏T t=1 q(x(k)t−1|x(k)t, x̂(k)0=fθ(x(k)t, x(k−1)t, t)), (11)

Ký hiệu ϵ là nhiễu chuẩn được sử dụng để làm hỏng hình ảnh sạch. Các patch hình ảnh sạch, được ký hiệu là x(k)0,(i,j), có kích thước rk×rk và tương ứng với các vị trí không gian cụ thể (i, j). Ngoài ra, chúng ta có các patch được tinh chỉnh, x̂(k)0,(i,j), được tạo ra bởi khối LEGO thứ k tại cùng vị trí, và x̂(k−1)0,(i,j) từ khối LEGO thứ (k−1). Khi xử lý một hình ảnh nhiễu xt tại thời gian t, chúng ta thực hiện truyền lên qua các khối LEGO xếp chồng để tinh chỉnh tiến bộ toàn bộ hình ảnh. Điều này bắt đầu với x̂(0)0 = ∅ và tiến hành với các patch hình ảnh được tinh chỉnh x̂(k)0 cho k = 1, . . . , K. Vì mỗi khối LEGO hoạt động trên các patch được lấy mẫu, khi số lượng patch bị hạn chế, có thể có trường hợp x̂(k−1)0,(i,j) chứa các giá trị thiếu. Trong những trường hợp như vậy, chúng ta thay thế những giá trị thiếu này bằng các pixel tương ứng từ x0 để đảm bảo x̂(k−1)0,(i,j) cần thiết có mặt. Ký hiệu λ(k)t là các hệ số trọng phụ thuộc thời gian và khối, cài đặt của chúng được mô tả trong Phụ lục C. Với các patch hình ảnh được tinh chỉnh x̂(k)0,(i,j), chúng ta biểu diễn mất mát huấn luyện qua K khối LEGO như

Ek Et,x(k)0,ϵ,(i,j)[λ(k)t ||x(k)0,(i,j) − x̂(k)0,(i,j)||²2], x̂(k)0,(i,j) := fθk(x(k)t,(i,j), x̂(k−1)0,(i,j), t). (12)

Sơ đồ huấn luyện này cho phép mỗi khối LEGO tinh chỉnh các patch cục bộ trong khi được hướng dẫn bởi đầu vào bị hỏng nhiễu và đầu ra của khối trước đó trong stack.

2.3.2 THIẾT KẾ MẠNG TRONG KHỐI LEGO

Trong thiết kế khối LEGO, chúng tôi lấy cảm hứng từ thiết kế của Diffusion Transformer (DiT) được đề xuất trong Peebles & Xie (2022). Kiến trúc DiT bao gồm một số thành phần chính:

Lớp Nhúng Patch: Ban đầu, hình ảnh đầu vào được token hóa thành một chuỗi nhúng patch;
Các Khối DiT: Đây là các khối Transformer có attention đa đầu, chuẩn hóa lớp thích ứng được khởi tạo bằng không (adaLN-zero), và các lớp MLP;
Lớp tuyến tính với adaLN: Được đặt ở trên các khối DiT, lớp tuyến tính này, cùng với adaLN, chuyển đổi chuỗi nhúng trở lại thành hình ảnh.

Các điều kiện cụ thể khuếch tán, như nhúng thời gian và điều kiện lớp, được mã hóa trong các nhúng thông qua adaLN trong mọi khối.

Như được minh họa trong Hình 3, chúng tôi sử dụng các khối DiT, cùng với lớp nhúng patch và bộ giải mã tuyến tính để xây dựng một khối LEGO. Kích thước kênh đầu vào của lớp nhúng patch được mở rộng để phù hợp với đầu vào được nối kênh [x(k)t, x̂(k−1)0, m(k)]. Kích thước của các trường thụ cảm cục bộ, được ký hiệu là ℓk×ℓk, có thể thay đổi để đạt được tinh chỉnh không gian. Trong bài báo này, theo mặc định, chúng tôi đặt nó như sau: nếu kích thước khối rk×rk nhỏ hơn độ phân giải hình ảnh, nó được đặt thành rk/2×rk/2, và nếu kích thước khối bằng độ phân giải hình ảnh, nó được đặt thành 2×2. Nói đơn giản hơn, đối với khối LEGO thứ k, khi rk×rk nhỏ hơn W×H (hoặc W/8×H/8 cho khuếch tán trong không gian tiềm ẩn), chúng ta phân chia mỗi patch đầu vào có kích thước rk×rk thành bốn trường thụ cảm cục bộ không chồng lấp có kích thước rk/2×rk/2. Bốn trường thụ cảm cục bộ này được chiếu thêm bởi cùng một MLP để trở thành một chuỗi bốn nhúng token. Sau đó, bốn nhúng token này được xử lý bởi các khối DiT, có khoảng attention ngắn như bốn, và được giải mã để tạo ra các patch đầu ra có kích thước rk×rk.

Chúng tôi phân loại các khối LEGO thành 'patch-brick' nếu kích thước khối của chúng nhỏ hơn độ phân giải hình ảnh, và 'image-brick' nếu không. Các patch-brick có khoảng attention ngắn như bốn, tiết kiệm bộ nhớ và tính toán cả trong huấn luyện và tạo ra. Trong khi các image-brick chọn khoảng attention dài hơn và do đó không mang lại tiết kiệm bộ nhớ hoặc tính toán trong quá trình huấn luyện, chúng có thể được nén với ít khối DiT hơn so với cấu hình trong Peebles & Xie (2022). Trong quá trình tạo ra, các khối LEGO cũng có thể được bỏ qua một cách chọn lọc tại các bước thời gian thích hợp mà không gây ra sự suy giảm hiệu suất rõ ràng, dẫn đến tiết kiệm đáng kể chi phí tạo ra. Để đơn giản, chúng tôi duy trì kích thước nhúng cố định và chỉ thay đổi số lượng khối DiT trong mỗi khối dựa trên rk. Mỗi khối LEGO có thể yêu cầu dung lượng khác nhau tùy thuộc vào rk. Để có cấu hình toàn diện của các khối LEGO, vui lòng tham khảo Bảng 5 trong Phụ lục C.

Chúng tôi khám phá ba cài đặt tinh chỉnh không gian và xếp chồng các khối LEGO tương ứng: 1) Tăng trưởng tiến bộ (PG): Trong cài đặt này, chúng tôi sắp xếp các khối LEGO theo cách mà mỗi khối tiếp theo có kích thước patch lớn gấp bốn lần khối trước đó, tức là rk = 4rk−1. Do đó, patch của khối hiện tại sẽ tập hợp các đặc trưng của bốn patch được đầu ra bởi khối trước đó, tạo điều kiện thuận lợi cho điều phối nội dung toàn cục. 2) Tinh chỉnh tiến bộ (PR): Ngược lại, đối với cấu hình PR, chúng tôi xếp chồng các khối LEGO theo thứ tự ngược so với PG, với rk = rk−1/4. Ở đây, mỗi khối LEGO chịu trách nhiệm tạo ra một thế hệ được tinh chỉnh dựa trên nội dung được cung cấp bởi khối bên dưới nó. 3) LEGO-U: một biến thể phân cấp kết hợp các đặc trưng của LEGO-PR và LEGO-PG. Mô hình này xử lý các patch hình ảnh bắt đầu với độ phân giải lớn hơn, chuyển sang nhỏ hơn, và sau đó trở lại độ phân giải lớn hơn, tương tự như Unets hoạt động với nhiều giai đoạn lấy mẫu xuống và lấy mẫu lên để có biểu diễn đa quy mô.

3 THỰC NGHIỆM

Chúng tôi trình bày một loạt thực nghiệm được thiết kế để đánh giá hiệu quả và tính linh hoạt của việc sử dụng các khối LEGO xếp chồng làm xương sống cho các mô hình khuếch tán. Chúng tôi trì hoãn các chi tiết về tập dữ liệu, cài đặt huấn luyện và các thước đo đánh giá vào Phụ lục C. Chúng tôi bắt đầu bằng cách trình bày kết quả trên cả tập dữ liệu quy mô nhỏ và quy mô lớn để đánh giá hiệu suất tạo ra hình ảnh bằng cách sử dụng ba cấu hình được nêu trong Bảng 5 trong Phụ lục C.

3.1 KẾT QUẢ CHÍNH

Huấn luyện trong không gian pixel: Chúng tôi bắt đầu bằng cách so sánh LEGO trong huấn luyện không gian pixel trên CelebA và ImageNet với hai mô hình khuếch tán tiên tiến nhất dựa trên Transformer (Bao et al., 2022; Peebles & Xie, 2022), là các baseline có liên quan nhất của chúng tôi. Tất cả hình ảnh được thay đổi kích thước thành độ phân giải 64×64. Chúng tôi tiến hành thực nghiệm với hai phương pháp tinh chỉnh không gian sử dụng LEGO, được ký hiệu là -PG cho biến thể tăng trưởng tiến bộ và -PR cho biến thể tinh chỉnh tiến bộ, như được giải thích trong Phần 2.3.2. Trong cả Bảng 1 và 2, khi so sánh với DiT, LEGO tăng nhẹ số lượng tham số do việc mở rộng kích thước đầu vào theo cách kênh. Tuy nhiên, về mặt FLOP, chúng tôi quan sát thấy rằng LEGO chịu chi phí tính toán thấp hơn đáng kể so với cả U-ViT và DiT. Bất chấp việc duy trì chi phí tính toán thấp như vậy, LEGO vẫn thắng cuộc thi về hiệu suất FID.

Huấn luyện trong không gian tiềm ẩn: Chúng tôi tiến hành so sánh với các mô hình sinh tạo có điều kiện lớp tiên tiến nhất được huấn luyện trên ImageNet ở độ phân giải 256×256 và 512×512, như được hiển thị trong Bảng 3. Kết quả của chúng tôi được thu được sau khi huấn luyện với 512M hình ảnh (được tính bằng số lần lặp × kích thước batch). Khi xem xét LEGO không có hướng dẫn không có phân loại (CFG), chúng tôi quan sát thấy rằng nó đạt được FID tốt hơn các mô hình khuếch tán baseline, tạo ra sự cân bằng tốt giữa độ chính xác và thu hồi. Một lời giải thích tiềm năng cho sự cải thiện này là các khối LEGO với kích thước patch nhỏ nâng cao sự đa dạng patch, bảo tồn cả độ trung thực và đa dạng tạo ra.

Với việc bao gồm CFG, chúng tôi đáng chú ý đạt được FID 2.05 và IS 289.12 trên ImageNet-256×256. Đáng chú ý là biến thể LEGO-U, tích hợp các đặc trưng của các biến thể -PR và -PG, đã đạt được IS cao hơn rõ ràng (338.08 với hướng dẫn và 337.85 không có hướng dẫn). Kết quả này vượt trội đáng kể so với các baseline và chứng minh sức mạnh của thông tin đa quy mô trong mô hình hóa sinh tạo. Trong trường hợp sử dụng dữ liệu độ phân giải 512×512, LEGO cũng đạt được IS tốt nhất và tạo ra FID cạnh tranh với ít hình ảnh lặp hơn. Ngoài ra, như được mô tả trong Hình 2, LEGO thể hiện tốc độ hội tụ vượt trội và yêu cầu thời gian huấn luyện ngắn hơn đáng kể. Để xác thực định tính, chúng tôi cung cấp hình ảnh trực quan của các mẫu được tạo ra ngẫu nhiên trong Hình 1.

3.2 CẢI THIỆN HIỆU QUẢ CỦA MÔ HÌNH HÓA KHUẾCH TÁN VỚI LEGO

Thiết kế của LEGO vốn tạo điều kiện thuận lợi cho quá trình lấy mẫu bằng cách tạo ra hình ảnh với các khối LEGO được chọn. Theo trực giác, ở các bước thời gian nhiễu thấp (tức là khi t nhỏ), cấu trúc toàn cục của hình ảnh đã được xác định rõ, và do đó mô hình được mong muốn ưu tiên các chi tiết cục bộ. Ngược lại, khi hình ảnh có nhiều nhiễu hơn, điều phối nội dung toàn cục trở nên quan trọng để khám phá cấu trúc toàn cục dưới sự không chắc chắn cao. Do đó, để cải thiện hiệu quả, chúng tôi bỏ qua các khối LEGO nhấn mạnh chi tiết cục bộ trong các bước thời gian nhiễu cao và những khối xây dựng cấu trúc toàn cục trong các bước thời gian nhiễu thấp. Để xác thực thiết kế này, chúng tôi tiến hành thực nghiệm để nghiên cứu hiệu suất tạo ra khi các khối LEGO được bỏ qua ở các mức độ khác nhau.

Đối với LEGO-PG, chúng tôi chỉ định một bước thời gian tbreak như một điểm ngắt. Khi t > tbreak, không có khối nào được bỏ qua, nhưng khi t ≤ tbreak, khối cấp cao nhất, là image-brick với kích thước khối 64×64, được bỏ qua trong phần còn lại của quá trình lấy mẫu. Ngược lại, đối với PR, chúng tôi đặt một bước thời gian tbreak như một điểm ngắt. Khi t ≤ T−tbreak, không có khối nào được bỏ qua, nhưng khi t > T−tbreak, khối cấp cao nhất, là patch-break với kích thước 4×4, được bỏ qua trong phần còn lại của quá trình lấy mẫu.

Chúng tôi đánh giá tác động của việc chọn tbreak đối với cả điểm số FID và thời gian lấy mẫu cho LEGO-PG và LEGO-PR. Kết quả trong Hình 4 minh họa điểm số FID và thời gian cần thiết để tạo ra 50.000 hình ảnh sử dụng 8 GPU NVIDIA A100. Trong LEGO-PG, khi chúng tôi bỏ qua khối LEGO cấp cao nhất, chúng tôi quan sát thấy một sự nâng cao đáng chú ý về hiệu quả lấy mẫu, chủ yếu vì khối này, chịu trách nhiệm xử lý toàn bộ hình ảnh, tốn kém tính toán. Tuy nhiên, việc bỏ qua khối này trong các bước thời gian với mức độ nhiễu cao cũng dẫn đến sự đánh đổi với hiệu suất, vì mô hình mất quyền truy cập vào nội dung toàn cục. Mặt khác, đối với LEGO-PR, việc bỏ qua patch-brick cấp cao nhất ảnh hưởng nhẹ đến hiệu suất khi tbreak lớn, trong khi việc cải thiện hiệu quả lấy mẫu không đáng kể như với LEGO-PG. Thú vị là, khi tbreak được chọn gần điểm giữa của quá trình lấy mẫu, hiệu suất được bảo tồn cho cả hai mô hình, và có thể đạt được tiết kiệm thời gian đáng kể trong quá trình lấy mẫu.

3.3 TẬN DỤNG MÔ HÌNH KHUẾCH TÁN ĐÃ ĐƯỢC HUẤN LUYỆN TRƯỚC NHƯ MỘT KHỐI LEGO

Ngoài hiệu quả huấn luyện, một lợi thế khác của thiết kế LEGO là bất kỳ mô hình khuếch tán được huấn luyện trước nào cũng có thể được tích hợp như một khối LEGO miễn là chúng có thể dự đoán x̂(k)0. Lựa chọn tự nhiên là triển khai một mô hình khuếch tán được huấn luyện trước như khối LEGO đầu tiên trong LEGO-PR. Sau đó, một loạt các khối LEGO tinh chỉnh chi tiết cục bộ có thể được xây dựng trên đỉnh của nó. Để xác thực khái niệm này, chúng tôi tiến hành thực nghiệm trên CIFAR-10 sử dụng LEGO-PR. Chúng tôi triển khai một mô hình khuếch tán Bảo tồn phương sai (VP) không điều kiện (Song et al., 2021) (được thực hiện dưới codebase EDM được cung cấp bởi Karras et al. (2022)) để thay thế khối LEGO xử lý hình ảnh đầy đủ, và xây dựng một khối LEGO-S (4×4) ở trên để tinh chỉnh. Chúng tôi huấn luyện mô hình tích hợp theo hai cách khác nhau: 1) VP (đóng băng) + LEGO-PR: Mô hình VP được cố định và chỉ các khối LEGO khác được huấn luyện, và 2) VP (không đóng băng) + LEGO-PR: Mô hình VP được tinh chỉnh cùng với việc huấn luyện các khối LEGO khác. Bảng 4 cho thấy mô hình kết hợp liên tục cải thiện mô hình cơ sở để có được kết quả tạo ra tốt hơn, chứng minh tính linh hoạt của các khối LEGO.

4 KẾT LUẬN

Chúng tôi giới thiệu khối LEGO, một đơn vị mạng mới tích hợp liền mạch Làm giàu đặc trưng cục bộ và Điều phối nội dung toàn cục. Những khối này có thể được xếp chồng để tạo thành xương sống của các mô hình khuếch tán. Các khối LEGO có thể thích ứng, hoạt động trên các patch cục bộ có kích thước khác nhau trong khi duy trì hình ảnh độ phân giải đầy đủ trên tất cả các khối. Trong quá trình huấn luyện, chúng có thể được xếp chồng một cách linh hoạt để xây dựng các xương sống khuếch tán có dung lượng đa dạng, và trong quá trình kiểm tra, chúng có thể bỏ qua, cho phép tạo ra hình ảnh hiệu quả với mạng nhỏ hơn so với việc sử dụng trong huấn luyện. Lựa chọn thiết kế này không chỉ trao cho LEGO hiệu quả đặc biệt trong cả huấn luyện và lấy mẫu mà còn trao quyền cho nó tạo ra hình ảnh ở độ phân giải cao hơn đáng kể so với huấn luyện. Các thực nghiệm mở rộng của chúng tôi, được tiến hành trên các benchmark hình ảnh thách thức như CelebA và ImageNet, cung cấp bằng chứng mạnh mẽ về khả năng của LEGO trong việc tạo ra sự cân bằng hấp dẫn giữa hiệu quả tính toán và chất lượng tạo ra. LEGO đẩy nhanh huấn luyện, đẩy nhanh hội tụ và liên tục duy trì, nếu không nâng cao, chất lượng của hình ảnh được tạo ra. Công việc này biểu thị một tiến bộ đáng chú ý trong việc giải quyết các thách thức liên quan đến các mô hình khuếch tán, làm cho chúng linh hoạt hơn và hiệu quả hơn để tạo ra hình ảnh photo-realistic độ phân giải cao.
