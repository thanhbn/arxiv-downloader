# 2311.03739.pdf
# Chuyển đổi từ PDF sang TXT
# Đường dẫn nguồn: /home/admin88/arxiv-downloader/math/2311.03739.pdf
# Kích thước file: 228492 bytes

===============================================
NỘI DUNG FILE PDF
===============================================

--- TRANG 1 ---
Tận dụng Mô hình Ngôn ngữ Lớn cho Tổng hợp Chứng minh Tự động trong Rust
Jianan Yao∗
Đại học Columbia
Ziqiao Zhou
Microsoft Research
Weiteng Chen
Microsoft Research
Weidong Cui
Microsoft Research

Tóm tắt
Xác minh hình thức có thể bảo đảm một cách chứng minh được tính đúng đắn của phần mềm hệ thống quan trọng, nhưng gánh nặng chứng minh cao từ lâu đã cản trở việc áp dụng rộng rãi. Gần đây, các Mô hình Ngôn ngữ Lớn (LLM) đã thể hiện thành công trong phân tích và tổng hợp mã. Trong bài báo này, chúng tôi trình bày sự kết hợp giữa LLM và phân tích tĩnh để tổng hợp bất biến, khẳng định, và các cấu trúc chứng minh khác cho một khung xác minh hình thức dựa trên Rust gọi là Verus. Trong thiết lập few-shot, LLM thể hiện khả năng logic ấn tượng trong việc tạo ra các điều kiện hậu và bất biến vòng lặp, đặc biệt khi phân tích các đoạn mã ngắn. Tuy nhiên, LLM thiếu khả năng giữ lại và truyền bá thông tin ngữ cảnh, một điểm mạnh của phân tích tĩnh truyền thống. Dựa trên những quan sát này, chúng tôi đã phát triển một nguyên mẫu dựa trên mô hình GPT-4 của OpenAI. Nguyên mẫu của chúng tôi phân tách tác vụ xác minh thành nhiều tác vụ nhỏ hơn, lặp lại các truy vấn GPT-4, và kết hợp đầu ra của nó với phân tích tĩnh nhẹ. Chúng tôi đã đánh giá nguyên mẫu với một nhà phát triển trong vòng lặp tự động trên 20 chương trình thao tác vector. Kết quả chứng minh rằng nó giảm đáng kể nỗ lực của con người trong việc viết mã chứng minh cấp độ cơ bản.

1 Giới thiệu
Xác minh hình thức tương tác giải quyết các tác vụ xác minh phức tạp vượt quá khả năng của xác minh push-button. Tuy nhiên, sử dụng xác minh hình thức tương tác thách thức hơn vì nó đòi hỏi nỗ lực thủ công đáng kể và kiến thức chuyên môn, đặc biệt khi xác minh tự động thất bại. Đáng chú ý, số dòng mã (LoC) cần thiết cho xác minh có thể mở rộng đến mười lần kích thước của mã gốc ([11, 12]).

Được truyền cảm hứng từ những tiến bộ gần đây trong Mô hình Ngôn ngữ Lớn (LLM), chúng tôi nhận thấy cơ hội giảm nỗ lực thủ công cần thiết cho xác minh hình thức tương tác. Chúng tôi đã phát triển một nguyên mẫu tận dụng GPT-4 [19] của OpenAI để tự động hóa việc viết chứng minh. Nguyên mẫu này chuyên về các chương trình hoạt động trên vector. Tận dụng khả năng của GPT-4 trong tư duy logic và hiểu mã, chúng tôi hướng đến việc đẩy nhanh phát triển các chương trình cấp độ cơ bản, đặc biệt là những chương trình thực hiện các thuật toán nổi tiếng (ví dụ: sort, reverse).

Tuy nhiên, chúng tôi đã gặp phải hai thách thức chính. Thách thức đầu tiên là GPT-4 không tuân thủ nghiêm ngặt các tính chất và chứng minh nhất định từ các ngữ cảnh trước đó của một chương trình. Vấn đề thứ hai là khi một nỗ lực chứng minh ban đầu thất bại đối với một chương trình dài, GPT-4 trở nên choáng ngợp bởi множество thông báo lỗi, cản trở khả năng cải thiện chất lượng chứng minh của nó.

Để giải quyết những thách thức này, chúng tôi chia một chương trình thành các đoạn nhỏ hơn, sau đó sử dụng GPT-4 để tạo ra các điều kiện tiền/hậu cho mỗi đoạn. Tiếp theo, chúng tôi yêu cầu GPT-4 chứng minh từng đoạn một cách riêng biệt. Chiến lược này cho phép GPT-4 tập trung vào một đoạn nhỏ hơn của chương trình trong mỗi truy vấn. Khi GPT-4 tạo ra một chứng minh, công cụ của chúng tôi mở rộng nó bằng một phân tích tĩnh nhẹ, giúp truyền bá các tính chất được suy ra từ các phần trước đó của chương trình trong suốt quá trình phân tích. Chúng tôi đánh giá nguyên mẫu trên 20 chương trình thao tác vector. Đối với những chương trình cấp độ cơ bản này, công cụ nguyên mẫu của chúng tôi giảm LoC cho chứng minh hơn 80%.

2 Nghiên cứu liên quan
Từ lâu đã có những nỗ lực tự động hóa các khía cạnh khác nhau của pipeline xác minh, từ suy luận bất biến tự động đến tạo chứng minh dựa trên tactic [4, 5, 7, 26]. Suy luận bất biến đã được sử dụng để chứng minh các tính chất của vòng lặp [6, 8, 9, 20, 22-24], kiểu dữ liệu đại số quy nạp [14, 18], và các giao thức phân tán [10, 13, 17, 21, 27]. Trong số các hướng nghiên cứu này, một số lượng ngày càng tăng các phương pháp dựa trên mạng neural [7, 22-24, 26], đã được quan tâm cho các tác vụ xác minh trong những năm gần đây và đã được chứng minh là giải quyết tốt hơn vấn đề bùng nổ không gian tìm kiếm từ lâu đã cản trở khả năng mở rộng của các phương pháp truyền thống. Khác với

--- TRANG 2 ---
1fnr e v e r s e ( v : & mut Vec <u64>)
2ensures
3 v . l e n ( ) == o l d ( v ) . l e n ( ) ,
4 f o r a l l | i : i n t | 0 <= i < o l d ( v ) . l e n ( ) ==>
5 v [ i ] == o l d ( v ) [ o l d ( v ) . l e n ( ) − i −1]
6{
7 l e t l e n g t h = v . l e n ( ) ;
8 l e t mut n :u s i z e = 0 ;
9 while n < l e n g t h / 2
10 {
11 l e t x = v [ n ] ;
12 l e t y = v [ l e n g t h − 1 − n ] ;
13 v . s e t ( n , y ) ;
14 v . s e t ( l e n g t h − 1 − n , x ) ;
15 n = n + 1 ;
16 }
17 }
Hình 1: Hàm để đảo ngược một vector. ensures chỉ định điều kiện hậu của hàm. old(v) có nghĩa là giá trị của v trước khi hàm thực thi.

những nghiên cứu đó, chúng tôi áp dụng một LLM để tổng hợp bất biến và khẳng định trung gian. Công trình của chúng tôi chứng minh rằng các công cụ xác minh tương lai có thể hiệu quả hơn mà không hy sinh khả năng sử dụng với sự giúp đỡ của LLM.

3 Nền tảng
Chúng tôi chọn Verus [15] làm công cụ xác minh cơ sở trong công trình này. Verus là một công cụ xác minh tiên tiến cho Rust, tích cực cắt tỉa ngữ cảnh SMT để tối ưu hóa thời gian giải quyết. Mặc dù có thể xác minh các hệ thống lớn và phức tạp hiệu quả hơn, nó đòi hỏi nỗ lực đáng kể hơn để viết mã chứng minh. Để giảm thiểu điều này, chúng tôi xem xét một số khó khăn mà các nhà phát triển Verus gặp phải. Đầu tiên, giống như nhiều ngôn ngữ xác minh khác, xây dựng bất biến suy diễn khó khăn do không gian tìm kiếm lớn. Thứ hai, vì Verus rất mới đối với các nhà phát triển, nó không cung cấp một lựa chọn lớn các chứng minh/bổ đề có thể tái sử dụng hoặc thư viện đã xác minh. Điều này đòi hỏi các nhà phát triển phải hiểu logic và có khả năng viết chứng minh, ngay cả đối với các thuật toán cơ bản. Thứ ba, Verus mã hóa mỗi module và thậm chí mỗi vòng lặp một cách độc lập để tạo điều kiện giải quyết nhanh. Tối ưu hóa này đòi hỏi tăng nỗ lực trong việc chú thích các điều kiện tiền/hậu và bất biến so với các ngôn ngữ xác minh khác (ví dụ: Dafny [16] hoặc F* [25]).

4 Phương pháp
4.1 Nhu cầu về bất biến tự động tạo
Xem xét một chương trình Rust đơn giản đảo ngược một vector, như thể hiện trong Hình 1. Nhà phát triển cần xác minh hai điều kiện hậu được chỉ định tại Dòng 2-5. Điều kiện hậu đầu tiên nói rằng vector đã đảo ngược nên duy trì cùng độ dài với vector gốc, và điều kiện hậu thứ hai nói rằng phần tử thứ i của vector đã đảo ngược nên bằng phần tử thứ (length−i−1) trong vector gốc. Những điều kiện hậu này định nghĩa tính đúng đắn của mã. Để chứng minh vòng lặp bằng Verus [1], nhà phát triển cần thêm các bất biến vòng lặp sau.

1i n v a r i a n t
2 0 <= n <= l e n g t h / 2 ,
3 v . l e n ( ) == l e n g t h ,
4 f o r a l l | i : i n t | 0 <= i < n ==> v [ i ] ==
o l d ( v ) [ l e n g t h − i − 1 ] ,
5 f o r a l l | i : i n t | l e n g t h − n <= i < l e n g t h
==> v [ i ] == o l d ( v ) [ l e n g t h − i − 1 ] ,
6 f o r a l l | i : i n t | n <= i < l e n g t h − n ==> v
[ i ] == o l d ( v ) [ i ] ,

Bất biến vòng lặp định nghĩa các điều kiện vẫn đúng trước và sau mỗi lần lặp của vòng lặp, và chúng phải có tính quy nạp. Bất biến đầu tiên rất đơn giản; nó định nghĩa các điều kiện cho việc kết thúc vòng lặp. Bất biến thứ hai được Verus yêu cầu, vì nó thực hiện xác minh riêng biệt cho vòng lặp và các phần còn lại khác của chương trình.

Bất biến thứ ba và thứ tư chỉ định các cập nhật cho bất kỳ phần tử nào được sửa đổi trong vector, trong phạm vi 0≤i<n và length−n≤i<length. Bất biến cuối cùng khẳng định rằng mọi phần tử chưa được cập nhật giữ nguyên giá trị ban đầu, đảm bảo rằng các bất biến cho các phần tử đã cập nhật có tính quy nạp. Việc thiếu bất kỳ bất biến nào trong số này sẽ dẫn đến thất bại trong việc thiết lập các bất biến quy nạp.

Để tự động điền các bất biến này (và có thể các cấu trúc chứng minh khác), chúng tôi giải phóng sức mạnh của các mô hình ngôn ngữ lớn trong quy trình làm việc được mô tả trong Hình 2. Với mã nguồn cần được xác minh, chúng tôi mã hóa nó thành một prompt với một vài ví dụ shot và gửi prompt đến GPT-4. Mỗi ví dụ là một cặp mã nguồn với các tính chất cần chứng minh (ký hiệu là source_code) và mã đã xác minh với chứng minh do con người cung cấp (ký hiệu là code_with_proof). Khi GPT-4 trả về mã với chứng minh, chúng tôi xác thực nó bằng cách sử dụng Verus để xác minh.

Hầu hết thời gian, GPT-4 không thể giải quyết vấn đề bằng một truy vấn duy nhất. Nếu xác minh với chứng minh được tạo ra thất bại, chúng tôi tuân theo một cách tiếp cận tiêu chuẩn trong các giải pháp dựa trên chuỗi LLM để tích hợp cả phản hồi cuối cùng và thông báo lỗi để xây dựng một prompt mới. Truy vấn mới này sau đó được gửi lại cho GPT-4 để tạo ra kết quả cải thiện.

Đối với ví dụ trong Hình 1, GPT-4 thành công tạo ra bốn bất biến đầu tiên nhưng bỏ lỡ bất biến cuối cùng. Thực tế, các nhà phát triển con người thường mắc lỗi tương tự — quên chỉ định những thứ không thay đổi. Verus sau đó xuất ra ba lỗi: bất biến thứ ba và thứ tư không đúng ở cuối thân vòng lặp, và điều kiện hậu trên Dòng 5 không đúng. Sau khi kết hợp thông báo lỗi vào truy vấn thứ hai, GPT-4 trả về tất cả 5 bất biến, làm cho mã có thể xác minh được bởi Verus. Lý tưởng nhất, nếu một con người có thể nhanh chóng điều chỉnh chứng minh dựa trên các gợi ý được cung cấp bởi các thông báo lỗi, chúng tôi dự đoán rằng GPT-4 có thể sửa đổi chứng minh theo cách tương tự.

--- TRANG 3 ---
Hình 2: Quy trình làm việc cơ bản của công cụ chúng tôi.

4.2 Phân tách tác vụ cho các chương trình lớn
Giải pháp cơ bản được mô tả trong phần trước chỉ hiệu quả cho các chương trình nhỏ. Chúng tôi đã quan sát thấy rằng GPT-4 không hoạt động tốt đối với các chương trình tương đối lớn. Điều này không hoàn toàn đáng ngạc nhiên, vì chúng tôi đang yêu cầu GPT-4 tạo ra một chứng minh hoàn chỉnh cho toàn bộ chương trình, trong khi các nhà phát triển con người thường nghĩ theo các bước nhỏ.

Xem xét hàm trong Hình 3. Một nhà phát triển con người sẽ ban đầu chứng minh tính chất của vector sau vòng lặp đầu tiên, khẳng định rằng không có phần tử nào vượt quá giá trị hai. Tiếp theo, họ sẽ chuyển sự chú ý đến vòng lặp thứ hai, phân tích tính toán tổng của nó không vượt quá gấp đôi số phần tử.

Chúng tôi có thể hướng dẫn GPT-4 suy nghĩ tương tự bằng cách phân tách tác vụ mã lớn thành các tác vụ nhỏ hơn. Với một mã, chúng tôi phân tách nó thành các đoạn nhỏ hơn. Đối với mỗi đoạn, chúng tôi định nghĩa hai loại prompt. Một là để GPT-4 tạo ra mối quan hệ giữa các đoạn, trong đó điều kiện hậu của một đoạn phải là điều kiện tiền của đoạn tiếp theo. Loại khác là để GPT-4 tạo ra chứng minh cho từng đoạn.

Đối với mã trong Hình 3, chúng tôi có thể chia tại Dòng 13 thành hai đoạn và truy vấn GPT-4 cho điều kiện hậu của đoạn đầu tiên. Ví dụ, GPT-4 đưa ra điều kiện hậu sau.

1i == N,
2a . l e n ( ) == N,
3f o r a l l | k : i n t | 0 <= k < a . l e n ( ) ==> a [ k ] <= 2 ,

Với điều kiện hậu, việc xác minh mã gốc được phân tách thành hai tác vụ nhỏ hơn, mỗi tác vụ liên quan đến một trong hai đoạn. Đối với mỗi đoạn, chúng tôi sử dụng quy trình làm việc được mô tả trong Hình 2 để hoàn thành chứng minh. Giao diện ba dòng trên sẽ làm điều kiện hậu khi xác minh đoạn đầu tiên và làm điều kiện tiền khi xác minh đoạn thứ hai.

4.3 Kết hợp GPT-4 với phân tích tĩnh và con người
Mặc dù GPT-4 có thể tạo ra các công thức logic dựa trên mã, bao gồm các bất biến định lượng phức tạp, chúng thường bỏ qua một số bất biến đơn giản không trực quan, giống như các nhà phát triển con người mới bắt đầu.

Ví dụ, người ta có thể thấy giới hạn trên của N trong Dòng 4 khó hiểu. Tuy nhiên, giới hạn trên này rất quan trọng để đảm bảo không có tràn số nguyên trên Dòng 18. Để xác minh vòng lặp thứ hai, N <= 0x7FFF_FFFF phải được bao gồm như một bất biến. Việc tìm ra các bất biến như vậy đơn giản hơn nhiều với phân tích tĩnh. Do đó, chúng tôi đã triển khai một công cụ phân tích tĩnh nhẹ mà, đối với mỗi vòng lặp, cung cấp danh sách các biến được đọc từ và ghi vào. Đối với bất kỳ điều kiện tiền nào của vòng lặp, nếu tất cả các biến được tham chiếu trong điều kiện tiền không được ghi vào trong vòng lặp, và ít nhất một biến được tham chiếu được đọc từ trong vòng lặp, điều kiện tiền sẽ được tự động truyền vào bất biến vòng lặp, ngoài các bất biến được tạo ra bởi GPT-4. Đối với vòng lặp thứ hai trong Hình 3, N <= 0x7FFF_FFFF được thêm vào bất biến vòng lặp.

Để hướng dẫn tốt hơn truy vấn GPT-4, chúng tôi chỉ thu hút một nhà phát triển khi cần thiết. Nếu GPT-4 trả về một điều kiện hậu, nhà phát triển có tùy chọn chỉnh sửa nó. Nếu GPT-4 thất bại trong việc hoàn thành chứng minh trong số lần lặp tối đa, nhà phát triển được nhắc hoàn thành chứng minh, xây dựng dựa trên chứng minh một phần được cung cấp bởi GPT-4.

1pub fn foo ( a : & mut Vec <u32> , N: u32)
2 r e q u i r e s
3 o l d ( a ) . l e n ( ) == N,
4 N <= 0x7FFF_FFFF ,
5{
6 l e t mut i :u s i z e = 0 ;
7 while ( i < N as u s i z e )
8 {
9 i f( a [ i ] > 2) {
10 a . s e t ( i , 2) ;
11 }
12 i = i + 1 ;
13 }
14 i = 0 ;
15 l e t mut sum : u32 = 0 ;
16 while ( i < N as u s i z e )
17 {
18 sum = sum + a [ i ] ;
19 i = i + 1 ;
20 }
21 a s s e r t ( sum <= 2 *N) ;
22 }
Hình 3: Hàm Verus tính tổng trên một vector sau khi các phần tử được giới hạn ở 2. requires chỉ định điều kiện tiền của hàm.

4.4 Một ví dụ chạy
Để giúp hiểu cách công cụ của chúng tôi hoạt động, chúng tôi thể hiện từng bước để chứng minh vòng lặp đầu tiên trong Hình 3.

Với một chương trình trong Verus (một ngôn ngữ giống Rust) với điều kiện tiền của nó, trả về điều kiện hậu của nó. Một số ví dụ và điều kiện hậu của chúng được đưa ra dưới đây:

${Examples}

Ghi chú:
1. Không sử dụng các primitive Rust như clone, filter, iter, sum, hoặc count.
2. Không sử dụng toán tử điều kiện "a ? b : c".
3. Mỗi điều kiện hậu chiếm một dòng riêng biệt.

Bắt đầu!

Chương trình Verus mới:
${CodeBlock}

Yêu cầu phản hồi:
Bạn phải phản hồi bằng định dạng sau và đảm bảo phản hồi có thể được phân tích bởi json.loads:
{
"thoughts": "<giải thích chương trình và điều kiện tiền của nó, sau đó phân tích cách viết điều kiện hậu>",
"postcondition": "<điều kiện hậu>"
}

Listing 1: Truy vấn GPT-4 thứ 1

i == N,
forall |k:int| 0 <= k < N ==> a[k] <= 2

Listing 2: Phản hồi thứ 1. Công cụ của chúng tôi phân tích phản hồi từ GPT-4 và trích xuất các điều kiện hậu.

Với một chương trình trong Verus (một ngôn ngữ giống Rust), thêm bất biến và chứng minh để làm cho nó có thể xác minh được. Một số chương trình ví dụ và phiên bản có thể xác minh của chúng được đưa ra dưới đây:

...

Ghi chú:
...
* Không sửa đổi hoặc xóa bất kỳ dòng nào trong chương trình đã cho. Chỉ thêm dòng.

Bắt đầu!

Chương trình Verus mới:
pub fn foo(a: &mut Vec<u32>, N: u32, i: usize)
requires
old(a).len() == N,
N <= 0x7FFF_FFFF,
{
let mut i: usize = i;
assume(i == 0);
${first loop}
proof { // inline postcondition
assert(i == N);
assert(forall |k:int| 0 <= k < N ==> a[k] <= 2);
}
}
------
Yêu cầu phản hồi:
Bạn phải phản hồi bằng định dạng sau và đảm bảo phản hồi có thể được phân tích bởi json.loads:
{
"thoughts": "<giải thích các điều kiện tiền và hậu, và cách viết bất biến và chứng minh>",
"verifiable program": "<chương trình>"
}

Listing 3: Truy vấn GPT-4 thứ 2, yêu cầu chứng minh cho điều kiện hậu này

invariant
0 <= i <= N,
a.len() == N,
forall |k:int| 0 <= k < i ==> a[k] <= 2,

Listing 4: Phản hồi thứ 2. GPT-4 xuất ra một chương trình, giống như chương trình đầu vào ngoại trừ việc chèn các bất biến sau.

Ngoài ra, công cụ phân tích tĩnh của chúng tôi truyền các bất biến sau từ các điều kiện tiền.

a.len() == N,
N <= 0x7FFF_FFFF,

Bất biến vòng lặp N <= 0x7FFF_FFFF sau đó được thêm vào các bất biến do GPT tạo ra (mặc dù sẽ không cần thiết cho vòng lặp này). Chương trình sau đó được xác minh bởi Verus thành công.

--- TRANG 4 ---

5 Đánh giá
5.1 Tập dữ liệu
Chúng tôi đã đánh giá công cụ trên 20 chương trình thao tác vector được tạo ra từ benchmark Diffy [3]. Cụ thể, chúng tôi lấy 20 chương trình C từ danh mục an toàn của nó và dịch chúng từ C sang Verus. Sau đó chúng tôi kiểm tra thủ công tính tương đương của bản dịch.

5.2 Tham số
Chúng tôi đã kiểm tra khả năng xác minh của công cụ, được trang bị mô hình OpenAI GPT-4 (2023-03-15). Ban đầu, chúng tôi đặt nhiệt độ của mô hình GPT-4 là 0. Khi GPT-4 trả về định dạng JSON bị lỗi, công cụ tăng nhiệt độ lên 0.5 và thử lại. Nếu GPT-4 trả về một chương trình không thể xác minh được sau khi truyền bất biến, công cụ đưa thông báo lỗi trở lại và thử lại một lần. Chúng tôi đã sử dụng 3 template prompt: một để điền điều kiện hậu, một để hoàn thành chứng minh, và một để sửa chứng minh. Phân tích tĩnh được cấu hình để chia một chương trình thành các đoạn xung quanh các vòng lặp.

--- TRANG 5 ---
Tổng số đoạn 110
Không cần chứng minh 55
Phản hồi GPT xác minh trực tiếp 18
Xác minh sau khi truyền bất biến 17
Xác minh sau phản hồi lỗi 2
Xác minh sau cả truyền và phản hồi 1
Xác minh sau sửa chữa của con người 16
Chưa xác minh (lỗi trong Rust) 1
Bảng 1: Kết quả xác minh 20 chương trình theo đoạn chương trình.

Chứng minh chuẩn 334
Sửa chữa của con người về cú pháp 5
Sửa chữa của con người về ngữ nghĩa 49
Sửa chữa của con người về cả cú pháp và ngữ nghĩa 1
Bảng 2: Kết quả xác minh 20 chương trình theo dòng mã.

5.3 Kết quả
20 chương trình chúng tôi kiểm tra được chia thành 110 đoạn, dẫn đến tổng cộng 163 truy vấn GPT-4. Bảng 1 trình bày kết quả được phân loại theo đoạn chương trình. Trong số 110 đoạn, 55 đoạn không có vòng lặp và được xác minh trực tiếp bởi Verus mà không yêu cầu bất kỳ chú thích nào. Trong số 55 đoạn còn lại, GPT-4 trực tiếp cung cấp chứng minh đúng cho 18 đoạn, trong khi 20 đoạn nhận được chứng minh đúng sau khi truyền bất biến và/hoặc phản hồi lỗi. Điều này thể hiện không chỉ hiệu quả vốn có của GPT-4 mà còn hiệu quả của các kỹ thuật chúng tôi sử dụng để tương tác với nó.

Bảng 2 hiển thị kết quả theo dòng mã. Khi bắt đầu từ đầu, một nhà phát triển con người sẽ yêu cầu 334 dòng chứng minh để xác minh 20 chương trình. Ngược lại, với công cụ nguyên mẫu của chúng tôi, người dùng được giao nhiệm vụ sửa chữa chỉ 55 dòng, xây dựng dựa trên chứng minh một phần đã được cung cấp bởi công cụ. Điều này chứng minh sự giảm thiểu đáng kể nỗ lực của con người mà công cụ của chúng tôi mang lại khi xác minh các chương trình thao tác vector với vòng lặp.

5.4 Kết quả cải thiện với GPT-4 (2023-11-06)
Trong đánh giá của chúng tôi sử dụng mô hình GPT-4 ngày 2023-03-15, chỉ 3 trong số 20 chương trình được tự động hóa hoàn toàn (không can thiệp của con người). Ngoài ra, tự sửa chữa thông qua phản hồi lỗi chỉ hiệu quả cho 2 đoạn. Tuy nhiên, sau khi chuyển sang mô hình GPT-4 cập nhật (2023-11-06) và thực hiện hai nỗ lực bổ sung khi thất bại, 14 trong số 20 chương trình không yêu cầu can thiệp của con người. Với tự động hóa tăng cường này, hơn 20 đoạn có thể được tự sửa chữa qua phản hồi thông báo lỗi. Điều này chứng minh rằng cách tiếp cận của chúng tôi phát triển tự nhiên cùng với những tiến bộ trong mô hình LLM.

6 Hạn chế và Bài học Rút ra
Trong phần này, chúng tôi chia sẻ kinh nghiệm và bài học rút ra khi phát triển công cụ. Điều đầu tiên là GPT-4 hoạt động hiệu quả hơn với các đầu vào mã ngắn hơn. Khi mã dài, GPT-4 thường quên về các bất biến nó viết cho một vòng lặp trước đó, và bị lạc trong quá nhiều thông báo lỗi khi chứng minh không đúng. Mặc dù vấn đề được giảm thiểu bằng phân tách tác vụ, như thảo luận trong Phần 4.2, chiến lược tối ưu cho phân tách, đặc biệt với nhiều hàm, vẫn là một lĩnh vực cần nghiên cứu.

Bài học thứ hai là các bình luận mã được GPT-4 đánh giá cao. Chúng tôi đã quan sát thấy rằng GPT-4 đôi khi quên chỉ định kích thước của vector trong bất biến (ví dụ: v.len() == length) đối với ví dụ reverse trong Hình 1. Bằng cách thêm một bình luận sau mỗi bất biến như vậy trong các ví dụ few-shot, GPT-4 có nhiều khả năng tạo ra bất biến như vậy cho một chương trình mới.

Bài học thứ ba là GPT-4 thành thạo hơn trong việc viết điều kiện hậu và bất biến hơn là viết trigger và khẳng định cho khởi tạo quantifier [2], hoặc viết chứng minh số học phi tuyến. Ngay cả trong thiết lập zero-shot (tức là khi không có ví dụ nào được cung cấp trong prompt), GPT-4 có thể tạo ra các điều kiện hậu và bất biến có ý nghĩa, mặc dù không theo cú pháp Verus hợp lệ. Điều này cho thấy rằng GPT-4 đã học được các khái niệm này trong dữ liệu đào tạo của nó. Nhưng trigger và khẳng định cho khởi tạo quantifier đặc thù cho các ngôn ngữ xác minh dựa trên chú thích, và chứng minh cho số học phi tuyến đặc biệt dành riêng cho Verus. Việc xác định cách dạy hiệu quả cho LLM những cách lý luận mới này trong giới hạn kích thước prompt là một thách thức đang diễn ra. Có thể giải quyết vấn đề này bằng fine-tuning.

Công cụ hiện tại của chúng tôi vẫn là một nguyên mẫu sơ khai. Việc triển khai nhắm mục tiêu cụ thể đến các chương trình thao tác vector một hàm trong Verus. Chúng tôi dự đoán khả năng của nó sẽ mở rộng đáng kể bằng cách hỗ trợ các kiểu dữ liệu phức tạp hơn, chẳng hạn như Set, Map, và các kiểu dữ liệu do người dùng định nghĩa. Một hướng khác để cải thiện sẽ là hỗ trợ xác minh liên hàm và tận dụng các bổ đề hiện có trong chứng minh.

7 Kết luận
Trong bài báo này, chúng tôi đã trình bày một cách tiếp cận sử dụng GPT-4 để tạo ra chứng minh cho các chương trình Rust có thể được xác minh bởi Verus. Chúng tôi đã phát triển một nguyên mẫu và đánh giá nó trên 20 chương trình thao tác vector. Đánh giá của chúng tôi cho thấy rằng nguyên mẫu có thể giảm đáng kể nỗ lực của con người trong việc viết chứng minh cho các chương trình cấp độ cơ bản. Công trình của chúng tôi chứng minh tiềm năng của việc tận dụng LLM để tự động hóa tạo chứng minh cho xác minh chương trình.

--- TRANG 6 ---
8 Lời cảm ơn
Chúng tôi cảm ơn Chris Hawblitzel và Jacob R. Lorch vì những gợi ý hữu ích về việc sử dụng Verus.

Tài liệu tham khảo
[1] Hướng dẫn của Verus về vòng lặp và bất biến. https://verus-lang.github.io/verus/guide/while.html.

[2] Hướng dẫn của Verus về trigger. https://verus-lang.github.io/verus/guide/forall.html.

[3] Supratik Chakraborty, Ashutosh Gupta, và Divyesh Unadkat. Diffy: Lý luận quy nạp của các chương trình mảng sử dụng bất biến khác biệt. Trong Computer Aided Verification: 33rd International Conference, CAV 2021, Virtual Event, July 20–23, 2021, Proceedings, Part II 33, trang 911–935. Springer, 2021.

[4] Łukasz Czajka. Tìm kiếm chứng minh thực tế cho coq bằng cách sinh kiểu. Trong Automated Reasoning: 10th International Joint Conference, IJCAR 2020, Paris, France, July 1–4, 2020, Proceedings, Part II 10, trang 28–57. Springer, 2020.

[5] Łukasz Czajka và Cezary Kaliszyk. Hammer cho coq: Tự động hóa cho lý thuyết kiểu phụ thuộc. Journal of automated reasoning, 61:423–453, 2018.

[6] Grigory Fedyukovich, Sumanth Prabhu, Kumar Madhukar, và Aarti Gupta. Bất biến định lượng qua tổng hợp được hướng dẫn bởi cú pháp. Trong Proceedings of the 31st International Conference on Computer Aided Verification (CAV '19), trang 259–277, tháng 7 năm 2019.

[7] Emily First, Markus N Rabe, Talia Ringer, và Yuriy Brun. Baldur: tạo và sửa chữa chứng minh toàn bộ với các mô hình ngôn ngữ lớn. arXiv preprint arXiv:2303.04910, 2023.

[8] Pranav Garg, Christof Löding, P Madhusudan, và Daniel Neider. Học bất biến định lượng phổ quát của cấu trúc dữ liệu tuyến tính. Trong Proceedings of the 25th International Conference on Computer Aided Verification (CAV '13), trang 813–829, tháng 7 năm 2013.

[9] Pranav Garg, Daniel Neider, P. Madhusudan, và Dan Roth. Học bất biến sử dụng cây quyết định và ví dụ phản bác hàm ý. Trong Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL '16), trang 499–512, tháng 1 năm 2016.

[10] Travis Hance, Marijn Heule, Ruben Martins, và Bryan Parno. Tìm bất biến của hệ thống phân tán: Đó là một thế giới nhỏ (đủ) sau tất cả. Trong Proceedings of the 18th USENIX Symposium on Networked Systems Design and Implementation (NSDI '21), trang 115–131, tháng 4 năm 2021.

[11] Travis Hance, Andrea Lattuada, Chris Hawblitzel, Jon Howell, Rob Johnson, và Bryan Parno. Hệ thống Lưu trữ là Hệ thống Phân tán (Vì vậy hãy Xác minh Chúng theo Cách đó!). Trong Proceedings of the 14th USENIX Symposium on Operating Systems Design and Implementation (OSDI '20), trang 99–115, 2020.

[12] Chris Hawblitzel, Jon Howell, Manos Kapritsos, Jacob R Lorch, Bryan Parno, Michael L Roberts, Srinath Setty, và Brian Zill. IronFleet: Chứng minh các hệ thống phân tán thực tế đúng đắn. Trong Proceedings of the 25th Symposium on Operating Systems Principles (SOSP '15), trang 1–17, tháng 10 năm 2015.

[13] Jason R. Koenig, Oded Padon, Sharon Shoham, và Alex Aiken. Suy ra bất biến với sự xen kẽ quantifier: Thuần hóa vụ nổ không gian tìm kiếm. Trong Proceedings of the 28th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS '22), trang 338–356, tháng 4 năm 2022.

[14] Yurii Kostyukov, Dmitry Mordvinov, và Grigory Fedyukovich. Vượt ra ngoài các biểu diễn cơ bản của bất biến chương trình trên các kiểu dữ liệu đại số. Trong Proceedings of the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation (PLDI '21), trang 451–465, tháng 6 năm 2021.

[15] Andrea Lattuada, Travis Hance, Chanhee Cho, Matthias Brun, Isitha Subasinghe, Yi Zhou, Jon Howell, Bryan Parno, và Chris Hawblitzel. Verus: Xác minh các chương trình rust sử dụng các kiểu phantom tuyến tính. Proc. ACM Program. Lang., 7(OOPSLA1), 2023.

[16] K Rustan M Leino. Dafny: Một trình xác minh chương trình tự động cho tính đúng đắn chức năng. Trong International conference on logic for programming artificial intelligence and reasoning, trang 348–370. Springer, 2010.

[17] Haojun Ma, Aman Goel, Jean-Baptiste Jeannin, Manos Kapritsos, Baris Kasikci, và Karem A Sakallah. I4: Suy luận tăng dần của bất biến quy nạp để xác minh các giao thức phân tán. Trong Proceedings of the 27th ACM Symposium on Operating Systems Principles (SOSP '19), trang 370–384, tháng 10 năm 2019.

[18] Anders Miltner, Saswat Padhi, Todd Millstein, và David Walker. Suy luận bất biến biểu diễn dựa trên dữ liệu. Trong Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '20), trang 1–15, tháng 6 năm 2020.

--- TRANG 7 ---
[19] OpenAI. GPT-4. https://openai.com/research/gpt-4, 2023.

[20] Saswat Padhi, Rahul Sharma, và Todd Millstein. Suy luận điều kiện tiền dựa trên dữ liệu với các tính năng đã học. Trong Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '16), trang 42–56, tháng 6 năm 2016.

[21] Oded Padon, James R Wilcox, Jason R Koenig, Kenneth L McMillan, và Alex Aiken. Tính đối ngẫu quy nạp: Tìm kiếm nguyên-đối ngẫu cho bất biến. Proceedings of the ACM on Programming Languages, 6(POPL), tháng 1 năm 2022.

[22] Kexin Pei, David Bieber, Kensen Shi, Charles Sutton, và Pengcheng Yin. Các mô hình ngôn ngữ lớn có thể lý luận về bất biến chương trình không? Trong Proceedings of the 40th International Conference on Machine Learning (ICML '23), 2023.

[23] Gabriel Ryan, Justin Wong, Jianan Yao, Ronghui Gu, và Suman Jana. Cln2inv: Học bất biến vòng lặp với mạng logic liên tục. Trong International Conference on Learning Representations, 2020.

[24] Xujie Si, Hanjun Dai, Mukund Raghothaman, Mayur Naik, và Le Song. Học bất biến vòng lặp để xác minh chương trình. Trong Advances in Neural Information Processing Systems, trang 7751–7762, 2018.

[25] Nikhil Swamy, Guido Martínez, và Aseem Rastog. Lập trình hướng chứng minh trong F*. https://www.fstar-lang.org/tutorial/proof-oriented-programming-in-fstar.pdf, 2023.

[26] Kaiyu Yang và Jia Deng. Học chứng minh định lý qua tương tác với trợ lý chứng minh. Trong International Conference on Machine Learning, trang 6984–6994. PMLR, 2019.

[27] Jianan Yao, Runzhou Tao, Ronghui Gu, và Jason Nieh. DuoAI: Suy luận tự động nhanh của bất biến quy nạp để xác minh các giao thức phân tán. Trong 16th USENIX Symposium on Operating Systems Design and Implementation (OSDI '22), trang 485–501, 2022.
