# 2310.19925.pdf
# Được chuyển đổi từ PDF sang TXT
# Đường dẫn nguồn: /home/admin88/arxiv-downloader/random/2310.19925.pdf
# Kích thước tệp: 151090 bytes

===============================================
NỘI DUNG TỆP PDF
===============================================


--- TRANG 1 ---
arXiv:2310.19925v1  [cs.DC]  30 Oct 2023OpenRAND: Một Thư Viện Tạo Số Ngẫu Nhiên Có Thể Tái Tạo và Di Động Hiệu Suất
cho Tính Toán Song Song
Shihab Shahriar Khana,∗, Bryce Palmerb,c, Christopher Edelmaierd, Hasan Metin Aktulgaa
aKhoa Khoa học Máy tính, Đại học Bang Michigan, East Lansing, MI 48824
bKhoa Cơ khí, Đại học Bang Michigan, East Lansing, MI 48824
cKhoa Toán học Tính toán, Khoa học và Kỹ thuật, Đại học Bang Michigan, East Lansing, MI 48824
dTrung tâm Sinh học Tính toán, Viện Flatiron, New York, NY 10010

Tóm tắt
Chúng tôi giới thiệu OpenRAND, một thư viện C++17 nhằm tạo điều kiện thuận lợi cho nghiên cứu khoa học có thể tái tạo thông qua việc tạo ra các số ngẫu nhiên mạnh mẽ về mặt thống kê nhưng vẫn có thể lặp lại. OpenRAND phù hợp với các ứng dụng đơn luồng và đa luồng trên CPU và GPU và cung cấp một API đơn giản, thân thiện với người dùng tuân thủ giao diện động cơ số ngẫu nhiên tiêu chuẩn C++. Nó có tính di động: hoạt động mượt mà như một thư viện chỉ có header nhẹ, làm cho nó có thể thích ứng với nhiều loại phần mềm và nền tảng phần cứng. Nó mạnh mẽ về mặt thống kê: một bộ các kiểm tra tích hợp đảm bảo không có mẫu nào tồn tại trong các luồng đơn lẻ hoặc nhiều luồng. Mặc dù có tính đơn giản và khả năng di động, nó có hiệu suất đáng chú ý—sánh ngang và đôi khi thậm chí vượt trội hơn các thư viện gốc với biên độ đáng kể. Các kiểm tra của chúng tôi, bao gồm mô phỏng bước đi Brownian, khẳng định khả năng tái tạo của nó và làm nổi bật hiệu quả tính toán, vượt trội hơn cuRAND của CUDA lên đến 1,8 lần.

Từ khóa: Tạo Số Ngẫu Nhiên Giả, GPGPU, HPC, C++

Siêu dữ liệu

1. Bối cảnh
Tạo số ngẫu nhiên theo cách có thể tái tạo là yếu tố then chốt để đảm bảo độ tin cậy và tính hợp lệ của kết quả nghiên cứu khoa học, đặc biệt trong các lĩnh vực chủ yếu dựa vào việc tạo số ngẫu nhiên, như mô phỏng ngẫu nhiên, học máy và đồ họa máy tính. Khả năng tái tạo này cho phép sao chép chính xác các mô phỏng, tạo điều kiện cho các so sánh có ý nghĩa không có biến động không cần thiết và đảm bảo rằng bất kỳ sự khác biệt nào phát sinh chỉ có thể quy cho các yếu tố bên ngoài, chẳng hạn như sự khác biệt trong thứ tự số học dấu phẩy động. Cụ thể hơn, nó cho phép các mô phỏng sử dụng hạt giống ngẫu nhiên giống hệt nhau được so sánh trực tiếp, loại bỏ sự phụ thuộc vào trung bình thống kê và đơn giản hóa đáng kể các quy trình gỡ lỗi và kiểm tra hồi quy, như đã được chứng minh trong các công trình trước đây [1, 2].

Trong môi trường đơn luồng, khả năng tái tạo của Bộ Tạo Số Ngẫu Nhiên Giả (RNG) là đơn giản vì cùng một trạng thái ban đầu (tức là hạt giống) dẫn đến một chuỗi số ngẫu nhiên giống hệt nhau (tức là luồng). Mặt khác, việc tạo số ngẫu nhiên có thể tái tạo cho các ứng dụng đa luồng và đa quá trình là không tầm thường do tính không thể đoán trước của thứ tự thực thi và khả năng xảy ra các điều kiện đua tranh. Các chiến lược như sử dụng một phiên bản RNG duy nhất với đồng bộ hóa hoặc phân phối các số ngẫu nhiên được phân bổ trước cho các luồng khác nhau đều gặp phải các vấn đề về khả năng mở rộng [3, 1]. Thay vào đó, nghiên cứu đương đại chủ yếu tập trung vào việc tạo ra nhiều luồng độc lập bằng cách sử dụng các phiên bản RNG riêng biệt cho mỗi luồng. Một cách tiếp cận là chia một luồng duy nhất thành nhiều luồng có kích thước bằng nhau. Ví dụ, người ta có thể chia một luồng duy nhất có chu kỳ 2^64 thành 2^32 luồng độc lập, mỗi luồng có chu kỳ 2^32. Tuy nhiên, phương pháp này yêu cầu bộ tạo phải có chu kỳ dài và khả năng nhảy về phía trước hiệu quả. Hơn nữa, sự độc lập thống kê giữa các luồng này là một mối lo ngại [4, 5]. Một kỹ thuật khác thường được sử dụng là tạo trước một tập hợp các hạt giống (giả) ngẫu nhiên cho mỗi luồng và sử dụng chúng làm điểm bắt đầu để tạo ra nhiều luồng. Mặc dù xác suất va chạm hạt giống trực tiếp, dẫn đến các luồng giống hệt nhau, có thể được giảm thiểu đối với các RNG có chu kỳ đủ lớn, vẫn còn khả năng tương quan thống kê giữa các luồng, đặc biệt khi các biểu diễn bit của hai hạt giống có liên quan chặt chẽ [6]. Để có một xử lý mở rộng về chủ đề này, vui lòng tham khảo [5].

Việc tích hợp Đơn vị Xử lý Đồ họa (GPU) vào quy trình tính toán, quan trọng đối với các khối lượng công việc Tính toán Hiệu suất Cao (HPC), đưa ra một tập hợp thách thức riêng biệt khi chúng ta chuyển từ CPU sang GPU, từ hàng chục hoặc nhiều nhất là hàng trăm luồng đến có thể hàng triệu luồng trong một nút duy nhất. Các cân nhắc về bộ nhớ đóng vai trò như một minh họa chính. Trong môi trường GPU, các luồng chỉ truy cập được một lượng bộ nhớ riêng tư tốc độ cao hạn chế; do đó, việc tối ưu hóa việc sử dụng bộ nhớ cục bộ là cần thiết để duy trì hiệu suất. Ví dụ, động cơ ngẫu nhiên mặc định trong libstdc++ của GNU, Mersenne Twister [7], yêu cầu khoảng 624 từ 32-bit cho trạng thái nội bộ, vượt quá hơn gấp đôi số lượng tối đa các thanh ghi 32-

Bản thảo được gửi đến SoftwareX vào ngày 1 tháng 11, 2023

--- TRANG 2 ---
Số. Mô tả siêu dữ liệu mã Vui lòng điền vào cột này
C1 Phiên bản mã hiện tại V0.9
C2 Liên kết vĩnh viễn đến mã/kho lưu trữ được sử dụng cho phiên bản mã này https://github.com/msu-sparta/OpenRAND
C3 Liên kết vĩnh viễn đến Capsule Có thể Tái tạo https://codeocean.com/capsule/0144704/tree
C4 Giấy phép Mã Pháp lý Giấy phép MIT.
C5 Hệ thống quản lý phiên bản mã được sử dụng Git
C6 Ngôn ngữ mã phần mềm, công cụ và dịch vụ được sử dụng C++17
C7 Yêu cầu biên dịch, môi trường hoạt động & phụ thuộc Một trình biên dịch có hỗ trợ C++17, tùy chọn CMake
C8 Nếu có sẵn Liên kết đến tài liệu/hướng dẫn phát triển https://msu-sparta.github.io/OpenRAND
C9 Email hỗ trợ cho câu hỏi khanmd@msu.edu

Bảng 1: Siêu dữ liệu mã

bit thanh ghi được phép cho mỗi luồng trong CUDA. Hơn nữa, sự vắng mặt của một số lệnh nhất định trong GPU, phổ biến trong hầu hết các CPU, dẫn đến đặc điểm hiệu suất CPU so với GPU riêng biệt cho nhiều bộ tạo [8], thúc đẩy nhu cầu về các chiến lược song song hóa chuyên biệt. Ví dụ, Mersenne Twister được điều chỉnh cho GPU, MTGP [9], yêu cầu một khối luồng chia sẻ một trạng thái duy nhất.

2. Động lực và ý nghĩa

Trong HPC, hiệu quả và khả năng tái tạo của việc tạo số ngẫu nhiên giả là tối quan trọng. Các thư viện như cuRAND và rocRAND xuất sắc trong việc tạo ra các chuỗi ngẫu nhiên giả có thể tái tạo trong môi trường song song nhưng gặp phải thách thức về tính di động, hạn chế khả năng thích ứng của chúng với các kiến trúc mới. Ngược lại, trong khi RandomCL [10] và clRNG [11] (mặc dù không còn được phát triển tích cực) thành công trong việc giải quyết tính di động phần cứng, chúng bị giới hạn trong khung phần mềm OpenCL. Hai thách thức phát sinh trên các nền tảng này: sự phức tạp của việc gieo hạt và yêu cầu quản lý trạng thái. Đối với việc gieo hạt, cả RandomCL và clRNG đều không cho phép hạt giống tùy ý; thay vào đó, chúng tạo ra hạt giống cho một số luồng được xác định trước bằng cách sử dụng một bộ tạo tuần tự dựa trên máy chủ, sau đó chuyển chúng đến bộ nhớ toàn cục của thiết bị. cuRAND và rocRAND cho phép hạt giống tùy ý để tạo ra các luồng ngẫu nhiên riêng biệt nhưng đòi hỏi các thủ tục khởi tạo trạng thái phức tạp. Hơn nữa, các nền tảng này buộc các nhà phát triển phải quản lý liên tục các trạng thái bộ nhớ trong suốt vòng đời của một phần tử xử lý hoặc luồng, thêm chi phí tính toán. Nhìn chung, trong khi các thư viện này cung cấp các công cụ mạnh mẽ, chúng đưa ra những thách thức đa diện, nhấn mạnh nhu cầu về các giải pháp toàn diện và được hợp lý hóa.

Các bộ tạo dựa trên bộ đếm (CBRNG) cung cấp một giải pháp thay thế đầy hứa hẹn cho các thách thức được đưa ra bởi các bộ tạo ngẫu nhiên giả truyền thống. Trong lịch sử, các bộ tạo này đã điều chỉnh các thuật toán mật mã cho các ứng dụng HPC, mặc dù với độ mạnh mật mã giảm [12], [13], [8]. Một tiến bộ then chốt trong lĩnh vực này là việc tích hợp khái niệm bộ đếm vào các bộ tạo này [12, 8], phản ánh chế độ bộ đếm được quan sát thấy trong các mật mã luồng. Sự đổi mới này cho phép một đặc tả duy nhất của một luồng trong một kernel cho một hạt giống nhất định. Do đó, mẫu thiết kế trước đây của một luồng cho mỗi phần tử xử lý đã phát triển thành một luồng cho mỗi phần tử xử lý cho mỗi kernel, tiện ích của điều này đã được chứng minh bởi HOOMD-blue [14]. Các CBRNG cũng ủng hộ thuộc tính avalanche, trong đó một sự thay đổi bit tối thiểu trong hạt giống hoặc bộ đếm tạo ra một luồng mới thống kê độc lập được thay đổi đáng kể. Thuộc tính này mang lại cho các nhà phát triển sự linh hoạt để sử dụng bất kỳ giá trị duy nhất nào cho hạt giống hoặc bộ đếm, thường khai thác các biến ứng dụng nội bộ cho các luồng song song. Bổ sung cho những lợi ích này, các bộ tạo này có các trạng thái đặc biệt nhỏ gọn; ví dụ, OpenRAND tự hào có trạng thái 96-bit, thoải mái vừa vặn trong số lượng tối đa các thanh ghi 32-bit được phép cho mỗi luồng trong CUDA.

Dựa trên nền tảng CBRNG này, Random123 là một thư viện then chốt trong lĩnh vực tạo số ngẫu nhiên dựa trên bộ đếm [8]. Nó đã có những bước tiến đáng kể bằng cách giới thiệu ba bộ tạo sáng tạo và đi đầu trong việc thực hiện kiểm tra thống kê toàn diện. Tuy nhiên, bất chấp những đóng góp của nó, Random123 thể hiện những nhược điểm đáng chú ý. Thư viện không kết hợp một số CBRNG hiện đại đã xuất hiện trong nghiên cứu gần đây [15, 16]. API của nó thiên về các triển khai cấp thấp hơn, để lộ các nhà phát triển với các chi tiết thuật toán làm cơ sở cho các bộ tạo của nó. Hơn nữa, sự phụ thuộc của nó vào các intrinsic để nâng cao hiệu suất làm tổn hại đến tính di động và làm tăng codebase. Khi nhu cầu của lĩnh vực này gia tăng, nhu cầu về một giải pháp tổng thể, được tinh chỉnh trở nên rõ ràng.

Để giải quyết nhu cầu này, chúng tôi đã phát triển thư viện OpenRAND, thư viện này kết hợp các bộ tạo dựa trên bộ đếm đa dạng với những điểm mạnh bổ sung dưới một API thống nhất, tập trung vào người dùng. Trước đây, các nhà phát triển gặp khó khăn theo hai cách: hoặc thông qua tăng chi phí phát triển từ API dư thừa và các lỗi dễ mắc phải hoặc thông qua việc thực thi các lệnh không cần thiết, dẫn đến suy giảm hiệu suất. Giải pháp được đề xuất của chúng tôi, OpenRAND khắc phục khoảng cách này bằng cách tập trung độc quyền vào một họ duy nhất của các bộ tạo dựa trên bộ đếm. Cách tiếp cận tập trung này tạo điều kiện thuận lợi cho việc phát triển mã song song có thể tái tạo, cho phép các nhà phát triển tránh được sự phức tạp của boilerplate API và tránh các hình phạt hiệu suất không cần thiết. Thư viện được đặc trưng bởi tính di động của nó; nó là một thư viện chỉ có header được kiểm tra nghiêm ngặt trên các thiết bị CPU và GPU khác nhau và tương thích với nhiều nền tảng phần mềm. Việc tích hợp được hợp lý hóa, cho phép kết hợp vào các dự án mới hoặc đã có sẵn một cách dễ dàng thông qua CMake hoặc bằng cách đơn giản sao chép và dán các tệp header cần thiết. Nó cũng tự hào có dấu chân nhẹ, với các tệp header cốt lõi của nó chỉ bao gồm 470 dòng mã nguồn tại thời điểm xuất bản.

OpenRAND đã trải qua kiểm tra thống kê mở rộng để đảm bảo độ tin cậy và mạnh mẽ của nó. Như chúng tôi sẽ chỉ ra, bất chấp sự nhấn mạnh của chúng tôi vào tính đơn giản và giao diện thân thiện với người dùng, OpenRAND nhanh như, và đôi khi vượt trội hơn, các thư viện CPU và GPU gốc.

3. Mô tả phần mềm

3.1. Thiết kế API

OpenRAND được cấu trúc xung quanh một tập hợp cốt lõi các bộ tạo số ngẫu nhiên dựa trên bộ đếm được bổ sung bởi một bộ các ví dụ, benchmark và kiểm tra. Tuân thủ giao diện động cơ ngẫu nhiên của C++17, các bộ tạo trong OpenRAND tương thích với các hàm thư viện tiêu chuẩn, bao gồm tạo ra các mẫu ngẫu nhiên trên các phân phối khác nhau. Mỗi bộ tạo được tạo ra thông qua một constructor yêu cầu hai đối số: một hạt giống 64-bit và một bộ đếm 32-bit¹. Khi kết hợp, hạt giống và bộ đếm tạo ra một luồng duy nhất với chu kỳ 2³². Hạt giống được dự định để xác định duy nhất mỗi luồng logic hoặc phần tử xử lý trong chương trình[5], trong khi bộ đếm sau đó có thể được sử dụng để tạo ra nhiều luồng cho mỗi hạt giống khi cần thiết. Trong các tình huống thực tế, một phần tử xử lý có thể là một hạt trong mô phỏng động lực học hạt hoặc một chỉ số pixel trong một ứng dụng ray tracing.

Hiện tại, OpenRAND hỗ trợ nhiều bộ tạo dựa trên bộ đếm, bao gồm Philox [8], Threefry [8], Squares [16], và Tyche [15]. Chúng cung cấp các luồng chất lượng cao với kích thước nhỏ gọn, xây dựng/phá hủy hiệu quả các đối tượng RNG, và chấp nhận hạt giống tùy ý. Sự kết hợp của các thuộc tính này có nghĩa là, khá đáng chú ý, nhiều ứng dụng ngẫu nhiên có thể tránh được nhu cầu về bất kỳ việc duy trì trạng thái ngẫu nhiên nào. Trong thuật ngữ thực tế và trái ngược với thư viện cuRAND của Nvidia, các nhà phát triển thường có thể bỏ qua những rắc rối và suy giảm hiệu suất liên quan đến việc lưu trữ trạng thái trong bộ nhớ toàn cục, khởi chạy một kernel riêng biệt trên GPU để khởi tạo các trạng thái, hoặc, trong trường hợp của cấu trúc dữ liệu mảng của các cấu trúc, chi phí của việc tải và lưu trạng thái bên trong mỗi kernel cho mỗi luồng. Một ví dụ minh họa về những lợi thế này được hiển thị trong Phần 4.

4. Ví dụ minh họa

Để chứng minh các lợi thế của OpenRAND, chúng tôi sử dụng macro-benchmark Brownian Dynamics từ [1], triển khai lại trong CUDA trên ba thư viện RNG. Hình 1 làm nổi bật OpenRAND, Hình 2 cuRAND, và Hình 3 Random123. Tính nhỏ gọn của API OpenRAND ngay lập tức rõ ràng, chỉ với hai dòng cho việc khởi tạo bộ tạo và tính toán số ngẫu nhiên—hơn 14 dòng ít hơn so với các thư viện cạnh tranh. Không giống như cuRAND, cả OpenRAND và Random123 đều sử dụng CBRNG, cho phép ID hạt duy nhất làm hạt giống, đảm bảo một luồng duy nhất cho mỗi hạt bất kể số lượng luồng. Thiết kế này tránh được việc duy trì trạng thái liên quan đến cuRAND, loại bỏ nhu cầu về phân bổ bộ nhớ, khởi tạo trạng thái, và các hoạt động bộ nhớ liên tục trong mỗi luồng kernel. Tuy nhiên, việc tạo số ngẫu nhiên với Random123 yêu cầu boilerplate quá mức cho khởi tạo và lấy mẫu ngẫu nhiên, gây gánh nặng cho các nhà phát triển với các yêu cầu mã hóa bổ sung, và khuếch đại rủi ro vô tình đưa ra lỗi. Dưới ánh sáng của những đánh giá này, OpenRAND nổi lên như một sự pha trộn mạnh mẽ của tính đơn giản, hiệu quả và khả năng thích ứng, nhấn mạnh tính khả thi của nó như một lựa chọn hàng đầu cho việc tạo số ngẫu nhiên trong các ứng dụng HPC.

¹Ngoại trừ một bộ tạo, Squares, hiện tại chấp nhận hạt giống 32-bit

1typedef openrand::Philox RNG;
2
3__global__ void apply_forces(Particle *particles,
4 int counter){
5 int i = blockIdx.x * blockDim.x + threadIdx.x;
6 if(i >= N)
7 return;
8
9 Particle p = particles[i];
10 // Áp dụng lực cản
11 p.vx -= GAMMA/mass * p.vx * dt;
12 p.vy -= GAMMA/mass * p.vy * dt;
13
14 // Áp dụng chuyển động ngẫu nhiên
15 RNG local_rand_state(p.pid, counter);
16 rnd::double2 r = local_rand_state.draw_double2();
17 p.vx += (r.x * 2.0 - 1.0) * sqrt_dt;
18 p.vy += (r.y * 2.0 - 1.0) * sqrt_dt;
19 particles[i] = p;
20}
21
22int main(){
23 // Khởi tạo hạt
24 init_particles<<<nblocks, nthreads>>>(particles,
25 /*counter*/ 0);
26
27 // Vòng lặp mô phỏng
28 int iter = 0;
29 while(iter++ < STEPS) {
30 apply_forces<<<nblocks, nthreads>>>(particles,
31 iter);
32 ...
33 }
34}

Hình 1: Ví dụ minh họa về API của OpenRAND

5. Kết quả Thực nghiệm

5.1. Benchmark Hiệu suất

Để đánh giá hiệu suất của OpenRAND, chúng tôi thiết kế hai kiểm tra benchmark tập trung vào các số liệu hiệu suất micro và macro trên các nền tảng CPU và GPU, tương ứng.

--- TRANG 4 ---
1typedef curandStatePhilox4_32_10_t RNG;
2
3__global__ void rand_init(RNG *rand_state) {
4 int i = threadIdx.x + blockIdx.x * blockDim.x;
5 if(i >= N)
6 return;
7 curand_init(1984, i, 0, &rand_state[i]);
8}
9
10
11template <typename RNG>
12__global__ void apply_forces(Particle *particles,
13 RNG* rand_state){
14 int i = blockIdx.x * blockDim.x + threadIdx.x;
15 if(i >= N)
16 return;
17
18 Particle p = particles[i];
19 // Áp dụng lực cản
20 p.vx -= GAMMA/mass * p.vx * dt;
21 p.vy -= GAMMA/mass * p.vy * dt;
22
23 // Áp dụng chuyển động ngẫu nhiên
24 RNG local_rand_state = rand_state[i];
25 double2 r = curand_uniform2_double(
26 &local_rand_state);
27 p.vx += (r.x * 2.0 - 1.0) * sqrt_dt;
28 p.vy += (r.y * 2.0 - 1.0) * sqrt_dt;
29 rand_state[i] = local_rand_state;
30 particles[i] = p;
31}
32
33int main(){
34 // Thiết lập bộ tạo số ngẫu nhiên
35 RNG* d_rand_states;
36 cudaMalloc((void**)&d_rand_states, N * sizeof(RNG));
37
38 // Khởi tạo bộ tạo số ngẫu nhiên
39 rand_init<<<nblocks, nthreads>>>(d_rand_states);
40
41 // Khởi tạo hạt
42 init_particles<<<nblocks, nthreads>>>(particles,
43 d_rand_states);
44
45 // Vòng lặp mô phỏng
46 int iter = 0;
47 while(iter++ < STEPS) {
48 apply_forces<<<nblocks, nthreads>>>(particles,
49 d_rand_states);
50 ...
51 }
52}

Hình 2: Ví dụ minh họa về API của cuRAND

Đối với micro-benchmark của chúng tôi, chúng tôi triển khai một chương trình đơn luồng được thiết kế riêng cho hiệu suất CPU và kiểm tra nó trên Intel(R) Xeon(R) Platinum 8260. Benchmark này đo tốc độ tạo số ngẫu nhiên thô cho các luồng có kích thước khác nhau trên tất cả các bộ tạo. Chúng tôi sử dụng Google benchmark cho đánh giá này, đặt các tiêu chuẩn hiệu suất của chúng tôi so với động cơ ngẫu nhiên mặc định được công nhận rộng rãi của GNU libstdc++, mt19937 [7], do tính phổ biến của nó trong nhiều ứng dụng. Như dữ liệu trong Hình 4a cho thấy, các bộ tạo của OpenRAND liên tục vượt trội hơn mt19937 đối với các luồng nhỏ hơn, một lĩnh vực thường gặp trong các chương trình song song. Trong khi sự khác biệt mạnh mẽ này về hiệu suất đối với các luồng nhỏ có thể được quy cho thủ tục khởi tạo phức tạp của mt19937, lợi thế hiệu suất của Open-

1typedef r123::Philox4x32 RNG;
2
3__global__ void apply_forces(Particle *particles,
4 int counter){
5 int i = blockIdx.x * blockDim.x + threadIdx.x;
6 if(i >= N)
7 return;
8
9 Particle p = particles[i];
10 // Áp dụng lực cản
11 p.vx -= GAMMA/mass * p.vx * dt;
12 p.vy -= GAMMA/mass * p.vy * dt;
13
14 // Áp dụng chuyển động ngẫu nhiên
15 RNG rng;
16 RNG::ctr_type c = {{}};
17 RNG::ukey_type uk = {{}};
18 uk[0] = p.pid;
19 RNG::key_type k = uk;
20
21 c[0] = counter;
22 c[1] = 0;
23 RNG::ctr_type r = rng(c, k);
24
25 uint64_t xu = (static_cast<uint64_t>(r[0]) << 32)
26 | static_cast<uint64_t>(r[1]);
27 uint64_t yu = (static_cast<uint64_t>(r[2]) << 32)
28 | static_cast<uint64_t>(r[3]);
29 auto x = r123::u01<double,uint64_t>(xu);
30 auto y = r123::u01<double,uint64_t>(yu);
31
32 p.vx += (x * 2.0 - 1.0) * sqrt_dt;
33 p.vy += (y * 2.0 - 1.0) * sqrt_dt;
34 particles[i] = p;
35}
36
37int main(){
38 // Khởi tạo hạt
39 init_particles<<<nblocks, nthreads>>>(particles,
40 /* counter*/ 0);
41
42 // Vòng lặp mô phỏng
43 int iter = 0;
44 while(iter++ < STEPS) {
45 apply_forces<<<nblocks, nthreads>>>(particles,
46 iter);
47 ...
48 }
49}

Hình 3: Ví dụ minh họa về API của Random123

RAND so với mt19937 được duy trì ngay cả trong các luồng dài hơn cho cả hai bộ tạo Tyche [15] và Squares [16].

Chuyển sang hiệu suất GPU, chúng tôi sử dụng macro-benchmark đã thảo luận trước đây, một mô phỏng động lực học Brownian 2D trong CUDA. Mô phỏng này bao gồm một triệu hạt độc lập khuếch tán theo bước đi ngẫu nhiên Brownian. Các hạt được theo dõi trong hơn 10.000 bước, với các hạt bị ảnh hưởng bởi cả lực cản tỷ lệ với vận tốc và chuyển động ngẫu nhiên đồng nhất. Để duy trì tính nhất quán, việc tạo số ngẫu nhiên giả cho tất cả các thư viện đều sử dụng các bộ tạo Philox tương ứng của chúng (Để biết chi tiết, tham khảo mã²). Benchmark này được thực hiện trên hai GPU Nvidia: Tesla V100 PCIe với 14.13 TFLOPS lý thuyết và băng thông 900GB/s và A100

²https://github.com/Shihab-Shahriar/brownian-dynamics

--- TRANG 5 ---
SXM với 19.5 TFLOPS và băng thông 2039GB/s.

10 100 1K 10K
Kích thước luồng 10² 10³ 10⁴ 10⁵ Thời gian (nanosecond)
Thấp hơn là Tốt hơn std::mt19937
r123::philox
Tyche
Squares
Phillox
Threefry

(a) Thời gian các bộ tạo OpenRAND mất so với baseline (std::mt19937 và r123::philox)
để tạo ra độ dài luồng được chỉ định trên máy chủ.

V100 A100
GPU 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 Thời gian (giây)
Thấp hơn là Tốt hơn 4.23
3.20
2.46
1.81 2.48
1.78 Curand
Random123
OpenRAND

(b) Thời gian wall cho các thư viện khác nhau thực hiện benchmark Brownian Dynamics trên
các GPU khác nhau, sử dụng bộ tạo Philox [8] trong mỗi thư viện.

Hình 4: Hiệu suất của OpenRAND trên máy chủ và thiết bị tương ứng.

Như thấy trong Hình 4b, OpenRAND vượt trội hơn cuRAND 1.8x, trong khi tiết kiệm ~64 MB bộ nhớ GPU cho mỗi triệu hạt, và hoạt động ngang bằng với Random123. Cho tính chất đơn giản của các kernel được sử dụng trong chương trình, nơi việc tạo số ngẫu nhiên chiếm ưu thế về chi phí tính toán, biên độ hiệu suất như vậy giữa OpenRAND và cuRAND là không được dự đoán trước. Tất nhiên, chúng tôi không mong đợi biên độ cải thiện này sẽ giữ được đối với các kernel thế giới thực nơi chi phí tính toán của việc tạo số ngẫu nhiên ít nổi bật hơn. Tuy nhiên, so sánh này giữa cuRAND, một thư viện gốc được tối ưu hóa đặc biệt cho các nền tảng này, và Random123, một thư viện đã sử dụng các lệnh intrinsic để đạt được nâng cao hiệu suất, mang lại sự tin tưởng rằng mã độc lập nền tảng và API đơn giản của OpenRAND không làm tổn hại đến hiệu suất của nó.

5.2. Đánh giá Thống kê

Để đảm bảo chất lượng của việc tạo số ngẫu nhiên, OpenRAND độc quyền kết hợp các bộ tạo với các xác thực thực nghiệm nghiêm ngặt và sử dụng lâu dài. Ngay cả với nền tảng này, việc duy trì tính toàn vẹn thống kê đòi hỏi việc triển khai cẩn thận, vì các lỗi tinh vi có thể làm tổn hại tính ngẫu nhiên. Như vậy, chúng tôi thực hiện đảm bảo chất lượng nghiêm ngặt: mỗi bộ tạo trong OpenRAND đều được chịu kiểm tra thống kê bằng cách sử dụng các khung công tác phổ biến TestU01 [17] và PractRand [18]. Các công cụ này cung cấp một bộ các kiểm tra thống kê bổ sung được thiết kế để xác định bất kỳ mẫu hoặc bất thường cơ bản nào trong các luồng dữ liệu ngẫu nhiên. Một ví dụ về các kiểm tra này là kiểm tra Birthday Spacing từ TestU01 [17], nó tương phản kết quả thực nghiệm với các giải pháp phân tích đã biết để phát hiện các khác biệt tiềm năng.

Chúng tôi bắt đầu quá trình kiểm tra bằng cách đánh giá các luồng dữ liệu riêng lẻ, thăm dò chúng đến giới hạn lý thuyết của 2³² số nguyên bằng cách sử dụng PractRand trên một phạm vi toàn diện các khóa và bộ đếm. Trong khi TestU01 và PractRand được thiết kế cho các đánh giá luồng đơn, chúng tôi nhận ra tầm quan trọng của việc mở rộng các kiểm tra này để bao gồm các luồng song song, phản ánh việc sử dụng của chúng trong các tính toán song song thế giới thực. Để thực hiện các kiểm tra luồng song song của chúng tôi, chúng tôi làm theo thủ tục được nêu trong [14]—chúng tôi mô phỏng một tình huống với 16.000 hạt, tạo ra các luồng nhỏ bao gồm ba số ngẫu nhiên cho mỗi hạt. Các luồng nhỏ riêng lẻ này cho mỗi hạt đầu tiên được kết hợp thành một luồng nối tiếp duy nhất. Luồng thống nhất này sau đó được kéo dài qua các lần lặp liên tiếp để kiểm tra tương quan trên toàn bộ hệ thống.

Tất cả các bộ tạo đã được kiểm tra thành công cho ít nhất 1TB dữ liệu bằng cách sử dụng PractRand và bộ kiểm tra BigCrush toàn diện của TestU01. Đáng để mở rộng về kết quả BigCrush. Trong các thử nghiệm lặp lại với nhiều hạt giống toàn cục, một số đầu ra nhất định (một hoặc hai trong số 10⁶ kiểm tra) thỉnh thoảng xuất hiện như đáng ngờ. Tuy nhiên, điều này không duy nhất đối với OpenRAND; các tác giả của cuRAND³ đã lưu ý những thất bại tương tự. Để có một phân tích kỹ lưỡng về kết quả thống kê của chúng tôi, chúng tôi hướng độc giả đến tài liệu của chúng tôi⁴. Theo hiểu biết tốt nhất của chúng tôi, đây là lần đầu tiên các bộ tạo Tyche [15] và Squares [16] đã trải qua kiểm tra tương quan cho các luồng song song.

6. Tác động

Việc tạo số ngẫu nhiên đóng vai trò cơ bản trong hiệu quả và độ tin cậy của các hệ thống phần mềm lớn hơn trên các lĩnh vực như mô phỏng ngẫu nhiên, học máy và đồ họa máy tính. Lý tưởng nhất, sẽ tồn tại một giải pháp có sẵn tốt có thể được sử dụng trong nhiều bối cảnh khác nhau, bao gồm các ứng dụng đa luồng/đa quá trình, mà không đưa ra mã boilerplate quá mức, sự phức tạp không cần thiết, hoặc hạn chế về kiến trúc áp dụng. Tuy nhiên, bối cảnh phần mềm hiện tại đầy rẫy thách thức. Một số tùy chọn tốt để lộ các chi tiết thuật toán và triển khai cấp thấp (ví dụ: Random123, cuRAND), dẫn đến tăng sự phức tạp; những thứ khác vốn bị ràng buộc với phần cứng cụ thể (như cuRAND) hoặc nền tảng phần mềm (như rocRAND, OneAPI MKL). Một số lựa chọn thay thế từng phổ biến, độc lập nền tảng hiện là phần mềm bị bỏ rơi (clRNG, RandomCL), và ngay cả các tùy chọn phổ quát, như thư viện Tiêu chuẩn C++, chứng minh không phù hợp cho các chương trình GPGPU. Bối cảnh này đã dẫn nhiều nền tảng mã nguồn mở uy tín đến hoặc là lớp trên một thư viện cấp thấp, như việc sử dụng Random123 của HOOMD-Blue, hoặc viết các bộ tạo ngẫu nhiên tùy chỉnh—như thấy trong Tensorflow, Pytorch, VTK, Jax, Alpaka, Kokkos, và những thứ khác—đôi khi không có lợi ích của xác thực thống kê kỹ lưỡng.

³https://docs.nvidia.com/cuda/curand/testing.html
⁴https://msu-sparta.github.io/OpenRAND/md_statistical_results.h

--- TRANG 6 ---
OpenRAND nhằm mục đích trở thành giải pháp có sẵn đó. Ưu tiên tốc độ, khả năng tái tạo, tính song song và tính di động, nó cung cấp những tính năng này thông qua một API dễ tiếp cận và được hợp lý hóa. Đối với những người tìm kiếm sự dễ dàng tích hợp, nó có thể được thêm vào các dự án một cách liền mạch thông qua CMake hoặc bằng cách sao chép các tệp header cần thiết. Trong các benchmark của chúng tôi, OpenRAND vượt trội hơn cuRAND với hệ số 1.8 và hoạt động ngang bằng với Random123. Bất chấp hiệu suất cạnh tranh này, OpenRAND phân biệt chính nó bằng cách cung cấp một API sạch hơn, trực quan hơn, một codebase nhẹ, và sự vắng mặt của mã cụ thể máy. Được xác thực trên các nền tảng CPU và GPU (với các đánh giá trong C++ tiêu chuẩn, CUDA, HIP, và Kokkos), OpenRAND được định vị duy nhất để nâng cao các dự án khác nhau bằng cách đơn giản hóa phát triển, tăng hiệu suất, và tăng cường tính di động trong khi đảm bảo tính hợp lệ thống kê và khả năng tái tạo cho các luồng đơn và song song. Cam kết về chất lượng này được thể hiện rõ trong thiết kế của nó—với các kiểm tra chất lượng thống kê toàn diện được kết hợp trong pipeline tích hợp liên tục của nó—đảm bảo một tiêu chuẩn nhất quán khi OpenRAND phát triển trong cộng đồng mã nguồn mở.

7. Kết luận

Tóm lại, trong khi lĩnh vực tạo số ngẫu nhiên trình bày nhiều tùy chọn phần mềm đầy rẫy thách thức—từ việc để lộ các chi tiết thuật toán phức tạp đến bị ràng buộc chặt chẽ với các kiến trúc cụ thể—OpenRAND nổi lên như một giải pháp có sẵn. Tập trung của nó vào một họ duy nhất của các bộ tạo dựa trên bộ đếm đơn giản hóa việc phát triển mã song song có thể tái tạo, tránh các phức tạp và dư thừa gặp phải với các thư viện khác. Bằng cách tránh được các cạm bẫy của các API boilerplate, hạn chế phần cứng, và các lựa chọn thay thế bị bỏ rơi, OpenRAND trình bày một giải pháp hiệu quả, được hợp lý hóa, và độc lập nền tảng tích hợp liền mạch vào các dự án, giảm các phức tạp không cần thiết, chi phí và hạn chế phần cứng. OpenRAND tăng tốc quá trình phát triển trong khi duy trì sự mạnh mẽ thống kê và khả năng tái tạo. Cho các tính năng và benchmark hiệu suất của nó, OpenRAND có tiềm năng hỗ trợ đáng kể các nhà phát triển trong các lĩnh vực khoa học khác nhau, đảm bảo rằng việc tạo số ngẫu nhiên vẫn đáng tin cậy và hiệu quả.

Tuyên bố Lợi ích Cạnh tranh

Các tác giả tuyên bố rằng họ không có lợi ích tài chính cạnh tranh đã biết hoặc mối quan hệ cá nhân có thể đã ảnh hưởng đến công việc được báo cáo trong bài báo này.

Lời cảm ơn

Tài liệu này dựa trên công việc được hỗ trợ bởi Văn phòng Cơ sở hạ tầng Cyber tiên tiến của Quỹ Khoa học Quốc gia dưới Grant 2007181 và sử dụng các tài nguyên được cung cấp bởi Trung tâm Tính toán Hiệu suất Cao của Đại học Bang Michigan.

Tuyên bố về AI tạo sinh và công nghệ hỗ trợ AI trong quá trình viết

Trong quá trình chuẩn bị công việc này, các tác giả chỉ sử dụng ChatGPT để cải thiện ngôn ngữ và khả năng đọc. Các tác giả đã xem xét và chỉnh sửa nội dung cuối cùng và chịu trách nhiệm đầy đủ cho nội dung của ấn phẩm.

Tài liệu tham khảo

[1] C. L. Phillips, J. A. Anderson, S. C. Glotzer, Tạo số ngẫu nhiên giả cho các mô phỏng động lực học Brownian và động lực học hạt tiêu tán trên các thiết bị gpu, Journal of Computational Physics 230 (19) (2011) 7191–7201.

[2] S. Dura-Bernal, B. A. Suter, P. Gleeson, M. Cantarelli, A. Quintana, F. Rodriguez, D. J. Kedziora, G. L. Chadderdon, C. C. Kerr, S. A. Neymotin, et al., Netpyne, một công cụ cho mô hình đa quy mô dựa trên dữ liệu của các mạch não, Elife 8 (2019) e44494.

[3] P. L'Ecuyer, O. Nadeau-Chamard, Y.-F. Chen, J. Lebar, Nhiều luồng với các bộ tạo số ngẫu nhiên dựa trên tái phát, dựa trên bộ đếm, và có thể chia tách, trong: Hội nghị Mô phỏng Mùa đông 2021 (WSC), 2021, tr. 1–16. doi:10.1109/WSC52266.2021.9715397.

[4] A. De Matteis, S. Pagnutti, Song song hóa các bộ tạo số ngẫu nhiên và tương quan tầm xa, Numerische Mathematik 53 (1988) 595–608.

[5] P. L'Ecuyer, D. Munger, B. Oreshkin, R. Simard, Số ngẫu nhiên cho máy tính song song: Yêu cầu và phương pháp, với nhấn mạnh trên gpu, Mathematics and Computers in Simulation 135 (2017) 3–17.

[6] M. E. O'neill, Pcg: Một họ các thuật toán đơn giản nhanh tiết kiệm không gian thống kê tốt cho việc tạo số ngẫu nhiên, ACM Transactions on Mathematical Software (2014).

[7] M. Matsumoto, T. Nishimura, Mersenne twister: một bộ tạo số ngẫu nhiên giả đồng nhất được phân phối 623 chiều, ACM Transactions on Modeling and Computer Simulation (TOMACS) 8 (1) (1998) 3–30.

[8] J. K. Salmon, M. A. Moraes, R. O. Dror, D. E. Shaw, Số ngẫu nhiên song song: dễ như 1, 2, 3, trong: Proceedings of 2011 international conference for high performance computing, networking, storage and analysis, 2011, tr. 1–12.

[9] M. Saito, M. Matsumoto, Các biến thể của mersenne twister phù hợp cho bộ xử lý đồ họa, ACM Transactions on Mathematical Software (TOMS) 39 (2) (2013) 1–20.

[10] T. Ciglarič, R. Češnovar, E. Štrumbelj, Một thư viện opencl cho các bộ tạo số ngẫu nhiên song song, The Journal of Supercomputing 75 (2019) 3866–3881.

[11] P. L'Ecuyer, D. Munger, N. Kemerchou, clrng: Một api số ngẫu nhiên với nhiều luồng cho opencl, báo cáo, http://www.iro.umontreal.ca/lecuyer/myftp/papers/clrng-api.pdf (2015).

[12] D. J. Bernstein, et al., Chacha, một biến thể của salsa20, trong: Workshop record of SASC, Tập. 8, Citeseer, 2008, tr. 3–5.

[13] F. Zafar, M. Olano, A. Curtis, Số ngẫu nhiên gpu thông qua thuật toán mã hóa nhỏ, trong: Proceedings of the Conference on High Performance Graphics, 2010, tr. 133–141.

[14] J. A. Anderson, J. Glaser, S. C. Glotzer, Hoomd-blue: Một gói python cho động lực học phân tử hiệu suất cao và các mô phỏng monte carlo hạt cứng, Computational Materials Science 173 (2020) 109363.

[15] S. Neves, F. Araujo, Các bộ tạo số ngẫu nhiên giả phi tuyến nhanh và nhỏ cho mô phỏng máy tính, trong: Parallel Processing and Applied Mathematics: 9th International Conference, PPAM 2011, Torun, Poland, September 11-14, 2011. Revised Selected Papers, Part I 9, Springer, 2012, tr. 92–101.

[16] B. Widynski, Squares: một rng dựa trên bộ đếm nhanh, arXiv preprint arXiv:2004.06278 (2020).

[17] P. L'ecuyer, R. Simard, Testu01: Thư viện Ac cho kiểm tra thực nghiệm các bộ tạo số ngẫu nhiên, ACM Transactions on Mathematical Software (TOMS) 33 (4) (2007) 1–40.

[18] C. Doty-Humphrey, Practically random: Thư viện C++ của các kiểm tra thống kê cho rng, URL: https://sourceforge.net/projects/pracrand (2010).
