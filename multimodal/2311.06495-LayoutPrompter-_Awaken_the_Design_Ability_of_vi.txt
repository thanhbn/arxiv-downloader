# 2311.06495.pdf
# Được chuyển đổi từ PDF sang TXT
# Đường dẫn nguồn: /home/admin88/arxiv-downloader/multimodal/2311.06495.pdf
# Kích thước tệp: 8924599 bytes

===============================================
NỘI DUNG TỆP PDF
===============================================


--- TRANG 1 ---
LayoutPrompter: Đánh thức Khả năng Thiết kế của
Mô hình Ngôn ngữ Lớn
Jiawei Lin∗
Đại học Jiaotong Tây An
kylelin@stu.xjtu.edu.cnJiaqi Guo
Microsoft
jiaqiguo@microsoft.comShizhao Sun
Microsoft
shizsu@microsoft.com
Zijiang James Yang
Đại học Jiaotong Tây An
zijiang@xjtu.edu.cnJian-Guang Lou
Microsoft
jlou@microsoft.comDongmei Zhang
Microsoft
dongmeiz@microsoft.com
Tóm tắt
Tạo layout đồ họa có điều kiện, tự động ánh xạ các ràng buộc của người dùng
thành các layout chất lượng cao, đã thu hút sự chú ý rộng rãi ngày nay. Mặc dù
các công trình gần đây đã đạt được hiệu suất đầy hứa hẹn, việc thiếu tính linh
hoạt và hiệu quả dữ liệu cản trở các ứng dụng thực tế của chúng. Trong công
trình này, chúng tôi đề xuất LayoutPrompter, sử dụng các mô hình ngôn ngữ lớn
(LLMs) để giải quyết các vấn đề trên thông qua học trong ngữ cảnh. LayoutPrompter
được tạo thành từ ba thành phần chính, cụ thể là tuần tự hóa đầu vào-đầu ra,
lựa chọn mẫu động và xếp hạng layout. Đặc biệt, thành phần tuần tự hóa đầu
vào-đầu ra thiết kế tỉ mỉ các định dạng đầu vào và đầu ra cho mỗi nhiệm vụ tạo
layout. Lựa chọn mẫu động chịu trách nhiệm lựa chọn các mẫu kích thích hữu
ích nhất cho một đầu vào nhất định. Và một bộ xếp hạng layout được sử dụng để
chọn layout chất lượng cao nhất từ nhiều đầu ra của LLMs. Chúng tôi tiến hành
thí nghiệm trên tất cả các nhiệm vụ tạo layout hiện có bằng cách sử dụng bốn
bộ dữ liệu công khai. Bất chấp sự đơn giản của phương pháp, kết quả thí nghiệm
cho thấy LayoutPrompter có thể cạnh tranh hoặc thậm chí vượt trội hơn các
phương pháp tiên tiến nhất trong các nhiệm vụ này mà không cần bất kỳ huấn
luyện hoặc tinh chỉnh mô hình nào. Điều này chứng minh hiệu quả của phương
pháp linh hoạt và không cần huấn luyện này. Ngoài ra, các nghiên cứu loại bỏ
cho thấy LayoutPrompter vượt trội đáng kể so với đường cơ sở dựa trên huấn
luyện trong chế độ dữ liệu thấp, tiếp tục chỉ ra hiệu quả dữ liệu của LayoutPrompter.
Dự án của chúng tôi có sẵn tại đây.
1 Giới thiệu
Layout, bao gồm một tập hợp các yếu tố đồ họa được sắp xếp hợp lý, đóng vai trò quan trọng trong
thiết kế đồ họa. Để giảm bớt khối lượng công việc của các nhà thiết kế và cho phép người dùng không
chuyên tham gia vào quá trình thiết kế, nhiều nghiên cứu đã đi sâu vào tạo layout tự động cho các
nhu cầu đa dạng của người dùng [7, 15, 18, 19, 21, 22, 39] (tức là các ràng buộc layout). Dựa trên
các ràng buộc layout đầu vào, các nhiệm vụ tạo layout có điều kiện hiện có có thể được phân loại
thành các nhóm sau: tạo layout ràng buộc tường minh (ví dụ: tạo layout có điều kiện trên các loại
yếu tố), tạo layout nhận thức nội dung, và text-to-layout (xem phía bên trái của Hình 1 để biết ví dụ
về ràng buộc). Các công trình sớm trong lĩnh vực này [7, 19, 21, 22] chủ yếu tập trung vào các nhiệm
vụ cá nhân và phát triển các kiến trúc mô hình cụ thể cho từng nhiệm vụ và các phương pháp tối ưu
hóa. Gần đây hơn, các phương pháp tổng quát cho nhiệm vụ [15, 12, 14] đã xuất hiện. So với các
phương pháp cụ thể cho nhiệm vụ, chúng đạt được tính linh hoạt và khả năng kiểm soát lớn hơn
trên nhiều nhiệm vụ hơn, trong khi vẫn duy trì chất lượng của các layout được tạo ra.
∗Công việc được thực hiện trong thời gian thực tập tại Microsoft Research Asia.
Hội nghị lần thứ 37 về Hệ thống Xử lý Thông tin Thần kinh (NeurIPS 2023).arXiv:2311.06495v1 [cs.CV] 11 Nov 2023

--- TRANG 2 ---
Tạo Layout Ràng buộc Tường minh
(a) Layout Tài liệu (b) Layout Poster
(c) Layout Android (d) Layout Web
Tạo Layout Nhận thức Nội dung
Một trang giới thiệu tin tức mới nhất 
từ blog ForTheDoers. Trang này 
nên có tiêu đề và 3 nhóm để hiển thị 
3 bài viết khác nhau. Mỗi nhóm nên 
có một hình ảnh, một số hộp văn bản 
để hiển thị thời gian và tiêu đề của 
bài viết, và một nút để nhấp vào 
để kiểm tra bài viết.Text-to-LayoutLayoutPrompter
Lựa chọn Mẫu 
ĐộngTuần tự hóa 
Đầu vào-Đầu raLLM
Tạo Có điều kiện trên Loại toolbaricon
Tạo Có điều kiện trên Loại và Kích thước toolbar (90,12) Tạo Có điều kiện trên Mối quan hệ
toolbaricontoolbar top canvasicon small toolbarHoàn thành Layout toolbar (0,5,90,12)
Tinh chỉnh Layout
toolbar (1,4,88,10) icon (0,6,14,11)Tạo Có điều kiện trên 
Loại
toolbariconTạo Có điều kiện trên 
Loại và Kích thước
toolbar (90,12)icon (12,12)
Tạo Có điều kiện trên Mối quan hệ
toolbaricontoolbar top canvasicon small toolbar
Hoàn thành Layout
toolbar (0,5,90,12)Tinh chỉnh Layout
toolbar (1,4,88,10) icon (0,6,14,11)Bộ Xếp hạng LayoutHình 1: LayoutPrompter là phương pháp linh hoạt để tạo layout đồ họa, có khả năng giải quyết
các nhiệm vụ tạo layout có điều kiện khác nhau (như được minh họa ở phía bên trái) trên nhiều
lĩnh vực layout khác nhau (như được minh họa ở phía bên phải) mà không cần bất kỳ huấn luyện
hoặc tinh chỉnh mô hình nào.
Mặc dù các phương pháp tiên tiến nhất [15, 12, 14, 9, 24] đã đạt được kết quả đầy hứa hẹn, chúng
vẫn gặp phải một số hạn chế cản trở việc ứng dụng trong các tình huống thực tế. Đầu tiên, các
phương pháp trước đây gặp khó khăn trong việc đồng thời đối phó với tất cả các nhiệm vụ tạo layout
được mô tả trong Hình 1. Chúng thường được điều chỉnh cho các nhiệm vụ cụ thể và không thể
được áp dụng cho những nhiệm vụ khác. Ví dụ, mô hình dựa trên khuếch tán tiên tiến nhất LayoutDM
[14] đề xuất tiêm các ràng buộc layout tường minh thông qua che mặt nạ hoặc điều chỉnh logit trong
quá trình suy luận, nhưng nó thất bại khi làm như vậy cho các ràng buộc ngầm định hoặc mơ hồ,
ví dụ: các ràng buộc được biểu đạt bằng ngôn ngữ tự nhiên (tức là text-to-layout). Do đó, các mô
hình riêng biệt cần được triển khai cho các nhiệm vụ khác nhau, dẫn đến sự bất tiện. Điều này thúc
đẩy chúng tôi khám phá một phương pháp linh hoạt hơn để tạo layout. Thứ hai, các phương pháp
hiện có cũng không hiệu quả về mặt dữ liệu. Chúng thường cần một lượng lớn dữ liệu cặp ràng
buộc-layout để huấn luyện mô hình. Ví dụ, LayoutFormer++ [15] dựa vào bộ dữ liệu publaynet [40]
với kích thước 300K để huấn luyện tạo ra các layout tài liệu đẹp mắt. Tuy nhiên, việc thu thập các
bộ dữ liệu lớn như vậy cho một số lĩnh vực layout có tài nguyên thấp (ví dụ: layout poster) là cực
kỳ tốn kém. Bên cạnh đó, ngay cả khi có sẵn bộ dữ liệu như vậy, việc huấn luyện cũng tốn thời
gian và chi phí. Do đó, có nhu cầu cấp thiết phát triển một phương pháp tạo layout hiệu quả về
mặt dữ liệu.
Trong công trình này, chúng tôi xem xét việc tận dụng các mô hình ngôn ngữ lớn (LLMs) được đào
tạo trước mạnh mẽ để giải quyết các vấn đề trên. Trực giác đằng sau như sau. Đầu tiên, nghiên cứu
gần đây đã cho thấy tính linh hoạt của LLMs trong các nhiệm vụ khác nhau [28, 13, 1, 38]. Bằng
cách thiết kế cẩn thận các định dạng đầu vào-đầu ra, các nhiệm vụ này có thể được chuyển đổi thành
các bài toán tạo chuỗi-thành-chuỗi và được giải quyết hiệu quả bởi LLMs. Xu hướng mới nổi này
truyền cảm hứng cho chúng tôi sử dụng LLMs để giải quyết tất cả các nhiệm vụ tạo layout có điều
kiện theo cách thống nhất. Thứ hai, vì kho dữ liệu huấn luyện chứa mã nguồn layout [28, 4] (ví dụ:
mã HTML và mã XML), LLMs đã có được một số kiến thức liên quan đến layout trong quá trình
đào tạo trước. Ví dụ, chúng có thể vốn sở hữu khả năng căn chỉnh các yếu tố đồ họa và tránh sự
chồng chéo không cần thiết giữa chúng, điều này có lợi cho việc tạo ra các layout chất lượng cao
và hấp dẫn về mặt thị giác. Do đó, một phương pháp dựa trên LLMs hứa hẹn nâng cao hiệu quả
dữ liệu so với các mô hình hiện có được huấn luyện từ đầu. Thứ ba, một lợi thế bổ sung của LLMs
nằm ở hiệu suất học trong ngữ cảnh đáng chú ý của chúng [3, 28, 36, 35, 13]. Điều này có nghĩa
là thay vì tinh chỉnh LLMs riêng lẻ cho mỗi nhiệm vụ tạo layout, chúng ta có thể đơn giản nhắc
chúng thực hiện nhiệm vụ mong muốn với một vài minh chứng đầu vào-đầu ra. Đặc điểm này tiếp
tục cho phép LLMs tạo layout theo cách không cần huấn luyện mà không cần bất kỳ cập nhật tham
số nào.
Để kết thúc, chúng tôi đề xuất LayoutPrompter (xem Hình 1). Nó hình thành tất cả các nhiệm vụ
tạo layout có điều kiện thành các bài toán chuyển đổi chuỗi-thành-chuỗi và tận dụng LLMs để giải
quyết chúng thông qua học trong ngữ cảnh. Để giải phóng toàn bộ tiềm năng của LLMs cho việc
tạo layout, hai vấn đề chính cần được giải quyết. Đầu tiên, làm thế nào để đánh thức kiến thức liên
quan đến layout trong LLMs để đạt được hiệu suất tốt? Thứ hai, làm thế nào để tạo điều kiện cho
LLMs hiểu được các ràng buộc người dùng đa dạng và đặc điểm layout trong các lĩnh vực khác
nhau? LayoutPrompter giải quyết hai vấn đề này với mô-đun tuần tự hóa đầu vào-đầu ra và mô-đun
lựa chọn mẫu động, tương ứng. I. Tuần tự hóa Đầu vào-Đầu ra. Vì các LLMs phổ biến chỉ có thể
đọc các chuỗi token, mô-đun này chịu trách nhiệm biểu diễn các ràng buộc người dùng và layout
thành các chuỗi để LLMs có thể khai thác đầy đủ kiến thức liên quan của chúng.
2

--- TRANG 3 ---
Phương pháp Linh hoạt Hiệu quả Dữ liệu Không cần Huấn luyện
LayoutTransformer [7], BLT [19], và khác [9, 24, 16, 30] ✘ ✘ ✘
LayoutFormer++ [15], LayoutDM [14], LGDM [12] một phần ✘ ✘
LayoutPrompter (của chúng tôi) ✔ ✔ ✔
Bảng 1: So sánh giữa các phương pháp tạo layout có điều kiện hiện có và LayoutPrompter.
kiến thức liên quan. Để biểu diễn các ràng buộc layout đầu vào thành chuỗi, chúng tôi mượn kinh
nghiệm thành công của LayoutFormer++ [15], nơi họ trình bày hai nguyên tắc đơn giản nhưng hiệu
quả (tức là biểu diễn ràng buộc và kết hợp ràng buộc) để tuần tự hóa các ràng buộc. Chúng tôi
tìm thấy thông qua thí nghiệm rằng sơ đồ tuần tự hóa này cũng hiệu quả đối với LLMs. Để biểu
diễn layout thành chuỗi, nguyên tắc của chúng tôi là chuyển đổi chúng thành một định dạng giống
với những gì LLMs đã gặp phải trong quá trình đào tạo trước, từ đó tận dụng kiến thức liên quan
đến layout hiện có trong LLMs. Cụ thể, chúng tôi tuần tự hóa layout thành mã nguồn tương ứng
(ví dụ: HTML) để có được chuỗi đầu ra. II. Lựa chọn Mẫu Động. Mô-đun này được sử dụng để
lựa chọn các mẫu kích thích có các ràng buộc layout tương tự với các mẫu thử nghiệm. Trái ngược
với các mẫu ngẫu nhiên, các mẫu động đảm bảo rằng LLMs nhận được ngữ cảnh có liên quan nhất,
vì vậy chúng có thể hiểu rõ hơn các ràng buộc mong muốn và tạo ra các layout hợp lý tương ứng.
Để hỗ trợ kỹ thuật này, chúng tôi phát triển một bộ đánh giá để đo lường độ tương tự ràng buộc
giữa một mẫu thử nghiệm nhất định và tất cả các mẫu ứng viên từ tập huấn luyện. Sau đó, chúng
tôi chọn những mẫu có điểm tương tự cao nhất làm mẫu kích thích. Ngoài ra, chúng tôi giới thiệu
một bộ xếp hạng layout để cải thiện hơn nữa hiệu suất của LayoutPrompter. Xét rằng LLMs có thể
tạo ra các đầu ra khác nhau thông qua lấy mẫu, chúng tôi tạo ra nhiều layout với cùng ràng buộc
đầu vào, và sử dụng bộ xếp hạng để chọn layout chất lượng cao nhất làm đầu ra cuối cùng.
Chúng tôi tiến hành thí nghiệm mở rộng trên các nhiệm vụ và lĩnh vực layout khác nhau để đánh giá
LayoutPrompter. Kết quả thí nghiệm cho thấy LayoutPrompter có thể giải quyết tất cả các nhiệm vụ
tạo layout có điều kiện hiện có, chứng minh tính linh hoạt của nó. Mặc dù không có bất kỳ huấn
luyện hoặc tinh chỉnh mô hình nào, LayoutPrompter ngang bằng hoặc thậm chí tốt hơn các phương
pháp tiên tiến nhất. Bên cạnh đó, các nghiên cứu loại bỏ của chúng tôi cho thấy LayoutPrompter
vẫn có thể đạt được hiệu suất tốt khi chỉ có một tập nhỏ các mẫu ứng viên, chỉ ra rằng nó vượt
trội hơn các phương pháp dựa trên huấn luyện hiện có về mặt hiệu quả dữ liệu. Tóm lại, LayoutPrompter
là một phương pháp tạo layout linh hoạt, hiệu quả dữ liệu và không cần huấn luyện.
2 Công việc Liên quan
Tạo Layout Đồ họa. Tạo layout đồ họa tự động là một chủ đề nghiên cứu mới nổi trong những năm
gần đây. Để đáp ứng các yêu cầu đa dạng của người dùng, các phương pháp hiện có đã định nghĩa
nhiều nhiệm vụ tạo layout, bao gồm tạo layout có điều kiện trên loại yếu tố [21, 19, 18], tạo layout
có điều kiện trên loại yếu tố và kích thước [19], tạo layout có điều kiện trên mối quan hệ yếu tố
[18, 21], hoàn thành layout [7, 23] và tinh chỉnh [30]. Ngoài các nhiệm vụ ràng buộc tường minh
này, một số công trình xem xét các nhiệm vụ thách thức hơn nhưng hữu ích, như tạo layout nhận
thức nội dung [39, 9] và text-to-layout [11, 24]. Tạo layout nhận thức nội dung nhằm sắp xếp không
gian cho các yếu tố được xác định trước trên một canvas nhất định. Các layout được tạo ra không
chỉ cần đẹp mắt về mặt thị giác mà còn tránh các vùng nổi bật của canvas. Text-to-layout là tạo
layout theo mô tả ngôn ngữ của con người.
Các công trình sớm trong lĩnh vực này chủ yếu tập trung vào một nhiệm vụ cá nhân và đề xuất các
phương pháp cụ thể cho từng nhiệm vụ dựa trên Generative Adversarial Networks (GANs) [22, 9],
Variational Autoencoders (VAEs) [21, 16] và Transformers [19, 7, 11, 24, 30]. Gần đây, một số
phương pháp tổng quát [15, 12, 14, 37] đã xuất hiện. LayoutFormer++ [15] đề xuất biểu diễn các
ràng buộc khác nhau thành chuỗi và sau đó tận dụng kiến trúc encoder-decoder Transformer [32]
để tạo layout từ các chuỗi ràng buộc. [12, 14] phát triển các mô hình dựa trên khuếch tán cho việc
tạo layout ràng buộc tường minh. Tuy nhiên, không có phương pháp nào hiện tại có thể đồng thời
xử lý tất cả các nhiệm vụ tạo layout. Hơn nữa, các phương pháp này phụ thuộc rất nhiều vào lượng
lớn dữ liệu huấn luyện, điều này cản trở các ứng dụng thực tế của chúng. Trong công trình này,
chúng tôi giới thiệu các kỹ thuật như lựa chọn mẫu động, tuần tự hóa đầu vào-đầu ra và xếp hạng
layout để sử dụng hiệu quả LLMs nhằm vượt qua các hạn chế trên, làm cho LayoutPrompter trở
thành phương pháp linh hoạt và hiệu quả dữ liệu (xem Bảng 1).
Mô hình Ngôn ngữ Lớn. Các mô hình ngôn ngữ lớn (LLMs) với hàng tỷ tham số, như GPT [3, 28],
PaLM [6] và LLaMa [31], đã chứng minh hiệu suất few-shot xuất sắc trên
3

--- TRANG 4 ---
MẪUVui lòng tạo một layout dựa trên thông tin đã cho.
Mô tả Nhiệm vụ: tạo layout nhận thức nội dung
Lĩnh vực Layout: layout poster
Kích thước Canvas: chiều rộng canvas là 102px, chiều cao canvas là 150px
Ràng buộc Nội dung: trái 26px, trên 62px, chiều rộng 50px, chiều cao 69px
Ràng buộc Loại Yếu tố: logo | text | text | text | underlay | textRÀNG BUỘC 
ĐẦU VÀO
<html>
<body>
<div class='logo' style='left: 3px; top: 2px; width: 22px; height: 7px'></div>
<div class='text' style='left: 24px; top: 12px; width: 53px; height: 10px'></div>
<div class='text' style='left: 6px; top: 25px; width: 91px; height: 10px'></div>
<div class='text' style='left: 19px; top: 37px; width: 64px; height: 7px'></div>
<div class='underlay' style='left: 18px; top: 48px; width: 66px; height: 9px'></div>
<div class='text' style='left: 22px; top: 49px; width: 57px; height: 6px'></div>
</body>
</html>LAYOUT 
ĐẦU RAMẪU
ĐỘNGLời mở đầu
Mẫu 1
Mẫu N…
Ràng buộc 
Đầu vào
Layout Đầu ra
Ràng buộc 
Đầu vàoĐẦU VÀO
THỬ NGHIỆM+
Layout Đầu raĐẦU RA
THỬ NGHIỆMLLMĐẦU VÀO
ĐẦU RAHỌC TRONG NGỮ CẢNH LỜI MỞ ĐẦU
Ràng buộc 
Đầu vào
Layout Đầu ra
+
Bộ xếp hạng✖ LHình 2: Tổng quan về LayoutPrompter. Lời nhắc hoàn chỉnh bao gồm một lời mở đầu cụ thể
cho nhiệm vụ, N mẫu trong ngữ cảnh và một đầu vào thử nghiệm. Các mẫu được lấy động từ tập
huấn luyện theo đầu vào thử nghiệm. Sau đó, lời nhắc được đưa vào LLM để tạo ra L layout khác
nhau. Chúng tôi sử dụng bộ xếp hạng layout để chọn layout tốt nhất làm đầu ra cuối cùng.
nhiều nhiệm vụ xử lý ngôn ngữ tự nhiên (NLP) khác nhau. Nhờ khả năng phát sinh [33] được mang
lại bởi quy mô mô hình và dữ liệu, chúng vượt xa các phương pháp có giám sát trước đây và thậm
chí đạt được hiệu suất cấp độ con người trên một số nhiệm vụ, mà không cần bất kỳ tinh chỉnh nào.
Tính linh hoạt và hiệu quả của LLMs truyền cảm hứng cho chúng tôi phát triển một phương pháp
tạo layout dựa trên chúng.
Các nghiên cứu gần đây cho thấy rằng chiến lược kích thích đóng vai trò quan trọng trong hiệu
suất mô hình. Ví dụ, kích thích chuỗi suy nghĩ (CoT) [34] được đề xuất để cải thiện khả năng lập
luận của LLMs bằng cách kết hợp các bước lập luận trung gian trong các mẫu. Kích thích từ ít
đến nhiều [41, 17] (còn được gọi là kích thích phân tách) được giới thiệu để giải quyết các nhiệm
vụ lập luận phức tạp nhiều bước. Để tăng cường kiến thức ngữ cảnh, [26, 10] sử dụng mô-đun
truy xuất để lựa chọn động các mẫu trong ngữ cảnh. Họ tìm thấy thông qua thí nghiệm rằng các
mẫu có ngữ nghĩa tương tự với các mẫu thử nghiệm có thể giải phóng tốt hơn kiến thức của mô
hình. Cụ thể, họ sử dụng bộ mã hóa câu để chuyển đổi đầu vào mô hình thành biểu diễn vector.
Sau đó, đối với mỗi mẫu thử nghiệm, họ truy xuất các láng giềng gần nhất trong không gian nhúng
câu được mã hóa để xây dựng lời nhắc. Được thúc đẩy bởi họ, chúng tôi đề xuất một chiến lược
kích thích tương tự trong công trình này. Vì đầu vào của các nhiệm vụ tạo layout khác với các công
trình trước đây, chúng tôi giới thiệu một bộ đánh giá tùy chỉnh để đo lường khoảng cách mẫu.
Kết quả thí nghiệm chứng minh hiệu quả của nó trong LayoutPrompter.
3 LayoutPrompter
Trong phần này, chúng tôi trình bày chi tiết về LayoutPrompter, một phương pháp tạo layout linh
hoạt, hiệu quả dữ liệu và không cần huấn luyện được xây dựng dựa trên LLMs. Đóng góp chính
của chúng tôi nằm ở việc đề xuất một tập hợp các kỹ thuật hữu ích để áp dụng LLMs vào tạo layout.
Cụ thể, để hỗ trợ chuyển đổi chuỗi-thành-chuỗi và tận dụng tối đa kiến thức thiết kế trong LLMs,
chúng tôi xem xét cẩn thận sơ đồ tuần tự hóa biểu diễn đầu vào và đầu ra nhiệm vụ thành chuỗi
(Phần 3.2). Hơn nữa, để tăng cường việc hiểu các ràng buộc layout do người dùng chỉ định, chúng
tôi đề xuất một mô-đun lựa chọn mẫu động để truy xuất các mẫu có liên quan nhất từ tập huấn
luyện để thực hiện học trong ngữ cảnh (Phần 3.3). Bên cạnh đó, một bộ xếp hạng layout được
thiết kế để đánh giá chất lượng layout và xếp hạng nhiều layout được tạo ra dưới cùng các ràng
buộc, tiếp tục cải thiện hiệu suất mô hình (Phần 3.4).
3.1 Tổng quan
Hãy xem xét một nhiệm vụ tạo layout có điều kiện. Chúng tôi ký hiệu tập huấn luyện của nó là D={(xj, yj)}M
j=1.
Ở đây, (xj, yj) biểu diễn mẫu thứ j của D, là một cặp (ràng buộc đầu vào, layout đầu ra),
và M là tổng số mẫu. Như được minh họa trong Hình 2, đối với một truy vấn thử nghiệm xtest cho
trước, lời nhắc học trong ngữ cảnh P được cấu thành bằng cách nối tuần tự một lời mở đầu cụ thể
cho nhiệm vụ R,
4

--- TRANG 5 ---
N mẫu và chính truy vấn đó:
P= [R;FX(xk1);FY(yk1);. . .;FX(xkN);FY(ykN);FX(xtest)],{ki}N
i=1=G(xtest,D).(1)
Cụ thể hơn, lời mở đầu R cung cấp thông tin cần thiết về nhiệm vụ mục tiêu, như mô tả nhiệm vụ,
lĩnh vực layout và kích thước canvas. FX(·) và FY(·) là các hàm tuần tự hóa biến đổi đầu vào nhiệm
vụ x và đầu ra y thành chuỗi, tương ứng. G(·,·) biểu thị hàm lựa chọn mẫu, truy xuất các mẫu
trong ngữ cảnh từ D theo xtest. Chi tiết của FX, FY và G sẽ được trình bày trong các phần tiếp theo.
Đáng chú ý, khi số lượng mẫu N được đặt thành 0, học trong ngữ cảnh few-shot suy biến thành
học zero-shot, nơi LLMs dự đoán đầu ra thử nghiệm ytest chỉ dựa trên lời mở đầu R và xtest.
Trong các thí nghiệm của chúng tôi (xem Phần B.2 trong Phụ lục), chúng tôi thấy rằng hướng dẫn
mẫu bổ sung có thể giúp LLMs hiểu rõ hơn nhiệm vụ và nắm bắt được mô hình thô của các layout
cần thiết. Do đó, chúng tôi chọn học few-shot (N > 0) thay vì học zero-shot (N = 0) trong công
trình này.
3.2 Tuần tự hóa Đầu vào-Đầu ra
Để bắt đầu, chúng tôi thiết lập một số ký hiệu. Đối với mỗi yếu tố e cấu thành một layout, chúng
tôi mô tả nó bằng loại yếu tố c, tọa độ trái l, tọa độ trên t, chiều rộng w và chiều cao h, tức là
e = (c, l, t, w, h). Ở đây, c là thuộc tính phân loại. Bốn thuộc tính khác là thuộc tính hình học số,
sẽ được rời rạc hóa trong việc triển khai (xem Phần A trong Phụ lục).
Tạo Layout Nhận thức Nội dungPhát hiện Sự Nổi bật
bbox saliency
(100,0,200,250) Text-to-LayoutT5
Một trang giới thiệu về AmericaMall. 
Trang này nên có logo và mô tả ngắn gọn. 
Logo...nhúng câu
(a) (b)
Canvas Đầu vàoBản đồ Sự nổi bật Đầu ra 
& Hộp Bao quanh
(a) (b)
Hình 3: Một canvas đầu vào được chuyển đổi
thành bản đồ sự nổi bật.Tuần tự hóa Ràng buộc Đầu vào. Đối với tạo layout ràng buộc
tường minh, các ràng buộc đầu vào là các ràng buộc theo yếu tố
trên e. Chúng tôi tuần tự hóa các ràng buộc như vậy theo cách
tương tự như LayoutFormer++ [15], nơi họ biểu diễn mỗi ràng
buộc dưới dạng chuỗi và sau đó kết hợp các ràng buộc khác
nhau thông qua nối. Ví dụ, nếu x chỉ định các loại yếu tố và
kích thước, FX(x) có dạng FX(x) = "c1w1h1|c2w2h2|. . .". 
Trong công trình này, chúng tôi áp dụng các chuỗi sẵn có này
cho các nhiệm vụ tạo layout ràng buộc tường minh. Về tạo layout
nhận thức nội dung, bản chất hình ảnh của canvas đầu vào
đặt ra thách thức độc đáo cho tuần tự hóa, tức là cho phép
LLMs chỉ có thể đọc văn bản nhận thức nội dung hình ảnh.
Lấy cảm hứng từ DS-GAN [9], chúng tôi nhận ra rằng bản
đồ sự nổi bật [8] có thể nắm bắt tốt hình dạng nội dung chính
của canvas trong khi loại bỏ các chi tiết tần số cao, không liên
quan khác (xem Hình 3). Để tạo điều kiện thuận lợi cho tuần
tự hóa, chúng tôi tiếp tục chuyển đổi nó thành bản đồ sự nổi
bật được hiệu chỉnh m = (lm, tm, wm, hm) bằng cách phát
hiện ranh giới vùng với các giá trị pixel lớn hơn một ngưỡng
nhất định. Sau xử lý trước, canvas đầu vào x có thể được
biểu diễn ở định dạng mà LLMs có thể hiểu được: FX(x) =
"Ràng buộc Nội dung: trái lmpx, trên tmpx, chiều rộng wmpx, chiều cao hmpx". Đối với
nhiệm vụ text-to-layout, nơi các mô tả ngôn ngữ tự nhiên được sử dụng để tạo layout, chuỗi ràng
buộc đơn giản là chính văn bản đầu vào.
Tuần tự hóa Layout Đầu ra. Đối với đầu ra y, chúng tôi đề xuất tuần tự hóa nó thành định dạng
HTML mà LLMs quen thuộc hơn và giỏi hơn, thay vì chuỗi đơn giản được sử dụng trong các công
trình trước đây [15, 7]. Theo biểu diễn HTML phổ biến, chúng tôi biểu thị chuỗi đầu ra hoàn chỉnh
như một sự nối của nhiều đoạn HTML a: FY(y) = [a1; a2; . . .]. Ở đây, đoạn thứ i ai biểu diễn
yếu tố đồ họa thứ i ei của y. Nó chỉ định các thuộc tính yếu tố theo định dạng sau:
<div class="ci" style="left: lipx; top: tipx; width: wipx; height: hipx"></div> .
(2)
Nhờ khả năng học trong ngữ cảnh mạnh mẽ của LLMs, đầu ra thử nghiệm ytest sẽ được dự đoán
theo cùng định dạng HTML, giúp dễ dàng trích xuất các thuộc tính yếu tố cần thiết từ đầu ra.
Nhiều ví dụ đầu vào-đầu ra có thể được tìm thấy trong Phần D của tài liệu bổ sung.
3.3 Lựa chọn Mẫu Động
Như đã đề cập ở trên, G lựa chọn N mẫu trong ngữ cảnh có các ràng buộc layout tương tự nhất
với xtest từ D. Các mẫu được chọn được xáo trộn ngẫu nhiên và kết hợp để xây dựng P (xem
Phương trình 1), từ đó tăng cường hiểu biết của LLMs về các ràng buộc khác nhau. Để đạt được
điều này, chúng tôi thiết kế một bộ đánh giá s để đo lường độ tương tự ràng buộc giữa truy vấn
thử nghiệm xtest và mỗi
5

--- TRANG 6 ---
RICO PubLayNet
Nhiệm vụ Phương pháp mIoU ↑ FID↓ Căn chỉnh ↓Chồng chéo ↓Vi phạm % ↓mIoU ↑ FID↓ Căn chỉnh ↓Chồng chéo ↓Vi phạm % ↓
Gen-TBLT 0.216 25.633 0.150 0.983 - 0.140 38.684 0.036 0.196 -
LayoutFormer++ 0.432 1.096 0.230 0.530 0. 0.348 8.411 0.020 0.008 0.
LayoutPrompter 0.429 3.233 0.109 0.505 0.64 0.382 3.022 0.037 0.047 0.50
Gen-TSBLT 0.604 0.951 0.181 0.660 0. 0.428 7.914 0.021 0.419 0.
LayoutFormer++ 0.620 0.757 0.202 0.542 0. 0.471 0.720 0.024 0.037 0.
LayoutPrompter 0.552 1.458 0.145 0.544 0.18 0.453 1.067 0.049 0.091 0.
Gen-RCLG-LO 0.286 8.898 0.311 0.615 3.66 0.277 19.738 0.123 0.200 6.66
LayoutFormer++ 0.424 5.972 0.332 0.537 11.84 0.353 4.954 0.025 0.076 3.9
LayoutPrompter 0.400 5.178 0.101 0.564 10.58 0.347 3.620 0.037 0.161 12.29
Hoàn thànhLayoutTransformer 0.363 6.679 0.194 0.478 - 0.077 14.769 0.019 0.0013 -
LayoutFormer++ 0.732 4.574 0.077 0.487 - 0.471 10.251 0.020 0.0022 -
LayoutPrompter 0.667 7.318 0.084 0.428 - 0.476 2.132 0.023 0.017 -
Tinh chỉnhRUITE 0.811 0.107 0.133 0.483 - 0.781 0.061 0.029 0.020 -
LayoutFormer++ 0.816 0.032 0.123 0.489 - 0.785 0.086 0.024 0.006 -
LayoutPrompter 0.745 0.978 0.159 0.478 - 0.647 0.278 0.072 0.048 -
Bảng 2: So sánh định lượng với đường cơ sở trên các nhiệm vụ tạo layout ràng buộc tường minh. ↑
chỉ ra giá trị lớn hơn là tốt hơn, ↓ chỉ ra giá trị nhỏ hơn là tốt hơn.
mẫu ứng viên (xj, yj) ∈ D. Sau đó, G có thể được biểu diễn thêm dưới dạng hàm lựa chọn Top-k:
G(xtest,D) ≜ Top-k ([
(xj,yj)∈D{s(xtest, xj)}, N). (3)
Vì chúng tôi chia các nhiệm vụ tạo layout hiện có thành ba loại, mỗi loại có các ràng buộc đầu vào
khác nhau, các thước đo tương tự của chúng có các biểu diễn khác nhau. Chúng tôi sẽ trình bày
chi tiết bên dưới.
Tạo Layout Ràng buộc Tường minh. Vì các nhiệm vụ tạo layout ràng buộc tường minh chỉ xem xét
các ràng buộc theo yếu tố, chúng tôi định nghĩa s(xtest, xj) bằng cách sử dụng độ tương tự ràng
buộc giữa các yếu tố. Cụ thể, chúng tôi xây dựng một đồ thị lưỡng phân giữa xtest={pu
test}U
u=1
và xj={pv
j}V
v=1, trong đó p biểu thị ràng buộc theo yếu tố trên e. U, V là số lượng ràng buộc của
xtest, xj. Sau đó, độ tương tự giữa các yếu tố W (tức là trọng số của đồ thị lưỡng phân) và độ
tương tự ràng buộc tổng thể s được định nghĩa là:
s(xtest, xj) ≜ 1
|Mmax|∑
(pu
test,pv
j)∈MmaxW(pu
test, pv
j), W(pu
test, pv
j) = 1(pu
test, pv
j)2−∥gu
test−gv
j∥2.(4)
Ở đây, 1 là hàm 0-1 bằng 1 nếu pu
test và pv
j chỉ định cùng loại yếu tố, và 0 nếu ngược lại.
Điều này đảm bảo rằng độ tương tự ràng buộc chỉ được xem xét giữa các yếu tố có cùng loại. gu
test
và gv
j là các thuộc tính hình học được chỉ định của pu
test và pv
j. Với trọng số cạnh W của đồ thị
lưỡng phân, chúng tôi áp dụng phương pháp Hungary [20] để có được ghép cặp tối đa Mmax. Và
s(xtest, xj) được tính là trọng số trung bình của các cạnh được ghép cặp (như được hiển thị trong
Phương trình 4).
Tạo Layout Nhận thức Nội dung. Ràng buộc của tạo layout nhận thức nội dung là canvas đầu vào.
Độ tương tự của hai canvas xtest, xj được định nghĩa là IoU (Intersection over Union) của các
bản đồ sự nổi bật được hiệu chỉnh mtest, mj của chúng:
s(xtest, xj) ≜ IoU(mtest, mj) = |mtest∩mj|
|mtest∪mj|. (5)
Text-to-Layout. Chúng tôi tận dụng bộ mã hóa văn bản CLIP [29] để mã hóa văn bản đầu vào
thành nhúng. Độ tương tự ràng buộc s(xtest, xj) được định nghĩa là độ tương tự cosine của các
nhúng văn bản đầu vào ntest, nj:
s(xtest, xj) ≜ ntest·nj
∥ntest∥∥nj∥. (6)
3.4 Bộ Xếp hạng Layout
Mọi người thường đánh giá chất lượng của các layout được tạo ra từ hai góc độ: (1) liệu chúng có
hấp dẫn về mặt thị giác hay không; (2) liệu chúng có giống các layout thật hay không. Do đó, bộ
xếp hạng layout được đề xuất của chúng tôi tuân theo các nguyên tắc tương tự để đánh giá chất
lượng layout. Cụ thể hơn, nó đo lường chất lượng của một layout đầu ra bằng cách sử dụng một
kết hợp các thước đo:
q(ytest) = λ1Căn chỉnh(ytest) + λ2Chồng chéo(ytest) + λ3(1−mIoU(ytest)). (7)
6

--- TRANG 7 ---
Bộ dữ liệu Lĩnh vực Nhiệm vụ Liên quan # Tập Huấn luyện # Tập Thử nghiệm # Loại Yếu tố
RICO Android tạo layout ràng buộc tường minh 31,694 3,729 25
PubLayNet tài liệu tạo layout ràng buộc tường minh 311,397 10,998 5
PosterLayout poster tạo layout nhận thức nội dung 9,974 905 3
WebUI web text-to-layout 3,835 487 10
Bảng 3: Thống kê bộ dữ liệu. Lưu ý rằng các bộ dữ liệu này chỉ được sử dụng trên các nhiệm vụ cụ thể.
Gen-TRICO
image
text 
buttontext×3
background×7Layout
Former++Layout
Prompter
image
text 
buttontext
input×2Ràng buộc 
Đầu vàoLayout
Former++Layout
PrompterRàng buộc 
Đầu vào
image
icontext
×2
text 
button×6
toolbar
input×3(58,4)
(20,17)
(20,17)
(107,6)
(127,9)
(30,6)
image
text 
buttontext
×2
(44,24)
(44,8)(92,5)
(109,7)Gen-TS
icontext
×2text 
button×2
card
text
tại trung tâm của card
text 
button
tại dưới cùng củatext
text 
button
input×2
×3
input
kích thước bằng nhau 
với input khác
inputGen-R
PubLayNet
Layout
Former++Layout
PrompterRàng buộc 
Đầu vào
text×7
title×2
table
Layout
Former++Layout
PrompterRàng buộc 
Đầu vào
text×6
title
figure×2
text×4
×2table
(63,1)
(50,40)
(105,3)
(50,40)
(105,6)
(105,45)
text×6
figure×3
(50,5)(50,8)
(50,6)(50,34)
(50,21)(105,3)
(46,27)(47,23)
(98,27)
text×6
figure
figure
lớn hơn text
text
tại 
dưới cùng củacanvas
text×4
table
table
tại 
trung tâm củacanvas
text
tại trên cùng của table
Hoàn thành Tinh chỉnh
Hình 4: So sánh định tính giữa LayoutPrompter và đường cơ sở tiên tiến nhất LayoutFormer++ [15]
trên các nhiệm vụ tạo layout ràng buộc tường minh (xem tốt hơn ở màu và zoom 2×).
Ở đây, λ1, λ2 và λ3 là các siêu tham số để cân bằng tầm quan trọng của mỗi thước đo. Căn chỉnh
và Chồng chéo phản ánh chất lượng từ góc độ (1), trong khi mIoU chủ yếu tập trung vào góc độ
(2). Chúng tôi sẽ giới thiệu chúng trong Phần 4.1. Layout đầu ra có giá trị q thấp nhất (q thấp hơn
chỉ ra chất lượng tốt hơn) được trả về làm đầu ra cuối cùng.
4 Thí nghiệm
4.1 Thiết lập
Bộ dữ liệu. Chúng tôi tiến hành thí nghiệm trên 4 bộ dữ liệu, bao gồm RICO [27], PubLayNet [40],
PosterLayout [9] và WebUI [24]. Thống kê và cách sử dụng của chúng được minh họa trong Bảng
3. Đối với RICO và PubLayNet, chúng tôi áp dụng cùng phân chia bộ dữ liệu như LayoutFormer++
[15]. Trong khi đối với PosterLayout, tập huấn luyện bao gồm 9,974 cặp poster-layout, và 905
poster còn lại được sử dụng để thử nghiệm. Về bộ dữ liệu WebUI, chúng tôi áp dụng phân chia
bộ dữ liệu được cung cấp bởi parse-then-place [24]. Trong tất cả các trường hợp, các mẫu trong
ngữ cảnh được truy xuất từ tập huấn luyện đầy đủ.
Đường cơ sở. Vì các nhiệm vụ tạo layout ràng buộc tường minh có các phương pháp cụ thể cho
nhiệm vụ và tổng quát cho nhiệm vụ, chúng tôi so sánh LayoutPrompter với cả hai loại phương
pháp tiên tiến nhất trên các nhiệm vụ này. Cụ thể, chúng tôi chọn LayoutFormer++ [15] làm đường
cơ sở tổng quát chung cho nhiệm vụ. Các đường cơ sở cụ thể cho nhiệm vụ là (1) BLT [19] cho
tạo có điều kiện trên loại (Gen-T), (2) BLT [19] cho tạo có điều kiện trên loại với kích thước (Gen-TS),
(3) CLG-LO [18] cho tạo có điều kiện trên mối quan hệ (Gen-R), (4) LayoutTransformer [7] cho
hoàn thành, và (5) RUITE [30] cho tinh chỉnh. Hơn nữa, chúng tôi so sánh LayoutPrompter với
DS-GAN [9] và CGL-GAN [42] trên tạo layout nhận thức nội dung. Chúng tôi so sánh với Mockup
[11] và parse-then-place [24] trên text-to-layout.
7

--- TRANG 8 ---
Val↑ Ove↓ Ali↓ Und l↑ Und s↑ Uti↑ Occ↓ Rea↓
CGL-GAN 0.7066 0.0605 0.0062 0.8624 0.4043 0.2257 0.1546 0.1715
DS-GAN 0.8788 0.0220 0.0046 0.8315 0.4320 0.2541 0.2088 0.1874
LayoutPrompter (Của chúng tôi) 0.9992 0.0036 0.0036 0.8986 0.8802 0.2597 0.0992 0.1723
Bảng 4: So sánh định lượng với đường cơ sở trên nhiệm vụ tạo layout nhận thức nội dung.
(a) (b) (c) (d) (e) (f) (g) (h)DS-GAN Chúng tôi
Hình 5: Kết quả định tính được tạo ra bởi DS-GAN và LayoutPrompter trên tạo layout nhận thức
nội dung. Có ba loại yếu tố, bao gồm logo (đỏ), văn bản (xanh lá cây) và lớp nền (vàng).
Thước đo Đánh giá. Để đánh giá hiệu suất của LayoutPrompter và các đường cơ sở, chúng tôi sử
dụng các thước đo định lượng sau. Đối với tạo layout ràng buộc tường minh và text-to-layout, chúng
tôi sử dụng bốn thước đo tiêu chuẩn. Căn chỉnh (Align.) [22] đánh giá mức độ các yếu tố trong
layout được căn chỉnh với nhau. Chồng chéo [22] tính toán diện tích chồng chéo giữa hai yếu tố
bất kỳ trong layout. Maximum IoU (mIoU) [18] tính toán Intersection over Union (IoU) cao nhất
giữa layout được tạo ra và layout thật. Fréchet Inception Distance (FID) [18] đo lường mức độ
tương tự của phân phối các layout được tạo ra với phân phối của layout thật. Ngoài ra, chúng tôi
giới thiệu một thước đo khác là Tỷ lệ Vi phạm Ràng buộc (Vio. %) [15] để đánh giá mức độ các
layout được tạo ra đáp ứng các ràng buộc đầu vào của chúng. Đó là tỷ lệ các ràng buộc bị vi phạm
trên tất cả các ràng buộc. Trong text-to-layout, vì mô tả văn bản có thể liên quan đến các ràng buộc
loại, vị trí và kích thước của yếu tố, chúng tôi tuân theo parse-then-place [24] và tiếp tục chia thước
đo này thành Type Vio. % và Pos & Size Vio. %.
Đối với tạo layout nhận thức nội dung, chúng tôi áp dụng tám thước đo được định nghĩa trong DS-GAN
[9]. Một số thuộc về thước đo đồ họa, như Val, Ove, Ali, Und l và Und s. Những thước đo khác
là thước đo nhận thức nội dung, bao gồm Uti, Occ và Rea. Vui lòng tham khảo [9] để biết chi tiết.
Chi tiết Triển khai. Trong công trình này, chúng tôi tiến hành thí nghiệm trên mô hình GPT-3 [3]
text-davinci-003. Chúng tôi đặt N = 10 mẫu trong lời nhắc P. Đối với mỗi mẫu thử nghiệm, chúng
tôi tạo ra L = 10 đầu ra ytest khác nhau. Các siêu tham số liên quan đến mô-đun bộ xếp hạng layout
được đặt thành λ1 = 0.2, λ2 = 0.2, và λ3 = 0.6. Khi chạy GPT-3, chúng tôi cố định các tham số
theo giá trị mặc định của OpenAI API, nơi nhiệt độ lấy mẫu là 0.7 và các tham số liên quan đến
penalty được đặt thành 0.
4.2 Kết quả Chính
Bảng 2, 4, 5 và Hình 4, 5, 6 hiển thị kết quả định lượng và định tính trên các nhiệm vụ tạo layout
khác nhau (xem thêm kết quả định tính trong Phần C của tài liệu bổ sung). Mặc dù LayoutPrompter
chưa trải qua huấn luyện và tinh chỉnh mô hình, kết quả thí nghiệm chứng minh rằng nó có thể đạt
được hiệu suất tương đương hoặc thậm chí tốt hơn các đường cơ sở, chứng minh rằng LayoutPrompter
là một phương pháp tạo layout linh hoạt và không cần huấn luyện. Dưới đây, chúng tôi tiến hành
phân tích chi tiết các kết quả thí nghiệm.
Tạo Layout Ràng buộc Tường minh. Bảng 2 hiển thị kết quả định lượng. Trên mỗi nhiệm vụ tạo
layout ràng buộc tường minh, LayoutPrompter được so sánh với một phương pháp cụ thể cho nhiệm
vụ và một đường cơ sở chung khác, LayoutFormer++ [15]. Mặc dù không được huấn luyện trên
các nhiệm vụ downstream này, LayoutPrompter vẫn thể hiện kết quả định lượng cạnh tranh. Hơn
nữa, nó thậm chí vượt trội hơn các đường cơ sở trên một số thước đo (ví dụ: Align. và Overlap
trên nhiệm vụ Gen-T, bộ dữ liệu RICO). Kết quả định tính tương ứng được hiển thị trong Hình 4.
Ở đây, chúng tôi chỉ so sánh với đường cơ sở tiên tiến nhất (được đo bằng thước đo định lượng),
LayoutFormer++. So sánh định tính chỉ ra rằng
8

--- TRANG 9 ---
mIoU↑ FID↓ Căn chỉnh↓ Chồng chéo ↓ Type Vio. % ↓ Pos & Size Vio. % ↓
Mockup 0.1927 37.0123 0.0059 0.4348 31.49 44.92
parse-then-place 0.6841 2.9592 0.0008 0.1380 11.36 19.14
LayoutPrompter (Của chúng tôi) 0.3190 10.7706 0.0009 0.0892 15.09 23.78
Bảng 5: So sánh định lượng với đường cơ sở trên text-to-layout.
(d) Một trang footer cho cửa hàng trực tuyến 
bán trang sức. Trên trang này, nên có bốn 
danh sách liên kết để biết thêm thông tin. 
Trong mỗi danh sách, nên có một tiêu đề 
và 4-6 liên kết.(e) Một trang giới thiệu các phương thức thanh toán 
cho người dùng. Có tiêu đề 'phương thức thanh toán 
được chấp nhận' ở trên cùng. Cũng có bốn logo 
của các công ty thanh toán bên dưới.(f) Một trang hiển thị các loại công việc khác nhau. 
Nên có sáu nhóm. Mỗi nhóm bao gồm một logo 
và một văn bản hiển thị tiêu đề của công việc.Mockup PTP Chúng tôi
(a) Một trang quảng cáo thiệp ảnh ngày lễ. 
Trang này nên có một hình ảnh hiển thị thiệp, 
tiêu đề "Thiệp Ảnh Ngày Lễ", mô tả thêm, 
và nút "MUA THIỆP" để người dùng nhấp 
vào mua thiệp.
(b) Trang giới thiệu sản phẩm cho người dùng. 
Nên có ba phần, và mỗi phần bao gồm một 
tiêu đề, một hình ảnh của sản phẩm, và một 
liên kết để người dùng nhấp vào để xem thêm 
về sản phẩm.Mockup PTP Chúng tôi
(c) Một trang điều hướng của Mailreach. 
Trang này nên có logo của Mailreach, 5 liên kết 
để người dùng kiểm tra kiểm tra spam email, 
blog, tính năng, giá cả, và đăng nhập, và một 
nút để người dùng nhấp vào đăng ký.Mockup PTP Chúng tôi
Hình 6: Kết quả định tính của Mockup, parse-then-place (viết tắt là PTP) và LayoutPrompter trên
text-to-layout (xem tốt hơn ở màu và zoom 2×).
LayoutPrompter đạt được khả năng kiểm soát và chất lượng tạo ra tốt như LayoutFormer++. Đầu
tiên, các layout được tạo ra bởi phương pháp của chúng tôi đáp ứng tốt các ràng buộc đầu vào
khác nhau, bao gồm ràng buộc loại, ràng buộc kích thước, ràng buộc mối quan hệ, v.v. Thứ hai,
phương pháp của chúng tôi cũng có thể tạo ra các layout hấp dẫn về mặt thị giác với các yếu tố
được căn chỉnh tốt và diện tích chồng chéo nhỏ. Cả kết quả định tính và định lượng đều chứng
minh hiệu quả của LayoutPrompter.
Tạo Layout Nhận thức Nội dung. Kết quả định lượng và định tính được trình bày trong Bảng 4
và Hình 5, tương ứng. Đáng chú ý, LayoutPrompter vượt trội hơn các đường cơ sở dựa trên huấn
luyện trên hầu hết tất cả các thước đo. Điều này chỉ ra rằng LayoutPrompter có khả năng tạo ra
các layout chất lượng cao hơn và nhận thức nội dung hơn so với các đường cơ sở. Các kết quả
được hiển thị tiếp tục xác nhận kết luận. Ví dụ, trong các cột (f) và (g) của Hình 5, các layout từ
DS-GAN [9] chứa các lỗi căn chỉnh và chồng chéo nghiêm trọng. Và cột (e) cho thấy DS-GAN
đôi khi thất bại trong việc tạo ra các layout nhận thức nội dung. Ngược lại, phương pháp của
chúng tôi không chỉ có thể tạo ra các layout thẩm mỹ mà còn tránh được các đối tượng nổi bật
nhất trong canvas đầu vào, như người, gấu teddy, xe hơi, v.v.
Text-to-Layout. So sánh định lượng và định tính được hiển thị trong Bảng 5 và Hình 6. Vì text-to-layout
là một trong những nhiệm vụ tạo layout thách thức nhất, LayoutPrompter hơi thua kém phương
pháp tiên tiến nhất hiện tại parse-then-place [24], đặc biệt là trên các thước đo mIoU và FID. Tuy
nhiên, trên bốn thước đo khác, LayoutPrompter tương đương với các đường cơ sở. Nhờ khả năng
hiểu xuất sắc của LLMs, phương pháp của chúng tôi có thể đáp ứng tốt hơn các ràng buộc được
chỉ định trong các mô tả văn bản trong một số trường hợp. Ví dụ, trong các trường hợp (d) và (e)
của Hình 6, LayoutPrompter thành công tạo ra 4-6 liên kết và bốn logo, trong khi parse-then-place
đưa ra dự đoán sai về số lượng yếu tố.
4.3 Nghiên cứu Loại bỏ
Hiệu quả của Các Thành phần Được Giới thiệu. LayoutPrompter có ba thành phần chính, bao gồm
tuần tự hóa đầu vào-đầu ra, lựa chọn mẫu động và xếp hạng layout. Để điều tra hiệu quả của
chúng, chúng tôi thực hiện các nghiên cứu loại bỏ sau (xem Bảng 6). (1) Vì LayoutFormer++ [15]
đã chứng minh hiệu quả của các chuỗi ràng buộc so với các định dạng khác, chúng tôi chỉ nghiên
cứu hiệu quả của biểu diễn HTML, không được đề cập trong các công trình trước đây. Cụ thể,
chúng tôi thay thế HTML bằng chuỗi đơn giản được đề xuất bởi LayoutFormer++ [15] (ký hiệu
là w/o HTML) để biểu diễn layout đầu ra. Điều này dẫn đến sự giảm đáng kể trong các thước đo
FID và overlap trên Gen-T. (2) Để hiểu đóng góp của lựa chọn mẫu động, chúng tôi so sánh với
biến thể của nó (w/o dynamic selection) áp dụng lấy mẫu ngẫu nhiên để truy xuất mẫu. LayoutPrompter
đạt được FID và mIoU tốt hơn đáng kể trên toàn bộ bảng. Mặc dù biến thể có điểm Align. và
Overlap tốt hơn trong một số nhiệm vụ, điểm FID và mIoU đặc biệt kém của nó chỉ ra rằng nó
thất bại trong việc có được các mô hình layout trong các lĩnh vực cụ thể (ví dụ: layout được tạo
ra không giống layout UI thật). (3) Để hiểu hiệu quả của
9

--- TRANG 10 ---
RICO
Nhiệm vụ Phương pháp mIoU ↑ FID↓ Căn chỉnh↓ Chồng chéo ↓ Vi phạm % ↓
Gen-TLayoutPrompter 0.429 3.233 0.109 0.505 0.64
w/o HTML 0.460 7.009 0.106 0.663 0.
w/o dynamic selection 0.251 8.154 0.053 0.399 0.24
w/o layout ranker 0.367 3.149 0.142 0.498 0.45
Gen-TSLayoutPrompter 0.552 1.458 0.145 0.544 0.18
w/o dynamic selection 0.337 8.107 0.199 0.400 0.24
w/o layout ranker 0.505 1.528 0.153 0.549 0.13
Gen-RLayoutPrompter 0.400 5.178 0.101 0.564 10.58
w/o dynamic selection 0.223 14.177 0.067 0.597 15.95
w/o layout ranker 0.341 5.282 0.137 0.545 6.54
Hoàn thànhLayoutPrompter 0.667 7.318 0.084 0.428 -
w/o dynamic selection 0.449 17.409 0.062 0.422 -
w/o layout ranker 0.580 11.194 0.093 0.451 -
Tinh chỉnhLayoutPrompter 0.745 0.978 0.159 0.478 -
w/o dynamic selection 0.662 1.718 0.208 0.468 -
w/o layout ranker 0.705 1.161 0.188 0.478 -
Bảng 6: Nghiên cứu loại bỏ các thành phần được giới thiệu trên RICO.
LayoutFormer++ LayoutPrompter
Nhiệm vụ # Mẫu huấn luyện mIoU ↑ FID↓ Căn chỉnh ↓Chồng chéo ↓Vi phạm % ↓mIoU ↑FID↓Căn chỉnh ↓Chồng chéo ↓Vi phạm % ↓
Gen-T500 0.176 92.643 0.272 0.668 69.27 0.343 7.201 0.105 0.539 0.11
2,000 0.209 48.702 0.165 0.573 62.22 0.362 6.140 0.083 0.527 0.22
10,000 0.368 3.370 0.132 0.572 11.02 0.389 4.658 0.097 0.527 0.11
Tập đầy đủ 0.432 1.096 0.230 0.530 0. 0.429 3.233 0.109 0.505 0.64
Gen-TS500 0.171 79.641 0.301 0.808 74.66 0.405 4.068 0.130 0.596 0.13
2,000 0.249 39.673 0.209 0.655 53.07 0.424 3.460 0.143 0.604 0.06
10,000 0.529 2.395 0.215 0.596 1.86 0.464 2.606 0.138 0.580 0.06
Tập đầy đủ 0.620 0.757 0.202 0.542 0. 0.552 1.458 0.145 0.544 0.18
Bảng 7: Nghiên cứu loại bỏ kích thước tập huấn luyện trên RICO.
bộ xếp hạng layout được đề xuất, chúng tôi so sánh nó với một biến thể (w/o layout ranker) chọn
ngẫu nhiên một layout từ các đầu ra mô hình. Chúng tôi thấy rằng bộ xếp hạng layout liên tục
mang lại cải thiện trên các thước đo mIoU và Align. của tất cả các nhiệm vụ.
Hiệu quả của Kích thước Tập Huấn luyện. Chúng tôi thay đổi kích thước tập huấn luyện: 500,
2000, 10000 và tập đầy đủ (xem Bảng 7). Trong phương pháp của chúng tôi, tập huấn luyện biểu
diễn pool truy xuất mẫu. Kết quả cho thấy hiệu suất của LayoutFormer++ giảm nhanh chóng khi
dữ liệu huấn luyện giảm, nhưng phương pháp của chúng tôi ít bị ảnh hưởng hơn. Khi các mẫu
huấn luyện bị hạn chế (ví dụ: 500 và 2000), phương pháp của chúng tôi vượt trội đáng kể so với
đường cơ sở dựa trên huấn luyện trên tất cả các thước đo. Những quan sát này gợi ý rằng LayoutPrompter
là một phương pháp hiệu quả dữ liệu hơn, hiệu quả trong các tình huống tài nguyên thấp. Do hạn
chế về không gian, thêm kết quả thí nghiệm về tính ổn định, hiệu quả của số lượng ví dụ, và khả
năng tổng quát hóa có thể được tìm thấy trong Phần B của tài liệu bổ sung.
5 Kết luận và Hạn chế
Trong công trình này, chúng tôi tập trung vào việc tận dụng Mô hình Ngôn ngữ Lớn (LLMs) cho
tạo layout có điều kiện để giải quyết các vấn đề hiện tại trong các phương pháp hiện có. Để nâng
cao hiệu suất của phương pháp, chúng tôi giới thiệu ba thành phần quan trọng: tuần tự hóa đầu
vào-đầu ra, lựa chọn mẫu động, và xếp hạng layout. Chúng tôi tiến hành thí nghiệm trên 7 nhiệm
vụ tạo layout hiện có bằng cách sử dụng 4 bộ dữ liệu công khai. Cả kết quả định tính và định lượng
đều nhấn mạnh rằng LayoutPrompter là một phương pháp linh hoạt, hiệu quả dữ liệu và không
cần huấn luyện có khả năng tạo ra các layout chất lượng cao, tuân thủ ràng buộc. Mặc dù những
kết quả đầy hứa hẹn này, vẫn còn một số hạn chế. Đầu tiên, hiệu suất của phương pháp chúng tôi
bị ảnh hưởng bởi số lượng yếu tố trong layout, với nhiều yếu tố hơn dẫn đến nhiều trường hợp
thất bại hơn. Đáng chú ý, đây không phải là vấn đề cụ thể của phương pháp chúng tôi và đã được
quan sát thấy trong công trình trước đây [2]. Thứ hai, chúng tôi chưa nghiên cứu liệu LayoutPrompter
có hiệu quả tương đương đối với các LLMs khác như PaLM và LLaMa hay không. Thứ ba, với sự
phát triển nhanh chóng của các mô hình đa phương thức lớn như GPT-4V, PaLI [5] và LLaVA [25],
chúng tôi có được cơ hội đầy hứa hẹn để mở rộng LayoutPrompter để hỗ trợ các ràng buộc layout
được chỉ định trong nhiều phương thức khác nhau. Chúng tôi để lại chúng cho nghiên cứu tương lai.
10

--- TRANG 11 ---
Tài liệu tham khảo
[1]J.-B. Alayrac, J. Donahue, P. Luc, A. Miech, I. Barr, Y. Hasson, K. Lenc, A. Mensch, K. Millican,
M. Reynolds, et al. Flamingo: một mô hình ngôn ngữ thị giác cho học few-shot. Advances in
Neural Information Processing Systems, 35:23716–23736, 2022.
[2]D. M. Arroyo, J. Postels, và F. Tombari. Mạng transformer biến phân cho tạo layout.
Trong Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition,
trang 13642–13652, 2021.
[3]T. Brown, B. Mann, N. Ryder, M. Subbiah, J. D. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam,
G. Sastry, A. Askell, et al. Mô hình ngôn ngữ là người học few-shot. Advances in neural
information processing systems, 33:1877–1901, 2020.
[4]M. Chen, J. Tworek, H. Jun, Q. Yuan, H. P. de Oliveira Pinto, J. Kaplan, H. Edwards, Y. Burda,
N. Joseph, G. Brockman, A. Ray, R. Puri, G. Krueger, M. Petrov, H. Khlaaf, G. Sastry,
P. Mishkin, B. Chan, S. Gray, N. Ryder, M. Pavlov, A. Power, L. Kaiser, M. Bavarian, C. Winter,
P. Tillet, F. P. Such, D. Cummings, M. Plappert, F. Chantzis, E. Barnes, A. Herbert-Voss, W. H.
Guss, A. Nichol, A. Paino, N. Tezak, J. Tang, I. Babuschkin, S. Balaji, S. Jain, W. Saunders,
C. Hesse, A. N. Carr, J. Leike, J. Achiam, V. Misra, E. Morikawa, A. Radford, M. Knight,
M. Brundage, M. Murati, K. Mayer, P. Welinder, B. McGrew, D. Amodei, S. McCandlish,
I. Sutskever, và W. Zaremba. Đánh giá mô hình ngôn ngữ lớn được đào tạo trên mã, 2021.
[5]X. Chen, X. Wang, S. Changpinyo, A. Piergiovanni, P. Padlewski, D. Salz, S. Goodman,
A. Grycner, B. Mustafa, L. Beyer, A. Kolesnikov, J. Puigcerver, N. Ding, K. Rong, H. Akbari,
G. Mishra, L. Xue, A. V. Thapliyal, J. Bradbury, W. Kuo, M. Seyedhosseini, C. Jia, B. K.
Ayan, C. R. Ruiz, A. P. Steiner, A. Angelova, X. Zhai, N. Houlsby, và R. Soricut. PaLI: Một
mô hình ngôn ngữ-hình ảnh đa ngôn ngữ được quy mô kết hợp. Trong The Eleventh International Conference on
Learning Representations, 2023. URL https://openreview.net/forum?id=mWVoBz4W0u.
[6]A. Chowdhery, S. Narang, J. Devlin, M. Bosma, G. Mishra, A. Roberts, P. Barham, H. W.
Chung, C. Sutton, S. Gehrmann, et al. Palm: Mở rộng mô hình ngôn ngữ với pathways. arXiv
preprint arXiv:2204.02311, 2022.
[7]K. Gupta, J. Lazarow, A. Achille, L. S. Davis, V. Mahadevan, và A. Shrivastava. Layouttrans-
former: Tạo và hoàn thành layout với self-attention. Trong Proceedings of the IEEE/CVF
International Conference on Computer Vision, trang 1004–1014, 2021.
[8]X. Hou và L. Zhang. Phát hiện sự nổi bật: Một phương pháp phần dư quang phổ. Trong 2007 IEEE
Conference on computer vision and pattern recognition, trang 1–8. Ieee, 2007.
[9]H. Hsu, X. He, Y. Peng, H. Kong, và Q. Zhang. Posterlayout: Một benchmark và phương pháp
mới cho layout trình bày thị giác-văn bản nhận thức nội dung, 2023.
[10] Y. Hu, C.-H. Lee, T. Xie, T. Yu, N. A. Smith, và M. Ostendorf. Học trong ngữ cảnh cho theo
dõi trạng thái đối thoại few-shot. arXiv preprint arXiv:2203.08568, 2022.
[11] F. Huang, G. Li, X. Zhou, J. F. Canny, và Y. Li. Tạo mock-up giao diện người dùng từ
mô tả văn bản cấp cao với mô hình học sâu. arXiv preprint arXiv:2110.07775, 2021.
[12] M. Hui, Z. Zhang, X. Zhang, W. Xie, Y. Wang, và Y. Lu. Thống nhất tạo layout với
mô hình khuếch tán tách rời, 2023.
[13] S. Imani, L. Du, và H. Shrivastava. Mathprompter: Lập luận toán học sử dụng mô hình
ngôn ngữ lớn. arXiv preprint arXiv:2303.05398, 2023.
[14] N. Inoue, K. Kikuchi, E. Simo-Serra, M. Otani, và K. Yamaguchi. Layoutdm: Mô hình
khuếch tán rời rạc cho tạo layout có thể kiểm soát. arXiv preprint arXiv:2303.08137, 2023.
[15] Z. Jiang, H. Deng, Z. Wu, J. Guo, S. Sun, V. Mijovic, Z. Yang, J.-G. Lou, và D. Zhang.
Unilayout: Điều khiển transformer chuỗi-thành-chuỗi thống nhất cho tạo layout đồ họa.
arXiv preprint arXiv:2208.08037, 2022.
11

--- TRANG 12 ---
[16] A. A. Jyothi, T. Durand, J. He, L. Sigal, và G. Mori. Layoutvae: Tạo layout cảnh ngẫu nhiên
từ một tập nhãn. Trong Proceedings of the IEEE/CVF International Conference on
Computer Vision, trang 9895–9904, 2019.
[17] T. Khot, H. Trivedi, M. Finlayson, Y. Fu, K. Richardson, P. Clark, và A. Sabharwal.
Kích thích phân tách: Một phương pháp mô-đun để giải quyết các nhiệm vụ phức tạp. arXiv preprint
arXiv:2210.02406, 2022.
[18] K. Kikuchi, E. Simo-Serra, M. Otani, và K. Yamaguchi. Tạo layout đồ họa có ràng buộc
thông qua tối ưu hóa ẩn. Trong Proceedings of the 29th ACM International Conference on Multimedia,
trang 88–96, 2021.
[19] X. Kong, L. Jiang, H. Chang, H. Zhang, Y. Hao, H. Gong, và I. Essa. Blt: transformer layout
hai chiều cho tạo layout có thể kiểm soát. Trong Computer Vision–ECCV 2022: 17th European
Conference, Tel Aviv, Israel, October 23–27, 2022, Proceedings, Part XVII, trang 474–490.
Springer, 2022.
[20] H. W. Kuhn. Phương pháp Hungary cho bài toán phân công. Naval research logistics
quarterly, 2(1-2):83–97, 1955.
[21] H.-Y. Lee, L. Jiang, I. Essa, P. B. Le, H. Gong, M.-H. Yang, và W. Yang. Mạng thiết kế
thần kinh: Tạo layout đồ họa với ràng buộc. Trong Computer Vision–ECCV 2020: 16th
European Conference, Glasgow, UK, August 23–28, 2020, Proceedings, Part III 16, trang
491–506. Springer, 2020.
[22] J. Li, J. Yang, J. Zhang, C. Liu, C. Wang, và T. Xu. Gan layout có điều kiện thuộc tính
cho thiết kế đồ họa tự động. IEEE Transactions on Visualization and Computer Graphics, 27(10):
4039–4048, 2020.
[23] Y. Li, J. Amelot, X. Zhou, S. Bengio, và S. Si. Tự động hoàn thành thiết kế layout giao
diện người dùng sử dụng bộ giải mã cây dựa trên transformer. arXiv preprint arXiv:2001.05308, 2020.
[24] J. Lin, J. Guo, S. Sun, W. Xu, T. Liu, J.-G. Lou, và D. Zhang. Một phương pháp phân tích-
rồi-đặt để tạo layout đồ họa từ mô tả văn bản. Trong Proceedings of the IEEE/CVF
International Conference on Computer Vision (ICCV), 2023.
[25] H. Liu, C. Li, Q. Wu, và Y. J. Lee. Điều chỉnh hướng dẫn thị giác. Trong NeurIPS, 2023.
[26] J. Liu, D. Shen, Y. Zhang, B. Dolan, L. Carin, và W. Chen. Điều gì tạo nên ví dụ trong
ngữ cảnh tốt cho gpt-3? arXiv preprint arXiv:2101.06804, 2021.
[27] T. F. Liu, M. Craft, J. Situ, E. Yumer, R. Mech, và R. Kumar. Học ngữ nghĩa thiết kế
cho ứng dụng di động. Trong Proceedings of the 31st Annual ACM Symposium on User Interface
Software and Technology, UIST '18, trang 569–579, New York, NY, USA, 2018. Association
for Computing Machinery. ISBN 9781450359481. doi: 10.1145/3242587.3242650. URL
https://doi.org/10.1145/3242587.3242650.
[28] OpenAI. Báo cáo kỹ thuật gpt-4, 2023.
[29] A. Radford, J. W. Kim, C. Hallacy, A. Ramesh, G. Goh, S. Agarwal, G. Sastry, A. Askell,
P. Mishkin, J. Clark, et al. Học các mô hình thị giác có thể chuyển giao từ giám sát ngôn ngữ
tự nhiên. Trong International conference on machine learning, trang 8748–8763. PMLR, 2021.
[30] S. Rahman, V. P. Sermuga Pandian, và M. Jarke. Ruite: Tinh chỉnh thẩm mỹ layout ui sử dụng
bộ mã hóa transformer. Trong 26th International Conference on Intelligent User Interfaces-Companion,
trang 81–83, 2021.
[31] H. Touvron, T. Lavril, G. Izacard, X. Martinet, M.-A. Lachaux, T. Lacroix, B. Rozière, N. Goyal,
E. Hambro, F. Azhar, et al. Llama: Mô hình ngôn ngữ nền tảng mở và hiệu quả. arXiv
preprint arXiv:2302.13971, 2023.
[32] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, Ł. Kaiser, và
I. Polosukhin. Attention is all you need. Advances in neural information processing systems,
30, 2017.
12

--- TRANG 13 ---
[33] J. Wei, Y. Tay, R. Bommasani, C. Raffel, B. Zoph, S. Borgeaud, D. Yogatama, M. Bosma,
D. Zhou, D. Metzler, et al. Khả năng phát sinh của mô hình ngôn ngữ lớn. arXiv preprint
arXiv:2206.07682, 2022.
[34] J. Wei, X. Wang, D. Schuurmans, M. Bosma, E. Chi, Q. Le, và D. Zhou. Kích thích chuỗi
suy nghĩ kích thích lập luận trong mô hình ngôn ngữ lớn. arXiv preprint arXiv:2201.11903, 2022.
[35] K. Yang, D. Klein, N. Peng, và Y. Tian. Doc: Cải thiện sự gắn kết câu chuyện dài với
kiểm soát dàn ý chi tiết. arXiv preprint arXiv:2212.10077, 2022.
[36] K. Yang, N. Peng, Y. Tian, và D. Klein. Re3: Tạo ra những câu chuyện dài hơn với kích
thích đệ quy và sửa đổi. arXiv preprint arXiv:2210.06774, 2022.
[37] J. Zhang, J. Guo, S. Sun, J.-G. Lou, và D. Zhang. Layoutdiffusion: Cải thiện tạo layout
đồ họa bằng mô hình xác suất khuếch tán rời rạc. Trong Proceedings of the IEEE/CVF
International Conference on Computer Vision (ICCV), trang 7226–7236, October 2023.
[38] Z. Zhang, A. Zhang, M. Li, H. Zhao, G. Karypis, và A. Smola. Lập luận chuỗi suy nghĩ
đa phương thức trong mô hình ngôn ngữ. arXiv preprint arXiv:2302.00923, 2023.
[39] X. Zheng, X. Qiao, Y. Cao, và R. W. Lau. Mô hình tạo sinh nhận thức nội dung của
layout thiết kế đồ họa. ACM Transactions on Graphics (TOG), 38(4):1–15, 2019.
[40] X. Zhong, J. Tang, và A. J. Yepes. Publaynet: bộ dữ liệu lớn nhất từ trước đến nay cho
phân tích layout tài liệu, 2019.
[41] D. Zhou, N. Schärli, L. Hou, J. Wei, N. Scales, X. Wang, D. Schuurmans, O. Bousquet, Q. Le,
và E. Chi. Kích thích từ ít đến nhiều cho phép lập luận phức tạp trong mô hình ngôn ngữ lớn.
arXiv preprint arXiv:2205.10625, 2022.
[42] M. Zhou, C. Xu, Y. Ma, T. Ge, Y. Jiang, và W. Xu. Gan layout đồ họa nhận thức thành
phần cho thiết kế trình bày thị giác-văn bản. arXiv preprint arXiv:2205.00303, 2022.
13

--- TRANG 14 ---
A Rời rạc hóa Tọa độ
Trong công trình này, tọa độ yếu tố được quy mô tỉ lệ thành một canvas có kích thước CW×CH.
Chúng tôi tuân theo các đường cơ sở để chọn hai tham số này. Cụ thể, trong RICO, CW=90px, CH=
160px. Trong PubLayNet, CW=120px, CH=160px. Trong PosterLayout, CW=102px, CH=150px.
Trong WebUI, CW=120px, CH=120px. Sau đó, các tọa độ được rời rạc hóa thành các số nguyên
gần nhất.
B Kết quả và Phân tích Thí nghiệm Bổ sung
B.1 Tính Ổn định của Hiệu suất Tạo sinh
Đầu ra của LLMs thay đổi theo hạt giống ngẫu nhiên và siêu tham số (ví dụ: nhiệt độ). Tức là, đối
với cùng một ràng buộc đầu vào, LLMs có thể tạo ra nhiều layout hoàn toàn khác nhau. Vì các siêu
tham số là sự đánh đổi giữa chất lượng tạo sinh và tính đa dạng, chúng tôi cố định chúng thành
giá trị mặc định của OpenAI API và nghiên cứu tác động của hạt giống ngẫu nhiên đến hiệu suất
mô hình. Cụ thể, chúng tôi chạy suy luận trên tập thử nghiệm 10 lần, mỗi lần sử dụng một hạt
giống ngẫu nhiên khác nhau. Sau đó, chúng tôi tính toán trung bình và phương sai của mỗi thước
đo định lượng (xem Bảng 8). Các phương sai nhỏ chỉ ra tính ổn định của hiệu suất LayoutPrompter
dưới các hạt giống ngẫu nhiên khác nhau.
RICO PubLayNet
Nhiệm vụ mIoU ↑ FID↓ Căn chỉnh ↓ Chồng chéo ↓ Vi phạm % ↓ mIoU↑ FID↓ Căn chỉnh ↓ Chồng chéo ↓ Vi phạm % ↓
Gen-T 0.368±0.002 3.118±0.045 0.130±0.010 0.498±0.004 0.546±0.148 0.343±0.001 4.014±0.067 0.042±0.007 0.047±0.002 0.490±0.059
Gen-TS 0.504±0.001 1.489±0.037 0.155±0.003 0.550±0.005 0.134±0.025 0.393±0.001 2.016±0.024 0.050±0.008 0.098±0.002 0.
Bảng 8: Hiệu quả của hạt giống ngẫu nhiên. Trong thí nghiệm này, chúng tôi tắt bộ xếp hạng layout
để loại bỏ tác động của cơ chế xếp hạng đến hiệu suất mô hình.
B.2 Hiệu quả của Số lượng Mẫu
Chúng tôi tiến hành thí nghiệm loại bỏ về số lượng mẫu kích thích. Hình 7 hiển thị kết quả định
tính zero-shot (N = 0) trên Gen-T. Rõ ràng là LLMs thất bại trong việc tạo ra layout hợp lý trong
sơ đồ zero-shot. Bảng 9 hiển thị so sánh định lượng của nhiệm vụ Gen-T trên RICO. Kết quả chỉ
ra rằng số lượng mẫu kích thích chủ yếu ảnh hưởng đến mIoU và FID. Cụ thể, khi số lượng mẫu
kích thích tăng, mIoU và FID được cải thiện. Tóm lại, số lượng mẫu có hiệu quả tích cực đối với
hiệu suất của LayoutPrompter.
PubLayNet RICO
Hình 7: Kết quả zero-shot trên nhiệm vụ Gen-T.
RICO
Nhiệm vụ # mẫu mIoU ↑FID↓Căn chỉnh ↓Chồng chéo ↓Vi phạm % ↓
Gen-T1 0.381 5.007 0.115 0.491 0.85
3 0.413 5.098 0.120 0.492 0.51
5 0.414 4.521 0.114 0.492 0.65
10 0.427 3.523 0.092 0.486 0.67
Bảng 9: Nghiên cứu loại bỏ về số lượng mẫu kích thích. Chúng tôi chạy thí nghiệm trên 1,000
mẫu thử nghiệm.
B.3 Khả năng Tổng quát hóa
Để điều tra khả năng tổng quát hóa của LayoutPrompter, chúng tôi tính toán độ tương tự DocSim
giữa các layout được tạo ra và các layout kích thích của chúng (xem Bảng 10). DocSim của LayoutFormer++
được tính toán giữa các layout được tạo ra và các layout huấn luyện. Kết quả định lượng cho thấy
LayoutPrompter đạt được điểm số cạnh tranh hoặc thậm chí tốt hơn so với LayoutFormer++, chỉ
ra rằng LayoutPrompter có khả năng tổng quát hóa gần với phương pháp dựa trên huấn luyện.
Ngoài ra, chúng tôi hiển thị kết quả định tính của các layout được tạo ra và các layout kích thích
của chúng trong Hình 8. Kết quả chứng minh rằng LayoutPrompter có khả năng tạo ra các biến
thể có ý nghĩa khác với các layout kích thích.
Phương pháp RICO PubLayNet
LayoutFormer++ 0.8472 0.8266
LayoutPrompter 0.8563 0.8119
Bảng 10: DocSim trên nhiệm vụ Gen-T. DocSim càng nhỏ, khả năng tổng quát hóa càng tốt.
Layout Thử nghiệm Layout Được Truy xuất Layout Thử nghiệm Layout Được Truy xuấtPubLayNet
 RICO
Layout Được Tạo Layout Được Truy xuất Layout Được Tạo Layout Được Truy xuấtPubLayNet RICO
Hình 8: Kết quả định tính của các layout được tạo ra và các layout được truy xuất tương ứng trên
nhiệm vụ Gen-T. Mỗi trường hợp chứa 2 layout được tạo ra.
15

--- TRANG 16 ---
C Kết quả Định tính Bổ sung
Trong phần này, chúng tôi trình bày kết quả định tính bổ sung của LayoutPrompter. Những kết quả
này tiếp tục chứng minh tính linh hoạt và hiệu quả của phương pháp chúng tôi, có thể tạo ra các
layout chất lượng cao và tuân thủ ràng buộc trên nhiều nhiệm vụ tạo layout.
C.1 Tạo sinh Có điều kiện trên Loại Yếu tố
Ràng buộc Loại Yếu tố
(4) hình nền, hình ảnh, nút văn bản*5(1) (2) (3) (4) (5) (6)
(1) biểu tượng, đầu vào, văn bản*8, nút văn bản*3, thanh công cụ
(3) biểu tượng, mục danh sách*6, văn bản*7, thanh công cụ(2) hình nền, biểu tượng*5, hình ảnh*3, thanh trượt, văn bản*3, thanh công cụ 
(6) quảng cáo, biểu tượng*3, hình ảnh*6, văn bản, thanh công cụ, xem web*2(5) hình nền, biểu tượng, hình ảnh*2, văn bản*3, nút văn bản*3
(a) RICO
Ràng buộc Loại Yếu tố
(4) hình, văn bản*6, tiêu đề*2(1) (2) (3) (4) (5) (6)
(1) văn bản*11, tiêu đề*2
(3) bảng, văn bản*5(2) bảng, văn bản*5, tiêu đề
(6) hình, văn bản*6, tiêu đề*2(5) bảng, văn bản*6, tiêu đề*2
(b) PubLayNet
Hình 9: Kết quả định tính của Gen-T trên RICO và PubLayNet. Các ràng buộc loại yếu tố nằm
trong bảng.
16

--- TRANG 17 ---
C.2 Tạo sinh Có điều kiện trên Loại Yếu tố và Kích thước
Ràng buộc Loại Yếu tố và Kích thước
(4) biểu tượng 7 7, hình ảnh 69 39, văn bản 90 5, văn bản 90 6, nút văn bản 83 38(1) (2) (3) (4) (5) (6)
(1) quảng cáo 70 10, hình nền 90 144, hình ảnh 21 7, văn bản 90 25, văn bản 90 8, nút văn bản 54 10, nút văn bản 
54 10, nút văn bản 8 7, nút văn bản 33 7, nút văn bản 54 10, xem web 70 10, xem web 70 10
(3) đầu vào 90 110, văn bản 48 8, văn bản 38 8, nút văn bản 28 9, nút văn bản 28 9, thanh công cụ 90 16(2) biểu tượng 12 12, văn bản 29 5, nút văn bản 85 10, nút văn bản 85 10, thanh công cụ 90 12
(6) hình ảnh 71 60, văn bản 81 9, văn bản 76 26, nút văn bản 72 16(5) đầu vào 53 11, công tắc bật/tắt 85 11, nút radio 17 11, nút radio 19 11, văn bản 15 13, văn bản 74 5, văn bản 26 4, nút 
văn bản 15 9, nút văn bản 15 8, nút văn bản 45 7, nút văn bản 45 7
(a) RICO
Ràng buộc Loại Yếu tố và Kích thước
(4) bảng 97 18, văn bản 69 1, văn bản 58 1, văn bản 47 23, văn bản 47 16, văn bản 47 56, văn bản 47 52, văn bản 47 21, văn bản 47 21, tiêu đề 27 2(1) (2) (3) (4) (5) (6)
(1) hình 90 56, bảng 99 46, văn bản 99 4, văn bản 32 1, văn bản 99 3, văn bản 47 11, văn bản 47 11
(3) hình 47 64, bảng 97 33, văn bản 89 2, văn bản 39 5, văn bản 47 81, văn bản 44 15, văn bản 47 4(2) hình 65 74, văn bản 99 13, văn bản 47 16, văn bản 47 39, văn bản 47 23
(6) hình 101 44, hình 101 50, văn bản 99 11, văn bản 99 13(5) hình 101 93, văn bản 49 25, văn bản 49 25, văn bản 46 7, văn bản 47 7 
(b) PubLayNet
Hình 10: Kết quả định tính của Gen-TS trên RICO và PubLayNet. Các ràng buộc loại yếu tố và
kích thước nằm trong bảng.
17

--- TRANG 18 ---
C.3 Tạo sinh Có điều kiện trên Mối quan hệ Yếu tố
Ràng buộc Mối quan hệ Yếu tố
(4) đầu vào*2, văn bản*3, nút văn bản*4, nút văn bản 7 dưới canvas, văn bản 2 bằng đầu vào 0, văn bản 4 trên đầu vào 0, nút văn bản 6 
nhỏ hơn đầu vào 0, văn bản 3 nhỏ hơn đầu vào 1, nút văn bản 7 nhỏ hơn đầu vào 1, nút văn bản 7 dưới đầu vào 1, nút văn bản 6 
lớn hơn văn bản 3, nút văn bản 6 dưới văn bản 4(1) (2) (3) (4) (5) (6)
(1) hình nền, hình ảnh, văn bản, nút văn bản*2, văn bản 2 trung tâm canvas, nút văn bản 3 trung tâm canvas, văn bản 2 nhỏ hơn 
hình nền 0
(3) biểu tượng, mục danh sách*6, văn bản*7, thanh công cụ, mục danh sách 2 trên canvas, mục danh sách 4 trung tâm canvas, mục danh sách 
6 trung tâm canvas, mục danh sách 1 dưới biểu tượng 0, mục danh sách 2 lớn hơn biểu tượng 0, mục danh sách 4 lớn hơn biểu tượng 0, văn bản 7 phải biểu tượng 0, thanh công cụ 14 trên mục danh sách 1, mục 
danh sách 3 bằng mục danh sách 2, mục danh sách 5 dưới mục danh sách 2, văn bản 7 trên mục danh sách 2, văn bản 13 nhỏ hơn mục danh sách 2, văn bản 7 nhỏ hơn 
mục danh sách 3(2) hình ảnh, văn bản*4, nút văn bản, văn bản 4 dưới hình ảnh 0, văn bản 3 lớn hơn văn bản 2, nút văn bản 5 dưới văn bản 4
(6) biểu tượng*3, hình ảnh, đầu vào*2, nút văn bản*3, thanh công cụ, đầu vào 5 trung tâm canvas, nút văn bản 6 trung tâm canvas, biểu tượng 2 bằng 
biểu tượng 1, nút văn bản 6 lớn hơn biểu tượng 1, nút văn bản 8 lớn hơn biểu tượng 1, đầu vào 4 dưới hình ảnh 3, nút văn bản 8 nhỏ hơn hình ảnh 3, 
nút văn bản 7 dưới đầu vào 4, nút văn bản 8 lớn hơn đầu vào 5, nút văn bản 8 dưới đầu vào 5, nút văn bản 8 lớn hơn nút văn bản 6(5) hình ảnh, văn bản*3, nút văn bản*3, văn bản 2 trên canvas, văn bản 3 dưới hình ảnh 0, văn bản 3 dưới văn bản 2, nút văn bản 5 dưới 
văn bản 2, nút văn bản 5 trên văn bản 3
(a) RICO
Ràng buộc Mối quan hệ Yếu tố
(4) văn bản*13, tiêu đề*2, tiêu đề 13 trên canvas, văn bản 4 dưới văn bản 0, văn bản 2 dưới văn bản 1, văn bản 4 dưới văn bản 1, văn bản 6 nhỏ hơn 
văn bản 1, văn bản 9 lớn hơn văn bản 1, tiêu đề 13 trên văn bản 1, tiêu đề 14 nhỏ hơn văn bản 1, tiêu đề 13 nhỏ hơn văn bản 2, văn bản 8 lớn hơn văn bản 3, văn bản 9 
dưới văn bản 3, văn bản 6 dưới văn bản 4, văn bản 8 dưới văn bản 4, văn bản 10 lớn hơn văn bản 4, văn bản 9 dưới văn bản 6, văn bản 12 lớn hơn văn bản 
6, tiêu đề 13 lớn hơn văn bản 6, văn bản 10 lớn hơn văn bản 8, văn bản 12 nhỏ hơn văn bản 9, văn bản 12 nhỏ hơn văn bản 10, tiêu đề 13 nhỏ hơn văn bản 10, 
tiêu đề 14 trên văn bản 10, văn bản 12 nhỏ hơn văn bản 11(1) (2) (3) (4) (5) (6)
(1) bảng, văn bản*4, văn bản 4 dưới văn bản 1, văn bản 4 nhỏ hơn văn bản 3
(3) hình, văn bản*5, văn bản 1 trung tâm canvas, văn bản 5 dưới canvas, văn bản 5 dưới văn bản 2(2) hình, văn bản*3, văn bản 2 nhỏ hơn hình 0, văn bản 2 dưới hình 0
(6) hình, danh sách*2, văn bản, văn bản 3 dưới hình 0, danh sách 2 phải danh sách 1(5) hình, văn bản*5, tiêu đề, văn bản 5 nhỏ hơn hình 0, văn bản 5 dưới hình 0, văn bản 5 nhỏ hơn văn bản 2, tiêu đề 6 dưới văn bản 3, tiêu đề 
6 trung tâm văn bản 5
(b) PubLayNet
Hình 11: Kết quả định tính của Gen-R trên RICO và PubLayNet. Các ràng buộc mối quan hệ yếu tố
nằm trong bảng.
18

--- TRANG 19 ---
C.4 Hoàn thành Layout
(1) (2) (3) (4) (5) (6)
(7) (8) (9) (10) (11) (12)
(a) RICO
(1) (2) (3) (4) (5) (6)
(7) (8) (9) (10) (11) (12)
(b) PubLayNet
Hình 12: Kết quả định tính của hoàn thành trên RICO và PubLayNet.
19

--- TRANG 20 ---
C.5 Tinh chỉnh Layout
(1) (2) (3)
(4) (5) (6)
(a) RICO
(4) (5) (6)(1) (2) (3)
(b) PubLayNet
Hình 13: Kết quả định tính của tinh chỉnh trên RICO và PubLayNet. Lưu ý rằng mỗi nhóm có hai
layout. Layout bên trái là layout nhiễu, và layout bên phải là layout được tinh chỉnh.
20

--- TRANG 21 ---
C.6 Tạo Layout Nhận thức Nội dung
(1) (2) (3) (4) (5) (6)
(7) (8) (9) (10) (11) (12)
Hình 14: Kết quả định tính của tạo layout nhận thức nội dung trên PosterLayout.
C.7 Text-to-Layout
Mô tả Văn bản
(4) Một trang giới thiệu về các chuyến tham quan nhà. Trang này nên có tiêu đề, "chuyến tham quan nhà". Ngoài ra, có bốn nhóm 
và mỗi nhóm có một hình ảnh và một tiêu đề.(1) (2) (3) (4) (5) (6)
(1) Một trang để nộp đơn yêu cầu bảo hiểm. Nên có hai hộp văn bản. Một cho tiêu đề 'Cần nộp đơn yêu cầu bảo hiểm' và một 
là mô tả ngắn. Hai nút cần thiết để nhấp vào nộp đơn hoặc quản lý yêu cầu bảo hiểm.
(3) Một trang giới thiệu về trình chỉnh sửa trực tuyến. Trang này nên chứa một hình ảnh, và slogan "Trình Tạo Infographics, Sơ đồ, & Biểu đồ Trực tuyến" 
để có giới thiệu ngắn gọn, và mô tả thêm về dịch vụ cụ thể của trình chỉnh sửa. Sau đó cần một nút để người dùng nhấp vào để tìm hiểu thông tin.(2) Một trang footer hiển thị trang chủ của một công ty. Nên có năm mục liên kết văn bản. Và các liên kết văn bản 
nên được mở rộng. Người dùng có thể truy cập thông tin khác nhau thông qua các liên kết này.
(6) Một trang header để điều hướng của một cửa hàng trực tuyến. Trang này nên có thông báo để giải thích sản phẩm đã hết hàng, logo, và hai liên kết "TRANG CHỦ" và "MUA MÓNG DITTO" 
để người dùng quay lại trang chủ và xem sản phẩm để mua sắm. Ngoài ra, hai nút cho tìm kiếm và giỏ hàng là cần thiết.(5) Một trang giới thiệu về dịch vụ được cung cấp bởi một trang web. Trang này nên có ba nhóm thông tin: 
"Phát triển Web" "Truyền thông Xã hội", và "Xây dựng Liên kết". Mỗi nhóm nên bao gồm một hình ảnh nhỏ, một tiêu đề, một 
giới thiệu thêm, và một liên kết "ĐỌC THÊM" để biết thêm thông tin bằng cách nhấp vào.
Hình 15: Kết quả định tính của text-to-layout trên WebUI. Các mô tả văn bản nằm trong bảng.
21

--- TRANG 22 ---
D Ví dụ về Lời nhắc
Ở đây, chúng tôi hiển thị một ví dụ lời nhắc cho mỗi nhiệm vụ tạo layout, bao gồm Gen-T (Bảng 11),
Gen-TS (Bảng 12), Gen-R (Bảng 13), hoàn thành (Bảng 14), tinh chỉnh (Bảng 15), tạo layout
nhận thức nội dung (Bảng 16), và text-to-layout (Bảng 17).
Lời mở đầu
Vui lòng tạo một layout dựa trên thông tin đã cho.
Mô tả Nhiệm vụ: tạo sinh có điều kiện trên các loại yếu tố đã cho
Lĩnh vực Layout: layout android
Kích thước Canvas: chiều rộng canvas là 90px, chiều cao canvas là 160px
Mẫu 1
Ràng buộc Loại Yếu tố: image |image |image |image |text|text|text button
<html>
<body>
<div class="image" style="left:15px; top:42px; width:51px; height:82px"></div>
<div class="image" style="left:52px; top:77px; width:22px; height:50px"></div>
<div class="image" style="left:54px; top:96px; width:18px; height:14px"></div>
<div class="image" style="left:0px; top:143px; width:90px; height:1px"></div>
<div class="text" style="left:34px; top:15px; width:21px; height:7px"></div>
<div class="text" style="left:22px; top:22px; width:44px; height:9px"></div>
<div class="text button" style="left:2px; top:147px; width:41px; height:10px"></div>
</body>
</html>
Mẫu 2
Ràng buộc Loại Yếu tố: image |image |image |image |pager indicator |text|text|text button |text button |text button
<html>
<body>
<div class="image" style="left:0px; top:5px; width:90px; height:93px"></div>
<div class="image" style="left:30px; top:8px; width:29px; height:10px"></div>
<div class="image" style="left:38px; top:86px; width:12px; height:12px"></div>
<div class="image" style="left:32px; top:86px; width:24px; height:12px"></div>
<div class="pager indicator" style="left:0px; top:119px; width:90px; height:5px"></div>
<div class="text" style="left:0px; top:98px; width:90px; height:10px"></div>
<div class="text" style="left:0px; top:109px; width:90px; height:9px"></div>
<div class="text button" style="left:0px; top:124px; width:45px; height:10px"></div>
<div class="text button" style="left:45px; top:124px; width:45px; height:10px"></div>
<div class="text button" style="left:0px; top:138px; width:90px; height:11px"></div>
</body>
</html>
......
Mẫu Thử nghiệm
Ràng buộc Loại Yếu tố: icon|image |image |text|text|text button |toolbar
(Được tạo ra bởi LLMs)
Bảng 11: Ví dụ lời nhắc của Gen-T trên RICO.
22

--- TRANG 23 ---
Lời mở đầu
Vui lòng tạo một layout dựa trên thông tin đã cho.
Mô tả Nhiệm vụ: tạo sinh có điều kiện trên các loại yếu tố và kích thước đã cho
Lĩnh vực Layout: layout android
Kích thước Canvas: chiều rộng canvas là 90px, chiều cao canvas là 160px
Mẫu 1
Ràng buộc Loại Yếu tố và Kích thước: icon 12 12 |image 0 0 |input 81 10 |input 81 10 |text 81 4 |
text 22 4 |text button 85 10 |text button 10 4 |toolbar 90 12
<html>
<body>
<div class="icon" style="left:0px; top:5px; width:12px; height:12px"></div>
<div class="image" style="left:12px; top:11px; width:0px; height:0px"></div>
<div class="input" style="left:4px; top:40px; width:81px; height:10px"></div>
<div class="input" style="left:4px; top:28px; width:81px; height:10px"></div>
<div class="text" style="left:4px; top:23px; width:81px; height:4px"></div>
<div class="text" style="left:13px; top:9px; width:22px; height:4px"></div>
<div class="text button" style="left:2px; top:62px; width:85px; height:10px"></div>
<div class="text button" style="left:75px; top:43px; width:10px; height:4px"></div>
<div class="toolbar" style="left:0px; top:5px; width:90px; height:12px"></div>
</body>
</html>
Mẫu 2
Ràng buộc Loại Yếu tố và Kích thước: card 86 41 |icon 12 12 |input 64 12 |input 78 12 |input 78 9 |input 61 9 |
text 15 5 |text button 25 7 |text button 13 7 |text button 62 3 |toolbar 90 12
<html>
<body>
<div class="card" style="left:1px; top:19px; width:86px; height:41px"></div>
<div class="icon" style="left:0px; top:5px; width:12px; height:12px"></div>
<div class="input" style="left:5px; top:36px; width:64px; height:12px"></div>
<div class="input" style="left:5px; top:23px; width:78px; height:12px"></div>
<div class="input" style="left:5px; top:23px; width:78px; height:9px"></div>
<div class="input" style="left:5px; top:36px; width:61px; height:9px"></div>
<div class="text" style="left:15px; top:8px; width:15px; height:5px"></div>
<div class="text button" style="left:60px; top:51px; width:25px; height:7px"></div>
<div class="text button" style="left:70px; top:38px; width:13px; height:7px"></div>
<div class="text button" style="left:13px; top:62px; width:62px; height:3px"></div>
<div class="toolbar" style="left:0px; top:5px; width:90px; height:12px"></div>
</body>
</html>
......
Mẫu Thử nghiệm
Ràng buộc Loại Yếu tố và Kích thước: icon 12 12 |input 83 9 |input 83 9 |text 83 8 |text button 19 9 |
text button 77 5 |toolbar 90 12
(Được tạo ra bởi LLMs)
Bảng 12: Ví dụ lời nhắc của Gen-TS trên RICO.
23

--- TRANG 24 ---
Lời mở đầu
Vui lòng tạo một layout dựa trên thông tin đã cho.
Mô tả Nhiệm vụ: tạo sinh có điều kiện trên các mối quan hệ yếu tố đã cho
Lĩnh vực Layout: layout android
Kích thước Canvas: chiều rộng canvas là 90px, chiều cao canvas là 160px
Mẫu 1
Ràng buộc Loại Yếu tố: image |image |image |text|text|text|text|text button |toolbar
Ràng buộc Mối quan hệ Yếu tố: text 5 bottom canvas |image 1 larger image 0 |text 3 larger image 0 |text 5 larger image 0 |toolbar 8
larger image 0 |image 2 equal image 1 |text 4 smaller image 2 |text 6 smaller image 2 |toolbar 8 top text 4
<html>
<body>
<div class="image" style="left:0px; top:7px; width:7px; height:7px"></div>
<div class="image" style="left:31px; top:33px; width:28px; height:29px"></div>
<div class="image" style="left:30px; top:101px; width:28px; height:29px"></div>
<div class="text" style="left:8px; top:8px; width:28px; height:5px"></div>
<div class="text" style="left:24px; top:66px; width:40px; height:5px"></div>
<div class="text" style="left:18px; top:133px; width:52px; height:5px"></div>
<div class="text" style="left:18px; top:140px; width:51px; height:7px"></div>
<div class="text button" style="left:75px; top:5px; width:14px; height:11px"></div>
<div class="toolbar" style="left:0px; top:5px; width:90px; height:11px"></div>
</body>
</html>
Mẫu 2
Ràng buộc Loại Yếu tố: text|text|text|text|text button
Ràng buộc Mối quan hệ Yếu tố: text 3 bottom text 0 |text 2 equal text 1
<html>
<body>
<div class="text" style="left:0px; top:7px; width:90px; height:5px"></div>
<div class="text" style="left:3px; top:19px; width:83px; height:30px"></div>
<div class="text" style="left:3px; top:57px; width:83px; height:30px"></div>
<div class="text" style="left:3px; top:95px; width:83px; height:52px"></div>
<div class="text button" style="left:0px; top:148px; width:90px; height:11px"></div>
</body>
</html>
......
Mẫu Thử nghiệm
Ràng buộc Loại Yếu tố: icon|image |text|text|text|text|text button |text button
Ràng buộc Mối quan hệ Yếu tố: text 3 top canvas |text 5 top canvas |text 2 right icon 0 |text button 6 bottom icon 0 |
text 3 bottom image 1 |text button 7 bottom text 4
(Được tạo ra bởi LLMs)
Bảng 13: Ví dụ lời nhắc của Gen-R trên RICO.
24

--- TRANG 25 ---
Lời mở đầu
Vui lòng tạo một layout dựa trên thông tin đã cho.
Mô tả Nhiệm vụ: hoàn thành layout
Lĩnh vực Layout: layout android
Kích thước Canvas: chiều rộng canvas là 90px, chiều cao canvas là 160px
Mẫu 1
Layout Một phần: image 21 5 47 40
<html>
<body>
<div class="image" style="left:21px; top:5px; width:47px; height:40px"></div>
<div class="text button" style="left:2px; top:53px; width:84px; height:15px"></div>
<div class="image" style="left:7px; top:74px; width:9px; height:5px"></div>
<div class="text" style="left:19px; top:74px; width:67px; height:5px"></div>
<div class="text button" style="left:2px; top:85px; width:84px; height:14px"></div>
<div class="text button" style="left:1px; top:104px; width:86px; height:12px"></div>
<div class="text button" style="left:1px; top:136px; width:86px; height:11px"></div>
</body>
</html>
Mẫu 2
Layout Một phần: image 17 5 56 11
<html>
<body>
<div class="image" style="left:17px; top:5px; width:56px; height:11px"></div>
<div class="image" style="left:0px; top:17px; width:90px; height:48px"></div>
<div class="text" style="left:2px; top:65px; width:86px; height:48px"></div>
<div class="image" style="left:0px; top:108px; width:90px; height:5px"></div>
<div class="pager indicator" style="left:38px; top:114px; width:12px; height:8px"></div>
<div class="text button" style="left:3px; top:124px; width:82px; height:13px"></div>
<div class="text button" style="left:62px; top:137px; width:17px; height:10px"></div>
<div class="text" style="left:10px; top:140px; width:51px; height:6px"></div>
</body>
</html>
......
Mẫu Thử nghiệm
Layout Một phần: image 12 10 65 32
(Được tạo ra bởi LLMs)
Bảng 14: Ví dụ lời nhắc của hoàn thành layout trên RICO.
25

--- TRANG 26 ---
Lời mở đầu
Vui lòng tạo một layout dựa trên thông tin đã cho.
Mô tả Nhiệm vụ: tinh chỉnh layout
Lĩnh vực Layout: layout android
Kích thước Canvas: chiều rộng canvas là 90px, chiều cao canvas là 160px
Mẫu 1
Layout Nhiễu: advertisement 11 18 70 11 |icon 76 5 11 11 |icon 0 6 12 10 |image 16 8 13 11 |text 30 3 21 5 |
text 29 11 23 4 |toolbar 0 5 88 16 |web view 9 16 69 12 |web view 11 17 70 12 |web view 0 20 90 140
<html>
<body>
<div class="advertisement" style="left:10px; top:18px; width:70px; height:11px"></div>
<div class="icon" style="left:77px; top:6px; width:12px; height:11px"></div>
<div class="icon" style="left:0px; top:5px; width:12px; height:13px"></div>
<div class="image" style="left:15px; top:6px; width:14px; height:11px"></div>
<div class="text" style="left:30px; top:6px; width:21px; height:6px"></div>
<div class="text" style="left:30px; top:12px; width:23px; height:5px"></div>
<div class="toolbar" style="left:0px; top:5px; width:90px; height:13px"></div>
<div class="web view" style="left:10px; top:18px; width:70px; height:11px"></div>
<div class="web view" style="left:10px; top:18px; width:70px; height:11px"></div>
<div class="web view" style="left:0px; top:18px; width:90px; height:141px"></div>
</body>
</html>
Mẫu 2
Layout Nhiễu: advertisement 0 4 89 11 |background image 0 4 89 145 |icon 4 17 6 7 |icon 11 19 4 6 |image 1 8 5 5 |
image 0 13 20 10 |text 35 8 18 5 |text button 80 6 7 3 |text button 16 14 64 8 |text button 82 14 9 7 |
text button 10 29 68 11 |text button 0 39 88 12 |web view 10 2 69 12 |web view 9 6 69 10
<html>
<body>
<div class="advertisement" style="left:0px; top:5px; width:90px; height:10px"></div>
<div class="background image" style="left:0px; top:5px; width:90px; height:144px"></div>
<div class="icon" style="left:5px; top:19px; width:4px; height:4px"></div>
<div class="icon" style="left:11px; top:19px; width:4px; height:4px"></div>
<div class="image" style="left:2px; top:7px; width:5px; height:5px"></div>
<div class="image" style="left:0px; top:16px; width:21px; height:7px"></div>
<div class="text" style="left:35px; top:7px; width:18px; height:5px"></div>
<div class="text button" style="left:81px; top:8px; width:6px; height:5px"></div>
<div class="text button" style="left:16px; top:16px; width:63px; height:10px"></div>
<div class="text button" style="left:81px; top:16px; width:8px; height:7px"></div>
<div class="text button" style="left:11px; top:27px; width:68px; height:10px"></div>
<div class="text button" style="left:0px; top:41px; width:90px; height:11px"></div>
<div class="web view" style="left:10px; top:5px; width:70px; height:10px"></div>
<div class="web view" style="left:10px; top:5px; width:70px; height:10px"></div>
</body>
</html>
......
Mẫu Thử nghiệm
Layout Nhiễu: icon 68 5 10 12 |icon 1 5 9 12 |icon 80 5 12 13 |text 14 7 56 2 |toolbar 0 5 90 10 |
web view 0 18 90 130 |web view 0 19 90 130
(Được tạo ra bởi LLMs)
Bảng 15: Ví dụ lời nhắc của tinh chỉnh layout trên RICO.
26

--- TRANG 27 ---
Lời mở đầu
Vui lòng tạo một layout dựa trên thông tin đã cho.
Mô tả Nhiệm vụ: tạo layout nhận thức nội dung
Lĩnh vực Layout: layout poster
Kích thước Canvas: chiều rộng canvas là 102px, chiều cao canvas là 150px
Mẫu 1
Ràng buộc Nội dung: trái 25px, trên 25px, chiều rộng 30px, chiều cao 12px
Ràng buộc Loại Yếu tố: logo | text | underlay | text | text
<html>
<body>
<div class="logo" style="left:34px; top:14px; width:66px; height:23px"></div>
<div class="text" style="left:10px; top:25px; width:94px; height:36px"></div>
<div class="underlay" style="left:18px; top:37px; width:85px; height:48px"></div>
<div class="text" style="left:36px; top:40px; width:64px; height:45px"></div>
<div class="text" style="left:28px; top:48px; width:74px; height:53px"></div>
</body>
</html>
Mẫu 2
Ràng buộc Nội dung: trái 23px, trên 60px, chiều rộng 56px, chiều cao 69px
Ràng buộc Loại Yếu tố: logo | text | underlay | text
<html>
<body>
<div class="logo" style="left:35px; top:0px; width:66px; height:10px"></div>
<div class="text" style="left:15px; top:22px; width:86px; height:33px"></div>
<div class="underlay" style="left:29px; top:37px; width:73px; height:49px"></div>
<div class="text" style="left:35px; top:40px; width:67px; height:47px"></div>
</body>
</html>
......
Mẫu Thử nghiệm
Ràng buộc Nội dung: trái 26px, trên 62px, chiều rộng 50px, chiều cao 60px
Ràng buộc Loại Yếu tố: logo | text | text | text | underlay | text
(Được tạo ra bởi LLMs)
Bảng 16: Ví dụ lời nhắc của tạo layout nhận thức nội dung trên PosterLayout.
27

--- TRANG 28 ---
Lời mở đầu
Vui lòng tạo một layout dựa trên thông tin đã cho.
Mô tả Nhiệm vụ: text-to-layout
Lĩnh vực Layout: layout web
Kích thước Canvas: chiều rộng canvas là 120px, chiều cao canvas là 120px
Mẫu 1
Văn bản: Một trang header cho công ty Fashionably Latellc. Trên trang này, nên bao gồm
tên của công ty, ba liên kết điều hướng "Trang chủ" "Các Mặt hàng Thời trang của Chúng tôi" và "Chính sách Trả hàng/Hoàn tiền" để người dùng
nhấp vào quay lại trang chủ, xem các mặt hàng của công ty, và biết chính sách trả hàng hoặc hoàn tiền. Bên cạnh đó, cần có
ba biểu tượng cho đăng nhập, tìm kiếm, và giỏ hàng.
<html>
<body>
<div class="icon" style="left:101px; top:3px; width:2px; height:2px"></div>
<div class="icon" style="left:106px; top:3px; width:2px; height:2px"></div>
<div class="icon" style="left:110px; top:2px; width:5px; height:5px"></div>
<div class="link" style="left:35px; top:3px; width:4px; height:2px"></div>
<div class="link" style="left:42px; top:3px; width:17px; height:2px"></div>
<div class="link" style="left:62px; top:3px; width:16px; height:2px"></div>
<div class="title" style="left:5px; top:3px; width:24px; height:3px"></div>
</body>
</html>
Mẫu 2
Văn bản: Một trang header cho trang web Png AAA. Nên có logo ở bên trái, và ba
liên kết "ĐĂNG NHẬP" "ĐĂNG KÝ", và "TẢI LÊN", để người dùng có thể nhấp vào chúng để đăng nhập, tạo tài khoản, và tải lên gì đó.
<html>
<body>
<div class="link" style="left:88px; top:2px; width:5px; height:2px"></div>
<div class="link" style="left:97px; top:2px; width:6px; height:2px"></div>
<div class="link" style="left:110px; top:2px; width:6px; height:2px"></div>
<div class="logo" style="left:2px; top:1px; width:15px; height:4px"></div>
</body>
</html>
......
Mẫu Thử nghiệm
Văn bản: Một trang header của trang web "homment". Trên trang này, nên bao gồm logo
của trang web. Năm liên kết ("Mới nhất", "Top100", "Giới thiệu", "Đăng ký", và "Đăng nhập") một nút "Tạo" và một biểu tượng có trên trang.
(Được tạo ra bởi LLMs)
Bảng 17: Ví dụ lời nhắc của text-to-layout trên WebUI.
28
