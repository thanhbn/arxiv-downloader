# Cắt tỉa Mạng nơ-ron Kháng công kích mà không cần Ví dụ Đối kháng

Tong Jian1,y, Zifeng Wang1,y, Yanzhi Wang2, Jennifer Dy1, Stratis Ioannidis1
Khoa Kỹ thuật Điện và Máy tính
Đại học Northeastern
1fjian, zifengwang, jdy, ioannidis g@ece.neu.edu
2yanz.wang@northeastern.edu

Tóm tắt—Cắt tỉa đối kháng nén các mô hình trong khi bảo tồn tính kháng cự. Các phương pháp hiện tại yêu cầu truy cập vào các ví dụ đối kháng trong quá trình cắt tỉa. Điều này làm cản trở đáng kể hiệu quả huấn luyện. Hơn nữa, khi các cuộc tấn công đối kháng và phương pháp huấn luyện mới phát triển với tốc độ nhanh chóng, các phương pháp cắt tỉa đối kháng cần được điều chỉnh tương ứng để theo kịp. Trong nghiên cứu này, chúng tôi đề xuất một khung làm việc mới để cắt tỉa một mạng nơ-ron kháng cự đã được huấn luyện trước đó trong khi duy trì tính kháng đối kháng, mà không cần tạo thêm các ví dụ đối kháng. Chúng tôi tận dụng việc tự chưng cất đồng thời và cắt tỉa để bảo tồn kiến thức trong mô hình gốc cũng như điều chỉnh mô hình đã cắt tỉa thông qua Thắt cổ chai Thông tin Hilbert-Schmidt. Chúng tôi đánh giá toàn diện khung làm việc được đề xuất và cho thấy hiệu suất vượt trội về cả tính kháng đối kháng và hiệu quả khi cắt tỉa các kiến trúc được huấn luyện trên các bộ dữ liệu MNIST, CIFAR-10, và CIFAR-100 chống lại năm cuộc tấn công tiên tiến nhất. Mã nguồn có sẵn tại https://github.com/neu-spiral/PwoA/.

Thuật ngữ chỉ mục—Tính kháng Đối kháng, Cắt tỉa Đối kháng, Tự chưng cất, Thắt cổ chai HSIC

I. GIỚI THIỆU

Tính dễ bị tổn thương của các mạng nơ-ron sâu (DNN) trước các cuộc tấn công đối kháng đã là chủ đề nghiên cứu rộng rãi gần đây [1]–[5]. Những cuộc tấn công như vậy được tạo ra có chủ ý để đánh lừa các DNN đưa ra dự đoán sai, ví dụ, bằng cách thêm các nhiễu loạn tinh vi nhưng không thể nhận thấy bằng mắt thường vào các ví dụ tự nhiên, nguyên gốc [6]. Tính kháng đối kháng, tức khả năng của một mô hình đã huấn luyện duy trì sức mạnh dự đoán bất chấp những cuộc tấn công như vậy, là một thuộc tính quan trọng cho nhiều ứng dụng quan trọng về an toàn [7]–[9]. Cách phổ biến và hiệu quả nhất để đạt được tính kháng đối kháng là thông qua huấn luyện đối kháng [10]–[12], tức huấn luyện một mô hình trên các ví dụ được tạo ra đối kháng. Huấn luyện đối kháng đã cho thấy hiệu suất kháng cự đáng tin cậy chống lại các kỹ thuật tấn công cải tiến như descent gradient chiếu (PGD) [3], cuộc tấn công Carlini & Wagner (CW) [4] và AutoAttack (AA) [5]. Tuy nhiên, huấn luyện đối kháng tốn kém về mặt tính toán [3], [13], thường mất từ 3–30 lần [14] lâu hơn so với huấn luyện tự nhiên, chính xác do chi phí bổ sung của việc tạo ra các ví dụ đối kháng.

Như được lưu ý bởi Madry et al. [3], việc đạt được tính kháng đối kháng đòi hỏi một kiến trúc rộng hơn và lớn hơn đáng kể so với kiến trúc dành cho độ chính xác tự nhiên. Dung lượng mạng lớn được yêu cầu bởi huấn luyện đối kháng có thể hạn chế việc triển khai trên phần cứng hạn chế tài nguyên hoặc các ứng dụng thời gian thực. Cắt tỉa trọng số là một kỹ thuật nén nổi bật để giảm kích thước mô hình mà không làm giảm đáng kể độ chính xác [15]–[21]. Trong khi các nhà nghiên cứu đã khám phá rộng rãi việc cắt tỉa trọng số, chỉ có một số nghiên cứu gần đây nghiên cứu nó kết hợp với tính kháng đối kháng. Ye et al. [22], Gui et al. [23], và Sehwag et al. [24] áp dụng các kỹ thuật phòng thủ chủ động với cắt tỉa trong nghiên cứu của họ. Tuy nhiên, những nghiên cứu này yêu cầu truy cập vào các ví dụ đối kháng trong quá trình cắt tỉa. Cắt tỉa bản thân đã là một quá trình tốn công sức, vì các kỹ thuật cắt tỉa hiệu quả đồng thời tinh chỉnh một mạng hiện có, đã được huấn luyện trước; việc kết hợp các ví dụ đối kháng vào quá trình này làm cản trở đáng kể hiệu quả huấn luyện. Hơn nữa, các kỹ thuật cắt tỉa đối kháng được thiết kế riêng cho các phương pháp huấn luyện đối kháng cụ thể cần được sửa đổi liên tục khi các phương pháp mới phát triển nhanh chóng.

Trong bài báo này, chúng tôi nghiên cứu cách lấy một DNN dày đặc, kháng đối kháng, đã được huấn luyện trên các ví dụ đối kháng, và cắt tỉa nó mà không cần bất kỳ huấn luyện đối kháng bổ sung nào. Như một ví dụ động lực được minh họa trong Hình 1(a), một DNN được công bố công khai bởi các nhà nghiên cứu hoặc một công ty, được huấn luyện đối kháng với chi phí tính toán lớn, có thể được cắt tỉa sau đó bởi các nhà nghiên cứu khác để có thể thực thi trên một thiết bị hạn chế tài nguyên, như một FPGA. Sử dụng phương pháp của chúng tôi, việc sau này có thể được thực hiện một cách hiệu quả, mà không cần truy cập vào các tài nguyên tính toán cần thiết cho cắt tỉa đối kháng.

Việc hạn chế cắt tỉa chỉ truy cập các ví dụ tự nhiên đặt ra một thách thức đáng kể. Như được hiển thị trong Hình 1(b), việc cắt tỉa một mô hình một cách ngây thơ mà không có các ví dụ đối kháng có thể là thảm khốc, xóa bỏ hoàn toàn tất cả tính kháng cự chống lại AutoAttack. Ngược lại, PwoA của chúng tôi đáng chú ý là kháng cự dưới một phạm vi rộng các tỷ lệ cắt tỉa.

Nhìn chung, chúng tôi đóng góp những điều sau:
1) Chúng tôi đề xuất PwoA, một khung làm việc đầu cuối đến cuối để cắt tỉa một mô hình kháng đối kháng đã được huấn luyện trước mà không tạo ra các ví dụ đối kháng, bằng cách (a) bảo tồn tính kháng cự từ mô hình gốc thông qua tự chưng cất [25]–[27] và (b) tăng cường tính kháng cự từ các ví dụ tự nhiên thông qua tiêu chí độc lập Hilbert-Schmidt (HSIC) như một bộ điều chỉnh [28], [29].

2) Nghiên cứu của chúng tôi là nghiên cứu đầu tiên nghiên cứu cách một mô hình đã được huấn luyện trước đối kháng có thể được cắt tỉa hiệu quả mà không cần truy cập vào các ví dụ đối kháng. Đây là một thách thức quan trọng, mới lạ: trước nghiên cứu của chúng tôi, không rõ liệu điều này có khả thi hay không. Cách tiếp cận của chúng tôi là tổng quát, và không được thiết kế riêng hay hạn chế cho các mô hình kháng cự đã huấn luyện trước, kiến trúc, hoặc phương pháp huấn luyện đối kháng cụ thể.

3) Chúng tôi đánh giá toàn diện PwoA trên các mô hình kháng đối kháng đã được huấn luyện trước được công bố công khai bởi các nhà nghiên cứu khác. Đặc biệt, chúng tôi cắt tỉa năm mô hình có sẵn công khai đã được huấn luyện trước với các phương pháp đối kháng tiên tiến nhất (SOTA) trên các bộ dữ liệu MNIST, CIFAR-10, và CIFAR-100. So với các phương pháp cắt tỉa đối kháng SOTA, PwoA có thể cắt tỉa một phần lớn trọng số trong khi đạt được tính kháng đối kháng tương đương—hoặc tốt hơn—với tốc độ huấn luyện nhanh hơn 4–7 lần.

Phần còn lại của bài báo này được cấu trúc như sau. Chúng tôi xem xét các nghiên cứu liên quan trong Phần II. Trong Phần III, chúng tôi thảo luận về tính kháng đối kháng tiêu chuẩn, chưng cất kiến thức, và HSIC. Trong Phần V, chúng tôi trình bày phương pháp của chúng tôi. Phần VI bao gồm các thí nghiệm của chúng tôi; chúng tôi kết luận trong Phần VII.

II. NGHIÊN CỨU LIÊN QUAN

Tính kháng Đối kháng. Các phương pháp tấn công đối kháng phổ biến bao gồm descent gradient chiếu (PGD) [3], phương pháp dấu gradient nhanh (FGSM) [2], cuộc tấn công CW [4], và AutoAttack (AA) [5]; xem thêm [30] để có một đánh giá toàn diện. Các mô hình kháng đối kháng thường được thu được thông qua huấn luyện đối kháng [31], bằng cách bổ sung tập huấn luyện với các ví dụ đối kháng, được tạo ra bởi các cuộc tấn công đối kháng nói trên. Madry et al. [3] tạo ra các ví dụ đối kháng thông qua PGD. TRADES [11] và MART [12] mở rộng huấn luyện đối kháng bằng cách kết hợp các thuật ngữ phạt bổ sung. LBGAT [32] hướng dẫn huấn luyện đối kháng bằng một ranh giới phân loại tự nhiên để cải thiện tính kháng cự. Tuy nhiên, việc tạo ra các ví dụ đối kháng tốn kém về mặt tính toán và tốn thời gian.

Một số nghiên cứu gần đây quan sát thấy rằng các hình phạt thắt cổ chai thông tin tăng cường tính kháng cự. Fischer [33] xem xét một thắt cổ chai entropy có điều kiện (CEB), trong khi Alemi et al. [34] đề xuất một thắt cổ chai thông tin biến phân (VIB); cả hai đều dẫn đến các thuộc tính kháng cự được cải thiện. Ma et al. [28] và Wang et al. [29] sử dụng một hình phạt dựa trên Tiêu chí Độc lập Hilbert Schmidt (HSIC), được gọi là thắt cổ chai HSIC như một bộ điều chỉnh (HBaR). Wang et al. cho thấy rằng HBaR tăng cường tính kháng đối kháng ngay cả khi không tạo ra các ví dụ đối kháng [29]. Vì lý do này, chúng tôi kết hợp HBaR vào khung cắt tỉa kháng cự thống nhất của chúng tôi như một phương tiện khai thác tính kháng đối kháng chỉ từ các ví dụ tự nhiên trong quá trình cắt tỉa, mà không cần huấn luyện đối kháng thêm. Chúng tôi là những người đầu tiên nghiên cứu HBaR trong bối cảnh cắt tỉa; nghiên cứu loại bỏ của chúng tôi (Phần VI-B) cho thấy HBaR thực sự góp phần tăng cường tính kháng cự trong môi trường của chúng tôi.

Cắt tỉa Đối kháng. Cắt tỉa trọng số là một trong những kỹ thuật nén nổi bật để giảm kích thước mô hình với sự suy giảm độ chính xác có thể chấp nhận. Trong khi được khám phá rộng rãi cho mục đích hiệu quả và nén [15]–[20], chỉ có một số nghiên cứu gần đây nghiên cứu cắt tỉa trong bối cảnh tính kháng đối kháng. Một số nghiên cứu [35], [36] thảo luận lý thuyết về mối quan hệ giữa tính kháng đối kháng và cắt tỉa, nhưng không cung cấp bất kỳ kỹ thuật phòng thủ chủ động nào. Ye et al. [22] và Gui et al. [23] đề xuất AdvPrune để kết hợp khung cắt tỉa phương pháp hướng luân phiên của các nhân tử (ADMM) với huấn luyện đối kháng. Lee et al. [37] đề xuất APD để sử dụng chưng cất kiến thức cho cắt tỉa đối kháng được tối ưu hóa bằng một phương pháp gradient gần kề. Sehwag et al. [24] đề xuất HYDRA, sử dụng một mục tiêu huấn luyện kháng cự để học một mặt nạ thưa thớt. Tuy nhiên, tất cả các phương pháp này đều dựa vào huấn luyện đối kháng. HYDRA còn yêu cầu huấn luyện các mặt nạ thưa thớt bổ sung, điều này cản trở hiệu quả huấn luyện. Ngược lại, chúng tôi chưng cất từ một mô hình kháng đối kháng đã được huấn luyện trước trong khi cắt tỉa mà không tạo ra các ví dụ đối kháng. Mô hình nén của chúng tôi có thể bảo tồn tính kháng đối kháng cao với tốc độ huấn luyện đáng kể so với các phương pháp này, như chúng tôi báo cáo trong Phần VI-C.

III. CƠ SỞ

Chúng tôi sử dụng ký hiệu tiêu chuẩn sau đây trong suốt bài báo. Trong bài toán phân loại k-ary tiêu chuẩn, chúng tôi được cho một tập dữ liệu D = {(xi, yi)}ni=1, trong đó xi ∈ RdX, yi ∈ {0,1}k là các mẫu i.i.d. được rút từ phân phối kết hợp PXY. Cho một mạng nơ-ron L-tầng h: RdX → Rk được tham số hóa bởi các trọng số θ := {θl}Ll=1 ∈ Rdl, trong đó θl là trọng số tương ứng với tầng thứ l, với l = 1, ..., L, chúng tôi định nghĩa mục tiêu học tập tiêu chuẩn như sau:

L(θ) = EXY[ℓ(h(X), Y)] ≈ 1/n Σni=1 ℓ(h(xi), yi); (1)

trong đó ℓ: Rk × Rk → R là một hàm mất mát, ví dụ, entropy chéo.

A. Tính kháng Đối kháng

Chúng tôi gọi một mạng là kháng đối kháng nếu nó duy trì độ chính xác dự đoán cao chống lại một kẻ thù bị hạn chế làm nhiễu loạn các mẫu đầu vào. Chính thức, trước khi gửi một mẫu đầu vào x ∈ RdX, một kẻ thù có thể làm nhiễu loạn x bằng một δ tùy ý ∈ Br, trong đó Br ⊆ RdX là quả cầu ℓ∞ bán kính r, tức là,

Br = B(0, r) = {δ ∈ RdX : ||δ||∞ ≤ r}; (2)

Tính kháng đối kháng [3] của một mô hình h được đo bằng mất mát kỳ vọng đạt được bởi các ví dụ đối kháng như vậy, tức là,

L̃(θ) = EXY[maxδ∈Br ℓ(h(X + δ), Y)] ≈ 1/n Σni=1 maxδ∈Br ℓ(h(xi + δ), yi). (3)

Một mạng nơ-ron kháng đối kháng h có thể được thu được thông qua huấn luyện đối kháng, tức bằng cách tối thiểu hóa mất mát tính kháng đối kháng trong (3) một cách thực nghiệm trên tập huấn luyện D. Trong thực tế, điều này tương đương với descent gradient ngẫu nhiên (SGD) trên các ví dụ đối kháng xi + δ (xem, ví dụ, [3]). Trong mỗi epoch, δ được tạo ra trên cơ sở từng mẫu thông qua một tối ưu hóa bên trong trên Br, ví dụ, thông qua descent gradient chiếu (PGD).

Cắt tỉa đối kháng bảo tồn tính kháng cự trong khi cắt tỉa. Các phương pháp hiện tại kết hợp huấn luyện đối kháng vào mục tiêu cắt tỉa của họ. Đặc biệt, AdvPrune [22] trực tiếp tối thiểu hóa mất mát đối kháng L̃(θ) bị hạn chế bởi các yêu cầu thưa thớt. HYDRA [24] cũng sử dụng L̃(θ) để học kết hợp một mặt nạ thưa thớt cùng với θl. Cả hai đều được kết hợp với và thiết kế riêng cho các phương pháp huấn luyện đối kháng cụ thể, và yêu cầu thời gian huấn luyện đáng kể. Điều này thúc đẩy chúng tôi đề xuất khung PwoA của chúng tôi, được mô tả trong Phần V.

B. Chưng cất Kiến thức

Trong chưng cất kiến thức [25], [38], một mô hình học sinh học cách bắt chước đầu ra của giáo viên. Xem xét một mô hình giáo viên T được huấn luyện tốt, và một mô hình học sinh h mà chúng tôi muốn huấn luyện để phù hợp với đầu ra của giáo viên. Gọi σ: Rk → [0,1]k là hàm softmax, tức là, σ(z)j = ezj/Σj' ezj', j = 1, ..., k. Gọi

σT(x) = σ(T(x)/τ) và σh(x) = σ(h(x)/τ) (4)

là các đầu ra softmax của hai mô hình được cân bằng bởi tham số nhiệt độ τ > 0 [25]. Khi đó, hình phạt chưng cất kiến thức được sử dụng để huấn luyện h là:

LKD(θ) = (1 - λ)L(θ) + λτ2EX[KL(σh(X), σT(X))]; (5)

trong đó L là mất mát phân loại của mạng học sinh có nhiệt độ σh và KL là phân kỳ Kullback–Leibler (KL). Trực quan, mất mát chưng cất kiến thức LKD xử lý đầu ra của giáo viên như nhãn mềm để huấn luyện học sinh, để học sinh thể hiện một số thuộc tính vốn có của giáo viên, chẳng hạn như tính kháng đối kháng.

C. Tiêu chí Độc lập Hilbert-Schmidt

Tiêu chí Độc lập Hilbert-Schmidt (HSIC) là một thước đo phụ thuộc thống kê được giới thiệu bởi Gretton et al. [39]. HSIC là chuẩn Hilbert-Schmidt của toán tử hiệp phương sai chéo giữa các phân phối trong Không gian Hilbert Tái sinh Kernel (RKHS). Tương tự như Thông tin Tương hỗ (MI), HSIC nắm bắt các phụ thuộc phi tuyến giữa các biến ngẫu nhiên. HSIC được định nghĩa là:

HSIC(X; Y) = EXYX'Y'[kX(X, X')kY'(Y, Y')] + EXX'[kX(X, X')]EYY'[kY(Y, Y')] - 2EXY[EX'[kX(X, X')]EY'[kY(Y, Y')]]; (6)

trong đó X' và Y' là các bản sao độc lập của X và Y tương ứng, và kX và kY là các hàm kernel. Trong thực tế, chúng ta thường xấp xỉ HSIC một cách thực nghiệm. Cho n mẫu i.i.d. {(xi, yi)}ni=1 được rút từ PXY, chúng ta ước tính HSIC thông qua:

ĤSIC(X; Y) = (n-1)^-2 tr(KXHKYH); (7)

trong đó KX và KY là các ma trận kernel với các mục KXij = kX(xi, xj) và KYij = kY(yi, yj), tương ứng, và H = I - 1/n 11T là một ma trận trung tâm.

IV. CÔNG THỨC BÀI TOÁN

Cho một mô hình kháng đối kháng h*, chúng tôi muốn cắt tỉa hiệu quả các trọng số không quan trọng từ mô hình đã được huấn luyện trước này trong khi bảo tồn tính kháng đối kháng của mô hình đã cắt tỉa cuối cùng. Chúng tôi tối thiểu hóa hàm mất mát chịu các ràng buộc chỉ định yêu cầu thưa thớt. Cụ thể hơn, bài toán cắt tỉa trọng số có thể được công thức hóa như:

Tối thiểu hóa: L(θ);
chịu ràng buộc θl ∈ Sl; l = 1, ..., L; (8)

trong đó L(θ) là hàm mất mát tối ưu hóa cả độ chính xác và tính kháng cự, và Sl ⊆ Rdl là một tập ràng buộc thưa thớt trọng số được áp dụng cho tầng l, được định nghĩa là

Sl = {θl | ||θl||0 ≤ sl}; (9)

trong đó ||·||0 là kích thước của support của θl (tức số phần tử khác không), và sl ∈ N là một hằng số được chỉ định như tham số mức độ thưa thớt.

V. PHƯƠNG PHÁP LUẬN

Bây giờ chúng tôi mô tả PwoA, khung làm việc thống nhất của chúng tôi để cắt tỉa một mạng kháng cự mà không cần huấn luyện đối kháng bổ sung.

A. Cắt tỉa Bảo tồn Tính kháng cự

Cho một mô hình kháng cự đã được huấn luyện trước đối kháng, chúng tôi nhằm bảo tồn tính kháng cự của nó trong khi làm thưa nó thông qua cắt tỉa trọng số. Đặc biệt, chúng tôi tận dụng các nhãn mềm được tạo ra bởi mô hình kháng cự và trực tiếp kết hợp chúng vào mục tiêu cắt tỉa của chúng tôi chỉ với quyền truy cập vào các ví dụ tự nhiên. Chính thức, chúng tôi ký hiệu mô hình đã được huấn luyện trước tốt bằng T và đối tác thưa thớt của nó bằng h. Mục tiêu tối ưu hóa được định nghĩa như sau:

Tối thiểu hóa: LD(θ) = λτ2EX[KL(σh(X), σT(X))];
chịu ràng buộc θl ∈ Sl; l = 1, ..., L; (10)

trong đó τ là siêu tham số nhiệt độ. Trực quan, mục tiêu dựa trên chưng cất của chúng tôi buộc mô hình thưa h phải bắt chước nhãn mềm được tạo ra bởi mô hình đã được huấn luyện trước gốc T*, trong khi ràng buộc thực thi rằng các trọng số đã học chịu sự thưa thớt mong muốn. Bằng cách này, chúng tôi bảo tồn tính kháng đối kháng thông qua việc chưng cất kiến thức từ các nhãn mềm một cách hiệu quả, mà không cần tái tạo các ví dụ đối kháng. Khác với mất mát chưng cất gốc trong (5), chúng tôi loại bỏ mất mát phân loại nơi các nhãn được sử dụng, vì chúng tôi quan sát thấy rằng nó không góp phần vào tính kháng đối kháng (xem Bảng V trong Phần VI-B). Việc giải quyết bài toán tối ưu hóa (10) không đơn giản; chúng tôi mô tả cách xử lý bản chất tổ hợp của các ràng buộc thưa thớt trong Phần V-C.

B. Tăng cường Tính kháng cự từ Các ví dụ Tự nhiên

Ngoài việc bảo tồn tính kháng đối kháng từ mô hình đã được huấn luyện trước, chúng tôi có thể tăng cường thêm tính kháng cự trực tiếp từ các ví dụ tự nhiên. Được truyền cảm hứng từ nghiên cứu gần đây sử dụng các hình phạt thắt cổ chai thông tin, [28], [29], [33], [34], chúng tôi kết hợp HSIC như một Bộ điều chỉnh (HBaR) vào khung cắt tỉa kháng cự của chúng tôi. Theo hiểu biết tốt nhất của chúng tôi, HBaR chỉ được chứng minh hiệu quả dưới các kịch bản học đối kháng thông thường; chúng tôi là những người đầu tiên mở rộng nó vào bối cảnh cắt tỉa trọng số. Chính thức, chúng tôi ký hiệu bằng Zl ∈ RdZl, l ∈ {1, ..., L} đầu ra của tầng thứ l của h dưới đầu vào X (tức biểu diễn tiềm ẩn thứ l). Hình phạt học HBaR [28], [29] được định nghĩa như sau:

LH(θ) = αx ΣLl=1 HSIC(X; Zl) - αy ΣLl=1 HSIC(Y; Zl); (11)

trong đó αx, αy ∈ R+ là các siêu tham số cân bằng.

Trực quan, vì HSIC đo phụ thuộc giữa hai biến ngẫu nhiên, việc tối thiểu hóa HSIC(X; Zl) tương ứng với việc loại bỏ thông tin dư thừa hoặc nhiễu từ X. Do đó, thuật ngữ này cũng tự nhiên giảm ảnh hưởng của cuộc tấn công đối kháng, tức nhiễu loạn được thêm vào dữ liệu đầu vào. Trong khi đó, việc tối đa hóa HSIC(Y; Zl) khuyến khích sự thiếu nhạy cảm với đầu vào này xảy ra trong khi vẫn giữ lại bản chất phân biệt của bộ phân loại, được nắm bắt bởi sự phụ thuộc vào thông tin hữu ích w.r.t. nhãn đầu ra Y. Sự đánh đổi nội tại này tương tự như cái gọi là thắt cổ chai thông tin [40], [41]. Wang et al. [29] quan sát thấy sự đánh đổi này giữa các hình phạt trong quá trình huấn luyện; chúng tôi cũng quan sát thấy nó trong quá trình cắt tỉa (xem Phụ lục C).

PwoA kết hợp HBaR với tự chưng cất trong quá trình cắt tỉa trọng số. Chúng tôi chính thức hóa PwoA để giải quyết bài toán sau:

Tối thiểu hóa: LPwoA(θ) = LD(θ) + LH(θ);
chịu ràng buộc θl ∈ Sl; l = 1, ..., L. (12)

C. Giải quyết PwoA thông qua ADMM

Bài toán (12) có các ràng buộc tổ hợp do thưa thớt. Do đó, nó không thể được giải quyết bằng cách sử dụng descent gradient ngẫu nhiên như trong huấn luyện CNN tiêu chuẩn. Để xử lý điều này, chúng tôi tuân theo chiến lược cắt tỉa dựa trên ADMM bởi Zhang et al. [18] và Ren et al. [19]. Chúng tôi mô tả quy trình đầy đủ chi tiết trong Phụ lục A. Tóm lại, ADMM là một thuật toán primal-dual được thiết kế cho các bài toán tối ưu hóa có ràng buộc với các mục tiêu tách rời (ví dụ, bài toán (12)). Thông qua định nghĩa của một Lagrangian mở rộng, thuật toán luân phiên giữa hai bước primal có thể được giải quyết hiệu quả và riêng biệt. Bài toán con đầu tiên tối ưu hóa mục tiêu LPwoA được mở rộng với một hình phạt gần kề; đây là một tối ưu hóa không ràng buộc được giải quyết bằng SGD cổ điển. Bài toán con thứ hai được giải quyết bằng cách thực hiện các phép chiếu Euclide PSl(·) lên các tập ràng buộc Sl; mặc dù các tập sau không lồi, những phép chiếu này có thể được tính toán trong thời gian đa thức. Khung PwoA tổng thể được tóm tắt trong Thuật toán 1.

Thuật toán 1 Khung PwoA
Đầu vào: các mẫu đầu vào {(xi, yi)}ni=1, một mạng nơ-ron kháng cự đã được huấn luyện trước T* với L tầng, kích thước mini-batch m, tham số thưa thớt s, tốc độ học α, các tham số gần kề {ρl}Ll=1.
Đầu ra: tham số của bộ phân loại θ
while θ chưa hội tụ do
    Lấy mẫu một mini-batch kích thước m từ các mẫu đầu vào.
    Bước SGD:
    θ ← θ - α∇θ(LPwoA(θ) + ΣLl=1 ρl/2||θl - θ'l + ul||2F).
    Bước chiếu:
    θ'l ← PSl(θl + ul); cho l = 1, ..., L.
    Bước cập nhật biến dual:
    u ← u + θ - θ'
end

VI. THÍ NGHIỆM

A. Thiết lập Thí nghiệm

Chúng tôi tiến hành các thí nghiệm trên ba bộ dữ liệu benchmark, MNIST, CIFAR-10, và CIFAR-100. Để thiết lập các mô hình kháng đối kháng đã được huấn luyện trước để cắt tỉa, chúng tôi xem xét năm mô hình được huấn luyện đối kháng được cung cấp bởi nghiên cứu tiên tiến mã nguồn mở, bao gồm Wang et al. [29], Zhang et al. [11], và Cui et al. [32], được tóm tắt trong Bảng I.

Để hiểu tác động của từng thành phần của PwoA đối với tính kháng cự, chúng tôi kiểm tra các kết hợp của các mục tiêu học không đối kháng sau đây để cắt tỉa: LCE, LH, và LD. Tất cả các mục tiêu này đều được tối ưu hóa dựa trên các ví dụ tự nhiên. Chúng tôi cũng so sánh PwoA với ba phương pháp cắt tỉa đối kháng: APD [37], AdvPrune [22] và HYDRA [24].

Siêu tham số. Chúng tôi cắt tỉa các mô hình đã được huấn luyện trước bằng SGD với tốc độ học ban đầu 0.01, động lượng 0.9 và suy giảm trọng số 10^-4. Chúng tôi đặt kích thước batch là 128 cho tất cả các phương pháp. Đối với PwoA của chúng tôi, chúng tôi đặt số epoch cắt tỉa và tinh chỉnh lần lượt là 50 và 100. Đối với các phương pháp SOTA AdvPrune và HYDRA, chúng tôi sử dụng mã được cung cấp bởi các tác giả cùng với các siêu tham số tối ưu mà họ đề xuất. Cụ thể, đối với AdvPrune, chúng tôi đặt epoch cắt tỉa và tinh chỉnh lần lượt là 50 và 100; đối với HYDRA, chúng tôi đặt chúng lần lượt là 20 và 100, và sử dụng TRADES làm mất mát huấn luyện đối kháng. Chúng tôi báo cáo tất cả các tham số điều chỉnh khác trong Phụ lục B.

Tỷ lệ Cắt tỉa Mạng. Nhớ lại từ Phần IV rằng các tập ràng buộc thưa thớt {Sl}Ll=1 được định nghĩa bởi Eq. (9) với các tham số thưa thớt sl ∈ N xác định các phần tử khác không mỗi tầng. Chúng tôi ký hiệu tỷ lệ cắt tỉa là tỷ số kích thước chưa cắt tỉa so với kích thước đã cắt tỉa; tức là, đối với nl số tham số trong tầng l, tỷ lệ cắt tỉa tại tầng l có thể được tính là rl = nl/sl. Chúng tôi đặt sl sao cho chúng tôi có được tỷ lệ cắt tỉa giống hệt nhau mỗi tầng, dẫn đến một tỷ lệ cắt tỉa đồng nhất trên toàn mạng.

Chỉ số Hiệu suất và Cuộc tấn công. Đối với tất cả các phương pháp, chúng tôi đánh giá mô hình đã cắt tỉa cuối cùng thông qua các chỉ số sau. Trước tiên chúng tôi đo (a) Độ chính xác tự nhiên (tức độ chính xác kiểm tra trên các ví dụ tự nhiên). Sau đó chúng tôi đo tính kháng đối kháng thông qua độ chính xác kiểm tra dưới (b) FGSM, cuộc tấn công dấu gradient nhanh [2], (c) PGDm, cuộc tấn công PGD với m bước được sử dụng cho tối ưu hóa PGD bên trong [3], (d) cuộc tấn công CW (CW-loss trong khung PGD) [4], và (e) AA, AutoAttack [5], đây là mạnh nhất trong số tất cả bốn cuộc tấn công. Tất cả năm chỉ số đều được báo cáo bằng phần trăm (%) độ chính xác. Theo tài liệu học đối kháng trước đây, chúng tôi đặt kích thước bước là 0.01 và r = 0.3 cho MNIST, và kích thước bước là 2/255 và r = 8/255 cho CIFAR-10 và CIFAR-100, tối ưu hóa trên các quả cầu chuẩn ℓ∞ trong tất cả các trường hợp. Tất cả các cuộc tấn công xảy ra trong giai đoạn kiểm tra và có quyền truy cập đầy đủ vào các tham số mô hình. Vì luôn có sự đánh đổi giữa độ chính xác tự nhiên và tính kháng đối kháng, chúng tôi báo cáo mô hình tốt nhất khi nó đạt được mất mát trung bình thấp nhất giữa hai, như được đề xuất bởi Ye et al. [22] và Zhang et al. [11]. Chúng tôi đo và báo cáo tổng thời gian huấn luyện trên GPU Tesla V100 với bộ nhớ 32 GB và 5120 cores.

B. Hiểu biết Toàn diện về PwoA

Nghiên cứu Loại bỏ và Tính kháng cự PwoA. Trước tiên chúng tôi kiểm tra sự phối hợp giữa các thuật ngữ PwoA trong mục tiêu trong Eq. (12) và cho thấy các thuật ngữ này bảo tồn và thậm chí cải thiện tính kháng cự trong khi cắt tỉa. Chúng tôi nghiên cứu nhiều kết hợp của LCE, LH, và LD trong Bảng II-IV. Chúng tôi báo cáo độ chính xác kiểm tra tự nhiên và tính kháng đối kháng dưới các cuộc tấn công khác nhau của mô hình đã cắt tỉa dưới 3 tỷ lệ cắt tỉa (4×, 8×, và 16×) trên MNIST, CIFAR-10, và CIFAR-100. Đối với mỗi kết quả được báo cáo, chúng tôi khám phá các siêu tham số λ, αx, và αy như được mô tả trong Phụ lục B và báo cáo ở đây các giá trị hoạt động tốt nhất.

Nhìn chung, Bảng II-IV cho thấy rằng phương pháp PwoA của chúng tôi (cụ thể là, LD + LH) cắt tỉa một phần lớn trọng số trong khi đạt được tính kháng đối kháng tốt nhất cho tất cả ba bộ dữ liệu. Ngược lại, một mô hình được cắt tỉa bởi LCE một mình (tức không có nỗ lực nào để duy trì tính kháng cự) thất bại thảm khốc dưới các cuộc tấn công đối kháng trên tất cả các bộ dữ liệu. Lý do là khi bộ dữ liệu phức tạp hơn và/hoặc tỷ lệ cắt tỉa cao, LCE bị buộc phải duy trì độ chính xác tự nhiên trong quá trình cắt tỉa, khiến nó chệch khỏi tính kháng đối kháng của mô hình đã được huấn luyện trước. Ngược lại, tự chưng cất đồng thời (LD) và cắt tỉa là điều kiện cần thiết để bảo tồn tính kháng cự đáng kể mà không tạo ra các ví dụ đối kháng trong quá trình cắt tỉa. Chúng tôi quan sát điều này cho tất cả ba bộ dữ liệu, lấy AA dưới tỷ lệ cắt tỉa 4× làm ví dụ, từ 0.00% bởi LCE đến 89.28%, 48.26%, và 25.52% bởi LD trên MNIST, CIFAR-10 và CIFAR-100, tương ứng.

Chúng tôi cũng quan sát thấy rằng việc kết hợp LH trong khi cắt tỉa có lợi cho việc duy trì độ chính xác cao trong khi cải thiện tính kháng đối kháng chống lại các cuộc tấn công khác nhau. Bằng cách điều chỉnh LCE với LH, chúng tôi quan sát thấy một lợi thế tính kháng đối kháng sắc nét trên MNIST, lấy AA làm ví dụ từ 0.00% bởi LCE đến 47.49%, 40.71%, và 13.04% bằng cách kết hợp LH dưới tỷ lệ cắt tỉa 4×, 8×, và 16×, tương ứng; bằng cách điều chỉnh LD với LH, chúng tôi lại thấy rằng việc điều chỉnh cải thiện tính kháng đối kháng trong tất cả các trường hợp, đặc biệt là w.r.t. cuộc tấn công mạnh nhất (AA). Chúng tôi lưu ý rằng việc cải thiện tính kháng cự của việc kết hợp LH với LD không phải do sự đánh đổi giữa độ chính xác và tính kháng cự: thực tế, LD + LH liên tục cải thiện cả độ chính xác tự nhiên và tính kháng cự dưới tất cả tỷ lệ cắt tỉa trên tất cả bộ dữ liệu. Được thúc đẩy bởi các quan sát trên, chúng tôi phân tích thêm cách hai thuật ngữ trong HBaR được định nghĩa trong Eq. (11) ảnh hưởng đến độ chính xác tự nhiên và tính kháng cự và tóm tắt những điều này trong Phụ lục C.

LCE Làm giảm Tính kháng cự. Nhớ lại từ Phần V-A rằng chúng tôi loại bỏ mất mát phân loại từ mất mát chưng cất gốc để đạt được cắt tỉa bảo tồn tính kháng cự. Bảng V chứng minh thực nghiệm rằng mất mát phân loại (tức LCE) làm giảm đáng kể tính kháng cự. Trực quan, PwoA chưng cất tính kháng cự từ mô hình kháng cự đã được huấn luyện trước thay vì thu được nó từ các ví dụ tự nhiên. Điều này trái ngược với các quan sát được thực hiện với các phương pháp cắt tỉa đối kháng, chẳng hạn như APD [37], nơi mất mát phân loại tăng tính kháng cự. Điều này là do APD cắt tỉa bằng cách tối ưu hóa mất mát chưng cất gốc trên các ví dụ đối kháng, vì vậy nó thực sự có thể hưởng lợi từ LCE.

Hiệu ứng Tỷ lệ Cắt tỉa. Trong Bảng III-IV, chúng tôi cũng quan sát thấy sự gia tăng độ chính xác tự nhiên nhẹ trong quá trình cắt tỉa. Điều này là do cắt tỉa giảm độ phức tạp của mô hình, và do đó, ở một mức độ nào đó, tránh được overfitting. Tuy nhiên, việc tăng tỷ lệ cắt tỉa vượt quá một điểm tới hạn có thể dẫn đến sự sụt giảm mạnh về độ chính xác. Điều này là dự kiến, vì việc giảm dung lượng mô hình đáng kể cản trở khả năng biểu đạt của nó và bắt đầu đưa ra độ thiên vị trong dự đoán. Không ngạc nhiên, điểm tới hạn này xảy ra sớm hơn trong các bộ dữ liệu phức tạp hơn. Chúng tôi cũng thấy rằng sự bão hòa/sụt giảm hiệu suất này xảy ra sớm hơn đối với tính kháng đối kháng khi so sánh với độ chính xác tự nhiên: việc bảo tồn tính kháng cự khó khăn hơn, đặc biệt là khi không kết hợp rõ ràng huấn luyện đối kháng.

So sánh với Sự tiết kiệm Ngây thơ. Chúng tôi tiếp tục chứng minh rằng cắt tỉa trong khi huấn luyện là điều kiện cần thiết để đạt được tính kháng cự cao dưới một mô hình tiết kiệm. Để cho thấy điều này, chúng tôi xây dựng một lớp mô hình có ít tham số hơn so với WRN34-10 gốc, và khám phá sự đánh đổi tính kháng cự-nén kết quả. Chúng tôi gọi lớp mô hình đầu tiên là 'WRN34-10-Lite': những mô hình này có cùng kiến trúc WRN34-10 nhưng chứa ít bộ lọc hơn trong mỗi tầng tích chập (dẫn đến ít tham số hơn tổng cộng). Những mô hình WRN34-10-Lite này được thiết kế để có số lượng tham số tổng tương tự như các mô hình đã cắt tỉa với tỷ lệ cắt tỉa 4×, 8×, và 16×, tương ứng. Chúng tôi huấn luyện những mô hình 'Lite' này trong 100 epoch trên các ví dụ đối kháng được tạo ra bởi PGD10. Mô hình đã cắt tỉa vượt trội hơn phiên bản 'Lite' tương ứng trong tất cả các trường hợp, cải thiện tính kháng cự dưới 16× chống lại AA lần lượt 10.47% và 7.35%, trên CIFAR-10 và CIFAR-100.

C. So sánh với Các phương pháp Cắt tỉa Đối kháng (AP)

Tính kháng cự với Quyền truy cập Một phần vào Các ví dụ Đối kháng. Trước tiên chúng tôi so sánh PwoA với hai baseline AP tiên tiến nhất, tức AdvPrune và HYDRA, về tính kháng đối kháng và hiệu quả huấn luyện trên các bộ dữ liệu CIFAR-10 và CIFAR-100. Cả AdvPrune và HYDRA đều yêu cầu truy cập vào các ví dụ đối kháng. Để có một so sánh công bằng, chúng tôi tạo ra các ví dụ đối kháng dần dần cho tất cả các phương pháp, bao gồm PwoA: trong Hình 3, chúng tôi thay đổi tỷ lệ mix ρ, tức phần nhỏ của tổng số ví dụ tự nhiên được thay thế bằng các ví dụ đối kháng được tạo ra bởi PGD10. Chúng tôi vẽ biểu đồ tính kháng cự AA so với thời gian huấn luyện, dưới tỷ lệ cắt tỉa 4×. Chúng tôi quan sát thấy rằng, không có quyền truy cập vào các ví dụ đối kháng (tỷ lệ mix 0%), cả hai phương pháp cạnh tranh đều thất bại thảm khốc, không thể hiện tính kháng cự gì cả. Hơn nữa, để đạt được cùng tính kháng cự như PwoA, họ yêu cầu từ 4× đến 7× thời gian huấn luyện nhiều hơn; trên CIFAR-100, họ thực sự không bao giờ đạt được hiệu suất mà PwoA đạt được. Chúng tôi cũng quan sát thấy rằng PwoA cải thiện bằng quyền truy cập một phần vào các ví dụ đối kháng; nhìn chung, nó đạt được sự đánh đổi thuận lợi hơn nhiều giữa tính kháng cự và hiệu quả huấn luyện so với hai đối thủ cạnh tranh. Thú vị, ngoại trừ trường hợp được hiển thị trong Hình 3(b) (WRN34-10 trên CIFAR-10), PwoA liên tục vượt trội hơn các đối thủ cạnh tranh ở tỷ lệ mix 100%, w.r.t. cả tính kháng cự và thời gian huấn luyện.

Tác động của Phương pháp Huấn luyện trước. Chúng tôi cũng quan sát thấy rằng HYDRA hoạt động tốt khi cắt tỉa các mô hình được huấn luyện trước với TRADES, nhưng trở nên tệ hơn khi xử lý mô hình được huấn luyện trước với LBGAT. Điều này là do HYDRA cắt tỉa mô hình bằng cách sử dụng TRADES làm mất mát đối kháng, và do đó được thiết kế riêng cho việc huấn luyện trước như vậy. Khi các mô hình được huấn luyện trước thông qua LBGAT, sự thay đổi mất mát này cản trở hiệu suất. Ngược lại, PwoA có thể cắt tỉa thành công một mô hình đã được huấn luyện trước tùy ý, bất kể kiến trúc hoặc phương pháp huấn luyện trước.

Tác động Tỷ lệ Cắt tỉa. Chúng tôi tiếp tục đo độ chính xác tự nhiên và tính kháng cự của PwoA và các phương pháp SOTA chống lại tất cả năm cuộc tấn công dưới tỷ lệ cắt tỉa 4×, 8×, và 16×. Chúng tôi báo cáo những điều này ở tỷ lệ mix 20%, để thời gian huấn luyện gần như bằng nhau qua các phương pháp, trong Bảng VI cho CIFAR-10 và Bảng VII cho CIFAR-100. Nhìn chung, chúng ta có thể thấy rõ ràng rằng PwoA liên tục vượt trội hơn các phương pháp SOTA khác chống lại tất cả năm cuộc tấn công, dưới thời gian huấn luyện tương tự (hoặc thấp hơn). Cụ thể, trên CIFAR-100, PwoA duy trì tính kháng cự cao chống lại AA chỉ với sự sụt giảm 1.62% (dưới 4× PR) từ mô hình đã được huấn luyện trước bởi LBGAT (xem Bảng I), trong khi tính kháng cự AA đạt được bởi HYDRA và AdvPrune sụt giảm lần lượt 6.12% và 13.98%. Điều này một lần nữa xác minh rằng, khi cắt tỉa một mô hình kháng cự được huấn luyện trước với các phương pháp huấn luyện đối kháng khác nhau, PwoA ổn định hơn trong việc bảo tồn tính kháng cự. Các cải thiện cũng rõ ràng trong khi tăng tỷ lệ cắt tỉa: PwoA vượt trội hơn HYDRA chống lại AA lần lượt 4.50%, 4.10%, và 3.33% dưới tỷ lệ cắt tỉa 4×, 8×, và 16×. Để hoàn chỉnh, chúng tôi cũng báo cáo hiệu suất ở tỷ lệ mix 0% trên CIFAR-100 trong Phụ lục D; trái ngược với PwoA, các đối thủ cạnh tranh thể hiện tính kháng cự hầu như không đáng kể trong trường hợp này.

So sánh với APD. Cuối cùng, chúng tôi cũng so sánh với APD [37], yếu hơn HYDRA và AdvPrune, nhưng liên quan chặt chẽ hơn với PwoA của chúng tôi: APD cắt tỉa bằng cách tối ưu hóa KD trên các ví dụ đối kháng bằng cách sử dụng một giáo viên không kháng cự. Bảng VIII so sánh PwoA với APD trên CIFAR-10 bằng ResNet-18 dưới tỷ lệ cắt tỉa 4× (đây là tỷ lệ cắt tỉa lớn nhất được báo cáo trong bài báo của họ). Chúng tôi quan sát thấy rằng, trong khi đạt được độ chính xác tương tự, PwoA vượt trội hơn APD w.r.t. cả tính kháng cự và hiệu quả huấn luyện. Điều này được dự đoán, vì việc chưng cất từ một giáo viên không kháng cự hạn chế khả năng học của APD từ các ví dụ đối kháng và việc tạo ra các ví dụ đối kháng cản trở hiệu quả huấn luyện.

VII. KẾT LUẬN VÀ NGHIÊN CỨU TƯƠNG LAI

Chúng tôi đã đề xuất PwoA, một khung làm việc thống nhất để cắt tỉa các mạng kháng đối kháng mà không cần các ví dụ đối kháng. Phương pháp của chúng tôi tận dụng các mô hình kháng đối kháng đã được huấn luyện trước, bảo tồn tính kháng đối kháng thông qua tự chưng cất và tăng cường nó thông qua tiêu chí độc lập Hilbert-Schmidt như một bộ điều chỉnh. Các thí nghiệm toàn diện trên các bộ dữ liệu MNIST, CIFAR-10, và CIFAR-100 chứng minh rằng PwoA cắt tỉa một phần lớn trọng số trong khi đạt được tính kháng đối kháng tương đương với tốc độ huấn luyện nhanh hơn lên đến 7×. Các hướng tương lai bao gồm mở rộng khung PwoA sang cắt tỉa có cấu trúc và lượng tử hóa trọng số. Một hướng tương lai thú vị khác là sử dụng chưng cất và các hình phạt mới để cắt tỉa một mô hình kháng cự đã được huấn luyện trước ngay cả khi không có quyền truy cập vào các ví dụ tự nhiên.

VIII. LỜI CẢM ƠN

Các tác giả trân trọng cảm ơn sự hỗ trợ của Quỹ Khoa học Quốc gia dưới các khoản tài trợ CCF-1937500 và CNS-2112471.
