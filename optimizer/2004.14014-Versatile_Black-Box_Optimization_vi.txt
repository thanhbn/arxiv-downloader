# 2004.14014.pdf
# Được chuyển đổi từ PDF sang TXT
# Đường dẫn nguồn: /home/admin88/arxiv-downloader/optimizer/2004.14014.pdf
# Kích thước tệp: 1540086 bytes

===============================================
NỘI DUNG TỆP PDF
===============================================


--- TRANG 1 ---
Tối ưu hóa Hộp đen Đa năng
Jialin Liu
Đại học Khoa học và Công nghệ 
Miền Nam
Thâm Quyến, Trung Quốc
liujl@sustech.edu.cnAntoine Moreau
Đại học Clermont Auvergne,
CNRS, SIGMA Clermont, Viện
Pascal
Clermont-Ferrand, Pháp
antoine.moreau@univ-bpclermont.frMike Preuss
LIACS, Đại học
Leiden, Hà Lan
m.preuss@liacs.leidenuniv.nl
Jeremy Rapin, Baptiste Roziere
Facebook AI Research &
Đại học Paris-Dauphine
Paris, Pháp
jrapin@fb.com,broz@fb.comFabien Teytaud
Đại học Littoral Cote d'Opale
Calais, Pháp
teytaud@univ-littoral.frOlivier Teytaud
Facebook AI Research
Paris, Pháp
oteytaud@fb.com
TÓM TẮT
Việc tự động chọn thuật toán phù hợp sử dụng các bộ mô tả bài toán là một thành phần cổ điển của tối ưu hóa tổ hợp. Đây cũng là một công cụ tốt để làm cho các thuật toán tiến hóa nhanh chóng, mạnh mẽ và linh hoạt. Chúng tôi giới thiệu Shiwa, một thuật toán tốt cho cả tối ưu hóa hộp đen rời rạc và liên tục, có nhiễu và không có nhiễu, tuần tự và song song. Thuật toán của chúng tôi được so sánh thực nghiệm với các đối thủ cạnh tranh trên YABBOB, một bộ kiểm tra tương đương BBOB, và trên một số biến thể của nó, sau đó được xác thực trên một số bộ kiểm tra thực tế.
CÁC KHÁI NIỆM CCS
•Lý thuyết tính toán →Tối ưu hóa với các heuristic tìm kiếm ngẫu nhiên .
TỪ KHÓA
Tối ưu hóa hộp đen, thuật toán danh mục đầu tư, thuật toán không có gradient, nền tảng mã nguồn mở
Định dạng tham chiếu ACM:
Jialin Liu, Antoine Moreau, Mike Preuss, Jeremy Rapin, Baptiste Roziere,
Fabien Teytaud, và Olivier Teytaud. 2020. Tối ưu hóa Hộp đen Đa năng.
Trong Hội nghị Tính toán Di truyền và Tiến hóa (GECCO '20), ngày
8–12 tháng 7, 2020, Cancún, Mexico. ACM, New York, NY, USA, 9 trang. https:
//doi.org/10.1145/3377930.3389838
1 GIỚI THIỆU: LỰA CHỌN THUẬT TOÁN
Tự động lựa chọn thuật toán phù hợp là rất quan trọng cho thành công trong tối ưu hóa tổ hợp: mục tiêu của chúng tôi là điều tra cách điều này có thể được áp dụng trong tối ưu hóa không có đạo hàm. Lựa chọn thuật toán [ 8,29,30,32,48,49] có thể được thực hiện tiên nghiệm hoặc động. Trong trường hợp động, ý tưởng là tính đến các kết quả số học sơ bộ, tức là bắt đầu với một số bộ tối ưu hóa đồng thời

Quyền thực hiện các bản sao kỹ thuật số hoặc bản cứng của toàn bộ hoặc một phần công trình này cho mục đích cá nhân hoặc lớp học được cấp không tính phí với điều kiện các bản sao không được thực hiện hoặc phân phối để kiếm lợi nhuận hoặc lợi thế thương mại và các bản sao phải ghi rõ thông báo này và trích dẫn đầy đủ trên trang đầu tiên. Bản quyền cho các thành phần của công trình này thuộc sở hữu của những người khác ngoài ACM phải được tôn trọng. Việc tóm tắt có ghi nguồn được cho phép. Để sao chép khác, hoặc tái xuất bản, để đăng trên máy chủ hoặc phân phối lại cho các danh sách, cần có sự cho phép cụ thể trước và/hoặc phí. Yêu cầu quyền từ permissions@acm.org.
GECCO '20, ngày 8–12 tháng 7, 2020, Cancún, Mexico
©2020 Hiệp hội Máy tính.
ACM ISBN 978-1-4503-7128-5/20/07. . . $15.00
https://doi.org/10.1145/3377930.3389838và, sau đó, tập trung vào thuật toán tốt nhất [ 12,29,34,35,37,41].
Lựa chọn thuật toán từ một danh mục các phương pháp thường xuyên thắng trong các cuộc thi SAT. Lựa chọn thuật toán thụ động [ 4] là trường hợp đặc biệt trong đó việc lựa chọn thuật toán được thực hiện tiên nghiệm, từ các đặc tính cấp cao thường được biết trước, như các bộ mô tả bài toán sau: chiều; ngân sách tính toán (được đo bằng số lần đánh giá fitness); mức độ song song trong tối ưu hóa; tính chất của biến, liệu chúng có rời rạc hay không, có thứ tự hay không, liệu miền có thể đo được hay không1; sự hiện diện của ràng buộc; nhiễu trong hàm mục tiêu; và tính chất đa mục tiêu của bài toán. Bên cạnh việc cải thiện hiệu suất trên một họ bài toán tối ưu hóa nhất định, lựa chọn thuật toán cũng nhằm mục đích thiết kế một thuật toán đa năng, tức là một thuật toán hoạt động cho các miền và mục tiêu tùy ý. Chúng tôi sử dụng các thí nghiệm đánh giá trong một nền tảng mã nguồn mở có thể mở rộng [ 46], chứa một tập hợp các bài toán đánh giá và các thuật toán không có gradient tiên tiến, để thiết kế một quy trình lựa chọn thuật toán rộng lớn - và kiểm tra nó trên các hàm mục tiêu thực tế. Theo hiểu biết của chúng tôi, không có đối thủ cạnh tranh trực tiếp mà chúng tôi có thể so sánh vì lựa chọn thuật toán thường chỉ được thực hiện trên một tập con của các loại bài toán mà chúng tôi giải quyết. Tuy nhiên, chúng tôi đã vượt trội hơn các phương pháp lựa chọn thuật toán bản địa của Nevergrad (CMandAS và CMandAS2 [ 45]) trên YABBOB (Hình 2), mặc dù không có biên độ rộng như trên các bộ kiểm tra xa rời khỏi bối cảnh thông thường của chúng (Hình 3).
2 THIẾT KẾ SHIWA
Chúng tôi đề xuất Shiwa cho việc lựa chọn thuật toán. Nó sử dụng một tập hợp lớn các quy tắc lựa chọn thuật toán cho tối ưu hóa. Hầu hết các quy tắc này là thụ động, nhưng một số là chủ động.
2.1 Các thành phần
Các công cụ cơ bản của chúng tôi là các phương pháp từ [46]:
•Miền liên tục: chiến lược tiến hóa (ES) [ 5] bao gồm Ma trận Hiệp phương sai Thích ứng ES [ 23] (được viết tắt là "CMA" trong bài báo này), thuật toán ước lượng phân phối (EDA) [ 9,38,40], tối ưu hóa Bayes [ 27], tối ưu hóa bầy đàn hạt (PSO) [ 28], tiến hóa vi phân (DE) [ 36,50],

1Chúng tôi xem xét rằng một miền có thể đo được nếu nó được trang bị một số liệu có ý nghĩa, không nhị phân. Trong bài báo này, bất kỳ miền nào chứa biến phân loại rời rạc được coi là không thể đo được. Đây không phải là khái niệm toán học về khả năng đo được.arXiv:2004.14014v1  [cs.AI]  29 Tháng 4 2020

--- TRANG 2 ---
GECCO '20, ngày 8–12 tháng 7, 2020, Cancún, Mexico J. Liu, A. Moreau, M. Preuss, B. Roziere, F. Teytaud, J. Rapin, O. Teytaud
lập trình bậc hai tuần tự [ 1], Cobyla [ 43] và Pow-
ell [42].
•Tối ưu hóa rời rạc: thuật toán tiến hóa (1+1) cổ điển, Fast-GA [ 19] và trộn đều các tỷ lệ đột biến [ 17]. Chúng tôi cũng bao gồm một số toán tử tái tổ hợp [26].
•Tối ưu hóa có nhiễu: bandits [ 10], thuật toán với lấy mẫu lặp lại [18] và kiểm soát quần thể [25].
2.2 Kết hợp các thuật toán
Có nhiều công cụ khác nhau để kết hợp các thuật toán tối ưu hóa hiện có.
Thuật ngữ khác nhau tùy thuộc vào tác giả. Chúng tôi áp dụng các định nghĩa sau: Nối chuỗi: chạy một thuật toán, sau đó thuật toán khác, v.v., khởi tạo mỗi thuật toán sử dụng các kết quả thu được từ những thuật toán trước đó. Trong bài báo này, chúng tôi đề cập đến nối chuỗi khi một thuật toán chạy cho một phần của ngân sách tính toán, và thuật toán khác chạy cho phần còn lại. Ví dụ, một thuật toán memetic [ 44] chạy chiến lược tiến hóa ở đầu và phương pháp Powell [ 42] sau đó là một dạng nối chuỗi. Lựa chọn thuật toán thụ động [4]: quyết định được đưa ra ở đầu quá trình tối ưu hóa, trước khi thực hiện bất kỳ đánh giá nào. Chủ động

Shiwa
Có nhiễu và
không thể đo?
Không thể đo
và d≥60
Có nhiễu và
liên tục?
Không thể đo?
Liên tục và
ngân sách >30000 ?
Song song
>ngân sách/2?
Song song
>ngân sách/5?
Tuần tự và
ngân sách >6000
và d>7?
Tuần tự và
ngân sách <30d?d>30?
d≤2000 ?ES Lạc quan:
ES+tỷ lệ đột biến
đồng nhất +
thuật toán bandit
+tái tổ hợp
CMA với softmax
cho rời rạc
Kiểm soát quần thể
FastGA
3 bản sao CMA
trong 10% ngân sách
(lựa chọn chủ động),
sau đó chọn tốt nhất;
nửa cuối với Powell
metarecentering
Kiểm soát quần thể
+tái tổ hợp =
tốt nhất cho đến nay
nối chuỗi CMA +
Powell (memetic)
Cobyla
(1+1)-ES với quy tắc 1/5 CMA
DECó
Không
Có
Không
Có
Không
Có
Không
Có
Không
Có
Không
Có
Không
Có
Không
Có
KhôngKhông
Có
CóKhông

Hình 1: Thuật toán Shiwa sử dụng các thành phần được liệt kê trong Phần 2.1 dựa trên các giả thuyết được trình bày trong Phần 2.4.1. Chiều của bài toán được ký hiệu là d.lựa chọn thuật toán: kết quả sơ bộ của một số thuật toán tối ưu hóa có thể được sử dụng để chọn một trong số chúng. Phân chia: các biến được phân thành k nhóm biến G1, . . . , Gk. Sau đó một bộ tối ưu hóa Oi tối ưu hóa các biến trong Gi; có k bộ tối ưu hóa chạy đồng thời. Tất cả các bộ tối ưu hóa đều thấy cùng các giá trị fitness, và, tại mỗi lần lặp, ứng cử viên được thu được bằng cách nối các ứng cử viên được đề xuất bởi mỗi bộ tối ưu hóa. Thuật toán tối ưu hóa của chúng tôi sử dụng tất cả các kết hợp này, ngoại trừ phân chia - mặc dù có những bài toán mà phân chia trông giống như một giải pháp tốt và nên được sử dụng. Hầu hết các cải tiến là do lựa chọn thuật toán thụ động cho ngân sách tính toán vừa phải, trong khi về mặt tiệm cận, lựa chọn thuật toán chủ động trở nên quan trọng (đặc biệt là cho các trường hợp đa modal) và nối chuỗi (kết hợp chiến lược tiến hóa cho các giai đoạn đầu và các kỹ thuật lập trình toán học nhanh ở cuối) là một công cụ quan trọng cho ngân sách tính toán lớn.
2.3 Sơ bộ
2.3.1 Hỏi và nói và khuyến nghị. Trong tài liệu này, chúng tôi sử dụng cách trình bày "hỏi và nói" của các thuật toán, thuận tiện cho việc trình bày các kết hợp phương pháp. Cho một bộ tối ưu hóa o, o.ask trả về một ứng cử viên để được đánh giá tiếp theo. o.tell(x,v) thông báo cho o rằng giá trị tại x là v. o.numask là số lần o.ask đã được sử dụng. o.archive là danh sách các điểm đã thăm, với, đối với mỗi điểm, danh sách các đánh giá (lưu ý rằng cùng một ứng cử viên có thể đã được đánh giá nhiều lần, thường là để quản lý nhiễu). o.recommend cung cấp một xấp xỉ của tối ưu; đây thường là bước cuối cùng của một quá trình tối ưu hóa.
2.3.2 Biến đổi Softmax. [46] sử dụng biến đổi softmax để chuyển đổi bài toán tối ưu hóa rời rạc thành bài toán tối ưu hóa liên tục có nhiễu; ví dụ, một biến với 3 giá trị có thể a, b và c, trở thành một bộ ba biến liên tục va, vb và vc. Biến rời rạc có giá trị va với xác suất exp(va)/(exp(va)+exp(vb)+exp(vc)). Các thí nghiệm sơ bộ cho thấy rằng biến đổi đơn giản này có thể hoạt động tốt cho các biến rời rạc với hơn 2 giá trị.
2.3.3 Lạc quan, bi quan, mở rộng tiến bộ. Theo [ 14,24, 39,51], chúng tôi sử dụng các kết hợp của bandits, tăng trưởng tiến bộ của không gian tìm kiếm và tính toán tiến hóa như đã được phát triển trong Nevergrad. Các kết hợp như vậy được gắn nhãn "Lạc quan" trong Hình 1. Chúng tôi tham khảo [46] để biết chi tiết đầy đủ.
2.4 Thiết kế thuật toán
2.4.1 Giả thuyết. Thiết kế thuật toán Shiwa của chúng tôi dựa trên các giả thuyết sau: (i) (1+1)-ES tiêu chuẩn trong miền liên tục là đáng tin cậy cho ngân sách tính toán thấp / chiều cao. (ii) DE là một thuật toán cơ sở nổi tiếng. (iii) CMA hoạt động tốt trong chiều vừa phải [ 23], đặc biệt là cho các bài toán xoay điều kiện kém. (iv) Kiểm soát quần thể [ 25] được thiết kế cho tối ưu hóa tham số liên tục trong chiều cao với hàm tối ưu hóa có nhiễu. (v) Trong các cài đặt tối ưu hóa có nhiễu khác, có thể sử dụng kết hợp "lạc quan" của thuật toán bandit và tính toán tiến hóa [ 24,31] như được mô tả chi tiết ở trên. (vi) Kiểm soát quần thể có thể được sử dụng để tăng kích thước quần thể trong trường hợp trì trệ, ngay cả khi không có nhiễu (xem mã "NaiveTBPSA" trong [ 46]). (vii) Thuật toán MetaRecentering [ 11] thắng trong các đánh giá trong nhiều

--- TRANG 3 ---
Tối ưu hóa Hộp đen Đa năng GECCO '20, ngày 8–12 tháng 7, 2020, Cancún, Mexico
bài toán tối ưu hóa một lần trong [ 46]: nó là sự kết hợp của lấy mẫu Hammersley [ 21], xáo trộn [ 2], và tỷ lệ tự động [ 11]. (vii) Thuật toán tối ưu hóa liên tục kết hợp với softmax có thể được sử dụng cho tối ưu hóa rời rạc trong trường hợp bảng chữ cái có lực lượng >2, theo kết quả của chúng tôi trong các cài đặt rời rạc (chưa được trình bày nhưng có sẵn trực tuyến2), mặc dù trường hợp bảng chữ cái rời rạc có lực lượng 2 được xử lý một cách cổ điển với các phương pháp tiến hóa rời rạc cổ điển [ 17,19]. (viii) Danh mục đầu tư chủ động được thiết kế cho ngân sách tính toán lớn (các phương pháp danh mục đầu tư chủ động đơn giản, CMandAS và CMandAS2, được xếp hạng thứ 1 và thứ 3 trong Hình 3a), với các phương pháp đề xuất của chúng tôi chỉ là đối thủ cạnh tranh. (ix) Một số thuật toán yêu cầu ngân sách tính toán tuyến tính theo chiều để khởi tạo, do đó hiệu suất kém xảy ra khi ngân sách tính toán thấp so với chiều.
2.4.2 Thuật toán: Shiwa. Dựa trên các giả thuyết được trình bày ở trên, chúng tôi đã thiết kế một thuật toán có cấu trúc như một cây quyết định (xem Hình 1). Các hằng số trong cây quyết định này đã được sửa đổi sử dụng các thí nghiệm sơ bộ trên bộ kiểm tra YABBOB (được định nghĩa bên dưới): Shiwa như được hiển thị trong Hình 1 là kết quả cuối cùng. Các thuật toán được đề cập trong các hộp của Hình 1 đã tồn tại trước trong Nevergrad. Thuật toán Shiwa của chúng tôi đã được hợp nhất vào Nevergrad [ 46] và do đó có thể thấy công khai ở đó3.
3 THÍ NGHIỆM
Chúng tôi so sánh Shiwa với các thuật toán từ Nevergrad trên một tập hợp lớn và đa dạng các bài toán. Kết quả của các thí nghiệm này, tất cả đều được sản xuất bằng Nevergrad, được tóm tắt trong Hình 2, 3, 4, 5, 6 và 7. Các biểu đồ được tạo như sau.
Một số hàng hạn chế được trình bày (hàng đầu cho tốt nhất). Mỗi hàng tương ứng với một bộ tối ưu hóa. Các bộ tối ưu hóa được xếp hạng theo điểm số của chúng. Điểm số của một bộ tối ưu hóa o trong một bộ kiểm tra T là tần suất, được tính trung bình trên tất cả các bài toán p∈T và trên tất cả các bộ tối ưu hóa o′ được bao gồm trong các thí nghiệm, của o vượt trội hơn o′ trên p∈T. Các bài toán khác nhau về hàm mục tiêu, tham số hóa, ngân sách tính toán T, chiều d, sự hiện diện của xoay ngẫu nhiên hay không, và mức độ song song hóa. "o vượt trội hơn o′ trên một hàm f" có nghĩa là f(o.recommend)<f(o′.recommend), với giá trị chân lý là 1⁄2 trong trường hợp bằng nhau. Tương tự như [ 22], việc so sánh được thực hiện giữa các triển khai, không phải giữa các thuật toán trừu tượng; các triển khai chi tiết có sẵn miễn phí và mã nguồn mở trong [ 46] hoặc trong các mô-đun được nhập ở đó. Các cột tương ứng với các bộ tối ưu hóa giống nhau, nhưng có nhiều bộ tối ưu hóa được bao gồm hơn. Tuy nhiên, không phải tất cả các bộ tối ưu hóa đều được hiển thị. Trong dấu ngoặc, chúng ta có thể thấy có bao nhiêu trường hợp đã chạy trong tổng số bao nhiêu thực thể tồn tại; ví dụ 244/252 có nghĩa là có 252 thực thể, nhưng chỉ 244 được chạy thành công. Một lỗi có thể do lỗi, hoặc, trong hầu hết các trường hợp, do hết thời gian - một số bộ tối ưu hóa trở nên đắt đỏ về mặt tính toán trong các bài toán có chiều cao và không hoàn thành được.
Thiết lập chi tiết và tính tái tạo. Thiết lập chi tiết của các đánh giá của chúng tôi có sẵn trực tuyến4. Chúng tôi không thay đổi bất kỳ cài đặt nào. Các biểu đồ của chúng tôi là những biểu đồ được tạo ra tự động và định kỳ bởi

2http://dl.fbaipublicfiles.com/nevergrad/allxps/list.html
3https://github.com/facebookresearch/nevergrad/blob/master/nevergrad/
optimization/optimizerlib.py
4https://github.com/facebookresearch/nevergrad/blob/master/nevergrad/benchmark/
experiments.py

Hình 2: YABBOB: Tối ưu hóa tuần tự với ngân sách tính toán T∈ {50,200,800,3200 ,12800}. Hướng dẫn đọc: chúng ta thấy rằng Shiwa hoạt động tốt hơn trung bình trên tất cả các thí nghiệm YABBOB, so với mỗi thuật toán khác (tức là tất cả các màu trong hàng của Shiwa đều ≥50%). Trung bình trên tất cả các thí nghiệm YABBOB, Shiwa thắng với xác suất 68,5% so với các phương pháp khác. "thắng" có nghĩa là điểm được khuyến nghị bởi Shiwa có giá trị fitness tốt hơn so với điểm được khuyến nghị bởi phương pháp khác (hòa có giá trị chân lý 1⁄2). CMandAS và CMandAS2 là các phương pháp danh mục đầu tư chủ động đơn giản có mặt trong Nevergrad và được mô tả đầy đủ ở đó.
Nevergrad. Trong các bộ kiểm tra nhân tạo, Nevergrad xem xét các trường hợp với số lượng biến quan trọng khác nhau (tức là các biến có tác động đến các hàm fitness) và các biến vô dụng (có thể bằng không). Cũng có các trường hợp xoay và không xoay. Thiết lập chi tiết ở URL trên. Chúng tôi cung cấp một bài thuyết trình cấp cao về các đánh giá trong tài liệu này.
Ý nghĩa thống kê. Mỗi thí nghiệm chứa một số cài đặt. Tổng số lần lặp lại thay đổi, nhưng luôn có ít nhất 200 lần lặp lại ngẫu nhiên (tích lũy qua các cài đặt khác nhau) cho mỗi kết quả được hiển thị trong các biểu đồ của chúng tôi, và ít nhất 5 lần lặp lại cho mỗi cài đặt. Quan trọng là, Nevergrad định kỳ chạy lại tất cả các đánh giá với tất cả các thuật toán: chúng ta có thể thấy các lần chạy lại độc lập của tất cả các kết quả được trình bày trong bài báo này tại http://dl.fbaipublicfiles.com/nevergrad/allxps/list.html, cộng với các thí nghiệm bổ sung (bao gồm cái gọi là YAWIDEBBOB mở rộng YABBOB) và kết quả về cơ bản giống nhau.
3.1 YABBOB: Một Đánh giá Tối ưu hóa Hộp đen Khác
YABBOB là một đánh giá các bài toán tối ưu hóa hộp đen. Nó gần đúng BBOB [ 22], mà không tuân thủ chính xác. Do đó, CMA hoạt động tốt nhất trên nó. YABBOB có các ưu điểm sau. Nó là một phần của một nền tảng được duy trì và dễ sử dụng. Các thuật toán tối ưu hóa được bao gồm tự nhiên trong một nền tảng mã nguồn mở. Mọi người có thể chạy lại mọi thứ. Có một bản đối tác tối ưu hóa có nhiễu, không có các vấn đề đã biết trong BBOB [ 6,7,15,16].

--- TRANG 4 ---
GECCO '20, ngày 8–12 tháng 7, 2020, Cancún, Mexico J. Liu, A. Moreau, M. Preuss, B. Roziere, F. Teytaud, J. Rapin, O. Teytaud
(a) YABIGBBOB: bản đối tác của YABBOB với T∈{40000 ,80000},d∈ {2,10,50}. Vashi và Medusa là các bản sao của Shiwa đôi khi có mặt trong nền tảng Nevergrad.
(b) YAHDBBOB: bản đối tác của YABBOB với d∈ {100,1000,3000}. CMA hoạt động kém trong trường hợp này.
(c) YANOISYBBOB: bản đối tác của YABBOB với nhiễu Gaussian được thêm vào, với phương sai không biến mất về không tại tối ưu. Shiwa ngang bằng với các phương pháp tốt trong các bài toán có nhiễu.
(d) YAPARABBOB: bản đối tác của YABBOB với 100 worker song song. Medusa là một bản sao của Shiwa đôi khi có mặt trong nền tảng Nevergrad.
Hình 3: Các biến thể của YABBOB: YANOISYBBOB, YAHDBBOB, YAPARABBOB, YABIGBBOB, tương ứng với bản đối tác có nhiễu, chiều cao, song song, ngân sách tính toán lớn. T là ngân sách tính toán và d chỉ chiều. Shiwa tốt trong tất cả các danh mục, thường hoạt động tốt nhất, và luôn cạnh tranh tốt với tốt nhất trong danh mục đó.
Có nhiều biến thể, song song hay không, có nhiễu hay không, chiều cao hay không, ngân sách tính toán lớn hay không. Cùng một nền tảng bao gồm một loạt các bộ kiểm tra thế giới thực, chuyển từ nhân tạo sang thế giới thực chỉ là một tham số để thay đổi trong dòng lệnh.
3.2 Đào tạo: bộ kiểm tra nhân tạo
Chúng tôi đã thiết kế Shiwa bằng cách chế tạo thủ công một thuật toán như được hiển thị trong Hình 1, trong đó các hằng số đã được điều chỉnh trên YABBOB (Hình 2) bằng thử và sai. Sau đó, các biến thể của YABBOB, cụ thể là YANOISYBBOB, YAHDBBOB, YAPARABBOB (tương ứng là các bản đối tác có nhiễu, chiều cao, và song song của YABBOB), được trình bày trong Hình 3, và một số đánh giá khác (xem chi tiết trong Phần 3.3) được sử dụng để kiểm tra tính tổng quát của Shiwa. Bảng 1 và 2 trình bày các đánh giá của chúng tôi. Ngoài ra, chúng tôi xác thực kết quả của mình trên một bộ kiểm tra thế giới thực rộng trong Phần 3.4.

--- TRANG 5 ---
Tối ưu hóa Hộp đen Đa năng GECCO '20, ngày 8–12 tháng 7, 2020, Cancún, Mexico
(a) ARcoating: tính chất quang học của các cấu trúc lớp. Shiwa bị vượt trội bởi (1+1)-ES đơn giản; đối với bài toán Photonics tổng quát hơn (bao gồm phạm vi rộng hơn các trường hợp) thì không như vậy.
(b) FastGames (điều chỉnh chiến lược tại các trò chơi thực tế; zero sử dụng một chính sách đã được tối ưu hóa, do đó không phải là đối thủ cạnh tranh thực sự.)
Hình 4: Kết quả trên các họ bài toán đồng nhất cụ thể (tiếp tục trong Hình 5). Shiwa hoạt động tốt tổng thể.
Bảng 1: Bộ kiểm tra YABBOB và các biến thể. Các hàm mục tiêu là Hm, Rastrigin, Griewank, Rosenbrock, Ackley, Lunacek, DeceptiveMultimodal, BucheRastrigin, Multipeak, Sphere, DoubleLinearSlope, StepDoubleLinearSlope, Cigar, AltCigar, Ellipsoid, AltEllipsoid, StepEllipsoid, Discus, BentCigar, DeceptiveIllcond, DeceptiveMultimodal, DeceptivePath. Chi tiết đầy đủ trong [46]. Hướng dẫn đọc: đánh giá YABBOB chứa tất cả các hàm này, được kiểm tra trong chiều 2, 10 và 50; với ngân sách từ 50 đến 12800; cả trong trường hợp xoay và không xoay; không có nhiễu, và luôn với dịch chuyển ngẫu nhiên +N(0,Id).
Tên Chiều Ngân sách Song song Dịch chuyển Xoay Nhiễu
YABBOB 2, 10, 50 50, 200, 800, 3200, 12800 1 (tuần tự) +N(0,Id) { có,không} Không
YABIGBBOB 2, 10, 50 40000, 80000 1 (tuần tự) +N(0,Id) { có,không} Không
YAHDBBOB 100, 1000, 3000 50, 200, 800, 3200, 12800 1 (tuần tự) +N(0,Id) { có,không} Không
YANOISYBBOB 2, 10, 50 50, 200, 800, 3200, 12800 1 (tuần tự) +N(0,Id) { có,không} Có
Bảng 2: Các đánh giá khác được sử dụng trong bài báo này, ngoài YABBOB và các biến thể của nó. Chi tiết đầy đủ trong [46].
Danh mục Tên Mô tả
Thế giới thực ARCoating Tối ưu hóa lớp phủ chống phản xạ.
Photonics Tính chất quang học: Bragg, Morpho và Chirped.
FastGames Điều chỉnh các tác nhân chơi trò chơi chiến tranh, Batawaf, GuessWho, BigGuessWho Flip.
MLDA Bộ kiểm tra máy học và phân tích dữ liệu [20]
Realworld Bao gồm nhiều bộ kiểm tra trên và các bộ khác, ví dụ bài toán người bán hàng du lịch.
Nhân tạo Multiobjective 2 hoặc 3 hàm mục tiêu trong số Sphere, Ellipsoid, Hm và Cigar trong chiều 6 hoặc 7, tuần tự hoặc 100 worker, ngân sách từ 100 đến 5900.
Manyobjective Tương tự với 6 hàm mục tiêu.
Multimodal Hm, Rastrigin, Griewank, Rosenbrock, Ackley, Lunacek, DeceptiveMultimodal trong chiều 3 đến 25, tuần tự, ngân sách từ 3000 đến 100000
Paramultimodal Tương tự với 1000 worker.
Illcondi Cigar, Ellipsoid, chiều 50, ngân sách 100 đến 10000, cả xoay và không xoay.
SPSA Sphere, Cigar, các dịch chuyển khác nhau, nhiễu mạnh.

--- TRANG 6 ---
GECCO '20, ngày 8–12 tháng 7, 2020, Cancún, Mexico J. Liu, A. Moreau, M. Preuss, B. Roziere, F. Teytaud, J. Rapin, O. Teytaud
(a) Tối ưu hóa đa mục tiêu (tập hợp các bài toán với 2 hoặc 3 mục tiêu). Siêu thể tích âm được sử dụng làm giá trị fitness để chuyển đổi bài toán đa mục tiêu này thành một mục tiêu đơn. Xem (5b) để thảo luận.
(b) Tối ưu hóa nhiều mục tiêu (tập hợp các bài toán với 6 mục tiêu). Shiwa và CMA hoạt động ngang bằng cho hai trường hợp đa mục tiêu này (5a) và (5b).
(c) MLDA: Máy học và Phân tích Dữ liệu [20].
(d) Tối ưu hóa đa modal: hm, Rastrigin, Griewank, Rosenbrock, Ackley, Lunacek, DeceptiveMultimodal; 3 hoặc 25 biến quan trọng; 0 hoặc 5 biến vô dụng cho mỗi biến quan trọng; T∈ {3000,10000 ,30000 ,100000}.
Hình 5: Chúng tôi ở đây vẽ biểu đồ kết quả trên các họ bài toán đồng nhất cụ thể khác (tiếp tục Hình 4; tiếp tục trong Hình 6).
3.3 Minh họa: các họ đánh giá đồng nhất.
Chúng tôi ở đây xem xét các bài kiểm tra không trực tiếp từ các biến thể YABBOB. Một số hàm chung cho một số YABBOB; phần này, trái ngược với phần tiếp theo, không nhằm mục đích là một bài kiểm tra hoàn toàn độc lập: các bài kiểm tra này hoặc liên quan đến YABBOB hoặc đến các bài kiểm tra thế giới thực từ phần tiếp theo. Phần này minh họa hành vi của Shiwa trên các họ hàm khác nhau, cho mục đích phân tích. Kết quả được trình bày trong Hình 4, 5 và 6 và 7. T và d trong các chú thích đề cập đến ngân sách tính toán và chiều, tương ứng. Chúng tôi giữ tên của các thí nghiệm này như trong [ 46]. Bối cảnh của Hình 7 (bài toán "illcondi" trong Nevergrad) như sau: các bài toán điều kiện kém mượt, cụ thể là Cigar và Ellipsoid, cả xoay và không xoay, trong chiều 50 với ngân sách tính toán vừa phải (từ 100 đến 10000). Không có gì ngạc nhiên, đối với các bài toán này mà tính gồ ghề là không và thách thức là giải quyết điều kiện kém trong ngân sách tính toán vừa phải, SQP và Cobyla vượt trội hơn tất cả các phương pháp dựa trên thăm dò ngẫu nhiên: Shiwa (và biến thể Urchin của nó) có thể cạnh tranh, mà không biết gì về các hàm mục tiêu, bởi vì, dựa trên ngân sách tính toán thấp nó chuyển sang nối chuỗi CMA và Powell hoặc sang Cobyla (tùy thuộc vào ngân sách, xem Hình 1), chứ không phải các phương pháp tiến hóa cổ điển một mình.

--- TRANG 7 ---
Tối ưu hóa Hộp đen Đa năng GECCO '20, ngày 8–12 tháng 7, 2020, Cancún, Mexico
(a) Đa modal Song song (1000 worker song song).
(b) Bài kiểm tra SPSA: đánh giá có nhiễu được thiết kế để kiểm tra Xấp xỉ Ngẫu nhiên Nhiễu loạn Đồng thời (SPSA) [47].
Hình 6: Chúng tôi ở đây vẽ biểu đồ kết quả trên các họ bài toán đồng nhất cụ thể khác (tiếp tục Hình 5).
Hình 7: Tối ưu hóa điều kiện kém ("illcondi" trong [46]). Ở đây có khoảng cách lớn giữa các thuật toán hàng đầu và những thuật toán khác - các thuật toán tiến hóa không cạnh tranh được trên các hàm điều kiện kém mượt.
3.4 Kiểm tra: bộ kiểm tra thế giới thực
Chúng tôi kiểm tra phương pháp của mình trên tập hợp các bài toán "realworld" trong [ 46]. Điều này chứa Bài toán Người bán hàng Du lịch (TSP), Quản lý Hệ thống Điện, Photonics, ARCoating (thiết kế lớp phủ chống phản xạ trong quang học [ 13]), Ứng dụng Máy học và Dữ liệu (MLDA [ 20]), Trò chơi (tối ưu hóa chính sách, bao gồm các miền không thể đo được). Kết quả được trình bày trong Hình 8, và các bài toán trong hình này đều độc lập với các biến thể YABBOB được sử dụng để tinh chỉnh Shiwa. Các bài toán Photonics và ARCoating là một trong những đóng góp của chúng tôi. Các bài toán Photonics thực sự có tính tiến hóa theo nghĩa rằng các giải pháp tốt nhất tương ứng với các cấu trúc quang học xảy ra trong tự nhiên [ 3] và do đó đã được tạo ra bởi tiến hóa. Các bộ kiểm tra này được đặc trưng bởi số lượng rất lớn các cực tiểu địa phương vì những cấu trúc này có khả năng trình bày nhiều cộng hưởng. Cuối cùng, các bài toán này đặc biệt có tính mô-đun,
Hình 8: Kiểm tra trên các bài toán thế giới thực, trong đánh giá "realworld" từ Nevergrad. Hình duy nhất này tổng hợp nhiều bài toán thế giới thực từ [46] như được tài liệu hóa ở đó - ở đây Shiwa vượt trội hơn hầu hết các đối thủ cạnh tranh vì nó hoạt động tốt trên tất cả các họ con của các bài toán. Bộ kiểm tra này chứa 21 hàm khác nhau, được kiểm tra trên 3 mức độ song song khác nhau, và nhiều ngân sách riêng biệt. Urchin là một biến thể của Shiwa.
các phần khác nhau của cấu trúc đóng vai trò khác nhau mà không thực sự độc lập.
4 KẾT LUẬN
Chúng tôi đã thiết kế Shiwa (Phần 2.4.2), một thuật toán tối ưu hóa đa năng giải quyết các bài toán tối ưu hóa trên các miền tùy ý (liên tục hoặc rời rạc hoặc hỗn hợp), có nhiễu hay không, song song hoặc một lần hoặc tuần tự, và vượt trội hơn nhiều phương pháp nhờ vào sự kết hợp của nhiều thuật toán tối ưu hóa. Các nhận xét trong

--- TRANG 8 ---
GECCO '20, ngày 8–12 tháng 7, 2020, Cancún, Mexico J. Liu, A. Moreau, M. Preuss, B. Roziere, F. Teytaud, J. Rapin, O. Teytaud
Hình 9: Kiểm tra trên các bài toán photonics, cụ thể là Bragg, Morpho và Chirped. Thí nghiệm này là một trong những đóng góp của chúng tôi: nó kết hợp các thí nghiệm tuần tự và 50-song song, với chiều từ 60 đến 80 và ngân sách tính toán từ 100 đến 10000. Urchin là một bản sao được sửa đổi nhẹ của Shiwa.
Phần 2.4.1, cụ thể là so sánh giữa các bộ tối ưu hóa trên các miền khác nhau, có giá trị khoa học tự thân, và không hiển thị trong nhiều bộ kiểm tra hiện có. Kết quả thí nghiệm bao gồm những kết quả nhân tạo: những kết quả này trên YABBOB có thể bị thiên lệch do kết quả trên YABBOB được sử dụng để thiết kế Shiwa. Nhưng kết quả cũng tốt trên các biến thể của YABBOB không được sử dụng để thiết kế thuật toán (Hình 3), và trên một bộ kiểm tra thế giới thực rộng, công khai, cụ thể là "realworld" từ Nevergrad, và trên việc triển khai Photonics mới của chúng tôi. Kết quả đặc biệt tốt cho các họ bài toán rộng, mà không có phương pháp đồng nhất nào có thể hoạt động tốt một mình. Shiwa cũng có thể tính đến sự hiện diện của nhiễu (không cần biết cường độ nhiễu, hiếm khi có sẵn trong đời thực), loại biến, ngân sách tính toán, chiều, tính song song, để trích xuất tốt nhất của mỗi phương pháp và vượt trội hơn các phương pháp hiện có. Như một ví dụ về tính linh hoạt, Shiwa vượt trội hơn CMA trên YABBOB, xuất sắc trên các đánh giá thế giới thực, trên các bài toán photonics mới, và trên các bài toán bậc hai điều kiện kém, và vượt trội hơn hầu hết các phương pháp tối ưu hóa một lần. Trong Hình 8, bao gồm một phạm vi rộng các bài toán chưa bao giờ được sử dụng trong thiết kế Shiwa, Shiwa đã hoạt động tốt. Khả năng tái tạo có ý nghĩa: tất cả mã của chúng tôi được tích hợp trong [46] và có sẵn công khai. Hạn chế. Chúng tôi gặp các lớp hàm mà chúng tôi không thể trở nên tốt hơn ở lớp đầu, mà không làm suy giảm ở lớp thứ hai. Thường thì, chúng tôi hài lòng với kết quả trong các trường hợp song song, một lần, chiều cao hoặc điều kiện kém: chúng tôi có kết quả tốt cho bất kỳ trường hợp nào trong số này, mà không làm suy giảm các cài đặt cổ điển hơn. Việc mở rộng cho các trường hợp có nhiễu hoặc rời rạc cũng rất đơn giản và không có nhược điểm. Nhưng đối với các cài đặt đa modal khó so với các hàm đơn modal điều kiện kém, chúng tôi đã cố gắng hết sức để chọn một thỏa hiệp thực tế nhưng không thể có thứ gì đó tối ưu cho cả hai. Định lý không có bữa trưa miễn phí [ 52] thực sự nói với chúng tôi rằng chúng tôi không thể tối ưu toàn cầu. Nghiên cứu bổ sung trong phần lựa chọn chủ động có thể giúp ích.
Công việc tiếp theo. 1. Chúng tôi xem xét việc tính đến, như một đặc tính bài toán, chi phí tính toán của hàm mục tiêu, sự hiện diện của ràng buộc, và, đặc biệt để có tính linh hoạt hơn về các bài toán đa modal so với đơn modal và gồ ghề so với mượt, sử dụng các danh mục đầu tư chủ động hơn (tức là trực tuyến), hoặc phân tích fitness. 2. Một thách thức là phân tích đệ quy miền để kết hợp các thuật toán khác nhau trên các nhóm biến khác nhau: điều này đang được tiến hành. 3. Các thuật toán phân chia có mặt trong [46]. Chúng tôi cảm thấy rằng chúng khá tốt trong chiều cao và có thể là một phần của Shiwa. 4. Tối ưu hóa Bầy đàn Hạt xuất sắc trong một số trường hợp khó khăn: chúng tôi cố gắng tận dụng nó bằng cách tích hợp nó vào Shiwa. 5. Chúng tôi không trình bày các thí nghiệm của mình trong các cài đặt rời rạc: tuy nhiên chúng có thể được lấy trong phần có tiêu đề "wide-discrete" của http://dl.fbaipublicfiles.com/nevergrad/allxps/list.html. Chúng tôi thấy ở đó hiệu suất tốt của các công cụ sử dụng softmax, bao gồm Shiwa. Chúng tôi không bao gồm điều này trong bài báo hiện tại vì, trong bối cảnh không gian hạn chế, không có đủ sự đa dạng trong các thí nghiệm. Một phân tích kỹ lưỡng về phương pháp này, khá mới và ngoài phạm vi của công trình hiện tại dành riêng cho lựa chọn thuật toán, được để lại như công việc tiếp theo. 6. Shiwa chủ yếu được thiết kế bởi kiến thức khoa học, và một chút bằng thử và sai trên YABBOB. Chúng tôi đoán kết quả tốt hơn nhiều có thể đạt được bằng một phân tích có hệ thống hơn, ví dụ tối ưu hóa số trên một bản đối tác rộng hơn của YABBOB. 7. Tích hợp ví dụ [33] cho các trường hợp chiều cao cũng là một khả năng.
LỜI CẢM ƠN
Tác giả J. Liu được hỗ trợ bởi Chương trình R&D Trọng điểm Quốc gia Trung Quốc (Grant No. 2017YFC0804003), Quỹ Khoa học Tự nhiên Quốc gia Trung Quốc (Grant No. 61906083), Phòng thí nghiệm Trọng điểm Tỉnh Quảng Đông (Grant No. 2020B121201001), Chương trình Giới thiệu Đội ngũ Đổi mới và Khởi nghiệp Quảng Đông (Grant No. 2017ZT07X386), Quỹ Ủy ban Đổi mới Khoa học và Công nghệ Thâm Quyến (Grant No. JCYJ20190809121403553), Chương trình Khoa học và Công nghệ Thâm Quyến (Grant No. KQTD2016112514355531) và Chương trình Phòng thí nghiệm Trọng điểm Đại học Tỉnh Quảng Đông (Grant No. 2017KSYS008).
TÀI LIỆU THAM KHẢO
[1]Artelys. 2019. Artelys Knitro, người chiến thắng phiên bản BBComp 2019. https: //www.artelys.com/news/solvers-news/knitro-bbcomp-winner/
[2]Emanouil I Atanassov. 2004. Về sự khác biệt của chuỗi Halton. Math. Balkanica (NS) 18, 1-2 (2004), 15–32.
[3]Mamadou Aliou Barry, Vincent Berthier, Bodo D. Wilts, Marie-Claire Cam- bourieux, Rémi Pollés, Olivier Teytaud, Emmanuel Centeno, Nicolas Biais, và Antoine Moreau. 2018. Thuật toán tiến hóa hội tụ hướng đến các cấu trúc quang học sinh học đã tiến hóa. arXiv:1808.04689 [physics.optics]
[4]Nicolas Baskiotis và Michèle Sebag. 2004. Bản đồ năng lực C4.5: một phương pháp được truyền cảm hứng từ chuyển pha. Trong Máy học, Kỷ yếu Hội nghị Quốc tế lần thứ hai mươi mốt (ICML 2004), Banff, Alberta, Canada, 4-8 tháng 7, 2004 .
[5] H.-G. Beyer. 2001. Lý thuyết về Chiến lược Tiến hóa . Springer, Heideberg.
[6]Hans-Georg Beyer. 2012. http://lists.lri.fr/pipermail/bbob-discuss/2012-April/ 000270.html.
[7]Hans-Georg Beyer. 2012. http://lists.lri.fr/pipermail/bbob-discuss/2012-April/ 000258.html.

--- TRANG 9 ---
Tối ưu hóa Hộp đen Đa năng GECCO '20, ngày 8–12 tháng 7, 2020, Cancún, Mexico
[8]Bernd Bischl, Pascal Kerschke, Lars Kotthoff, Thomas Marius Lindauer, Yuri Malitsky, Alexandre Fréchette, Holger H. Hoos, Frank Hutter, Kevin Leyton-Brown, Kevin Tierney, và Joaquin Vanschoren. 2016. ASlib: Một Thư viện Đánh giá cho Lựa chọn Thuật toán. Trí tuệ Nhân tạo (AIJ) 237 (2016), 41 – 58. https://doi.org/10.1016/j.artint.2016.04.003
[9]Peter AN Bosman và Dirk Thierens. 2000. Mở rộng từ Rời rạc sang Liên tục Thuật toán Ước lượng Phân phối: IDEA. Trong Hội nghị Quốc tế về Giải quyết Vấn đề Song song từ Tự nhiên . Springer, 767–776.
[10] Sébastien Bubeck, Rémi Munos, và Gilles Stoltz. 2011. Thăm dò thuần túy trong bandits hữu hạn tay và liên tục tay. Theor. Comput. Sci. 412, 19 (2011), 1832–1852.
[11] M. L. Cauwet, C. Couprie, J. Dehos, P. Luc, J. Rapin, M. Riviere, F. Teytaud, và O. Teytaud. 2019. Tìm kiếm Siêu tham số Hoàn toàn Song song: Không gian Lấp đầy Tái tạo hình dạng. Arxiv eprint 1910.08406 (2019).
[12] Marie-Liesse Cauwet, Jialin Liu, Baptiste Rozière, và Olivier Teytaud. 2016. Danh mục đầu tư thuật toán cho tối ưu hóa có nhiễu. Annals of Mathematics and Artificial Intelligence 76, 1-2 (2016), 143–172.
[13] Emmanuel Centeno, Amira Farahoui, Rafik Smaali, Angélique Bousquet, François Réveret, Olivier Teytaud, và Antoine Moreau. 2019. Lớp phủ chống phản xạ siêu mỏng được thiết kế bằng Tiến hóa Vi phân. arXiv:1904.02907 [physics.optics]
[14] Rémi Coulom. 2007. Tính toán xếp hạng "ELO" của các mẫu nước cờ trong trò chơi cờ vây. Tạp chí ICGA 30, 4 (2007), 198–208.
[15] Remi Coulom. 2012. http://lists.lri.fr/pipermail/bbob-discuss/2012-April/000257. html.
[16] Remi Coulom. 2012. http://lists.lri.fr/pipermail/bbob-discuss/2012-April/000252. html.
[17] Duc-Cuong Dang và Per Kristian Lehre. 2016. Tự thích ứng Tỷ lệ Đột biến trong Quần thể Không ưu tú. Trong Giải quyết Vấn đề Song song từ Tự nhiên - PPSN XIV - Hội nghị Quốc tế lần thứ 14, Edinburgh, UK, 17-21 tháng 9, 2016, Kỷ yếu . 803–813.
[18] Jérémie Decock và Olivier Teytaud. 2013. Độ phức tạp Tối ưu hóa Nhiễu dưới Giả định Địa phương. Trong Kỷ yếu Hội thảo thứ Mười hai về Nền tảng Thuật toán Di truyền XII (Adelaide, Australia) (FOGA XII '13) . ACM, New York, NY, USA, 183–190.
[19] Benjamin Doerr, Huu Phuoc Le, Régis Makhmara, và Ta Duy Nguyen. 2017. Thuật toán Di truyền Nhanh. Trong Kỷ yếu Hội nghị Tính toán Di truyền và Tiến hóa (GECCO '17) . ACM, 777–784.
[20] Marcus Gallagher và Sobia Saleem. 2018. Phân tích Cảnh quan Khám phá của Tập hợp Vấn đề MLDA. Trong Kỷ yếu Hội thảo PPSN18 .
[21] J. M. Hammersley. 1960. Phương pháp Monte-Carlo Để Giải quyết Vấn đề Đa biến. Annals of the New York Academy of Sciences 86, 3 (1960), 844–874.
[22] Nikolaus Hansen, Anne Auger, Steffen Finck, và Raymond Ros. 2012. Đánh giá Tối ưu hóa Hộp đen Tham số Thực: Thiết lập Thí nghiệm . Báo cáo Kỹ thuật. Université Paris Sud, INRIA Futurs, Équipe TAO, Orsay, France. http: //coco.lri.fr/BBOB-downloads/download11.05/bbobdocexperiment.pdf
[23] Nikolaus Hansen và Andreas Ostermeier. 1996. Thích ứng phân phối đột biến bình thường tùy ý trong chiến lược tiến hóa: Thích ứng ma trận hiệp phương sai. Trong Kỷ yếu hội nghị quốc tế IEEE về tính toán tiến hóa . IEEE, 312–317.
[24] Verena Heidrich-Meisner và Christian Igel. 2009. Cuộc đua Hoeffding và Bernstein để Lựa chọn Chính sách trong Tìm kiếm Chính sách Trực tiếp Tiến hóa. Trong Kỷ yếu Hội nghị Quốc tế hàng năm lần thứ 26 về Máy học (ICML '09) . ACM, 401–408.
[25] Michael Hellwig và Hans-Georg Beyer. 2016. Tiến hóa Dưới Nhiễu Mạnh: Một Chiến lược Tiến hóa Tự thích ứng Có thể Đạt Giới hạn Hiệu suất Thấp hơn - pcCMSA-ES. Trong Giải quyết Vấn đề Song song từ Tự nhiên – PPSN XIV , Julia Handl, Emma Hart, Peter R. Lewis, Manuel López-Ibáñez, Gabriela Ochoa, và Ben Paechter (Eds.). Springer International Publishing, Cham, 26–36.
[26] John H. Holland. 1973. Thuật toán Di truyền và Phân bổ Tối ưu các Thử nghiệm. SIAM J. Comput. 2, 2 (1973), 88–105.
[27] Donald R. Jones, Matthias Schonlau, và William J. Welch. 1998. Tối ưu hóa Toàn cục Hiệu quả của Các Hàm Hộp đen Đắt tiền. Journal of Global Optimization 13, 4 (01 Dec 1998), 455–492. https://doi.org/10.1023/A:1008306431147
[28] James Kennedy và Russell C. Eberhart. 1995. Tối ưu hóa bầy đàn hạt. Trong Kỷ yếu Hội nghị IEEE về Mạng Neural . 1942–1948.
[29] Pascal Kerschke, Holger H. Hoos, Frank Neumann, và Heike Trautmann. 2018. Lựa chọn Thuật toán Tự động: Khảo sát và Quan điểm. Tính toán Tiến hóa (ECJ) (2018), 1 – 47. https://doi.org/10.1162/evco_a_00242
[30] Pascal Kerschke và Heike Trautmann. 2018. Lựa chọn Thuật toán Tự động trên Các Vấn đề Hộp đen Liên tục Bằng cách Kết hợp Phân tích Cảnh quan Khám phá và Máy học. Tính toán Tiến hóa (ECJ) (2018), 1 – 28. https: //doi.org/10.1162/evco_a_00236[31] Vasil Khalidov, Maxime Oquab, Jérémy Rapin, và Olivier Teytaud. 2019. Kiểm soát quần thể nhất quán: tạo ra nhiều điểm, nhưng với một chút lấy mẫu lại. Trong Kỷ yếu Hội nghị ACM/SIGEVO lần thứ 15 về Nền tảng Thuật toán Di truyền, FOGA 2019, Potsdam, Đức, 27-29 tháng 8, 2019 . 116–123. https://doi.org/10.1145/3299904.3340312
[32] Lars Kotthoff. 2014. Lựa chọn Thuật toán cho Các Vấn đề Tìm kiếm Tổ hợp: Một Khảo sát. Tạp chí AI 35, 3 (2014), 48 – 60. https://doi.org/10.1609/aimag.v35i3. 2460
[33] I. Loshchilov, T. Glasmachers, và H.-G. Beyer. 2019. Tối ưu hóa Hộp đen Quy mô Lớn bằng Thích ứng Ma trận Bộ nhớ Giới hạn. Giao dịch IEEE về Tính toán Tiến hóa 23, 2 (2019), 353–358. DOI: 10.1109/TEVC.2018.2855049.
[34] Katherine Mary Malan và Andries Petrus Engelbrecht. 2013. Một Khảo sát về Các Kỹ thuật Đặc trưng Cảnh quan Fitness và Một số Cách Tiến về Phía trước Có thể. Khoa học Thông tin (JIS) 241 (2013), 148 – 163. https://doi.org/10.1016/j.ins.2013. 04.015
[35] Olaf Mersmann, Bernd Bischl, Heike Trautmann, Mike Preuss, Claus Weihs, và Günter Rudolph. 2011. Phân tích Cảnh quan Khám phá. Trong Kỷ yếu Hội nghị hàng năm lần thứ 13 về Tính toán Di truyền và Tiến hóa (GECCO) (Dublin, Ireland). ACM, 829 – 836. https://doi.org/10.1145/2001576.2001690
[36] J. Montgomery và S. Chen. 2010. Một phân tích về hoạt động của tiến hóa vi phân ở tỷ lệ lai tạo cao và thấp. Trong Đại hội IEEE về Tính toán Tiến hóa . 1–8.
[37] Mario Andrés Muñoz Acosta, Yuan Sun, Michael Kirley, và Saman K. Halgamuge. 2015. Lựa chọn Thuật toán cho Các Vấn đề Tối ưu hóa Liên tục Hộp đen: Một Khảo sát về Phương pháp và Thách thức. Khoa học Thông tin (JIS) 317 (October 2015), 224 – 245. https://doi.org/10.1016/j.ins.2015.05.010
[38] Heinz Mühlenbein và Gerhard Paass. 1996. Từ tái tổ hợp gen đến ước lượng phân phối I. Tham số nhị phân. Trong Hội nghị quốc tế về giải quyết vấn đề song song từ tự nhiên . Springer, 178–187.
[39] Maxime Oquab, Jeremy Rapin, Olivier Teytaud, và Tristan Cazenave. 2019. Tối ưu hóa Nhiễu Song song Trước Mặt Simulators: Lạc quan, Bi quan, Lặp lại, Kiểm soát Quần thể. Trong Hội thảo Tối ưu hóa và Ứng dụng dựa trên Dữ liệu tại CEC.
[40] Martin Pelikan, David E Goldberg, và Fernando G Lobo. 2002. Một khảo sát về tối ưu hóa bằng cách xây dựng và sử dụng các mô hình xác suất. Tối ưu hóa tính toán và ứng dụng 21, 1 (2002), 5–20.
[41] Erik Pitzer và Michael Affenzeller. 2012. Một Khảo sát Toàn diện về Phân tích Cảnh quan Fitness. Trong Tiến bộ Gần đây trong Hệ thống Kỹ thuật Thông minh , János Fodor, Ryszard Klempous, và Carmen Paz Suárez Araujo (Eds.). Springer, 161 – 191. https://doi.org/10.1007/978-3-642-23229-9_8
[42] M. J. D. Powell. 1964. Một phương pháp hiệu quả để tìm cực tiểu của một hàm nhiều biến mà không tính đạo hàm. Comput. J. 7, 2 (1964), 155–162.
[43] M. J. D. Powell. 1994. Một Phương pháp Tối ưu hóa Tìm kiếm Trực tiếp Mô hình hóa Hàm Mục tiêu và Ràng buộc bằng Nội suy Tuyến tính . Springer Netherlands, Dordrecht, 51–67.
[44] N. J. Radcliffe và P. D. Surry. 1994. Thuật toán memetic chính thức. Trong Tính toán Tiến hóa: Hội thảo AISB , T.C. Fogarty (Ed.). Springer Verlag LNCS 865, 1–16.
[45] Jérémy Rapin, Pauline Dorval, Jules Pondard, Nicolas Vasilache, Marie-Liesse Cauwet, Camille Couprie, và Olivier Teytaud. 2019. Xem xét lại một cách công khai tối ưu hóa không có đạo hàm. Trong Kỷ yếu Hội nghị Bạn đồng hành Tính toán Di truyền và Tiến hóa, GECCO 2019, Prague, Czech Republic, 13-17 tháng 7, 2019 , Manuel López-Ibáñez, Anne Auger, và Thomas Stützle (Eds.). ACM, 267–268. https://doi.org/10.1145/3319619.3321966
[46] J. Rapin và O. Teytaud. 2018. Nevergrad - Một nền tảng tối ưu hóa không có gradient. https://GitHub.com/FacebookResearch/Nevergrad.
[47] Pushpendre Rastogi, Jingyi Zhu, và James C. Spall. 2016. Triển khai hiệu quả các thuật toán nhiễu loạn đồng thời thích ứng nâng cao. Trong Hội nghị hàng năm 2016 về Hệ thống Khoa học Thông tin, CISS 2016, Princeton, NJ, USA, 16-18 tháng 3, 2016 . 298–303.
[48] John Rischard Rice. 1976. Vấn đề Lựa chọn Thuật toán. Tiến bộ trong Máy tính 15 (1976), 65 – 118. https://doi.org/10.1016/S0065-2458(08)60520-3
[49] Kate Amanda Smith-Miles. 2009. Quan điểm Liên ngành về Meta-Học tập cho Lựa chọn Thuật toán. Khảo sát Tính toán ACM (CSUR) 41 (January 2009), 1 – 25. https://doi.org/10.1145/1456650.1456656
[50] Rainer Storn và Kenneth Price. 1997. Tiến hóa vi phân–một heuristic đơn giản và hiệu quả cho tối ưu hóa toàn cục trên không gian liên tục. Journal of Global Optimization 11, 4 (1997), 341–359.
[51] Yizao Wang, Jean-Yves Audibert, và Rémi Munos. 2009. Thuật toán cho bandits vô hạn nhiều tay. Trong Tiến bộ trong Hệ thống Xử lý Thông tin Neural . 1729– 1736.
[52] D. H. Wolpert và W. G. Macready. 1997. Không có định lý bữa trưa miễn phí cho tối ưu hóa. Giao dịch IEEE về Tính toán Tiến hóa 1, 1 (April 1997), 67–82. https: //doi.org/10.1109/4235.585893
