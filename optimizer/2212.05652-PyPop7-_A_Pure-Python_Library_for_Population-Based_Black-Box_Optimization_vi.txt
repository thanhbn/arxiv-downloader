# 2212.05652.pdf
# Chuyển đổi từ PDF sang TXT
# Đường dẫn nguồn: /home/admin88/arxiv-downloader/optimizer/2212.05652.pdf
# Kích thước file: 14859728 bytes

===============================================
NỘI DUNG FILE PDF
===============================================

--- TRANG 1 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

Qiqi Duan1,∗11749325@mail.sustech.edu.cn
Guochen Zhou2,∗12132378@mail.sustech.edu.cn
Chang Shao3,∗chang.shao@student.uts.edu.au
Zhuowei Wang4zhuowei.wang@csiro.au
Mingyang Feng511856010@mail.sustech.edu.cn
Yuwei Huang212332473@mail.sustech.edu.cn
Yajing Tan212332416@mail.sustech.edu.cn
Yijun Yang6altmanyang@tencent.com
Qi Zhao2zhaoq@sustech.edu.cn
Yuhui Shi2,†shiyh@sustech.edu.cn
1Viện Công Nghệ Harbin, Harbin, Trung Quốc
2Đại học Khoa học và Công nghệ Miền Nam, Shenzhen, Trung Quốc
3Đại học Công nghệ Sydney, Sydney, Úc
4Không gian và Thiên văn học, CSIRO, Marshfield, Úc
5Đại học Birmingham, Birmingham, Anh
6Tencent Inc., Shenzhen, Trung Quốc
Biên tập viên:

Tóm tắt
Trong bài báo này, chúng tôi trình bày một thư viện mã nguồn mở pure-Python có tên PyPop7 cho tối ưu hóa hộp đen (BBO). Khi các phương pháp dựa trên quần thể (ví dụ: thuật toán tiến hóa, trí tuệ bầy đàn, và tìm kiếm mẫu) ngày càng trở nên phổ biến cho BBO, mục tiêu thiết kế của PyPop7 là cung cấp một API thống nhất và các triển khai tinh tế cho chúng, đặc biệt trong các tình huống thử thách có chiều cao. Vì những phương pháp dựa trên quần thể này dễ dàng gặp phải lời nguyền khét tiếng của chiều do lấy mẫu ngẫu nhiên là một trong những hoạt động cốt lõi đối với hầu hết chúng, gần đây nhiều cải tiến và tăng cường đã được đề xuất để giảm thiểu vấn đề này ít nhiều chủ yếu thông qua việc khai thác các cấu trúc vấn đề có thể có: chẳng hạn như, phân tách phân phối tìm kiếm hoặc không gian, xấp xỉ bộ nhớ thấp, học tập metric hạng thấp, giảm phương sai, tập hợp không gian con ngẫu nhiên, tự thích ứng mô hình, và làm mịn độ thích nghi. Những chiến lược lấy mẫu mới này có thể khai thác tốt hơn các cấu trúc vấn đề khác nhau trong không gian tìm kiếm chiều cao và do đó chúng thường dẫn đến tỷ lệ hội tụ nhanh hơn và/hoặc chất lượng giải pháp tốt hơn cho BBO quy mô lớn. Hiện tại PyPop7 đã bao gồm nhiều tiến bộ quan trọng này trên một tập hợp các họ thuật toán BBO đã được thiết lập tốt và cũng cung cấp một giao diện truy cập mở để thêm các bộ tối ưu hóa hộp đen mới nhất hoặc bị bỏ sót để mở rộng chức năng thêm. Mã nguồn được thiết kế tốt (dưới giấy phép GPL-3.0) và tài liệu trực tuyến đầy đủ (dưới giấy phép CC-BY 4.0) đã được cung cấp miễn phí tại https://github.com/Evolutionary-Intelligence/pypop và https://pypop.readthedocs.io, tương ứng.

Từ khóa: Tối ưu hóa hộp đen, Tính toán tiến hóa, Tối ưu hóa quy mô lớn, Phần mềm mã nguồn mở, Tối ưu hóa dựa trên quần thể, Trí tuệ bầy đàn

1 Giới thiệu
Một số lượng ngày càng tăng các phương pháp tối ưu hóa ngẫu nhiên dựa trên quần thể (Campelo và Aranha, 2023; Aranha et al., 2022; Swan et al., 2022) đã được áp dụng rộng rãi cho một tập hợp đa dạng các vấn đề hộp đen thực tế như tìm kiếm trực tiếp (Moritz et al., 2018) của chính sách dựa trên mạng nơ-ron sâu cho học tăng cường (Salimans et al., 2017). Trong các tình huống tối ưu hóa hộp đen điển hình, việc thiếu/không có sẵn thông tin gradient hạn chế nghiêm trọng việc sử dụng phổ biến của các bộ tối ưu dựa trên gradient mạnh mẽ như gradient descent (Amari, 1998) và coordinate descent (Wright, 2015), một vấn đề trở nên tồi tệ hơn bởi các hàm mục tiêu nhiễu (Arnold và Beyer, 2003). Thay vào đó, nhiều loại bộ tối ưu hộp đen (còn gọi là bậc không hoặc không có đạo hàm hoặc tìm kiếm trực tiếp) từ nhiều cộng đồng nghiên cứu là lựa chọn thuật toán tự nhiên được chấp nhận trong thực tế trong những trường hợp BBO thử thách này (Varelas et al., 2018). Vui lòng tham khảo ví dụ, bài đánh giá Nature mới nhất (Eiben và Smith, 2015) hoặc bài đánh giá Science cổ điển (Forrest, 1993) để có phần giới thiệu về các phương pháp tối ưu hóa dựa trên quần thể (cũng được gọi là dựa trên tiến hóa/bầy đàn) ví dụ, thuật toán tiến hóa (Miikkulainen và Forrest, 2021; Bäck et al., 1997), trí tuệ bầy đàn (Kennedy et al., 2001; Bonabeau et al., 1999), và tìm kiếm mẫu (Torczon, 1997).

Trong mười năm qua, sự phát triển nhanh chóng của các mô hình sâu (LeCun et al., 2015; Schmidhuber, 2015) và dữ liệu lớn đã tạo ra một số lượng lớn các vấn đề BBO chiều cao thử thách mới, ví dụ, tìm kiếm chính sách trực tiếp của học tăng cường sâu (Salimans et al., 2017; Moritz et al., 2018), tấn công hộp đen của mạng nơ-ron sâu (Ilyas et al., 2018), điều chỉnh prompt hộp đen của các mô hình ngôn ngữ lớn (Sun et al., 2022), và tối ưu hóa hộp đen của các mô hình sinh phức tạp (Choudhury et al., 2023). Những vấn đề BBO quy mô lớn mới này đã thúc đẩy rất nhiều nhà nghiên cứu từ các lĩnh vực khoa học và kỹ thuật khác nhau để mở rộng quy mô các bộ tối ưu hộp đen trước đây thông qua các cải tiến hiệu quả cho các chiến lược lấy mẫu hiện có (chủ yếu là ngẫu nhiên) (Varelas et al., 2018) hoặc để đề xuất các phiên bản mới của các bộ tối ưu hộp đen nhắm vào các tình huống quy mô lớn, cho rằng các chiến lược lấy mẫu ngẫu nhiên được áp dụng bởi hầu hết chúng dễ dàng gặp phải lời nguyền khét tiếng của chiều (Nesterov và Spokoiny, 2017; Bellman, 1961).

Trong bài báo này, chúng tôi thiết kế một thư viện phần mềm mã nguồn mở pure-Python có tên PyPop7, để bao gồm một số lượng lớn các bộ tối ưu hóa hộp đen dựa trên quần thể, đặc biệt là các biến thể/phiên bản quy mô lớn của chúng do tiềm năng thực tế của chúng cho các vấn đề BBO quan tâm. Cụ thể, mục tiêu của chúng tôi là cung cấp một giao diện thống nhất (API) và các triển khai tinh tế cho chúng, để thúc đẩy khả năng lặp lại nghiên cứu (Sonnenburg et al., 2007), đánh giá hệ thống của BBO (Hansen et al., 2021; Meunier et al., 2022), và quan trọng nhất là các ứng dụng thực tế của chúng. Bằng sản phẩm phụ, chúng tôi cũng đã cung cấp một giao diện truy cập mở (API) để thêm các bộ tối ưu hóa hộp đen mới nhất hoặc bị bỏ sót như các mở rộng chức năng thêm của thư viện mã nguồn mở này. Vui lòng tham khảo Hình 1 cho khung khái niệm cốt lõi của nó, chủ yếu gồm 6 thành phần cơ bản (động cơ tính toán, một họ các bộ tối ưu hóa hộp đen, một tập hợp các hàm tiện ích, hai giao thức kiểm tra, một loạt đánh giá, và tài liệu đầy đủ). Để biết chi tiết về từng thành phần, vui lòng tham khảo Phần 3 và Phần 4 hoặc kho lưu trữ mã nguồn mở của nó (có sẵn tại GitHub) và tài liệu trực tuyến của nó (có sẵn tại readthedocs.io).

--- TRANG 2 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

khả năng lặp lại từ chính nghiên cứu ban đầu của chúng tôi đã được tự do cung cấp tại https://github.com/Evolutionary-Intelligence/pypop và https://pypop.readthedocs.io, tương ứng.

Từ khóa: Tối ưu hóa hộp đen, Tính toán tiến hóa, Tối ưu hóa quy mô lớn, Phần mềm mã nguồn mở, Tối ưu hóa dựa trên quần thể, Trí tuệ bầy đàn

2 Công trình liên quan
Trong phần này, chúng tôi sẽ giới thiệu một số thư viện Python hiện có bao gồm các bộ tối ưu dựa trên quần thể cho BBO (ví dụ, thuật toán tiến hóa và trí tuệ bầy đàn) và so sánh/làm nổi bật những khác biệt chính giữa công trình của chúng tôi và chúng, như được trình bày dưới đây.

Gần đây, Hansen et al. (2021) đã phát hành một nền tảng đánh giá được tài liệu hóa tốt có tên COCO để so sánh các bộ tối ưu hóa hộp đen liên tục, sau khi trải qua hơn 10 năm phát triển. Tuy nhiên, COCO tập trung vào thiết kế hệ thống các hàm đánh giá và không cung cấp bất kỳ thuật toán tối ưu hóa nào cho đến nay. Một công trình tương tự khác là nền tảng NeverGrad phổ biến từ Facebook Research, bao gồm một số lượng tương đối hạn chế các phiên bản thuật toán quy mô lớn (Rapin và Teytaud, 2018). Do đó, thư viện pure-Python của chúng tôi, PyPop7, có thể được xem như sự bổ sung cho chúng đặc biệt cho BBO quy mô lớn. Trong các hướng dẫn trực tuyến của chúng tôi, chúng tôi đã trình bày cách kết nối các bộ tối ưu hóa hộp đen từ thư viện của chúng tôi với hai nền tảng đánh giá được thiết kế tốt này cho BBO.

Trong quá khứ, DEAP (Fortin et al., 2012) cung cấp một nền tảng Python để tạo mẫu nhanh các bộ tối ưu dựa trên quần thể, nhưng để lại nhiệm vụ điều chỉnh hiệu suất thử thách cho người dùng cuối. Điều này rõ ràng khác với thư viện của chúng tôi trong đó việc điều chỉnh hiệu suất được gán cho các nhà phát triển ngoại trừ việc mã hóa hàm thích nghi cần được tối ưu hóa. Mặc dù PyBrain (Schaul et al., 2010) chủ yếu cung cấp một lớp chiến lược tiến hóa tự nhiên (NES), giờ đây nó dường như không được duy trì nữa và không bao gồm nhiều phiên bản BBO khác trong thư viện của chúng tôi. Thư viện PaGMO được thiết kế tốt (Biscani và Izzo, 2020) cho các bộ tối ưu dựa trên quần thể song song đã được duy trì tích cực trong hơn 10 năm. Tuy nhiên, trọng tâm hiện tại của nó chuyển sang tối ưu hóa đa mục tiêu thay vì BBO quy mô lớn, đây là trọng tâm của bài báo chúng tôi.

Nhìn chung, thư viện Python của chúng tôi (có tên PyPop7) đã cung cấp một tập hợp lớn các bộ tối ưu phong phú và mạnh mẽ cho BBO từ nhiều cộng đồng nghiên cứu (ví dụ, trí tuệ nhân tạo, học máy, tính toán tiến hóa, siêu heuristic, trí tuệ bầy đàn, nghiên cứu hoạt động, tối ưu hóa toán học, thống kê, điều khiển tự động, và v.v.).

3 Khung Mã Hóa Mô-đun của PyPop7
Trong phần này, chúng tôi sẽ giới thiệu giao diện thống nhất của PyPop7 (thông qua lập trình hướng đối tượng), các giao thức kiểm tra cho việc kiểm tra tự động dựa trên pytest và báo cáo khả năng lặp lại được thiết kế nhân tạo, hiệu quả tính toán của nó (thông qua so sánh PyPop7 với một đối tác phổ biến), và đánh giá trên các nhiệm vụ ML hiện đại cho BBO quy mô lớn.

3.1 Một API Thống Nhất cho Các Bộ Tối Ưu Hóa Hộp Đen
Để đơn giản, khả năng mở rộng và khả năng duy trì (có thể nói là ba tính chất mong muốn cho bất kỳ phần mềm nào), PyPop7 đã cung cấp một API thống nhất cho một tập hợp lớn các phiên bản/biến thể bộ tối ưu hóa hộp đen trong các cấu trúc mã hóa mô-đun dựa trên lập trình hướng đối tượng mạnh mẽ (OOP) (Lutz, 2013). Thoạt nhìn, khung tổ chức chính của nó được tóm tắt ngắn gọn trong Hình 1, trong đó hai cấp độ kế thừa được sử dụng thông qua OOP cho bất kỳ bộ tối ưu được khởi tạo nào để tối đa hóa việc tái sử dụng và thống nhất thiết kế API. Để có hiệu quả tính toán (quan trọng cho BBO quy mô lớn), thư viện của chúng tôi chủ yếu phụ thuộc vào bốn thư viện tính toán khoa học/số học hiệu suất cao mã nguồn mở: NumPy (Harris et al., 2020), SciPy (Virtanen et al., 2020), Scikit-Learn (Pedregosa et al., 2011) và Numba như động cơ tính toán cơ bản.

Trong thư viện của chúng tôi, hiện tại tất cả các bộ tối ưu hóa hộp đen này đã được phân loại sơ bộ thành tổng cộng 13 lớp thuật toán tối ưu hóa, như được trình bày dưới đây. Để có cái nhìn sâu sắc về các trường hợp ứng dụng của chúng, chúng tôi đã xây dựng một trang web trực tuyến để thu thập cụ thể các ứng dụng của chúng, đã được công bố trên nhiều (tuy không phải tất cả) tạp chí và hội nghị hàng đầu (như Nature, Science, PNAS, PRL, JACS, PIEEE, Cell, JMLR, v.v.).

• Chiến lược Tiến hóa: ES (Akimoto et al., 2022; Vicol et al., 2021; Ollivier et al., 2017; Diouane et al., 2015; Bäck et al., 2013; Rudolph, 2012; Beyer và Schwefel, 2002; Hansen và Ostermeier, 2001; Schwefel, 1984; Rechenberg, 1984),

• Chiến lược Tiến hóa Tự nhiên: NES (Hüttenrauch và Neumann, 2024; Wei et al., 2022; Wierstra et al., 2014; Yi et al., 2009; Wierstra et al., 2008),

--- TRANG 3 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

Hình 1: Khung khái niệm của PyPop7 cho tối ưu hóa hộp đen (BBO), trong đó tất cả các bộ tối ưu được tô màu cam chủ yếu được thiết kế cho BBO quy mô lớn.

optimizers, một tập hợp các hàm tiện ích, hai giao thức kiểm tra, một loạt đánh giá, và tài liệu đầy đủ). Để biết chi tiết về từng thành phần, vui lòng tham khảo Phần 3 và Phần 4 hoặc kho lưu trữ mã nguồn mở của nó (có sẵn tại GitHub) và tài liệu trực tuyến của nó (có sẵn tại readthedocs.io).

2 Công trình liên quan
Trong phần này, chúng tôi sẽ giới thiệu một số thư viện Python hiện có bao gồm các bộ tối ưu dựa trên quần thể cho BBO (ví dụ, thuật toán tiến hóa và trí tuệ bầy đàn) và so sánh/làm nổi bật những khác biệt chính giữa công trình của chúng tôi và chúng, như được trình bày dưới đây.

Gần đây, Hansen et al. (2021) đã phát hành một nền tảng đánh giá được tài liệu hóa tốt có tên COCO để so sánh các bộ tối ưu hóa hộp đen liên tục, sau khi trải qua hơn 10 năm phát triển. Tuy nhiên, COCO tập trung vào thiết kế hệ thống các hàm đánh giá và không cung cấp bất kỳ thuật toán tối ưu hóa nào cho đến nay. Một công trình tương tự khác là nền tảng NeverGrad phổ biến từ Facebook Research, bao gồm một số lượng tương đối hạn chế các phiên bản thuật toán quy mô lớn (Rapin và Teytaud, 2018). Do đó, thư viện pure-Python của chúng tôi, PyPop7, có thể được xem như sự bổ sung cho chúng đặc biệt cho BBO quy mô lớn. Trong các hướng dẫn trực tuyến của chúng tôi, chúng tôi đã trình bày cách kết nối các bộ tối ưu hóa hộp đen từ thư viện của chúng tôi với hai nền tảng đánh giá được thiết kế tốt này cho BBO.

--- TRANG 4 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

Trong quá khứ, DEAP (Fortin et al., 2012) cung cấp một nền tảng Python để tạo mẫu nhanh các bộ tối ưu dựa trên quần thể, nhưng để lại nhiệm vụ điều chỉnh hiệu suất thử thách cho người dùng cuối. Điều này rõ ràng khác với thư viện của chúng tôi trong đó việc điều chỉnh hiệu suất được gán cho các nhà phát triển ngoại trừ việc mã hóa hàm thích nghi cần được tối ưu hóa. Mặc dù PyBrain (Schaul et al., 2010) chủ yếu cung cấp một lớp chiến lược tiến hóa tự nhiên (NES), giờ đây nó dường như không được duy trì nữa và không bao gồm nhiều phiên bản BBO khác trong thư viện của chúng tôi. Thư viện PaGMO được thiết kế tốt (Biscani và Izzo, 2020) cho các bộ tối ưu dựa trên quần thể song song đã được duy trì tích cực trong hơn 10 năm. Tuy nhiên, trọng tâm hiện tại của nó chuyển sang tối ưu hóa đa mục tiêu thay vì BBO quy mô lớn, đây là trọng tâm của bài báo chúng tôi.

Nhìn chung, thư viện Python của chúng tôi (có tên PyPop7) đã cung cấp một tập hợp lớn các bộ tối ưu phong phú và mạnh mẽ cho BBO từ nhiều cộng đồng nghiên cứu (ví dụ, trí tuệ nhân tạo, học máy, tính toán tiến hóa, siêu heuristic, trí tuệ bầy đàn, nghiên cứu hoạt động, tối ưu hóa toán học, thống kê, điều khiển tự động, và v.v.).

3 Khung Mã Hóa Mô-đun của PyPop7
Trong phần này, chúng tôi sẽ giới thiệu giao diện thống nhất của PyPop7 (thông qua lập trình hướng đối tượng), các giao thức kiểm tra cho việc kiểm tra tự động dựa trên pytest và báo cáo khả năng lặp lại được thiết kế nhân tạo, hiệu quả tính toán của nó (thông qua so sánh PyPop7 với một đối tác phổ biến), và đánh giá trên các nhiệm vụ ML hiện đại cho BBO quy mô lớn.

3.1 Một API Thống Nhất cho Các Bộ Tối Ưu Hóa Hộp Đen
Để đơn giản, khả năng mở rộng và khả năng duy trì (có thể nói là ba tính chất mong muốn cho bất kỳ phần mềm nào), PyPop7 đã cung cấp một API thống nhất cho một tập hợp lớn các phiên bản/biến thể bộ tối ưu hóa hộp đen trong các cấu trúc mã hóa mô-đun dựa trên lập trình hướng đối tượng mạnh mẽ (OOP) (Lutz, 2013). Thoạt nhìn, khung tổ chức chính của nó được tóm tắt ngắn gọn trong Hình 1, trong đó hai cấp độ kế thừa được sử dụng thông qua OOP cho bất kỳ bộ tối ưu được khởi tạo nào để tối đa hóa việc tái sử dụng và thống nhất thiết kế API. Để có hiệu quả tính toán (quan trọng cho BBO quy mô lớn), thư viện của chúng tôi chủ yếu phụ thuộc vào bốn thư viện tính toán khoa học/số học hiệu suất cao mã nguồn mở: NumPy (Harris et al., 2020), SciPy (Virtanen et al., 2020), Scikit-Learn (Pedregosa et al., 2011) và Numba như động cơ tính toán cơ bản.

Trong thư viện của chúng tôi, hiện tại tất cả các bộ tối ưu hóa hộp đen này đã được phân loại sơ bộ thành tổng cộng 13 lớp thuật toán tối ưu hóa, như được trình bày dưới đây. Để có cái nhìn sâu sắc về các trường hợp ứng dụng của chúng, chúng tôi đã xây dựng một trang web trực tuyến để thu thập cụ thể các ứng dụng của chúng, đã được công bố trên nhiều (tuy không phải tất cả) tạp chí và hội nghị hàng đầu (như Nature, Science, PNAS, PRL, JACS, PIEEE, Cell, JMLR, v.v.).

• Chiến lược Tiến hóa: ES (Akimoto et al., 2022; Vicol et al., 2021; Ollivier et al., 2017; Diouane et al., 2015; Bäck et al., 2013; Rudolph, 2012; Beyer và Schwefel, 2002; Hansen và Ostermeier, 2001; Schwefel, 1984; Rechenberg, 1984),

• Chiến lược Tiến hóa Tự nhiên: NES (Hüttenrauch và Neumann, 2024; Wei et al., 2022; Wierstra et al., 2014; Yi et al., 2009; Wierstra et al., 2008),

--- TRANG 5 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

• Thuật toán Ước lượng Phân phối: EDA (Zheng và Doerr, 2023; Brookes et al., 2020; Larrañaga, 2002; Baluja, 1996; Baluja và Caruana, 1995),

• Phương pháp Cross-Entropy: CEM (Wang và Ba, 2020; Amos và Yarats, 2020; Hu et al., 2007; Rubinstein và Kroese, 2004; Mannor et al., 2003),

• Tiến hóa Vi phân: DE (Koob et al., 2023; Higgins et al., 2023; Li et al., 2022a; Laganowsky et al., 2014; Storn và Price, 1997),

• Bộ Tối ưu Bầy Đàn Hạt: PSO (Melis et al., 2024; Bungert et al., 2024; Huang et al., 2024; Bolte et al., 2024; Cipriani et al., 2022; Fornasier et al., 2021; Tang et al., 2019; Kennedy và Eberhart, 1995),

• Đồng Tiến hóa Hợp tác: CC (Gomez et al., 2008; Panait et al., 2008; Schmidhuber et al., 2007; Fan et al., 2003; Potter và Jong, 2000; Gomez et al., 1999; Moriarty và Mikkulainen, 1996; Moriarty và Miikkulainen, 1995; Potter và Jong, 1994),

• Luyện Kim Mô phỏng1: SA (Samyak và Palacios, 2024; Bouttier và Gavra, 2019; Siarry et al., 1997; Bertsimas và Tsitsiklis, 1993; Corana et al., 1987; Kirkpatrick et al., 1983; Hastings, 1970; Metropolis et al., 1953),

• Thuật toán Di truyền: GA (Chen et al., 2020; Whitley, 2019; Goldberg, 1994; Forrest, 1993; Mitchell et al., 1993; Goldberg và Holland, 1988; Holland, 1962),

• Lập trình Tiến hóa: EP (Cui et al., 2006; Yao et al., 1999; Fogel, 1999; Fogel và Fogel, 1995; Fogel, 1994; Fogel et al., 1965),

• Tìm kiếm Mẫu/Trực tiếp: PS/DS (Kolda et al., 2003; Lagarias et al., 1998; Wright, 1996; Nelder và Mead, 1965; Powell, 1964; Kaupe, 1963; Hooke và Jeeves, 1961; Fermi, 1952),

• Tìm kiếm Ngẫu nhiên: RS (Nesterov và Spokoiny, 2017; Stich, 2014; Bergstra và Bengio, 2012; Schmidhuber et al., 2001; Rosenstein và Barto, 2001; Solis và Wets, 1981; Schumer và Steiglitz, 1968; Rastrigin, 1963; Brooks, 1958), và

• Tối ưu hóa Bayesian: BO (Wang et al., 2020; Shahriari et al., 2016; Jones et al., 1998).

Để giảm thiểu lời nguyền của chiều (Bellman, 1957) của chúng cho BBO quy mô lớn, các loại chiến lược phức tạp khác nhau đã được sử dụng để tăng cường các bộ tối ưu hóa hộp đen này, như được trình bày dưới đây:

1) Phân tách phân phối tìm kiếm (Akimoto và Hansen, 2020; Bäck et al., 2013; Schaul et al., 2011; Ros và Hansen, 2008) hoặc không gian tìm kiếm (Panait et al., 2008; Gomez và Schmidhuber, 2005; Siarry et al., 1997; Corana et al., 1987),

2) Phân vùng không gian đệ quy, ví dụ, thông qua tìm kiếm cây Monte Carlo (Wang et al., 2020),

1. Lưu ý rằng SA là một phương pháp tối ưu hóa dựa trên cá thể thay vì dựa trên quần thể.

--- TRANG 6 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

3) Xấp xỉ bộ nhớ thấp cho thích ứng ma trận hiệp phương sai (He et al., 2021; Loshchilov et al., 2019; Loshchilov, 2017; Krause et al., 2016),

4) Học tập metric hạng thấp (Li và Zhang, 2018; Sun et al., 2013),

5) Giảm phương sai (Gao và Sener, 2022; Brockhoff et al., 2010),

6) Tập hợp không gian con ngẫu nhiên được xây dựng thông qua lý thuyết ma trận ngẫu nhiên (Demo et al., 2021; Kabán et al., 2016),

7) Tự thích ứng siêu mô hình (Akimoto và Hansen, 2016; Lee và Yao, 2004),

8) Làm mịn kỳ vọng thích nghi (Hüttenrauch và Neumann, 2024; Gao và Sener, 2022; Nesterov và Spokoiny, 2017),

9) Làm mịn hoạt động lấy mẫu (Bungert et al., 2024; Amos và Yarats, 2020; Deb et al., 2002), và

10) Phân bổ hiệu quả tài nguyên tính toán (García-Martínez et al., 2008).

Trong thư viện Python mới này PyPop7, chúng tôi mong muốn cung cấp các triển khai mã nguồn mở chất lượng cao cho nhiều kỹ thuật tiên tiến này trên các bộ tối ưu dựa trên quần thể cho BBO quy mô lớn theo cách thống nhất (đã được tóm tắt trong Hình 1).

3.2 Giao thức Kiểm tra
Quan trọng là, để đảm bảo tính đúng đắn của việc mã hóa các bộ tối ưu hóa hộp đen, chúng tôi đã cung cấp một báo cáo khả năng lặp lại dựa trên mã truy cập mở cho mỗi bộ tối ưu hóa hộp đen. Cụ thể, đối với mỗi bộ tối ưu hóa hộp đen, tất cả các chi tiết thí nghiệm được đưa ra trong một thư mục cụ thể (tương ứng với một siêu liên kết trong phần Ví dụ của tài liệu API trực tuyến của nó) và các kết quả chính được tạo ra cho nó được so sánh với các kết quả được báo cáo trong tài liệu gốc của nó. Đối với tất cả các bộ tối ưu với báo cáo khả năng lặp lại không có sẵn do lý do cụ thể, các triển khai dựa trên Python3 của chúng đã được kiểm tra cẩn thận bởi ba tác giả (và có thể những người dùng khác) để tránh các lỗi và sai sót tầm thường. Đối với bất kỳ thí nghiệm khả năng lặp lại thất bại nào, chúng tôi cố gắng hết sức để đạt được thỏa thuận về một số lý do có thể, điều này cũng được mô tả cuối cùng trong báo cáo khả năng lặp lại của nó. Tất cả mã/kết quả khả năng lặp lại được tóm tắt trong Bảng 1, trong đó mỗi siêu liên kết được sử dụng để điều hướng mã Python đã sử dụng hoặc kết quả được tạo ra.

Theo thực hành quy trình tiêu chuẩn của phần mềm mã nguồn mở, chúng tôi đã sử dụng công cụ pytest phổ biến và dịch vụ circleci miễn phí để tự động hóa tất cả các quy trình kiểm tra nhẹ. Đối với bất kỳ bộ tối ưu hóa hộp đen ngẫu nhiên nào, việc kiểm soát đúng cách quy trình lấy mẫu ngẫu nhiên của nó rất quan trọng để lặp lại toàn bộ thí nghiệm tối ưu hóa của nó. Trong thư viện của chúng tôi, hạt giống ngẫu nhiên cho mỗi bộ tối ưu hóa hộp đen phải được đặt một cách rõ ràng để đảm bảo khả năng lặp lại tối đa, theo gợi ý mới nhất từ NumPy cho lấy mẫu ngẫu nhiên.

3.3 So sánh Hiệu quả Tính toán
Trong phần này, chúng tôi sẽ phân tích hiệu quả runtime (dưới dạng số lần đánh giá hàm) của các triển khai của chúng tôi thông qua việc so sánh chúng một cách thực nghiệm với những thư viện BBO được sử dụng rộng rãi (có tên DEAP). Lưu ý rằng DEAP (được công bố năm 2012)

--- TRANG 7 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

Bảng 1: Báo cáo Khả năng Lặp lại của Tất cả Các Bộ Tối Ưu Hóa Hộp Đen từ PyPop7

| Bộ tối ưu | Khả năng lặp lại | Mã | Kết quả | Thành công | Bộ tối ưu | Khả năng lặp lại | Mã | Kết quả | Thành công |
|-----------|------------------|-----|---------|-------------|-----------|------------------|-----|---------|-------------|
| MMES | repeat | mmes.py | figures | YES | FCMAES | repeat | fcmaes.py | figures | YES |
| LMMAES | repeat | lmmaes.py | figures | YES | LMCMA | repeat | lmcma.py | figures | YES |
| LMCMAES | repeat | lmcmaes.py | data | YES | RMES | repeat | rmes.py | figures | YES |
| R1ES | repeat | r1es.py | figures | YES | VKDCMA | repeat | vkdcma.py | data | YES |
| VDCMA | repeat | vdcma.py | data | YES | CCMAES2016 | repeat | ccmaes2016.py | figures | YES |
| OPOA2015 | repeat | opoa2015.py | figures | YES | OPOA2010 | repeat | opoa2010.py | figures | YES |
| CCMAES2009 | repeat | ccmaes2009.py | figures | YES | OPOC2009 | repeat | opoc2009.py | figures | YES |
| OPOC2006 | repeat | opoc2006.py | figures | YES | SEPCMAES | repeat | sepcmaes.py | data | YES |
| DDCMA | repeat | ddcma.py | data | YES | MAES | repeat | maes.py | figures | YES |
| FMAES | repeat | fmaes.py | figures | YES | CMAES | repeat | cmaes.py | data | YES |
| SAMAES | repeat | samaes.py | figure | YES | SAES | repeat | saes.py | data | YES |
| CSAES | repeat | csaes.py | figure | YES | DSAES | repeat | dsaes.py | figure | YES |
| SSAES | repeat | ssaes.py | figure | YES | RES | repeat | res.py | figure | YES |
| R1NES | repeat | r1nes.py | data | YES | SNES | repeat | snes.py | data | YES |
| XNES | repeat | xnes.py | data | YES | ENES | repeat | enes.py | data | YES |
| ONES | repeat | ones.py | data | YES | SGES | repeat | sges.py | data | YES |
| RPEDA | repeat | rpeda.py | data | YES | UMDA | repeat | umda.py | data | YES |
| AEMNA | repeat | aemna.py | data | YES | EMNA | repeat | emna.py | data | YES |
| DCEM | repeat | dcem.py | data | YES | DSCEM | repeat | dscem.py | data | YES |
| MRAS | repeat | mras.py | data | YES | SCEM | repeat | scem.py | data | YES |
| SHADE | repeat | shade.py | data | YES | JADE | repeat | jade.py | data | YES |
| CODE | repeat | code.py | data | YES | TDE | repeat | tde.py | figures | YES |
| CDE | repeat | cde.py | data | YES | CCPSO2 | repeat | ccpso2.py | data | YES |
| IPSO | repeat | ipso.py | data | YES | CLPSO | repeat | clpso.py | data | YES |
| CPSO | repeat | cpso.py | data | YES | SPSOL | repeat | spsol.py | data | YES |
| SPSO | repeat | spso.py | data | YES | HCC | N/A | N/A | N/A | N/A |
| COCMA | N/A | N/A | N/A | N/A | COEA | repeat | coea.py | figures | YES |
| COSYNE | repeat | cosyne.py | data | YES | ESA | repeat | esa.py | data | N/A |
| CSA | repeat | csa.py | data | YES | NSA | N/A | N/A | N/A | N/A |
| ASGA | repeat | asga.py | data | YES | GL25 | repeat | gl25.py | data | YES |
| G3PCX | repeat | g3pcx.py | figure | YES | GENITOR | N/A | N/A | N/A | N/A |
| LEP | repeat | lep.py | data | YES | FEP | repeat | fep.py | data | NI |
| CEP | repeat | cep.py | data | YES | POWELL | repeat | powell.py | data | YES |
| GPS | N/A | N/A | N/A | N/A | NM | repeat | nm.py | data | YES |
| HJ | repeat | hj.py | data | YES | CS | N/A | N/A | N/A | N/A |
| BES | repeat | bes.py | figures | YES | GS | repeat | gs.py | figures | YES |
| SRS | N/A | N/A | N/A | N/A | ARHC | repeat | arhc.py | data | YES |
| RHC | repeat | rhc.py | data | YES | PRS | repeat | prs.py | figure | YES |

NI: Cần được Cải thiện.

--- TRANG 8 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

Hình 2: So sánh trung vị của số lần đánh giá hàm và chất lượng giải pháp của một phiên bản cơ bản SES của chiến lược tiến hóa từ thư viện của chúng tôi và thư viện DEAP được sử dụng rộng rãi (dưới cùng một thời gian chạy để có sự so sánh công bằng). Lưu ý rằng mỗi phiên bản triển khai này được chạy độc lập 10 lần trên hàm kiểm tra nhẹ 2000 chiều sphere này. Ở đây chúng tôi không sử dụng các hoạt động xoay-dịch chuyển tiêu chuẩn, khác với quy trình đánh giá tốn kém tính toán sau (có độ phức tạp bậc hai), để tạo ra các lần đánh giá hàm nhẹ (chỉ có độ phức tạp tuyến tính) ngay cả trong chiều cao.

chủ yếu cung cấp một số phiên bản cơ bản (hạn chế) và chưa bao gồm các biến thể quy mô lớn mới nhất một cách toàn diện, cho đến nay.

Bàn kiểm tra là một hàm kiểm tra chiều cao (2000-d) nhưng nhẹ (có tên sphere), vì việc sử dụng hàm kiểm tra nhẹ có thể khiến chúng ta tập trung vào chính việc triển khai thuật toán thay vì hàm thích nghi bên ngoài được cung cấp bởi người dùng cuối. Chúng tôi hoãn lại các thí nghiệm đánh giá nhiều hơn trong hai phần tiếp theo.

Như chúng ta có thể thấy từ Hình 2, 3, và 4, các triển khai thuật toán của chúng tôi luôn tốt hơn các triển khai tương ứng của DEAP, từ cả góc độ tăng tốc số lần đánh giá hàm và chất lượng giải pháp cuối cùng, với cùng thời gian chạy tối đa (=3 giờ). Sau khi kiểm tra cẩn thận mã nguồn Python của chúng, chúng tôi có thể kết luận rằng các cách khác nhau để lưu trữ và vận hành quần thể giữa hai thư viện (PyPop7 vs. DEAP) dẫn đến khoảng cách đáng kể như vậy về hiệu quả tính toán. Đối với DEAP, các kiểu dữ liệu ngây thơ như list được sử dụng để lưu trữ và vận hành quần thể (chậm) trong khi đối với PyPop7, kiểu dữ liệu được tối ưu hóa cao ndarray từ NumPy được sử dụng làm cơ sở khởi tạo và tiến hóa quần thể, cùng với các thư viện tính toán khoa học hiệu suất cao khác như SciPy, Scikit-Learn, và Numba. Hiệu quả tính toán là một mục tiêu chính của thư viện mã nguồn mở của chúng tôi, nghĩa là các nhà phát triển thay vì người dùng cuối chịu trách nhiệm về tối ưu hóa hiệu suất ngoại trừ hàm thích nghi tùy chỉnh được cung cấp bởi người dùng cuối. Thực hành thiết kế này có thể giảm đáng kể chi phí lập trình và thí nghiệm của người dùng cuối cho BBO quy mô lớn.

--- TRANG 9 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

Hình 3: So sánh trung vị của số lần đánh giá hàm và chất lượng giải pháp giữa ba phiên bản ES quy mô lớn của thư viện chúng tôi và CMA-ES của DEAP. Các thiết lập thí nghiệm giống như Hình 2 (với thời gian chạy tối đa: 3 giờ).

--- TRANG 10 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

Hình 4: So sánh trung vị của số lần đánh giá hàm và chất lượng giải pháp của PSO, EDA, và DE giữa thư viện của chúng tôi và thư viện DEAP được sử dụng rộng rãi. Các thiết lập thí nghiệm giống như Hình 2 (với thời gian chạy tối đa: 3 giờ).

--- TRANG 11 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

3.4 Đánh giá trên Các Hàm Tốn kém Tính toán
Để thiết kế một tập hợp 20 hàm kiểm tra tốn kém tính toán, thực hành đánh giá tiêu chuẩn đã được sử dụng ở đây, nghĩa là, vector đầu vào của mỗi hàm kiểm tra đã được xoay và dịch chuyển/biến đổi trước khi đánh giá thích nghi. Để đánh giá trên tập hợp lớn các hàm kiểm tra 2000 chiều và tốn kém tính toán này, một số phiên bản quy mô lớn từ thư viện của chúng tôi đạt được chất lượng giải pháp tốt nhất trên gần như tất cả các hàm kiểm tra dưới cùng giới hạn thời gian chạy (=3 giờ) và cùng ngưỡng thích nghi (=1e-10). Vui lòng tham khảo Hình 5, 6, 7, và 8 để biết đường cong hội tụ chi tiết của các lớp thuật toán khác nhau trên các hàm kiểm tra khác nhau. Ví dụ, đối với họ PSO, bốn biến thể quy mô lớn (CLPSO, CCPSO2, CPSO, và IPSO) đạt được chất lượng giải pháp tốt nhất trên 9, 6, 3, và 2 hàm kiểm tra, tương ứng.

3.5 Đánh giá trên Phân loại Hộp Đen
Trong phần này, chúng tôi chọn một nhiệm vụ ML hiện đại (được biết đến như phân loại hộp đen) làm cơ sở cho các hàm đánh giá. Theo các thực hành phổ biến hiện tại của phân loại hộp đen, năm hàm mất mát (Bollapragada và Wild, 2023; Li et al., 2022b; Ruan et al., 2020; Xu et al., 2020; Liu et al., 2019; Bollapragada et al., 2018; Liu et al., 2018) với các đặc điểm landscape khác nhau được chọn trong các thí nghiệm số học của chúng tôi. Hơn nữa, năm bộ dữ liệu từ các lĩnh vực khác nhau được sử dụng cho tính đa dạng dữ liệu: bệnh Parkinson, chữ số viết tay Semeion, CNAE-9, Madelon, và thụ thể androgen QSAR, tất cả đều hiện có sẵn tại Kho lưu trữ Học máy UCI. Sự kết hợp của 5 hàm mất mát và 5 bộ dữ liệu này dẫn đến tổng cộng 25 hàm kiểm tra cho phân loại hộp đen với lên đến >1000 chiều.

Trong các thí nghiệm số học của chúng tôi, chúng tôi chọn tổng cộng 15 bộ tối ưu hóa hộp đen từ các họ thuật toán khác nhau, mỗi bộ được chạy độc lập 14 lần trên mỗi hàm kiểm tra. Thời gian chạy tối đa được cho phép được đặt là 3 giờ (Duan et al., 2023) và ngưỡng thích nghi được đặt là 1e-10 để tránh tối ưu hóa độ chính xác quá mức cho tất cả các bộ tối ưu trên mỗi hàm kiểm tra.

Như được thể hiện rõ trong Hình 9, không có bộ tối ưu hóa hộp đen đơn lẻ nào có thể hoàn toàn chiếm ưu thế trong xếp hạng hàng đầu w.r.t. đường cong hội tụ, mặc dù một số biến thể quy mô lớn khác nhau đạt được chất lượng giải pháp tốt nhất trên các hàm kiểm tra khác nhau. Ví dụ, COCMA (Mei et al., 2016; Potter và Jong, 1994) xếp hạng đầu trên tổng cộng 9 hàm kiểm tra. Điều này có thể do nó có thể khai thác tốt cấu trúc vấn đề thưa thớt trên những hàm này đặc biệt sau khi chuẩn hóa dữ liệu. Tiếp theo, VKDCMA (Akimoto và Hansen, 2016) và CLPSO (Liang et al., 2006) đạt được giải pháp tốt nhất trên 3 và 3 hàm kiểm tra, tương ứng.

Sau đó, mỗi bộ tối ưu trong 5 bộ tối ưu hóa hộp đen (MAES (Beyer và Sendhoff, 2017), SEPCMAES (Ros và Hansen, 2008), LMCMA (Loshchilov, 2017), LMMAES (Loshchilov et al., 2019), và R1NES (Sun et al., 2013)) cho thấy kết quả tốt nhất trên 2 hàm kiểm tra một cách độc lập. Ở đây sự đa dạng xếp hạng này trên các bộ tối ưu có thể chứng minh thực nghiệm sự cần thiết bao gồm các phiên bản/biến thể khác nhau của các bộ tối ưu hóa hộp đen trong thư viện của chúng tôi, dường như phù hợp với Định lý Không Có Bữa Trưa Miễn phí (NFLT) được thiết lập tốt (Wolpert và Macready, 1997).

--- TRANG 12 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

Hình 5: So sánh tỷ lệ hội tụ trung vị của 7 phiên bản PSO trên 20 hàm kiểm tra tốn kém tính toán chiều cao (với các phép toán xoay-và-dịch chuyển tiêu chuẩn có độ phức tạp bậc hai cho đánh giá).

--- TRANG 13 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

Hình 6: So sánh tỷ lệ hội tụ trung vị của 6 phiên bản DE trên 20 hàm kiểm tra tốn kém tính toán chiều cao (với các phép toán xoay-và-dịch chuyển tiêu chuẩn có độ phức tạp bậc hai cho đánh giá).

--- TRANG 14 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

Hình 7: So sánh tỷ lệ hội tụ trung vị của 9 phiên bản EDA trên 20 hàm kiểm tra tốn kém tính toán chiều cao (với các phép toán xoay-và-dịch chuyển tiêu chuẩn có độ phức tạp bậc hai cho đánh giá).

--- TRANG 15 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

Hình 8: So sánh tỷ lệ hội tụ trung vị của 23 phiên bản ES trên 20 hàm kiểm tra tốn kém tính toán chiều cao (với các phép toán xoay-và-dịch chuyển tiêu chuẩn có độ phức tạp bậc hai cho đánh giá).

--- TRANG 16 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

Hình 9: So sánh đường cong hội tụ của 15 bộ tối ưu quy mô lớn trên 25 nhiệm vụ phân loại hộp đen với giới hạn thời gian chạy tối đa (3 giờ) và ngưỡng thích nghi (1e-10).

--- TRANG 17 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

4 Hai Trường hợp Sử dụng cho BBO Quy mô Lớn
Để chứng minh thực nghiệm cách sử dụng PyPop7 đúng cách, trong phần này chúng tôi sẽ cung cấp hai ví dụ tối ưu hóa. Đầu tiên là để cho thấy giao diện lập trình dễ sử dụng được thống nhất cho tất cả các bộ tối ưu hóa hộp đen. Script Python sau đây cho thấy cách một biến thể ES quy mô lớn có tên LMMAES (Loshchilov et al., 2019) tối thiểu hóa hàm kiểm tra Rosenbrock phổ biến (Kok và Sandrock, 2009).

1>>> import numpy as np
2>>> from pypop7.benchmarks.base_functions import rosenbrock # hàm kiểm tra khét tiếng
3>>> ndim_problem = 1000 # chiều của hàm thích nghi (chi phí) cần được tối thiểu hóa
4>>> problem = {"fitness_function": rosenbrock, # hàm thích nghi cần được tối thiểu hóa
5... "ndim_problem": ndim_problem, # chiều hàm
6... "lower_boundary": -5.0*np.ones((ndim_problem,)), # biên tìm kiếm dưới
7... "upper_boundary": 5.0*np.ones((ndim_problem,))} # biên tìm kiếm trên
8>>> from pypop7.optimizers.es.lmmaes import LMMAES # hoặc sử dụng bất kỳ bộ tối ưu nào khác
9>>> options = {"fitness_threshold": 1e-10, # ngưỡng thích nghi để chấm dứt tiến hóa
10... "max_runtime": 3600, # để chấm dứt tiến hóa khi thời gian chạy vượt quá 1 giờ
11... "seed_rng": 0, # hạt giống tạo số ngẫu nhiên để lặp lại
12... "x": 4.0*np.ones((ndim_problem,)), # trung bình ban đầu của phân phối tìm kiếm
13... "sigma": 3.0, # kích thước bước toàn cục ban đầu của phân phối tìm kiếm
14... "verbose": 500} # để in thông tin chi tiết mỗi 500 thế hệ
15>>> lmmaes = LMMAES(problem, options) # để khởi tạo bộ tối ưu hóa hộp đen này
16>>> results = lmmaes.optimize() # để chạy quy trình tìm kiếm tốn thời gian trên chiều cao
17>>># để in thích nghi tốt nhất cho đến nay được tìm thấy và số lần đánh giá hàm được sử dụng
18>>> print (results["best_so_far_y"], results["n_function_evaluations"])

Thứ hai là để trình bày quy trình đánh giá của một bộ tối ưu hóa hộp đen trên nền tảng COCO/BBOB được tài liệu hóa tốt (Varelas et al., 2020), được hiển thị dưới đây.

1>>> import os
2>>> import webbrowser # để xử lý hậu kỳ trong trình duyệt
3>>> import numpy as np
4>>> import cocoex # mô-đun thí nghiệm của 'COCO'
5>>> import cocopp # mô-đun xử lý hậu kỳ của 'COCO'
6>>> from pypop7.optimizers.es.maes import MAES
7>>> suite, output = "bbob", "COCO-PyPop7-MAES"
8>>> budget_multiplier = 1e3 # hoặc 1e4, 1e5, ...
9>>> observer = cocoex.Observer(suite, "result_folder:" + output)
10>>> minimal_print = cocoex.utilities.MiniPrint()
11>>> for function in cocoex.Suite(suite, "", ""):
12... function.observe_with(observer) # để tạo dữ liệu cho xử lý hậu kỳ 'cocopp'
13... sigma = np.min(function.upper_bounds - function.lower_bounds) / 3.0
14... problem = {"fitness_function": function,
15... "ndim_problem": function.dimension,
16... "lower_boundary": function.lower_bounds,
17... "upper_boundary": function.upper_bounds}
18... options = {"max_function_evaluations": function.dimension * budget_multiplier,
19... "seed_rng": 2022,
20... "x": function.initial_solution,
21... "sigma": sigma}
22... solver = MAES(problem, options)
23... print (solver.optimize())
24>>> cocopp.main(observer.result_folder)
25>>> webbrowser.open("file://" + os.getcwd() + "/ppdata/index.html")

--- TRANG 18 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

Để có thêm ví dụ, vui lòng tham khảo tài liệu trực tuyến của nó: pypop.rtfd.io. Lưu ý rằng chúng tôi đã cung cấp ít nhất một ví dụ cho mỗi bộ tối ưu hóa hộp đen trong tài liệu API trực tuyến tương ứng của nó.

5 Kết luận
Trong bài báo này, chúng tôi đã cung cấp một thư viện mã nguồn mở pure-Python (có tên PyPop7) cho BBO với các cấu trúc mã hóa mô-đun và tài liệu trực tuyến đầy đủ. Cho đến nay, thư viện nhẹ này đã được sử dụng không chỉ bởi công trình của chúng tôi, ví dụ, (Duan et al., 2022) và (Duan et al., 2023), mà còn bởi các công trình khác, chẳng hạn như, điều chỉnh prompt của các mô hình thị giác-ngôn ngữ (Yu et al., 2023), tối ưu hóa phi tuyến cho xạ trị2, và lập kế hoạch/điều khiển robot (Zhang et al., 2024; Lee et al., 2023). Vui lòng tham khảo tài liệu trực tuyến của nó để có bản tóm tắt cập nhật về các ứng dụng của nó.

Như các bước tiếp theo, chúng tôi dự định tăng cường thêm khả năng BBO của nó từ năm khía cạnh, như được trình bày dưới đây:

• Song song hóa lớn (Chalumeau et al., 2024; Lange, 2023),

• Xử lý ràng buộc (Hellwig và Beyer, 2024),

• Tối ưu hóa nhiễu (Häse et al., 2021; Hansen et al., 2009; Beyer, 2000),

• Siêu học tập/tối ưu hóa (Lange et al., 2023; Vicol, 2023; Li et al., 2023; Vicol et al., 2021), và

• Thiết kế thuật toán tự động, đặc biệt là lựa chọn/cấu hình thuật toán tự động (Schede et al., 2022; Kerschke et al., 2019).

Lời cảm ơn và Tiết lộ Tài trợ
Công trình này được hỗ trợ bởi Quỹ Nghiên cứu Cơ bản và Ứng dụng Cơ bản Quảng Đông dưới Số hiệu 2024A1515012241 và 2021A1515110024, Chương trình Nghiên cứu Cơ bản Shenzhen dưới Số hiệu JCYJ20200109141235597, và Chương trình Giới thiệu Nhóm Sáng tạo và Khởi nghiệp Quảng Đông dưới Số hiệu 2017ZT07X386.

Tài liệu tham khảo
Y. Akimoto và N. Hansen. Lựa chọn mô hình trực tuyến cho thích ứng ma trận hiệp phương sai hạn chế. Trong PPSN, trang 3–13, 2016.

Y. Akimoto và N. Hansen. Gia tốc chéo cho chiến lược tiến hóa thích ứng ma trận hiệp phương sai. Evol. Comput., 28(3):405–435, 2020.

Y. Akimoto, A. Auger, et al. Hội tụ tuyến tính toàn cục của chiến lược tiến hóa trên các hàm lồi mạnh mịn hơn. SIAM J. Optim., 32(2):1402–1429, 2022.

2.https://github.com/pyanno4rt/pyanno4rt

--- TRANG 19 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

S.-i. Amari. Gradient tự nhiên hoạt động hiệu quả trong học tập. Neural Comput., 10(2):251–276, 1998.

B. Amos và D. Yarats. Phương pháp cross-entropy có thể vi phân. Trong ICML, trang 291–302, 2020.

C. Aranha, C. L. Camacho Villalón, et al. Siêu heuristic dựa trên ẩn dụ, lời kêu gọi hành động: Con voi trong phòng. Swarm Intell., 16(1):1–6, 2022.

D. V. Arnold và H.-G. Beyer. So sánh chiến lược tiến hóa với các phương pháp tìm kiếm trực tiếp khác trong sự hiện diện của nhiễu. Comput. Optim. Appl., 24(1):135–159, 2003.

T. Bäck, D. Fogel, và Z. Michalewicz, editors. Handbook of evolutionary computation. CRC Press, 1997.

T. Bäck, C. Foussette, et al. Contemporary evolution strategies. Springer, 2013.

S. Baluja. Thuật toán di truyền và thống kê tìm kiếm rõ ràng. Trong NeurIPS, 1996.

S. Baluja và R. Caruana. Loại bỏ di truyền khỏi thuật toán di truyền tiêu chuẩn. Trong ICML, trang 38–46, 1995.

R. Bellman. Quy hoạch động. Princeton University Press, 1957.

R. Bellman. Các quy trình kiểm soát thích ứng: Một chuyến tham quan có hướng dẫn. Princeton University Press, 1961.

J. Bergstra và Y. Bengio. Tìm kiếm ngẫu nhiên để tối ưu hóa siêu tham số. J. Mach. Learn. Res., 13:281–305, 2012.

D. Bertsimas và J. Tsitsiklis. Luyện kim mô phỏng. Stat. Sci., 8(1):10–15, 1993.

H.-G. Beyer. Thuật toán tiến hóa trong môi trường nhiễu: Các vấn đề lý thuyết và hướng dẫn thực hành. Comput. Meth. Appl. Mech. Eng., 186(2-4):239–267, 2000.

H.-G. Beyer và H.-P. Schwefel. Chiến lược tiến hóa – một giới thiệu toàn diện. Nat. Comput., 1:3–52, 2002.

H.-G. Beyer và B. Sendhoff. Đơn giản hóa chiến lược tiến hóa thích ứng ma trận hiệp phương sai của bạn. IEEE Trans. Evol. Comput., 21(5):746–759, 2017.

F. Biscani và D. Izzo. Một khung đa mục tiêu song song toàn cục để tối ưu hóa: Pagmo. J. Open Source Softw., 5(53):2338, 2020.

R. Bollapragada và S. M. Wild. Phương pháp quasi-newton lấy mẫu thích ứng cho tối ưu hóa ngẫu nhiên bậc không. Math. Program. Comput., 15(2):327–364, 2023.

R. Bollapragada, R. Byrd, et al. Chiến lược lấy mẫu thích ứng cho tối ưu hóa ngẫu nhiên. SIAM J. Optim., 28(4):3312–3343, 2018.

J. Bolte, L. Miclo, et al. Động lực gradient bầy đàn cho tối ưu hóa toàn cục: Trường hợp giới hạn trường trung bình. Math. Program., 205(1-2):661–701, 2024.

--- TRANG 20 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

E. Bonabeau, M. Dorigo, et al. Trí tuệ bầy đàn: Từ hệ thống tự nhiên đến nhân tạo. Oxford University Press, 1999.

C. Bouttier và I. Gavra. Tỷ lệ hội tụ của thuật toán luyện kim mô phỏng với quan sát nhiễu. J. Mach. Learn. Res., 20(4):1–45, 2019.

D. Brockhoff, A. Auger, et al. Lấy mẫu phản chiếu và lựa chọn tuần tự cho chiến lược tiến hóa. Trong PPSN, trang 11–21, 2010.

D. Brookes, A. Busia, et al. Một cái nhìn về thuật toán ước lượng phân phối thông qua góc nhìn của maximum-expectation. Trong GECCOC, trang 189–190, 2020.

S. H. Brooks. Một cuộc thảo luận về các phương pháp ngẫu nhiên để tìm kiếm cực đại. Oper. Res., 6(2):244–251, 1958.

L. Bungert, T. Roith, et al. Động lực dựa trên đồng thuận phân cực để tối ưu hóa và lấy mẫu. Math. Program., 2024.

F. Campelo và C. Aranha. Bài học từ sách thú vật tính toán tiến hóa. Artif. Life, 29(4):421–432, 2023.

F. Chalumeau, B. Lim, et al. QDax: Một thư viện cho thuật toán chất lượng-đa dạng và dựa trên quần thể với gia tốc phần cứng. J. Mach. Learn. Res., 25(108):1–16, 2024.

T. Chen, J. van Gelder, et al. Phân loại với mạng nguyên tử pha tạp bất trật tự trong silicon. Nature, 577(7790):341–345, 2020.

S. Choudhury, B. Narayanan, et al. Học máy tạo sinh tạo ra các mô hình động học mô tả chính xác các trạng thái chuyển hóa nội bào. bioRxiv, 2023.

C. Cipriani, H. Huang, et al. Giới hạn zero-inertia: Từ tối ưu hóa bầy đàn hạt đến tối ưu hóa dựa trên đồng thuận. SIAM J. Math. Anal., 54(3):3091–3121, 2022.

A. Corana, M. Marchesi, et al. Tối thiểu hóa các hàm đa mode của các biến liên tục với thuật toán "luyện kim mô phỏng"—corrigenda cho bài báo này có sẵn ở đây. ACM Trans. Math. Softw., 13(3):262–280, 1987.

G. Cui, M. L. Wong, et al. Học máy cho các mô hình phản hồi tiếp thị trực tiếp: Mạng Bayesian với lập trình tiến hóa. Manag. Sci., 52(4):597–612, 2006.

K. Deb, A. Anand, et al. Một thuật toán tiến hóa hiệu quả tính toán cho tối ưu hóa tham số thực. Evol. Comput., 10(4):371–395, 2002.

N. Demo, M. Tezzele, et al. Một cách tiếp cận học có giám sát liên quan đến không gian con tích cực cho thuật toán di truyền hiệu quả trong các bài toán tối ưu hóa chiều cao. SIAM J. Sci. Comput., 43(3):B831–B853, 2021.

Y. Diouane, S. Gratton, et al. Chiến lược tiến hóa hội tụ toàn cục. Math. Program., 152(1):467–490, 2015.

--- TRANG 21 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

Q. Duan, G. Zhou, et al. Học tập tập thể về thích ứng ma trận bộ nhớ thấp cho tối ưu hóa hộp đen quy mô lớn. Trong PPSN, trang 281–294, 2022.

Q. Duan, C. Shao, et al. Đồng tiến hóa hợp tác cho tối ưu hóa hộp đen quy mô lớn không tách được: Phân tích hội tụ và gia tốc phân tán. arXiv preprint, 2023.

A. E. Eiben và J. Smith. Từ tính toán tiến hóa đến sự tiến hóa của vạn vật. Nature, 521(7553):476–482, 2015.

J. Fan, R. Lau, et al. Sử dụng kiến thức miền trong neuroevolution. Trong ICML, trang 170–177, 2003.

E. Fermi. Giải pháp số học của một vấn đề tối thiểu. Báo cáo kỹ thuật, Los Alamos Scientific Lab., Los Alamos, NM USA, 1952.

D. B. Fogel. Lập trình tiến hóa: Một giới thiệu và một số hướng hiện tại. Stat. Comput., 4(2):113–129, 1994.

D. B. Fogel. Tổng quan về lập trình tiến hóa. Trong Evolutionary Algorithms, trang 89–109. Springer, 1999.

D. B. Fogel và L. J. Fogel. Một giới thiệu về lập trình tiến hóa. Trong ECAE, trang 21–33, 1995.

L. J. Fogel, A. J. Owens, et al. Ra quyết định thông minh thông qua mô phỏng tiến hóa. Trans. Hum. Factors Electron., HFE-6(1):13–23, 1965.

M. Fornasier, L. Pareschi, et al. Tối ưu hóa dựa trên đồng thuận trên hình cầu: Hội tụ về cực tiểu toàn cục và học máy. J. Mach. Learn. Res., 22(237):1–55, 2021.

S. Forrest. Thuật toán di truyền: Nguyên lý chọn lọc tự nhiên được áp dụng cho tính toán. Science, 261(5123):872–878, 1993.

F.-A. Fortin, F.-M. D. Rainville, et al. DEAP: Thuật toán tiến hóa được thực hiện dễ dàng. J. Mach. Learn. Res., 13(70):2171–2175, 2012.

K. Gao và O. Sener. Tổng quát hóa làm mịn Gaussian cho tìm kiếm ngẫu nhiên. Trong ICML, trang 7077–7101, 2022.

C. García-Martínez, M. Lozano, et al. Thuật toán di truyền mã hóa thực toàn cục và cục bộ dựa trên các toán tử lai ghép tập trung vào cha mẹ. Eur. J. Oper. Res., 185(3):1088–1113, 2008.

D. E. Goldberg. Thuật toán di truyền và tiến hóa trưởng thành. Commun. ACM, 37(3):113–119, 1994.

D. E. Goldberg và J. H. Holland. Thuật toán di truyền và học máy. Mach. Learn., 3(2):95–99, 1988.

F. J. Gomez và J. Schmidhuber. Đồng tiến hóa các neuron tái phát học POMDPs bộ nhớ sâu. Trong GECCO, trang 491–498, 2005.

--- TRANG 22 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

F. J. Gomez, R. Miikkulainen, et al. Giải quyết các nhiệm vụ kiểm soát không-Markovian với neuroevolution. Trong IJCAI, trang 1356–1361, 1999.

F. J. Gomez, J. Schmidhuber, et al. Tiến hóa thần kinh được tăng tốc thông qua các khớp thần kinh đồng tiến hóa hợp tác. J. Mach. Learn. Res., 9:937–965, 2008.

N. Hansen và A. Ostermeier. Tự thích ứng hoàn toàn khử ngẫu nhiên trong chiến lược tiến hóa. Evol. Comput., 9(2):159–195, 2001.

N. Hansen, A. S. P. Niederberger, et al. Một phương pháp xử lý bất định trong tối ưu hóa tiến hóa với ứng dụng cho kiểm soát phản hồi đốt cháy. IEEE Trans. Evol. Comput., 13(1):180–197, 2009.

N. Hansen, A. Auger, et al. COCO: Một nền tảng để so sánh các bộ tối ưu liên tục trong môi trường hộp đen. Optim. Methods Softw., 36(1):114–144, 2021.

C. R. Harris, K. J. Millman, et al. Lập trình mảng với NumPy. Nature, 585(7825):357–362, 2020.

F. Häse, M. Aldeghi, et al. Olympus: Một khung đánh giá cho tối ưu hóa nhiễu và lập kế hoạch thí nghiệm. Mach. Learn.: Sci. Technol., 2(3):035021, 2021.

W. K. Hastings. Các phương pháp lấy mẫu monte carlo sử dụng chuỗi markov và ứng dụng của chúng. Biometrika, 57(1):97–109, 1970.

X. He, Z. Zheng, et al. MMES: Chiến lược tiến hóa dựa trên mô hình hỗn hợp cho tối ưu hóa quy mô lớn. IEEE Trans. Evol. Comput., 25(2):320–333, 2021.

M. Hellwig và H.-G. Beyer. Phân tích các nguyên lý thiết kế cho chiến lược tiến hóa cạnh tranh trong không gian tìm kiếm bị ràng buộc. arXiv preprint, 2024.

S. I. Higgins, T. Conradi, et al. Không gian khí hậu hạn chế cho các trạng thái hệ sinh thái thay thế ở châu Phi. Science, 380(6649):1038–1042, 2023.

J. H. Holland. Phác thảo cho một lý thuyết logic của các hệ thống thích ứng. J. ACM, 9(3):297–314, 1962.

R. Hooke và T. A. Jeeves. Giải pháp "tìm kiếm trực tiếp" của các vấn đề số học và thống kê. J. ACM, 8(2):212–229, 1961.

J. Hu, M. C. Fu, et al. Một phương pháp tìm kiếm thích ứng tham chiếu mô hình cho tối ưu hóa toàn cục. Oper. Res., 55(3):549–568, 2007.

H. Huang, J. Qiu, et al. Tối ưu hóa dựa trên đồng thuận cho các vấn đề điểm yên ngựa. SIAM J. Control Optim., 62(2):1093–1121, 2024.

M. Hüttenrauch và G. Neumann. Tối ưu hóa hộp đen mạnh mẽ cho tìm kiếm ngẫu nhiên và học tăng cường episodic. J. Mach. Learn. Res., 25(153):1–44, 2024.

A. Ilyas, L. Engstrom, et al. Tấn công đối kháng hộp đen với truy vấn và thông tin hạn chế. Trong ICML, trang 2137–2146, 2018.

--- TRANG 23 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

D. R. Jones, M. Schonlau, et al. Tối ưu hóa toàn cục hiệu quả của các hàm hộp đen đắt tiền. J. Glob. Optim., 13(4):455–492, 1998.

A. Kabán, J. Bootkrajang, et al. Hướng tới EDA liên tục quy mô lớn: Một quan điểm lý thuyết ma trận ngẫu nhiên. Evol. Comput., 24(2):255–291, 2016.

A. F. Kaupe. Thuật toán 178: Tìm kiếm trực tiếp. Commun. ACM, 6(6):313–314, 1963.

J. Kennedy và R. Eberhart. Tối ưu hóa bầy đàn hạt. Trong ICNN, trang 1942–1948 vol.4, 1995.

J. F. Kennedy, R. C. Eberhart, et al. Trí tuệ bầy đàn. Morgan Kaufmann, 2001.

P. Kerschke, H. H. Hoos, et al. Lựa chọn thuật toán tự động: Khảo sát và quan điểm. Evol. Comput., 27(1):3–45, 2019.

S. Kirkpatrick, C. D. Gelatt, et al. Tối ưu hóa bằng luyện kim mô phỏng. Science, 220(4598):671–680, 1983.

S. Kok và C. Sandrock. Định vị và mô tả đặc điểm của các điểm dừng của hàm rosenbrock mở rộng. Evol. Comput., 17(3):437–453, 2009.

T. G. Kolda, R. M. Lewis, et al. Tối ưu hóa bằng tìm kiếm trực tiếp: Quan điểm mới về một số phương pháp cổ điển và hiện đại. SIAM Rev., 45(3):385–482, 2003.

V. Koob, R. Ulrich, et al. Kích hoạt phản hồi và truyền kích hoạt trong crosstalk ngược dựa trên phản hồi: Phân tích và mô phỏng với mô hình khuếch tán mở rộng. Psyc. Rev., 130(1):102–136, 2023.

O. Krause, D. R. Arbonès, et al. CMA-ES với cập nhật hiệp phương sai tối ưu và độ phức tạp lưu trữ. Trong NeurIPS, trang 370–378, 2016.

A. Laganowsky, E. Reading, et al. Protein màng liên kết lipid một cách chọn lọc để điều chỉnh cấu trúc và chức năng của chúng. Nature, 510(7503):172–175, 2014.

J. C. Lagarias, J. A. Reeds, et al. Tính chất hội tụ của phương pháp simplex nelder-mead trong chiều thấp. SIAM J. Optim., 9(1):112–147, 1998.

R. T. Lange. Evosax: Chiến lược tiến hóa dựa trên JAX. Trong GECCO, trang 659–662, 2023.

R. T. Lange, T. Schaul, et al. Khám phá chiến lược tiến hóa thông qua tối ưu hóa meta-hộp đen. Trong ICLR, 2023.

P. Larrañaga, editor. Thuật toán ước lượng phân phối: Một công cụ mới cho tính toán tiến hóa. Springer, 2002.

Y. LeCun, Y. Bengio, et al. Học sâu. Nature, 521(7553):436–444, 2015.

C.-Y. Lee và X. Yao. Lập trình tiến hóa sử dụng đột biến dựa trên phân phối xác suất levy. IEEE Trans. Evol. Comput., 8(1):1–13, 2004.

--- TRANG 24 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

Y. Lee, K. Lee, et al. Vấn đề tối ưu hóa người lập kế hoạch: Công thức và khung. arXiv preprint, 2023.

O. Li, J. Harrison, et al. Ước lượng gradient giảm phương sai thông qua tái sử dụng nhiễu trong chiến lược tiến hóa trực tuyến. Trong NeurIPS, trang 45489–45501, 2023.

S. Li, T. Driver, et al. Chuyển động electron liên kết attosecond trong phân rã auger-meitner. Science, 375(6578):285–290, 2022a.

Y. Li, M. Cheng, et al. Đánh giá tấn công đối kháng và phòng thủ cho các phương pháp phân loại. Am. Stat., 76(4):329–345, 2022b.

Z. Li và Q. Zhang. Một chiến lược tiến hóa đơn giản nhưng hiệu quả cho tối ưu hóa hộp đen quy mô lớn. IEEE Trans. Evol. Comput., 22(5):637–646, 2018.

J. Liang, A. Qin, et al. Bộ tối ưu bầy đàn hạt học tập toàn diện cho tối ưu hóa toàn cục của các hàm đa mode. IEEE Trans. Evol. Comput., 10(3):281–295, 2006.

S. Liu, B. Kailkhura, et al. Giảm phương sai ngẫu nhiên bậc không cho tối ưu hóa không lồi. Trong NeurIPS, trang 3727–3737, 2018.

S. Liu, P.-Y. Chen, et al. SignSGD thông qua oracle bậc không. Trong ICLR, 2019.

I. Loshchilov. LM-CMA: Một thay thế cho L-BFGS cho tối ưu hóa hộp đen quy mô lớn. Evol. Comput., 25(1):143–171, 2017.

I. Loshchilov, T. Glasmachers, et al. Tối ưu hóa hộp đen quy mô lớn bằng thích ứng ma trận bộ nhớ hạn chế. IEEE Trans. Evol. Comput., 23(2):353–358, 2019.

M. Lutz. Học Python: Lập trình hướng đối tượng mạnh mẽ. O'Reilly, 2013.

S. Mannor, R. Y. Rubinstein, et al. Phương pháp cross entropy cho tìm kiếm chính sách nhanh. Trong ICML, trang 512–519, 2003.

Y. Mei, M. N. Omidvar, et al. Một thuật toán chia để trị cạnh tranh cho tối ưu hóa hộp đen quy mô lớn không ràng buộc. ACM Trans. Math. Softw., 42(2):13:1–24, 2016.

J. M. Melis, I. Siwanowicz, et al. Học máy tiết lộ cơ chế kiểm soát của bản lề cánh côn trùng. Nature, 628(8009):795–803, 2024.

N. Metropolis, A. W. Rosenbluth, et al. Tính toán phương trình trạng thái bằng máy tính nhanh. J. Chem. Phys., 21(6):1087–1092, 1953.

L. Meunier, H. Rakotoarison, et al. Tối ưu hóa hộp đen được xem xét lại: Cải thiện trình hướng dẫn lựa chọn thuật toán thông qua đánh giá toàn diện. IEEE Trans. Evol. Comput., 26(3):490–500, 2022.

R. Miikkulainen và S. Forrest. Một quan điểm sinh học về tính toán tiến hóa. Nat. Mach. Intell., 3(1):9–15, 2021.

--- TRANG 25 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

M. Mitchell, J. Holland, et al. Khi nào thuật toán di truyền sẽ vượt trội hơn leo đồi. Trong NeurIPS, trang 51–58, 1993.

D. E. Moriarty và R. Miikkulainen. Học tập hiệu quả từ phần thưởng chậm thông qua tiến hóa cộng sinh. Trong ICML, trang 396–404, 1995.

D. E. Moriarty và R. Mikkulainen. Học tăng cường hiệu quả thông qua tiến hóa cộng sinh. Mach. Learn., 22:11–32, 1996.

P. Moritz, R. Nishihara, et al. Ray: Một khung phân tán cho các ứng dụng AI mới nổi. Trong OSDI, trang 561–577, 2018.

J. A. Nelder và R. Mead. Một phương pháp simplex để tối thiểu hóa hàm. Comput. J., 7(4):308–313, 1965.

Y. Nesterov và V. Spokoiny. Tối thiểu hóa không gradient ngẫu nhiên của các hàm lồi. Found. Comput. Math., 17(2):527–566, 2017.

Y. Ollivier, L. Arnold, et al. Thuật toán tối ưu hóa hình học thông tin: Một bức tranh thống nhất thông qua các nguyên lý bất biến. J. Mach. Learn. Res., 18(18):1–65, 2017.

L. Panait, K. Tuyls, et al. Lợi thế lý thuyết của người học khoan dung: Một quan điểm lý thuyết trò chơi tiến hóa. J. Mach. Learn. Res., 9:423–457, 2008.

F. Pedregosa, G. Varoquaux, et al. Scikit-learn: Học máy trong python. J. Mach. Learn. Res., 12(85):2825–2830, 2011.

M. A. Potter và K. A. Jong. Một cách tiếp cận tiến hóa hợp tác cho tối ưu hóa hàm. Trong PPSN, trang 249–257, 1994.

M. A. Potter và K. A. D. Jong. Tiến hóa hợp tác: Một kiến trúc để tiến hóa các thành phần phụ thích ứng chung. Evol. Comput., 8(1):1–29, 2000.

M. J. D. Powell. Một phương pháp hiệu quả để tìm cực tiểu của hàm nhiều biến mà không cần tính đạo hàm. Comput. J., 7(2):155–162, 1964.

J. Rapin và O. Teytaud. Nevergrad - một nền tảng tối ưu hóa không gradient. GitHub, 2018.

L. Rastrigin. Sự hội tụ của phương pháp tìm kiếm ngẫu nhiên trong kiểm soát bên ngoài của hệ thống nhiều tham số. Autom. Remote Control, 24:1337–1342, 1963.

I. Rechenberg. Chiến lược tiến hóa. Một mô hình toán học của tiến hóa Darwin. Trong ISS, trang 122–132, 1984.

R. Ros và N. Hansen. Một sửa đổi đơn giản trong CMA-ES đạt được độ phức tạp thời gian và không gian tuyến tính. Trong PPSN, trang 296–305, 2008.

M. T. Rosenstein và A. G. Barto. Nâng tạ robot bằng tìm kiếm chính sách trực tiếp. Trong IJCAI, trang 839–846, 2001.

Y. Ruan, Y. Xiong, et al. Học để học bằng oracle bậc không. Trong ICLR, 2020.

--- TRANG 26 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

R. Y. Rubinstein và D. P. Kroese. Phương pháp cross-entropy: Một cách tiếp cận thống nhất cho tối ưu hóa tổ hợp, mô phỏng monte-carlo và học máy. Springer, 2004.

G. Rudolph. Chiến lược tiến hóa. Trong Handbook of Natural Computing, trang 673–698. Springer, 2012.

T. Salimans, J. Ho, et al. Chiến lược tiến hóa như một thay thế có thể mở rộng cho học tăng cường. arXiv preprint, 2017.

R. Samyak và J. A. Palacios. Tóm tắt thống kê của cây tiến hóa không nhãn. Biometrika, 111(1):171–193, 2024.

T. Schaul, J. Bayer, et al. PyBrain. J. Mach. Learn. Res., 11:743–746, 2010.

T. Schaul, T. Glasmachers, et al. Chiều cao và đuôi nặng cho chiến lược tiến hóa tự nhiên. Trong GECCO, trang 845–852, 2011.

E. Schede, J. Brandt, et al. Một khảo sát các phương pháp cho cấu hình thuật toán tự động. J. Artif. Intell. Res., 75:425–487, 2022.

J. Schmidhuber. Học sâu trong mạng nơ-ron: Một tổng quan. Neural Netw., 61:85–117, 2015.

J. Schmidhuber, S. Hochreiter, et al. Đánh giá các vấn đề đánh giá bằng cách đoán ngẫu nhiên. Trong A Field Guide to Dynamical Recurrent Networks, trang 231–235. IEEE, 2001.

J. Schmidhuber, D. Wierstra, et al. Huấn luyện mạng tái phát bằng evolino. Neural Comput., 19(3):757–779, 2007.

M. Schumer và K. Steiglitz. Tìm kiếm ngẫu nhiên kích thước bước thích ứng. IEEE Trans. Autom. Control, 13(3):270–276, 1968.

H. P. Schwefel. Chiến lược tiến hóa: Một họ các kỹ thuật tối ưu hóa phi tuyến dựa trên việc bắt chước một số nguyên lý của tiến hóa hữu cơ. Ann. Oper. Res., 1(2):165–167, 1984.

B. Shahriari, K. Swersky, et al. Đưa con người ra khỏi vòng lặp: Một đánh giá về tối ưu hóa bayesian. Proc. IEEE, 104(1):148–175, 2016.

P. Siarry, G. Berthiau, et al. Luyện kim mô phỏng tăng cường để tối thiểu hóa toàn cục các hàm của nhiều biến liên tục. ACM Trans. Math. Softw., 23(2):209–228, 1997.

F. J. Solis và R. J.-B. Wets. Tối thiểu hóa bằng các kỹ thuật tìm kiếm ngẫu nhiên. Math. Oper. Res., 6(1):19–30, 1981.

S. Sonnenburg, M. L. Braun, et al. Nhu cầu phần mềm mã nguồn mở trong học máy. J. Mach. Learn. Res., 8:2443–2466, 2007.

S. U. Stich. Về các kỹ thuật tăng tốc độ phức tạp thấp cho tối ưu hóa ngẫu nhiên. Trong PPSN, trang 130–140, 2014.

R. Storn và K. Price. Tiến hóa vi phân – một heuristic đơn giản và hiệu quả cho tối ưu hóa toàn cục trên không gian liên tục. J. Glob. Optim., 11(4):341–359, 1997.

--- TRANG 27 ---
PyPop7: Một Thư Viện Pure-Python cho Tối Ưu Hóa Hộp Đen Dựa trên Quần Thể

T. Sun, Y. Shao, et al. Điều chỉnh hộp đen cho mô hình ngôn ngữ như một dịch vụ. Trong ICML, trang 20841–20855, 2022.

Y. Sun, T. Schaul, et al. Một chiến lược tiến hóa tự nhiên thời gian tuyến tính cho các hàm không tách được. Trong GECCOC, trang 61–62, 2013.

J. Swan, S. Adriaensen, et al. Siêu heuristic "Trong quy mô lớn". Eur. J. Oper. Res., 297(2):393–406, 2022.

D. Tang, Q. Ye, et al. Mở hộp đen: Tối ưu hóa lấy mẫu phân cấp cho ước lượng tư thế tay. IEEE Trans. Pattern Anal. Mach. Intell., 41(9):2161–2175, 2019.

V. Torczon. Về sự hội tụ của thuật toán tìm kiếm mẫu. SIAM J. Optim., 7(1):1–25, 1997.

K. Varelas, A. Auger, et al. Một nghiên cứu so sánh các biến thể quy mô lớn của CMA-ES. Trong PPSN, trang 3–15, 2018.

K. Varelas, O. A. El Hara, et al. Đánh giá các bộ tối ưu liên tục quy mô lớn: Bộ kiểm tra bbob-largescale, hướng dẫn phần mềm COCO và hơn thế nữa. Appl. Soft Comput., 97:106737, 2020.

P. Vicol. Ước lượng gradient phương sai thấp trong đồ thị tính toán được triển khai với es-single. Trong ICML, trang 35084–35119, 2023.

P. Vicol, L. Metz, et al. Ước lượng gradient không thiên vị trong đồ thị tính toán được triển khai với chiến lược tiến hóa bền vững. Trong ICML, trang 10553–10563, 2021.

P. Virtanen, R. Gommers, et al. SciPy 1.0: Thuật toán cơ bản cho tính toán khoa học trong python. Nat. Meth., 17(3):261–272, 2020.

L. Wang, R. Fonseca, et al. Học phân vùng không gian tìm kiếm cho tối ưu hóa hộp đen sử dụng tìm kiếm cây monte carlo. Trong NeurIPS, trang 19511–19522, 2020.

T. Wang và J. Ba. Khám phá lập kế hoạch dựa trên mô hình với mạng chính sách. Trong ICLR, 2020.

X. Wei, H. Yan, et al. Tấn công video hộp đen thưa thớt với học tăng cường. Int. J. Comput. Vis., 130(6):1459–1473, 2022.

D. Whitley. Thuật toán di truyền thế hệ tiếp theo: Hướng dẫn người dùng và hướng dẫn. Trong Handbook of Metaheuristics, trang 245–274. Springer, 2019.

D. Wierstra, T. Schaul, et al. Chiến lược tiến hóa tự nhiên. Trong CEC, trang 3381–3387, 2008.

D. Wierstra, T. Schaul, et al. Chiến lược tiến hóa tự nhiên. J. Mach. Learn. Res., 15(27):949–980, 2014.

D. Wolpert và W. Macready. Định lý không có bữa trưa miễn phí cho tối ưu hóa. IEEE Trans. Evol. Comput., 1(1):67–82, 1997.

M. Wright. Phương pháp tìm kiếm trực tiếp: Một thời bị khinh miệt, giờ đây đáng kính. Trong Numerical Analysis, trang 191–208. Addison-Wesley, 1996.

--- TRANG 28 ---
DUAN, ZHOU, SHAO, WANG, FENG, HUANG, TAN, YANG, ZHAO, và SHI

S. J. Wright. Thuật toán coordinate descent. Math. Program., 151(1):3–34, 2015.

P. Xu, F. Roosta, et al. Tối ưu hóa bậc hai cho học máy không lồi: Một nghiên cứu thực nghiệm. Trong SDM, trang 199–207, 2020.

X. Yao, Y. Liu, et al. Lập trình tiến hóa được làm nhanh hơn. IEEE Trans. Evol. Comput., 3(2):82–102, 1999.

S. Yi, D. Wierstra, et al. Tìm kiếm ngẫu nhiên sử dụng gradient tự nhiên. Trong ICML, trang 1161–1168, 2009.

L. Yu, Q. Chen, et al. Điều chỉnh prompt hộp đen cho mô hình thị giác-ngôn ngữ như một dịch vụ. Trong IJCAI, trang 1686–1694, 2023.

Z. Zhang, Y. Wei, et al. Một phương pháp hình học thông tin bất biến cho tối ưu hóa trực tuyến chiều cao. arXiv preprint, 2024.

W. Zheng và B. Doerr. Từ hiểu biết drift di truyền đến cơ chế khởi động lại thông minh cho thuật toán ước lượng-phân phối. J. Mach. Learn. Res., 24(292):1–40, 2023.
