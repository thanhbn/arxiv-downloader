# 2104.10995.pdf
# Converted from PDF to TXT
# Source path: /home/admin88/arxiv-downloader/rl-alignment/2104.10995.pdf
# File size: 372791 bytes

===============================================
PDF FILE CONTENT
===============================================


--- PAGE 1 ---
Published as a workshop paper at “BRAIN2AI” (ICLR 2021)
ALEARNING GAP BETWEEN NEUROSCIENCE
AND REINFORCEMENT LEARNING
Samuel T. Wauthier, Pietro Mazzaglia, Ozan C ¸ atal, Cedric De Boom, Tim Verbelen &
Bart Dhoedt
IDLab, Department of Information Technology
Ghent University – imec
Technologiepark-Zwijnaarde 126, B-9052 Ghent, Belgium
fsamuel.wauthier, pietro.mazzaglia, ozan.catal, cedric.deboom,
tim.verbelen, bart.dhoedt g@ugent.be
ABSTRACT
Historically, artiﬁcial intelligence has drawn much inspiration from neuroscience
to fuel advances in the ﬁeld. However, current progress in reinforcement learning
is largely focused on benchmark problems that fail to capture many of the aspects
that are of interest in neuroscience today. We illustrate this point by extending
a T-maze task from neuroscience for use with reinforcement learning algorithms,
and show that state-of-the-art algorithms are not capable of solving this problem.
Finally, we point out where insights from neuroscience could help explain some
of the issues encountered.
1 I NTRODUCTION
Neuroscience and artiﬁcial intelligence have a long-standing history of cross-fertilization between
the two domains (Hassabis et al., 2017). Most notable are advances in deep reinforcement learning
(RL), which is heavily inspired by reward prediction error signals observed in the brain, as well
as mimicking neural circuits for computation (Mnih et al., 2015). Current RL algorithms are even
surpassing human performance on various, typically game environments such as Atari games (Badia
et al., 2020), Dota 2 (Berner et al., 2019) or Go (Silver et al., 2016). However, these latest achieve-
ments are mainly attributed to incremental updates to the RL algorithm and scaling up training to
huge amounts of data.
Progress in artiﬁcial intelligence is often driven by benchmark problems. A clear example is the
ImageNet data set, which is driving progress in computer vision (Krizhevsky et al., 2017; He et al.,
2016; Khan et al., 2020). Also in RL, standard benchmarks were introduced to measure performance
of various algorithms, such as the Atari Learning Environment (Bellemare et al., 2013), Open AI
Gym (Brockman et al., 2016), the DeepMind Lab (Beattie et al., 2016) and Control Suite (Tassa
et al., 2018). Such benchmark problems become increasingly harder to solve, with the main focus
being increasing the complexity of observations (i.e. from control states to pixels), and increasing
the difﬁculty of ﬁnding rewards (i.e. sparse reward signals). However, we argue that many aspects
that are of interest in (behavioral) neuroscience, such as dealing with ambiguity, stochasticity, and
memory, are less pronounced.
We propose that, once again, we should draw more inspiration from neuroscience and build novel
benchmark problems that are, on the one hand, simple enough to enable relatively fast iterations for
algorithm development, but on the other hand, hard enough for current algorithms to tackle. One
notable example in this direction is the Animal AI testbed (Beyret et al., 2019), which focuses on
spatial navigation and tasks involving inference of object locations through object persistence and
spatial elimination. We believe that grounding RL benchmark problems in well-studied problems
in neuroscience will also foster novel algorithms inspired by neuroscience theories and, at the same
time, provide empirical evidence for these theories.
Psychology and neuroscience have been studying rodent behavior in mazes since the early 20th
century (Tolman & Honzik, 1930; O’Keefe & Dostrovsky, 1971). A more recent example is the
(artiﬁcial) T-maze, described by Friston et al. (2016). In this environment, an artiﬁcial agent, e.g.
1arXiv:2104.10995v3  [cs.LG]  4 May 2021

--- PAGE 2 ---
Published as a workshop paper at “BRAIN2AI” (ICLR 2021)
Figure 1: Foraging environment as deﬁned by Friston et al. (2016). The left and right images
represent two possible contexts. The agent starts in the middle. The red circle indicates the location
of the reward. The green and blue circles are clues that tell the agent which context it is in, e.g. blue
and green mean the reward will be on the left and right, respectively.
a rat, is put inside a T-shaped maze with a single reward, e.g. some cheese, in either the left or the
right branch (see Figure 1). The lower branch contains a clue on where the reward is located. The
agent starts in the center of the world and can choose which branch to take. Crucially, after it has
entered the left or right branch, it is not allowed to exit this branch. The initial state of the world is
ambiguous, since the agent has no way of knowing its context, i.e. which type of world it ﬁnds itself
in: a world with a reward in the left branch or a world with a reward in the right branch. In addition,
without knowledge of whether the right or the left branch contains the reward, the agent can only
guess which branch to take. Observing the clue in the lower branch allows the agent to resolve the
ambiguity and make an informed decision. This T-maze was originally described in a discrete way,
i.e. the agent can be in four possible locations (center, bottom, left, right) and has a maximum of
two moves. Note that the agent is allowed to go directly to the left or right branch from the bottom
branch. In their work, Friston et al. (2016) highlight that the key to solving the problem is the use of
belief-based methods, whereas belief-free methods, such as dynamic programming, fail.
In the remainder of this paper, we revisit the environment described by Friston et al. (2016) and
reimplement it as a pixel-based, game-like environment similar to the Atari benchmark. Further-
more, we show that a set of state-of-the-art reinforcement learning algorithms is unable to solve this
environment. We conclude by discussing some of the limitations of current RL approaches and point
out where inspiration from neuroscience might help.
2 E- MAZE : T- MAZE REVISITED
In this section, we extend the T-maze of Friston et al. (2016) in order to be compatible with current
RL benchmarks1. For example, we use pixel-based observations and allow the agent to move to
intermediate positions between endpoints. In other words, observations become images, and the
state space becomes larger. As a direct result, the maximum number of moves grows as well, since
the environment cannot be solved in two moves anymore.
Our environment is shown in Figure 2. It consists of a top-down view of a tilted E-shaped maze.
The grey triangle marks the agent, while the yellow circle indicates the reward. Walls are displayed
in red, and windows are displayed in blue. Areas that the agent is unable to see are ﬁlled with black.
1Environment source code is available at https://github.com/thesmartrobot/ambigym .
Figure 2: (left) Starting position in E-maze (with and without black areas). (right) Path blocked after
the agent enters a branch (with and without black areas).
2

--- PAGE 3 ---
Published as a workshop paper at “BRAIN2AI” (ICLR 2021)
0.00.51.0PPO PPO+ICM DQN/Rainbow
0 5000 100000.00.51.0PPO w/ orthogonal init
0 5000 10000PPO+RND
0 5000 10000Dreamer
episodereturn
Figure 3: Mean rolling average of episode return for different algorithms. Multiple runs were done
for each algorithm and a rolling average was taken over 100 episodes for each run, after which the
mean over all runs was taken. Shaded areas show the range between the minimum and maximum
rolling average.
The agent can see through windows, but not through walls. Figure 2 also shows the environment
with all the black-ﬁlled areas removed for the purpose of demonstration. The agent’s ﬁeld of view
(FOV) and maximum number of moves are hyperparameters. Possible actions are: do nothing, move
forward, and turn left or right by 45 degrees. The moment the agent enters the left or right branch,
the branch closes, and the agent cannot turn back (see Figure 2).
Note that the environment can be modeled as a partially observable Markov decision process
(POMDP). The agent is unable to infer the underlying state directly from a single observation, since
areas that are not within the line of sight of the agent are invisible to the agent. Moreover, from an
RL standpoint, this setup corresponds to a sparse reward environment. Indeed, no reward is gained
unless the agent obtains the yellow circle. Only if the agent reaches the yellow circle, it receives a
reward of 1 and the episode is stopped.
3 E XPERIMENTS
A number of experiments were set up to verify the performance of different RL algorithms on the en-
vironment. The environment was initialized in the same manner for all experiments. It was evaluated
on model-free approaches (DQN (Mnih et al., 2015), Rainbow (Hessel et al., 2018), PPO (Schul-
man et al., 2017)), PPO with exploration bonuses (ICM (Pathak et al., 2017), RND (Burda et al.,
2019b)) and a model-based approach (DreamerV2 (Hafner et al., 2021)). Details can be found in
Appendix A and B.
Performance was measured by how often the agent was able to reach the reward. In practice, a
rolling average of the returns over 100 episodes was used for the evaluation, where return denotes
the episodic sum of rewards. Since the return for this environment is either 0 or 1, the rolling average
estimates the frequency with which the agent is able to reach the reward. Furthermore, we average
over 10 different training runs for each algorithm. In what follows, we shall refer to ‘performance’
to indicate the average number of times the agent was able to reach the reward.
Given the random nature of the environment, a random agent with an unbounded number of allowed
moves would reach the reward 50% of the time. In other words, with the performance measure
deﬁned above, the algorithm under consideration must reach the reward more than 50% of the time
to be able to say that it performs better than a random agent. This is important, since an RL agent
is not guaranteed 50% performance when the maximum number of moves is small. For example, it
may never learn to go towards the reward due to never reaching the reward.
Figure 3 shows the mean rolling average of return per episode for the algorithms that learned to go
to the reward over the course of training. Shaded areas indicate the range between the minimum and
maximum rolling average over all runs. DQN and Rainbow displayed the same behaviour and are
shown in the same plot.
3

--- PAGE 4 ---
Published as a workshop paper at “BRAIN2AI” (ICLR 2021)
Typical behavior of the rolling average curves of individual runs is that either the agent fails to learn
and stays at 0%, or the agent jumps to the level of a random agent from 0% to around 50%. This is
reﬂected in the minima and maxima. For PPO and the exploration methods, whether the agent fails
to learn depends on the seed. As such, the mean over all runs reﬂects the amount of seeds for which
the agent failed to learn. For example, PPO reached a mean rolling average of 10% over 10 runs,
indicating that it failed 8 out of 10 times.
Out of the three model-free methods that were assessed, DQN and Rainbow fail to learn, while PPO
(without orthogonal initialization or exploration) achieves very low performance. The model-free
methods suffer most from the sparse reward task and are unable to learn when the reward is not
reached through random actions. Adding exploration bonuses improves performance for PPO by
20–30% on average. Additionally, we found that using orthogonal weight initialization (Saxe et al.,
2013) drastically improves performance on PPO. This is due to the fact that this yields more diverse
initial random behavior. Finally, DreamerV2 achieved 50% after about 2000 episodes, but never
increased to more than 50%.
4 D ISCUSSION
The results show that model-free methods fail without speciﬁc initialization or exploration method.
On the one hand, this is a demonstration of how sensitive RL methods are to hyperparameters and
how clever “tricks” must be used to obtain good results. State-of-the-art results are usually obtained
through important details, such as proper initialization, input normalization or adaptive learning
techniques (Rao et al., 2020). These details are often not highlighted as being crucial for the per-
formance of the algorithm. As a result, one could argue whether there is a default setting for these
algorithms that generalizes well to any environment. The right tuning is usually necessary to obtain
good results.
On the other hand, methods that use a model, either for providing an exploration bonus or model-
based approaches, at least succeed at reaching the reward and getting 50% performance, regardless
of initialization. From a neuroscience perspective, one could point to theories in which the brain
contains a model of the world, i.e. the brain maintains beliefs of the world through a generative
model, such as Bayesian approaches to brain function (Erickson & Smith, 1988), active inference
(Friston et al., 2006), and the general adversarial brain (Gershman, 2019). These models allow us
to react to events with a stochastic nature and where information is not perfect. Perhaps the use of a
world model is crucial for algorithms to generalize well to any environment.
One important aspect of the environment is that rewards are sparse. When rewards are sparse and
difﬁcult to ﬁnd through random exploration, model-free approaches typically fail. In that case, some
incentive is needed to explore. This incentive can be given through reward-shaping, intrinsic reward
from exploration methods or, as mentioned earlier, clever initialization. White (1959) argues that
exploratory behavior in itself can be a source of reward. For example, the theory of ﬂow (Csik-
szentmihalyi, 1990) states that an important source of intrinsic reward for humans is the interest in
activities which require slightly more skill than they currently possess. Active inference (Friston
et al., 2006) frames the minimization of (variational) free energy as the intrinsic reward that governs
the actions of living things. The inclusion of an intrinsic reward, in addition to an extrinsic reward,
may be a necessity.
Another important aspect of the environment is the relatively long time frame between seeing the
reward through the window and obtaining the reward. To optimally solve the E-maze, the agent will
ﬁrst need to go towards the windows to ﬁnd out where the reward is, and then, remember the location
when it chooses a branch. Clearly, the agent will need some kind of memory to achieve this. In some
sense, model-based methods contain a type of implicit memory encoded in the state, though they can
also use explicit memory, such as long short-term memory (LSTM), gated recurrent units (GRUs),
memory networks (Weston et al., 2014) or neural Turing machines (Graves et al., 2014). However,
as shown in the previous section, the model-based method DreamerV2 did not perform better than
an agent which randomly chooses a branch without looking for the clue. This may suggest the need
to look to types of memory grounded in neuroscience, such as Hopﬁeld networks (Little, 1974) or
Kanerva machines (Wu et al., 2018).
4

--- PAGE 5 ---
Published as a workshop paper at “BRAIN2AI” (ICLR 2021)
Reinforcement learning needs to look to neuroscience for inspiration once again. Current bench-
marks are too restrictive in terms of the types of problems they address. We introduced the E-maze,
which was unable to be solved by state-of-the-art deep RL algorithms. Finally, we argued how in-
sights from neuroscience may aid in solving the E-maze. The use of world models, intrinsic rewards,
and memory, rooted in neuroscience, will be beneﬁcial in this regard.
ACKNOWLEDGMENTS
This research received funding from the Flemish Government under the “Onderzoeksprogramma
Artiﬁci ¨ele Intelligentie (AI) Vlaanderen” programme. Ozan C ¸ atal is funded by a Ph.D grant of the
Flanders Research Foundation (FWO).
REFERENCES
Adri `a Puigdom `enech Badia, Bilal Piot, Steven Kapturowski, Pablo Sprechmann, Alex Vitvitskyi,
Daniel Guo, and Charles Blundell. Agent57: Outperforming the atari human benchmark, 2020.
Charles Beattie, Joel Z. Leibo, Denis Teplyashin, Tom Ward, Marcus Wainwright, Heinrich K ¨uttler,
Andrew Lefrancq, Simon Green, V ´ıctor Vald ´es, Amir Sadik, Julian Schrittwieser, Keith Ander-
son, Sarah York, Max Cant, Adam Cain, Adrian Bolton, Stephen Gaffney, Helen King, Demis
Hassabis, Shane Legg, and Stig Petersen. Deepmind lab. CoRR , abs/1612.03801, 2016. URL
http://arxiv.org/abs/1612.03801 .
Marc G. Bellemare, Yavar Naddaf, Joel Veness, and Michael Bowling. The arcade learning envi-
ronment: An evaluation platform for general agents. J. Artif. Int. Res. , 47(1):253–279, May 2013.
ISSN 1076-9757.
Marc G. Bellemare, Will Dabney, and R ´emi Munos. A distributional perspective on reinforcement
learning. In Doina Precup and Yee Whye Teh (eds.), Proceedings of the 34th International Con-
ference on Machine Learning , volume 70 of Proceedings of Machine Learning Research , pp.
449–458, International Convention Centre, Sydney, Australia, 06–11 Aug 2017. PMLR.
Christopher Berner, Greg Brockman, Brooke Chan, Vicki Cheung, Przemyslaw Debiak, Christy
Dennison, David Farhi, Quirin Fischer, Shariq Hashme, Christopher Hesse, Rafal J ´ozefowicz,
Scott Gray, Catherine Olsson, Jakub Pachocki, Michael Petrov, Henrique Pond ´e de Oliveira Pinto,
Jonathan Raiman, Tim Salimans, Jeremy Schlatter, Jonas Schneider, Szymon Sidor, Ilya
Sutskever, Jie Tang, Filip Wolski, and Susan Zhang. Dota 2 with large scale deep reinforcement
learning. CoRR , abs/1912.06680, 2019. URL http://arxiv.org/abs/1912.06680 .
Benjamin Beyret, Jos ´e Hern ´andez-Orallo, Lucy Cheke, Marta Halina, Murray Shanahan, and
Matthew Crosby. The animal-ai environment: Training and testing animal-like artiﬁcial cog-
nition. CoRR , abs/1909.07483, 2019. URL http://arxiv.org/abs/1909.07483 .
Greg Brockman, Vicki Cheung, Ludwig Pettersson, Jonas Schneider, John Schulman, Jie Tang, and
Wojciech Zaremba. Openai gym. CoRR , abs/1606.01540, 2016. URL http://arxiv.org/
abs/1606.01540 .
Yuri Burda, Harrison Edwards, Deepak Pathak, Amos J. Storkey, Trevor Darrell, and Alexei A.
Efros. Large-scale study of curiosity-driven learning. In 7th International Conference on Learning
Representations, ICLR 2019, New Orleans, LA, USA, May 6-9, 2019 . OpenReview.net, 2019a.
Yuri Burda, Harrison Edwards, Amos Storkey, and Oleg Klimov. Exploration by random network
distillation. In International Conference on Learning Representations , 2019b.
Pablo Samuel Castro, Subhodeep Moitra, Carles Gelada, Saurabh Kumar, and Marc G. Bellemare.
Dopamine: A research framework for deep reinforcement learning, 2018.
Mihaly Csikszentmihalyi. Flow: the Psychology of Optimal Experience by Mihaly Csikszentmihalyi .
Harper & Row, 1990. ISBN 9780060162535.
Prafulla Dhariwal, Christopher Hesse, Oleg Klimov, Alex Nichol, Matthias Plappert, Alec Radford,
John Schulman, Szymon Sidor, Yuhuai Wu, and Peter Zhokhov. Openai baselines. https:
//github.com/openai/baselines , 2017.
5

--- PAGE 6 ---
Published as a workshop paper at “BRAIN2AI” (ICLR 2021)
G. Erickson and C.R. Smith. Maximum-Entropy and Bayesian Methods in Science and Engi-
neering: Foundations . Fundamental Theories of Physics. Springer Netherlands, 1988. ISBN
9789027727930.
Karl Friston, James Kilner, and Lee Harrison. A free energy principle for the brain. Journal of
Physiology-Paris , 100(1):70–87, 2006. ISSN 0928-4257. doi: 10.1016/j.jphysparis.2006.10.001.
Theoretical and Computational Neuroscience: Understanding Brain Functions.
Karl Friston, Thomas FitzGerald, Francesco Rigoli, Philipp Schwartenbeck, John O’Doherty, and
Giovanni Pezzulo. Active inference and learning. Neuroscience & Biobehavioral Reviews , 68:
862–879, Sep 2016. ISSN 01497634. doi: 10.1016/j.neubiorev.2016.06.022.
Samuel J. Gershman. The generative adversarial brain. Frontiers in Artiﬁcial Intelligence , 2:18,
2019. ISSN 2624-8212. doi: 10.3389/frai.2019.00018.
Alex Graves, Greg Wayne, and Ivo Danihelka. Neural Turing Machines. arXiv e-prints , art.
arXiv:1410.5401, October 2014.
Danijar Hafner, Timothy P. Lillicrap, Jimmy Ba, and Mohammad Norouzi. Dream to control: Learn-
ing behaviors by latent imagination. In 8th International Conference on Learning Representa-
tions, ICLR 2020, Addis Ababa, Ethiopia, April 26-30, 2020 . OpenReview.net, 2020.
Danijar Hafner, Timothy P Lillicrap, Mohammad Norouzi, and Jimmy Ba. Mastering atari with
discrete world models. In International Conference on Learning Representations , 2021.
Demis Hassabis, Dharshan Kumaran, Christopher Summerﬁeld, and Matthew Botvinick.
Neuroscience-inspired artiﬁcial intelligence. Neuron , 95(2):245–258, 2017. ISSN 0896-6273.
doi: https://doi.org/10.1016/j.neuron.2017.06.011. URL https://www.sciencedirect.
com/science/article/pii/S0896627317305093 .
K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. In 2016
IEEE Conference on Computer Vision and Pattern Recognition (CVPR) , pp. 770–778, 2016. doi:
10.1109/CVPR.2016.90.
Matteo Hessel, Joseph Modayil, Hado van Hasselt, Tom Schaul, Georg Ostrovski, Will Dabney, Dan
Horgan, Bilal Piot, Mohammad Azar, and David Silver. Rainbow: Combining improvements in
deep reinforcement learning. In AAAI Conference on Artiﬁcial Intelligence , 2018.
Asifullah Khan, Anabia Sohail, Umme Zahoora, and Aqsa Saeed Qureshi. A survey of the recent
architectures of deep convolutional neural networks. Artiﬁcial Intelligence Review , 53(8):5455–
5516, Dec 2020. ISSN 1573-7462. doi: 10.1007/s10462-020-09825-6.
Alex Krizhevsky, Ilya Sutskever, and Geoffrey E. Hinton. Imagenet classiﬁcation with deep con-
volutional neural networks. Commun. ACM , 60(6):84–90, May 2017. ISSN 0001-0782. doi:
10.1145/3065386.
W.A. Little. The existence of persistent states in the brain. Mathematical Biosciences , 19(1):101–
120, 1974. ISSN 0025-5564. doi: 10.1016/0025-5564(74)90031-5.
V olodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A. Rusu, Joel Veness, Marc G. Belle-
mare, Alex Graves, Martin Riedmiller, Andreas K. Fidjeland, Georg Ostrovski, Stig Petersen,
Charles Beattie, Amir Sadik, Ioannis Antonoglou, Helen King, Dharshan Kumaran, Daan Wier-
stra, Shane Legg, and Demis Hassabis. Human-level control through deep reinforcement learning.
Nature , 518(7540):529–533, 2015.
V olodymyr Mnih, Adria Puigdomenech Badia, Mehdi Mirza, Alex Graves, Timothy Lillicrap, Tim
Harley, David Silver, and Koray Kavukcuoglu. Asynchronous methods for deep reinforcement
learning. In Maria Florina Balcan and Kilian Q. Weinberger (eds.), Proceedings of The 33rd
International Conference on Machine Learning , volume 48 of Proceedings of Machine Learning
Research , pp. 1928–1937, New York, New York, USA, 20–22 Jun 2016. PMLR.
J. O’Keefe and J. Dostrovsky. The hippocampus as a spatial map. preliminary evidence from unit
activity in the freely-moving rat. Brain Research , 34(1):171–175, 1971. ISSN 0006-8993. doi:
10.1016/0006-8993(71)90358-1.
6

--- PAGE 7 ---
Published as a workshop paper at “BRAIN2AI” (ICLR 2021)
Deepak Pathak, Pulkit Agrawal, Alexei A. Efros, and Trevor Darrell. Curiosity-driven exploration
by self-supervised prediction. In Doina Precup and Yee Whye Teh (eds.), Proceedings of the 34th
International Conference on Machine Learning , volume 70 of Proceedings of Machine Learning
Research , pp. 2778–2787, International Convention Centre, Sydney, Australia, 06–11 Aug 2017.
PMLR.
Nirnai Rao, Elie Aljalbout, Axel Sauer, and Sami Haddadin. How to Make Deep RL Work in
Practice. arXiv e-prints , art. arXiv:2010.13083, October 2020.
Andrew M. Saxe, James L. McClelland, and Surya Ganguli. Exact solutions to the nonlinear dynam-
ics of learning in deep linear neural networks. arXiv e-prints , art. arXiv:1312.6120, December
2013.
Tom Schaul, John Quan, Ioannis Antonoglou, and David Silver. Prioritized experience replay, 2016.
John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. Proximal policy
optimization algorithms. CoRR , abs/1707.06347, 2017.
David Silver, Aja Huang, Chris J. Maddison, Arthur Guez, Laurent Sifre, George van den Driessche,
Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, Sander Dieleman,
Dominik Grewe, John Nham, Nal Kalchbrenner, Ilya Sutskever, Timothy Lillicrap, Madeleine
Leach, Koray Kavukcuoglu, Thore Graepel, and Demis Hassabis. Mastering the game of Go with
deep neural networks and tree search. Nature , 529(7587):484–489, jan 2016. ISSN 0028-0836.
doi: 10.1038/nature16961.
Richard S Sutton and Andrew G Barto. Reinforcement learning: An introduction . 2018.
Yuval Tassa, Yotam Doron, Alistair Muldal, Tom Erez, Yazhe Li, Diego de Las Casas, David
Budden, Abbas Abdolmaleki, Josh Merel, Andrew Lefrancq, Timothy P. Lillicrap, and Mar-
tin A. Riedmiller. Deepmind control suite. CoRR , abs/1801.00690, 2018. URL http:
//arxiv.org/abs/1801.00690 .
E. C. Tolman and C. H. Honzik. Introduction and removal of reward, and maze performance in rats.
University of California Publications in Psychology , 4:257–275, 1930.
Jason Weston, Sumit Chopra, and Antoine Bordes. Memory Networks. arXiv e-prints , art.
arXiv:1410.3916, October 2014.
R. W. White. Motivation reconsidered: the concept of competence. Psychological review , 66:
297–333, 1959.
Yan Wu, Greg Wayne, Alex Graves, and Timothy Lillicrap. The kanerva machine: A genera-
tive distributed memory. In International Conference on Learning Representations , 2018. URL
https://openreview.net/forum?id=S1HlA-ZAZ .
7

--- PAGE 8 ---
Published as a workshop paper at “BRAIN2AI” (ICLR 2021)
A A LGORITHM DESCRIPTIONS
The following state-of-the-art RL algorithms were used to evaluate performance in our environment.
DQN Deep Q Network (DQN; Mnih et al. (2015)) is a value-based optimization method. The
data collected from the environment is used to train a neural network predicting the action-value
functionQ, which provides estimates of the expected returns for all possible actions. The policy is
implemented as a selection process of the action with the highest Qvalue at each time step. For
DQN, some exploration is provided through the -greedy strategy, which consists of choosing a
random action rather than the best one with probability 1 .
Rainbow Several improvements over the original DQN implementation have been combined in
(Hessel et al., 2018), leading to an overarching system referred to as ‘Rainbow’. The three most
important components of Rainbow are: the use of n-step returns (Mnih et al., 2016), the use of a
prioritized experience replay (Schaul et al., 2016) and modeling the Q function as a distribution
(Bellemare et al., 2017).
Both our DQN and Rainbow implementations rely on the Dopamine RL framework (Castro et al.,
2018), which provides state-of-the-art results on the Atari 2600 benchmark.
PPO The Proximal Policy Optimization (PPO; Schulman et al. (2017)) algorithm is a policy-
gradient method for deep RL. Policy-gradient methods exploit the Policy Gradient theorem (Sutton
& Barto, 2018) to directly update the policy based on the environment returns. With respect to
Vanilla Policy Gradient (VPG or REINFORCE), PPO implements two additional aspects: a value
function estimation, which is subtracted from the returns of the environment to reduce variance, and
a clipped objective function, which prevents undesirable drastic updates of the policy.
Our implementation of the PPO algorithm was based upon the original OpenAI Baselines imple-
mentation (Dhariwal et al., 2017).
Dreamer Dreamer (Hafner et al., 2020) is a model-based RL method based on two main princi-
ples: (i) learning a ‘world’ model of the environment, which allows predicting future observations
and rewards, (ii) using the world model to learn an optimal policy in an RL fashion, by applying
policy-gradient updates over imaginary trajectories generated by the Dreamer’s world model.
In our experiments, we ground on the second iteration of the Dreamer agent (Hafner et al., 2021),
which was tested to surpass (Hessel et al., 2018) and other state-of-the-art model-free methods on
the Atari 2600 benchmark.
Exploration methods Recent advances in exploration strategies for RL have shown signiﬁcant per-
formance improvements in sparse-reward tasks. In the following, we present the two methods that
we tested in our experimental setup:
•ICM - Intrinsic Curiosity Module (Pathak et al., 2017) consists of two networks that enable
computing a curiosity bonus for exploration. The ﬁrst is an inverse-dynamics model, used
to learn compact features for reducing the dimensionality of the observation inputs. The
second network is a forward-feature dynamics, which predicts the features of future obser-
vations by using the features of the current observation and the current action. The curios-
ity bonus is implemented as the error prediction of the forward-feature model, computed as
the Mean Squared Error (MSE) between predictions and true features, and encourages the
agent to explore different environment transitions.
•RND - In Random Network Distillation (Burda et al., 2019b), they base upon previous
work showing that random features can perform well to reduce the dimensionality of ob-
servations (Burda et al., 2019a). As a curiosity bonus, they use the MSE prediction error
between features computed by a randomly-initialized network and a feature encoder they
train, encouraging diversity in the environment observations.
In our experiments, we add the intrinsic bonuses computed by ICM and RND to the rewards, and
train a PPO agent to maximize the compound returns.
8

--- PAGE 9 ---
Published as a workshop paper at “BRAIN2AI” (ICLR 2021)
B E XPERIMENT DETAILS
Since the environment is game-like, the decision was made to implement all algorithms with their
original parameters used for the Atari benchmark.
Algorithms that are benchmarked with Atari 2600 usually use preprocessed images as input. More
speciﬁcally, observations from the Atari games are rescaled to 84x84 pixels and transformed to
grayscale. For this reason, images from our environment were preprocessed in the same manner.
The environment was initialized in the following way. The agent was given an FOV of 1:1radians
(198 degrees) and a maximum amount of moves of 250. The latter was chosen in a way to control
the sparsity. Too many moves could make the environment too easy to solve, so any random agent
could obtain reward 50% of the time. Too few moves could make the environment too difﬁcult to
solve. Since the minimum amount of moves necessary to solve the environment is around 50, the
number was set to 250.
Important hyperparameters that may change between implementations in the literature are shown in
Table 1. Parameters that were adjusted for our environment are emphasized. Exploration methods
were tested in combination with PPO. The exploration algorithms were switched off after the agent
reached 20% average performance. Aside from the default PPO initialization method, we ran a
number of PPO experiments by initializing the policy network using large orthogonal weights.
Table 1: Important hyperparameters in algorithm implementations. Some hyperparameters may
change between implementation found in literature. This table indicates the exact parameters used.
Emphasized text indicates variables that were adjusted by us.
DQN
optimizer RMSProp
learning rate 2.5e-4
steps per batch 2500
min. replay history 20000
batch size 32
Rainbow
optimizer Adam
learning rate 6.25e-5
steps per batch 2500
min. replay history 20000
batch size 32
PPO
optimizer Adam
learning rate 2.5e-4
gradient clip 0.1
value loss coefﬁcient 0.5
no. parallel agents 8
steps per batch 250 (x8)
no. mini batches 8
entropy coefﬁcient 0.001
Exploration methods – PPO
exploration off threshold 0.2
9
