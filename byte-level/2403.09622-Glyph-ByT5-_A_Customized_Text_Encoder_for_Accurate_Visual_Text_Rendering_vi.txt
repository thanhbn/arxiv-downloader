# 2403.09622.pdf
# Được chuyển đổi từ PDF sang TXT
# Đường dẫn nguồn: /home/admin88/arxiv-downloader/byte-level/2403.09622.pdf
# Kích thước tệp: 38429756 bytes

===============================================
NỘI DUNG TỆP PDF
===============================================


--- TRANG 1 ---
Glyph-ByT5: Một Bộ Mã Hóa Văn Bản Tùy Chỉnh cho Việc Hiển Thị Văn Bản Trực Quan Chính Xác
Zeyu Liu†‡Weicong Liang†Zhanhao Liang†Chong Luo Ji Li Gao Huang Yuhui Yuan‡♯
†thực tập sinh tại microsoft‡đóng góp cốt lõi♯người dẫn dự án
Microsoft Research Asia Đại học Thanh Hoa Đại học Bắc Kinh Đại học Quốc gia Úc
https://glyph-byt5.github.io
Hình 1. Minh họa khả năng hiển thị đoạn văn với quy hoạch bố cục đa dòng tự động (hàng 1), hình ảnh thiết kế giàu văn bản (hàng 2), và hình ảnh miền mở với văn bản cảnh (hàng 3), được tạo ra bằng phương pháp của chúng tôi.
Tóm tắt
Việc hiển thị văn bản trực quan đặt ra một thách thức cơ bản cho các mô hình tạo hình ảnh từ văn bản đương đại, với vấn đề cốt lõi nằm ở những khiếm khuyết của bộ mã hóa văn bản. Để đạt được việc hiển thị văn bản chính xác, chúng tôi xác định hai yêu cầu quan trọng cho bộ mã hóa văn bản: nhận thức về ký tự và căn chỉnh với các ký hiệu chữ. Giải pháp của chúng tôi bao gồm việc chế tạo một loạt bộ mã hóa văn bản tùy chỉnh, Glyph-ByT5, bằng cách tinh chỉnh bộ mã hóa ByT5 có nhận thức về ký tự sử dụng một tập dữ liệu ký hiệu chữ-văn bản được tuyển chọn kỹ lưỡng. Chúng tôi trình bày một phương pháp hiệu quả để tích hợp Glyph-ByT5 với SDXL, dẫn đến
1arXiv:2403.09622v2  [cs.CV]  12 Jul 2024

--- TRANG 2 ---
việc tạo ra mô hình Glyph-SDXL cho tạo hình ảnh thiết kế. Điều này cải thiện đáng kể độ chính xác hiển thị văn bản, nâng cao từ dưới 20% lên gần 90% trên điểm chuẩn hình ảnh thiết kế của chúng tôi. Đáng chú ý là khả năng mới được tìm thấy của Glyph-SDXL trong việc hiển thị đoạn văn bản, đạt độ chính xác chính tả cao cho hàng chục đến hàng trăm ký tự với bố cục đa dòng tự động. Cuối cùng, thông qua việc tinh chỉnh Glyph-SDXL với một tập nhỏ các hình ảnh chụp thực tế chất lượng cao có chứa văn bản trực quan, chúng tôi thể hiện sự cải thiện đáng kể trong khả năng hiển thị văn bản cảnh trong hình ảnh thực tế miền mở. Những kết quả hấp dẫn này nhằm khuyến khích khám phá thêm trong việc thiết kế các bộ mã hóa văn bản tùy chỉnh cho các nhiệm vụ đa dạng và thách thức.

1. Giới thiệu
Các mô hình khuếch tán đã nổi lên như phương pháp chủ đạo cho việc tạo hình ảnh. Những đóng góp đáng chú ý, như DALL·E3 [3, 20] và loạt Stable Diffusion [23, 25], thể hiện khả năng đáng kể trong việc tạo ra hình ảnh chất lượng cao để đáp ứng các yêu cầu của người dùng. Tuy nhiên, một hạn chế đáng kể vẫn tồn tại trong khả năng hiển thị chính xác văn bản trực quan, đây là một yếu tố quan trọng trong nhiều ứng dụng tạo hình ảnh khác nhau. Những ứng dụng này trải dài từ việc sản xuất hình ảnh thiết kế cho poster, thẻ và tờ rơi đến việc tổng hợp hình ảnh thế giới thực có chứa văn bản cảnh được tìm thấy trong biển báo đường, biển quảng cáo, hoặc áo phông có chữ. Thách thức đạt được độ chính xác hiển thị văn bản chính xác đã cản trở việc triển khai thực tế của các mô hình tạo hình ảnh trong những lĩnh vực quan trọng này.

Chúng tôi cho rằng thách thức chính cản trở hiệu suất hiển thị văn bản trực quan nằm ở những hạn chế của bộ mã hóa văn bản. Bộ mã hóa văn bản CLIP được sử dụng rộng rãi, được đào tạo để căn chỉnh với tín hiệu trực quan, chủ yếu tập trung vào việc nắm bắt các khái niệm hình ảnh thay vì đi sâu vào chi tiết hình ảnh. Ngược lại, bộ mã hóa văn bản T5 thường được áp dụng, được thiết kế để hiểu ngôn ngữ một cách toàn diện, thiếu sự căn chỉnh với tín hiệu trực quan. Chúng tôi lập luận rằng một bộ mã hóa văn bản có khả năng mã hóa thông tin cấp độ ký tự và căn chỉnh với tín hiệu văn bản trực quan, hoặc ký hiệu chữ, là cần thiết để đạt được độ chính xác cao trong việc hiển thị văn bản trực quan. Lấy cảm hứng từ bộ mã hóa ByT5 có nhận thức về ký tự [16], phương pháp của chúng tôi nhằm tùy chỉnh nó để căn chỉnh tốt hơn với văn bản trực quan hoặc ký hiệu chữ.

Để xây dựng bộ mã hóa văn bản có nhận thức về ký tự và căn chỉnh với ký hiệu chữ mong muốn, chúng tôi sử dụng phương pháp tinh chỉnh dựa trên mô hình ByT5 sử dụng dữ liệu văn bản-ký hiệu chữ ghép đôi. Thách thức chính phát sinh từ sự khan hiếm dữ liệu văn bản-ký hiệu chữ ghép đôi chất lượng cao, mà chúng tôi khắc phục bằng cách thiết lập một quy trình có thể mở rộng có khả năng tạo ra dữ liệu ghép đôi gần như không giới hạn dựa trên kết xuất đồ họa. Ngoài ra, chúng tôi kết hợp một chiến lược tăng cường ký hiệu chữ để nâng cao nhận thức về ký tự của bộ mã hóa văn bản, giải quyết các loại lỗi khác nhau thường gặp trong việc hiển thị văn bản trực quan,

Phương pháp #Tham số Nhận thức ký tự Căn chỉnh ký hiệu chữ Độ chính xác (%)
≤20 ký tự ≤20-50 ký tự ≤50-100 ký tự ≥100 ký tự
SDXL (CLIP & OpenCLIP) 817M ✗ ✗ 21.72 20.98 18.23 19.17
+ T5-L +394M ✗ ✗ 48.46 44.89 34.59 26.09
+ ByT5-S +292M ✓ ✗ 60.52 52.79 50.11 42.05
+ Glyph-ByT5-S +292M ✓ ✓ 92.58 90.38 87.16 83.17
+ Glyph-ByT5-S1M+292M ✓ ✓ 93.89 93.67 91.45 89.17
DeepFloyd-IF(T5-XXL) 4.3B ✗ ✗ 17.63 17.17 16.42 13.05
DALL·E3 Không rõ ✗ ✗ 23.23 21.59 20.1 15.81

Bảng 1. Minh họa kết quả cải thiện đạt được với phương pháp của chúng tôi dựa trên SDXL qua số lượng ký tự khác nhau, chúng tôi chọn bộ mã hóa của T5-Large và ByT5-Small để so sánh tương đối công bằng. Chúng tôi chỉ hiển thị số lượng tham số cho các thành phần bộ mã hóa văn bản trong cột thứ hai. Hiệu suất được thể hiện thông qua việc đánh giá độ chính xác cấp độ từ của mỗi mô hình trên các phạm vi độ dài văn bản khác nhau. Nhận thức ký tự: sử dụng bộ mã hóa văn bản có nhận thức về ký tự. Căn chỉnh ký hiệu chữ: đào tạo trước căn chỉnh ký hiệu chữ. Chúng tôi cũng báo cáo hiệu suất của DeepFloyd-IF và DALL·E3 trong điểm chuẩn của chúng tôi, bao gồm 1.000 yêu cầu, với 250 yêu cầu trong mỗi phạm vi số lượng ký tự. Theo mặc định, chúng tôi tính toán tất cả điểm số độ chính xác ở cấp độ từ. Chỉ số trên '1M' chỉ ra việc sử dụng 1 triệu cặp đào tạo, trong khi bốn hàng trước sử dụng 500K theo mặc định.

như đã thảo luận trong [16]. Tận dụng tập dữ liệu được chế tác tỉ mỉ của chúng tôi và sử dụng một hàm mất mát đối chiếu cấp độ hộp sáng tạo, chúng tôi tinh chỉnh một cách hiệu quả ByT5 thành một loạt bộ mã hóa văn bản tùy chỉnh cho việc tạo ký hiệu chữ, được đặt tên là Glyph-ByT5.

Sau khi đào tạo kỹ lưỡng, Glyph-ByT5 được tích hợp liền mạch vào mô hình SDXL sử dụng một cơ chế chú ý chéo theo vùng hiệu quả, cải thiện đáng kể hiệu suất hiển thị văn bản của mô hình khuếch tán ban đầu. Mô hình Glyph-SDXL kết quả thể hiện độ chính xác chính tả đặc biệt, vượt trội so với các mô hình tiên tiến khác trong việc tạo ra hình ảnh thiết kế giàu văn bản, như được minh họa trong Bảng 1. Hơn nữa, chúng tôi đã tinh chỉnh Glyph-SDXL sử dụng một tập hạn chế các hình ảnh văn bản cảnh, cải thiện đáng kể khả năng tạo ra hình ảnh văn bản cảnh của nó.

Các ví dụ được trình bày trong Hình 1 chứng minh rằng mô hình được tinh chỉnh khéo léo hiển thị các đoạn văn bản như văn bản cảnh mà không có sự suy giảm cảm nhận được trong khả năng tạo hình ảnh của mô hình ban đầu.

Nghiên cứu của chúng tôi tiết lộ rằng, thông qua việc đào tạo một bộ mã hóa văn bản tùy chỉnh và triển khai một cơ chế tiêm thông tin phù hợp, chúng ta có thể biến đổi một bộ tạo hình ảnh miền mở thành một bộ hiển thị văn bản trực quan xuất sắc. Khi được trình bày với một đoạn văn bản từ hàng chục đến hàng trăm ký tự, mô hình khuếch tán được tinh chỉnh của chúng tôi đạt được độ chính xác chính tả cao để hiển thị trong vùng được chỉ định, với việc xử lý hoàn toàn tự động các bố cục đa dòng. Về bản chất, công trình này đóng góp theo ba cách riêng biệt nhưng bổ sung. Đầu tiên, chúng tôi đào tạo một bộ mã hóa văn bản có nhận thức về ký tự, căn chỉnh với ký hiệu chữ, Glyph-

--- TRANG 3 ---
ByT5, như giải pháp chính cho vấn đề hiển thị văn bản trực quan chính xác. Thứ hai, chúng tôi trình bày chi tiết về kiến trúc và đào tạo của Glyph-SDXL, một bộ tạo hình ảnh thiết kế mạnh mẽ tích hợp Glyph-ByT5 vào SDXL thông qua một cơ chế chú ý chéo theo vùng hiệu quả. Cuối cùng, chúng tôi thể hiện tiềm năng của việc tinh chỉnh Glyph-SDXL thành một bộ tạo hình ảnh văn bản cảnh, đặt nền tảng cho việc phát triển một bộ tạo hình ảnh miền mở toàn diện được trang bị khả năng hiển thị văn bản trực quan đặc biệt.

2. Công trình liên quan
2.1. Hiển thị văn bản trực quan
Việc hiển thị văn bản dễ đọc và nhất quán về mặt trực quan đặt ra một hạn chế nổi tiếng và là thách thức đáng kể cho các mô hình tạo hình ảnh dựa trên khuếch tán. Đáng chú ý là một số mô hình tạo hình ảnh miền mở đương đại, như Stable Diffusion 3 [10] và Ideogram 1.01, đã dành nỗ lực đáng kể để nâng cao hiệu suất hiển thị văn bản trực quan. Tuy nhiên, độ chính xác chính tả của văn bản được hiển thị vẫn không thỏa mãn. Ngược lại, đã có những nỗ lực tập trung vào việc hiển thị văn bản trực quan, như GlyphControl, GlyphDraw, và loạt TextDiffuser [6, 7, 16, 18, 30]. Trong khi những nỗ lực này đã cho thấy những cải thiện đáng kể về độ chính xác chính tả, thật đáng thất vọng khi nhận thấy rằng họ vẫn đang tập trung vào việc hiển thị các từ đơn hoặc dòng văn bản với ít hơn khoảng 20 ký tự. Trong nghiên cứu này, chúng tôi nhằm giải quyết vấn đề hiển thị văn bản trực quan chính xác, đặc biệt khi xử lý nội dung văn bản dài hơn một trăm ký tự, đặt ra một mục tiêu đầy tham vọng trong lĩnh vực này.

2.2. Bộ mã hóa văn bản tùy chỉnh
Một số nỗ lực gần đây [5, 12, 33] đã được thực hiện để đào tạo các mô hình khuếch tán hướng văn bản và thay thế hoặc tăng cường các bộ mã hóa CLIP ban đầu bằng các bộ mã hóa văn bản tùy chỉnh theo những cách khác nhau. Tuy nhiên, những phương pháp này, giống như những tiền nhiệm của chúng, bị hạn chế trong việc xử lý các chuỗi văn bản có độ dài nhất định, với UDiffText [33] hỗ trợ các chuỗi không quá 12 ký tự. Ngược lại, phương pháp của chúng tôi phân biệt bằng khả năng tạo ra các chuỗi văn bản hơn 100 ký tự trong khi đạt được độ chính xác đặc biệt cao, đạt gần 90% độ chính xác cấp độ từ. Tiến bộ đáng kể này giải quyết những thiếu sót của các phương pháp trước đó, cung cấp khả năng áp dụng rộng hơn và hiệu suất cải thiện trong các nhiệm vụ tạo văn bản. Một công trình khác có liên quan chặt chẽ là Counting-aware CLIP [22], nâng cao bộ mã hóa văn bản CLIP ban đầu với một tập dữ liệu hình ảnh-văn bản đếm chuyên biệt và một hàm mất mát tập trung vào đếm. Tuy nhiên, một hạn chế đáng kể của phương pháp của họ là thiếu khả năng mở rộng trong tập dữ liệu của họ. Họ chọn thay thế các bộ mã hóa văn bản ban đầu và đào tạo các mô hình khuếch tán từ

1https://about.ideogram.ai/1.0đầu, trong khi quy trình xây dựng dữ liệu của chúng tôi có thể mở rộng, và chúng tôi ưu tiên tích hợp GlyphByT5 với các bộ mã hóa văn bản ban đầu để cải thiện hiệu quả.

Đóng góp của chúng tôi Công việc của chúng tôi phù hợp với những hiểu biết của các nghiên cứu đã đề cập trước đó, xác định rằng một hạn chế quan trọng trong hầu hết các mô hình tạo hình ảnh từ văn bản hiện tại nằm ở bộ mã hóa văn bản. Đóng góp chính của công việc của chúng tôi nằm ở việc trình bày một chiến lược hiệu quả để giải quyết một cách có hệ thống nhiệm vụ hiển thị ký hiệu chữ. Đầu tiên, chúng tôi chứng minh rằng việc tận dụng kết xuất đồ họa để tạo ra dữ liệu ký hiệu chữ-văn bản có thể mở rộng và chính xác là quan trọng để đào tạo một bộ mã hóa văn bản có nhận thức về ký tự, căn chỉnh với ký hiệu chữ chất lượng cao. Sau đó, chúng tôi giới thiệu một phương pháp đơn giản nhưng mạnh mẽ để tích hợp bộ mã hóa văn bản Glyph-ByT5 của chúng tôi với bộ mã hóa văn bản CLIP ban đầu được sử dụng trong SDXL. Ngoài ra, chúng tôi minh họa cách phương pháp của chúng tôi có thể được áp dụng cho việc tạo văn bản cảnh bằng cách thực hiện tinh chỉnh căn chỉnh thiết kế-với-cảnh. Chúng tôi dự đoán rằng việc đào tạo bộ mã hóa văn bản tùy chỉnh trên dữ liệu có thể mở rộng, chất lượng cao đại diện cho một hướng đi đầy hứa hẹn để vượt qua những hạn chế cơ bản, như nhận thức không gian và khả năng đếm.

3. Phương pháp của chúng tôi
Chúng tôi bắt đầu bằng việc minh họa chi tiết về bộ mã hóa văn bản có nhận thức về ký tự, căn chỉnh với ký hiệu chữ tùy chỉnh của chúng tôi, Glyph-ByT5, được đào tạo sử dụng một tập dữ liệu đáng kể gồm các hình ảnh ký hiệu chữ và hướng dẫn văn bản ghép đôi. Tiếp theo, chúng tôi chứng minh cách Glyph-ByT5 cải thiện đáng kể độ chính xác hiển thị văn bản trực quan khi được tích hợp với các mô hình SDXL cho nhiệm vụ hiển thị văn bản thiết kế. Cuối cùng, chúng tôi giới thiệu một phương pháp đơn giản nhưng hiệu quả cho việc căn chỉnh thiết kế-với-cảnh, cho phép thích ứng Glyph-SDXL để tạo văn bản cảnh chính xác.

3.1. Glyph-ByT5: Bộ mã hóa văn bản có nhận thức về ký tự, căn chỉnh với ký hiệu chữ tùy chỉnh cho việc tạo văn bản thiết kế

Một yếu tố quan trọng góp phần vào sự không chính xác trong việc hiển thị văn bản là những hạn chế vốn có của các bộ mã hóa văn bản trong các mô hình khuếch tán hiện đại, đặc biệt là về việc diễn giải hình ảnh ký hiệu chữ. Bộ mã hóa văn bản CLIP ban đầu, ví dụ, được điều chỉnh cho việc căn chỉnh ngữ nghĩa thị giác-ngôn ngữ rộng ở mức khái niệm, trong khi bộ mã hóa văn bản T5/ByT5 tập trung vào hiểu ngôn ngữ sâu sắc. Tuy nhiên, cả hai đều không được tinh chỉnh một cách rõ ràng cho việc diễn giải hình ảnh ký hiệu chữ mặc dù các công trình gần đây cho thấy rằng bộ mã hóa văn bản T5/ByT5 có lợi cho nhiệm vụ hiển thị văn bản trực quan. Việc thiếu thiết kế bộ mã hóa văn bản tùy chỉnh này có thể dẫn đến việc hiển thị văn bản kém chính xác hơn trong nhiều ứng dụng khác nhau.

Để thu hẹp khoảng cách giữa các bộ mã hóa văn bản hiện có (như bộ mã hóa văn bản CLIP hoặc bộ mã hóa văn bản T5/ByT5) và hình ảnh ký hiệu chữ, chúng tôi đề xuất một phương pháp căn chỉnh ký hiệu chữ sáng tạo để đào tạo một loạt các bộ mã hóa văn bản có nhận thức về ký tự, căn chỉnh với ký hiệu chữ, tức là, Glyph-ByT5.

--- TRANG 4 ---
(a)
 (b)
 (c)
 (d)
 (e)
 (f)
 (g)
 (h)
Hình 2. Minh họa sơ đồ tăng cường ký hiệu chữ. (a) ký hiệu chữ gốc. (b) thay thế ký tự (Happy →Hdppy). (c) lặp lại ký tự (Happy →Happpppy). (d) bỏ ký tự (Happy →Hapy). (e) thêm ký tự (Graduation →Gradumation). (f) thay thế từ (Graduation →Gauatikn). (g) lặp lại từ (Happy →Happy Happy). (h) bỏ từ (Happy Graduation Amber →Graduation).

Hình 3. Minh họa các hình ảnh ví dụ với văn bản trực quan đoạn văn trong tập dữ liệu Paragraph-Glyph-Text của chúng tôi. Từ trái sang phải, # từ: 55, 64, 52, 46, 34, 35, 40, 43; # ký tự: : 443, 442, 416, 318, 247, 267, 282, 302.

Phương pháp của chúng tôi tập trung vào việc đào tạo một loạt các bộ mã hóa văn bản có nhận thức về ký hiệu chữ, được thiết kế đặc biệt để điều hòa sự khác biệt giữa hình ảnh ký hiệu chữ và văn bản. Lấy cảm hứng từ khung LiT [31], chiến lược của chúng tôi bao gồm việc tinh chỉnh độc quyền các mô hình văn bản trong khi duy trì các mô hình hình ảnh được đào tạo trước đóng băng. Phương pháp này hiệu quả buộc các bộ mã hóa văn bản phải thích ứng, học cách xác định thông tin phong phú được mã hóa trong các biểu diễn ký hiệu chữ trực quan được trích xuất từ mô hình hình ảnh đã được đào tạo. Đối với thành phần bộ mã hóa thị giác, chúng tôi lựa chọn các bộ mã hóa thị giác CLIP được đào tạo trước hoặc các mô hình DINOv2, tận dụng khả năng tiên tiến của chúng trong việc xử lý dữ liệu trực quan. Chúng tôi cũng khám phá tác động của việc sử dụng các bộ mã hóa thị giác được điều chỉnh đặc biệt cho nhận dạng văn bản cảnh hoặc các nhiệm vụ khác, và chúng tôi coi việc phát triển và đào tạo các bộ mã hóa thị giác tiên tiến hơn cho việc hiển thị văn bản trực quan như một hướng nghiên cứu tương lai.

Tạo tập dữ liệu ký hiệu chữ-văn bản có thể mở rộng và chính xác Để cho phép việc đào tạo bộ mã hóa văn bản có nhận thức về ký hiệu chữ tùy chỉnh, trước tiên chúng tôi tạo ra một tập dữ liệu ký hiệu chữ-văn bản chất lượng cao, được ký hiệu là D, bao gồm khoảng ∼1 triệu cặp dữ liệu tổng hợp {Iglyph,Ttext}. Tập dữ liệu này được phát triển với công cụ kết xuất đồ họa cải tiến được giới thiệu trong công trình gần đây của [13]. Chúng tôi xây dựng tập hình ảnh ký hiệu chữ ban đầu dựa trên các thuộc tính kiểu chữ gốc (bao gồm loại font, màu sắc, kích thước, vị trí, và các thuộc tính khác) được tìm thấy trong các hình ảnh thiết kế đồ họa được thu thập. Chúng tôi biên soạn một kho văn bản lớn có thể được sử dụng để làm phong phú tập hình ảnh ký hiệu chữ bằng cách thay thế các từ bằng văn bản ngẫu nhiên được lấy mẫu từ kho. Ngoài ra, chúng tôi ngẫu nhiên sửa đổi các loại font và màu sắc trong mỗi hộp văn bản để mở rộng thêm tập dữ liệu.

Tập dữ liệu ký hiệu chữ-văn bản của chúng tôi D bao gồm gần ∼305 loại font được cấp phép OFL2 khác nhau và ∼100 màu font riêng biệt. Để đảm bảo bộ mã hóa văn bản căn chỉnh với ký hiệu chữ chỉ tập trung vào sự khác biệt trên văn bản trực quan, chúng tôi đều sử dụng nền màu đen theo mặc định.

Chúng tôi trình bày ví dụ về các yêu cầu ký hiệu chữ tương ứng với hình ảnh ký hiệu chữ được hiển thị trong Hình 2 (a), chi tiết các loại font, màu sắc, và văn bản, như được minh họa sau: {Văn bản "The way you create a better future is by studying the past." trong [font-color-127], [font-type-234]. Văn bản "Happy Graduation Amber" trong [font-color-98] [font-type-231] }. Trong quá trình này, các token đặc biệt được sử dụng để biểu thị màu sắc và loại font. Trước khi đưa vào bộ mã hóa văn bản Glyph-ByT5, chúng tôi tiền xử lý văn bản yêu cầu bằng cách thay thế các token đặc biệt, như token '[font-color-127]', bằng một loạt các nhúng toàn cục từ sách mã được làm phong phú. Chúng tôi đã tiến hành thí nghiệm trên các tập dữ liệu Glyph-Text ở ba quy mô riêng biệt, mở rộng từ 100K đến 500K, và lên đến 1M. Trong tương lai, chúng tôi nhằm mở rộng đáng kể các tập dữ liệu của mình, mở rộng lên đến 100M với điều kiện có quyền truy cập vào nhiều tài nguyên tính toán hơn.

Tạo tập dữ liệu Paragraph-Glyph-Text Để nâng cao cả chất lượng tạo ra của các font kích thước nhỏ và khả năng quy hoạch bố cục cấp độ đoạn văn của bộ mã hóa văn bản tùy chỉnh, chúng tôi đã biên soạn thêm một tập dữ liệu ký hiệu chữ-văn bản cấp độ đoạn văn dày đặc và nhỏ, được ký hiệu là Dparagraph.

Chúng tôi định nghĩa một 'đoạn văn' như một khối nội dung văn bản không thể được chứa trong một dòng duy nhất, thường bao gồm hơn 10 từ hoặc 100 ký tự. Nhiệm vụ hiển thị ký hiệu chữ đoạn văn đặt ra thách thức lớn hơn, vì nó đòi hỏi không chỉ độ chính xác chính tả cấp độ từ rất cao mà còn cần quy hoạch tỉ mỉ các bố cục cấp độ từ và cấp độ dòng trong vùng hộp được chỉ định. Tập dữ liệu này bao gồm 100.000 cặp dữ liệu tổng hợp {Iglyph,Ttext}. Các phát hiện thực nghiệm cho thấy rằng việc tinh chỉnh mô hình, ban đầu được đào tạo với D, sử dụng Dparagraph cải thiện đáng kể hiệu suất trong việc hiển thị văn bản trực quan kích thước nhỏ và cấp độ đoạn văn.

Khả năng quy hoạch bố cục cấp độ đoạn văn là không tầm thường, và chúng tôi chứng minh thực nghiệm rằng mô hình khuếch tán có thể quy hoạch hiệu quả các sắp xếp đa dòng và điều chỉnh khoảng cách dòng hoặc từ theo hộp văn bản được cho, bất kể kích thước hoặc tỷ lệ khung hình của nó. Chúng tôi hiển thị các hình ảnh ví dụ của dữ liệu ký hiệu chữ-văn bản đoạn văn trong Hình 3, minh họa rằng mỗi hình ảnh chứa ít nhất một hộp văn bản với hơn 100 ký tự. Một số hình ảnh thậm chí đạt 400 ký tự, được sắp xếp thành nhiều dòng với khoảng cách hợp lý. Chúng tôi cũng xây dựng ba quy mô của các tập dữ liệu ký hiệu chữ-văn bản đoạn văn, bao gồm 100K, 500K, và 1M cặp ký hiệu chữ-văn bản.

Tăng cường ký hiệu chữ Không giống như các mô hình CLIP thông thường, chỉ coi các cặp ký hiệu chữ-văn bản khác nhau như các mẫu âm - từ đó chỉ mô hình hóa những khác biệt tương đối cấp cao được gây ra bởi nhiều từ hoặc thậm chí các đoạn văn bao gồm hơn 10 ký tự - chúng tôi đề xuất một sơ đồ tăng cường ký hiệu chữ cấp độ ký tự và cấp độ từ đơn giản nhưng hiệu quả. Phương pháp này xây dựng các mẫu âm có thông tin hơn, cải thiện đáng kể hiệu quả đào tạo.

Sơ đồ tăng cường cấp độ ký tự và cấp độ từ được đề xuất về cơ bản bao gồm sự kết hợp của bốn chiến lược tăng cường ký hiệu chữ khác nhau bao gồm thay thế ký hiệu chữ, lặp lại ký hiệu chữ, bỏ ký hiệu chữ, và thêm ký hiệu chữ ở cả cấp độ ký tự và cấp độ từ. Chúng tôi áp dụng những tăng cường này cho cả Iglyph và Ttext để đảm bảo tính nhất quán. Hình 2 hiển thị một số ví dụ đại diện với những chiến lược tăng cường này. Chúng tôi cũng điều tra tác động của việc xây dựng các tỷ lệ khác nhau của các mẫu âm có thông tin cho mỗi mẫu. Chúng tôi áp dụng độc lập những tăng cường này cho mỗi hộp văn bản. Chúng tôi trình bày thống kê về số lượng hộp văn bản, từ, và ký tự trên toàn bộ tập dữ liệu ký hiệu chữ-văn bản và tập dữ liệu ký hiệu chữ-văn bản đoạn văn trong tài liệu bổ sung.

Bộ mã hóa văn bản ký hiệu chữ Để nắm bắt hiệu quả các đặc trưng văn bản của mỗi ký tự, chúng tôi đã chọn bộ mã hóa ByT5 [29] có nhận thức về ký tự làm bộ mã hóa văn bản mặc định cho Glyph-CLIP. Mô hình ByT5 ban đầu có một bộ mã hóa mạnh mẽ, nặng được ghép đôi với một bộ giải mã nhẹ hơn. Bộ mã hóa ByT5 được khởi tạo sử dụng các checkpoint được đào tạo trước chính thức từ kho văn bản mC4, như đã đề cập trong [28].

Hơn nữa, chúng tôi khám phá tác động của việc mở rộng quy mô các bộ mã hóa văn bản từ kích thước nhỏ hơn đến lớn hơn. Điều này bao gồm việc đánh giá các mô hình ByT5 khác nhau như ByT5-Small (217M tham số), ByT5-Base (415M tham số), và ByT5-Large (864M tham số) để kiểm tra những cải thiện hiệu suất của chúng. Để phân biệt với loạt ByT5 ban đầu, chúng tôi gọi những bộ mã hóa văn bản này là Glyph-ByT5, chỉ ra sự tập trung chuyên biệt của chúng vào việc thu hẹp khoảng cách giữa hình ảnh ký hiệu chữ và các yêu cầu văn bản tương ứng của chúng.

Bộ mã hóa thị giác ký hiệu chữ Để khám phá bộ mã hóa thị giác, chúng tôi phân tích tác động của việc sử dụng các nhúng thị giác được dẫn xuất từ CLIP [24], hoặc DINOv2 [9, 21], hoặc các biến thể [1, 32] được điều chỉnh cho nhiệm vụ nhận dạng văn bản trực quan. Các quan sát của chúng tôi tiết lộ rằng DINOv2 mang lại hiệu suất tốt nhất. Cũng được lưu ý rằng các nhúng thị giác của CLIP gặp khó khăn trong việc phân biệt giữa các loại font khác nhau. Phát hiện này phù hợp với các nỗ lực nghiên cứu gần đây, như đã thảo luận bởi [8, 35], chứng minh rằng DINOv2 xuất sắc trong việc bảo tồn thông tin nhận dạng. Kết quả là, DINOv2 đã được chọn làm bộ mã hóa thị giác chính của chúng tôi. Hơn nữa, chúng tôi khám phá tác động của việc mở rộng quy mô các bộ mã hóa thị giác từ kích thước nhỏ hơn đến lớn hơn đối với hiệu suất. Điều này bao gồm việc đánh giá các biến thể như ViT-B/14 (86M tham số), ViT-L/14 (300M tham số), và ViT-g/14 (1.1B tham số), căn chỉnh chúng với ba bộ mã hóa văn bản ByT5 nói trên có quy mô khác nhau.

Hàm mất mát đối chiếu cấp độ hộp Không giống như CLIP thông thường, áp dụng hàm mất mát đối chiếu cho toàn bộ hình ảnh, chúng tôi đề xuất áp dụng hàm mất mát đối chiếu cấp độ hộp xem mỗi hộp văn bản và yêu cầu văn bản tương ứng của nó như một thực thể. Dựa trên số lượng ký tự hoặc từ trong hộp văn bản, chúng ta có thể phân loại chúng thành hộp văn bản từ, hộp văn bản câu, hoặc hộp văn bản đoạn văn. Do đó, hàm mất mát đối chiếu cấp độ hộp của chúng tôi có khả năng căn chỉnh văn bản với hình ảnh ký hiệu chữ ở các mức độ chi tiết khác nhau. Việc căn chỉnh này giúp bộ mã hóa văn bản tùy chỉnh của chúng tôi có được khả năng quy hoạch bố cục cấp độ đoạn văn. Chúng tôi minh họa công thức toán học như sau:

Lbox=−1
2P|N|
i=1|Bi||N|X
i=1|Bi|X
j=1(logetxj
i·yj
i
Zx+ logetxj
i·yj
i
Zy),
(1)

trong đó N={(I1,T1),(I2,T2), . . .} đại diện cho tất cả các cặp hình ảnh-văn bản trong cùng một batch, trong đó cặp hình ảnh-văn bản thứ i bao gồm |Bi| cặp hộp-văn phụ. Chúng tôi tính toán nhúng hộp và nhúng văn phụ của hộp thứ j trong cặp hình ảnh-văn bản thứ i (Ii,Ti) như sau: xj
i= ROIAlign (f(Ii)
∥f(Ii)∥2,boxj
i) và yj
i=g(Tj
i)
∥g(Tj
i)∥2. f(·) và g(·) đại diện cho bộ mã hóa thị giác và bộ mã hóa văn bản, tương ứng. Chúng tôi đặt hai yếu tố chuẩn hóa theo Zx=P|N|
k=1P|Bk|
l=1etxj
i·yl
k và Zy=P|N|
k=1P|Bk|
l=1etxl
k·yj
i. t là một tham số nhiệt độ có thể học được.

Hàm mất mát đối chiếu âm khó dựa trên tăng cường ký hiệu chữ: Chúng tôi tính toán thêm một hàm mất mát đối chiếu cho các mẫu âm khó được tạo ra với việc tăng cường ký hiệu chữ của chúng tôi và công thức toán học được hiển thị như sau:

--- TRANG 5 ---
Lhard=−1
2P|N|
i=1|Bi||N|X
i=1|Bi|X
j=1(logetxj
i·yj
i
Zaug
x+ logetxj
i·yj
i
Zaug
y),
(2)

trong đó Zx=P|G|
g=1etxj
i·yj,g
i và Zx=P|G|
g=1etxj,g
i·yj
i
Ở đây, G đại diện cho dữ liệu đào tạo được tăng cường dựa trên hộp xj
i và văn phụ yj
i. Chúng tôi điều tra tác động của việc thay đổi số lượng điểm dữ liệu được tăng cường trong các thí nghiệm loại bỏ.

Chúng tôi kết hợp hai hàm mất mát trên, tức là, Lbox+Lhard, để tạo thuận lợi cho quá trình đào tạo trước căn chỉnh ký hiệu chữ. Chúng tôi cũng chứng minh thực nghiệm rằng thiết kế của chúng tôi vượt trội so với hàm mất mát đối chiếu cấp độ hình ảnh trong các thí nghiệm loại bỏ. Chúng tôi gán hiệu suất vượt trội cho hai yếu tố chính: sự có sẵn của một số lượng đáng kể các mẫu đào tạo hiệu quả hơn, và các đặc trưng thị giác cấp độ hộp cung cấp thông tin văn bản trực quan chính xác hơn. Những khẳng định này được chứng thực bởi các phát hiện trong hai nghiên cứu trước đó [4, 34].

Hình 4 mô tả khung hoàn chỉnh của Glyph-ByT5, thể hiện quá trình đào tạo trước căn chỉnh ký hiệu chữ của nó tích hợp các thành phần quan trọng đã đề cập trước đó.

3.2. Glyph-SDXL: Tăng cường SDXL với Glyph-ByT5 cho việc tạo hình ảnh thiết kế

Để xác minh hiệu quả của phương pháp của chúng tôi trong việc tạo ra nội dung văn bản chính xác trong hình ảnh thiết kế và quy hoạch bố cục đoạn văn trực quan trong mỗi hộp văn bản, chúng tôi đã tích hợp Glyph-ByT5 của chúng tôi với mô hình tạo hình ảnh từ văn bản tiên tiến, mã nguồn mở, SDXL [23]. Thách thức chính nằm ở việc tích hợp bộ mã hóa văn bản tùy chỉnh của chúng tôi với bộ mã hóa hiện có để khai thác điểm mạnh của cả hai mà không làm giảm hiệu suất ban đầu. Một thách thức khác là thiếu các tập dữ liệu thiết kế đồ họa chất lượng cao để đào tạo mô hình tạo văn bản thiết kế được hiển thị trong các lớp hình ảnh nền nhất quán.

Để giải quyết hai thách thức đã đề cập ở trên, trước tiên chúng tôi giới thiệu một cơ chế chú ý chéo đa đầu theo vùng để hòa trộn liền mạch kiến thức ký hiệu chữ được mã hóa trong bộ mã hóa văn bản tùy chỉnh của chúng tôi trong các hộp kiểu chữ mục tiêu và kiến thức tiên nghiệm được mang theo bởi các bộ mã hóa văn bản ban đầu trong các vùng bên ngoài hộp kiểu chữ. Ngoài ra, chúng tôi xây dựng một tập dữ liệu thiết kế đồ họa chất lượng cao để đào tạo mô hình tạo Glyph-SDXL của chúng tôi cho việc hiển thị văn bản trực quan chính xác. Các thảo luận chi tiết về hai đóng góp quan trọng này được cung cấp trong các phần tiếp theo.

Chú ý chéo đa đầu theo vùng Chú ý chéo đa đầu ban đầu là thành phần cốt lõi chịu trách nhiệm ánh xạ thông tin ngữ nghĩa phong phú của không gian văn bản vào các vị trí khác nhau trong không gian hình ảnh. Nói cách khác, nó xác định tạo ra đối tượng gì ở đâu bằng cách liên tục áp dụng chú ý chéo đa đầu qua các lớp và bước thời gian khác nhau.

Khung chi tiết của cơ chế chú ý chéo đa đầu theo vùng được hiển thị ở phía bên phải của Hình 4. Trong cơ chế chú ý chéo đa đầu theo vùng của chúng tôi, trước tiên chúng tôi phân chia các nhúng pixel đầu vào (Query) thành nhiều nhóm. Những nhóm này tương ứng với các hộp văn bản mục tiêu, có thể được người dùng chỉ định hoặc được dự đoán tự động bằng cách tận dụng khả năng quy hoạch của GPT-4. Đồng thời, chúng tôi chia các yêu cầu văn bản (Key-Value) thành các phần phụ tương ứng, bao gồm một yêu cầu toàn cục và một số nhóm yêu cầu cụ thể về ký hiệu chữ. Sau đó, chúng tôi đặc biệt hướng các nhúng pixel trong các hộp văn bản mục tiêu chỉ chú ý đến các nhúng văn bản ký hiệu chữ được trích xuất bằng Glyph-ByT5. Tương tự, các nhúng pixel bên ngoài các hộp văn bản được tạo ra để chú ý độc quyền đến các nhúng yêu cầu toàn cục được trích xuất bằng hai bộ mã hóa văn bản CLIP ban đầu.

Để thu hẹp khoảng cách giữa không gian nhúng đầu ra của Glyph-ByT5 với không gian nhúng SDXL ban đầu, chúng tôi giới thiệu một ánh xạ nhẹ, cụ thể là ánh xạ ByT5-to-SDXL. Ánh xạ này được trang bị bốn lớp bộ mã hóa transformer ByT5, mỗi lớp được khởi tạo với trọng số ngẫu nhiên, và được áp dụng cho đầu ra của bộ mã hóa văn bản Glyph-ByT5 được đào tạo trước. Để hiệu quả, chúng tôi triển khai cơ chế chú ý chéo đa đầu theo vùng đã đề cập ở trên bằng cách điều chế các bản đồ chú ý với một mặt nạ đảm bảo các mối quan hệ ánh xạ giữa các nhúng pixel và các nhúng bộ mã hóa văn bản đa dạng. Chúng tôi tinh chỉnh trọng số của cả bộ mã hóa văn bản Glyph-ByT5 và ánh xạ ByT5-to-SDXL trong quá trình đào tạo, phù hợp với nghiên cứu trước đó [16] nhấn mạnh rằng việc tinh chỉnh một bộ mã hóa văn bản có nhận thức về ký tự trong một mô hình khuếch tán có thể cải thiện đáng kể hiệu suất.

Tập dữ liệu thiết kế trực quan cho việc tạo văn bản thiết kế Quan trọng là chọn một nhiệm vụ đáng tin cậy để đánh giá hiệu suất hiển thị văn bản thiết kế. Công việc này chọn việc tạo hình ảnh thiết kế vì đây là một trong những kịch bản đại diện nhất của nhiệm vụ tạo ra tập trung vào văn bản. Do đó, trước tiên chúng tôi xây dựng một tập dữ liệu hình ảnh thiết kế trực quan chất lượng cao với văn bản trực quan cấp độ đoạn văn dày đặc được hiển thị trên mỗi hình ảnh bằng cách thu thập từ nhiều trang web thiết kế đồ họa theo [13]. Nhiệm vụ này đặt ra hai thách thức đáng kể, vì nó đòi hỏi không chỉ việc tạo ra văn bản trực quan dày đặc mà còn cần các hình ảnh nền hấp dẫn về mặt thị giác. Chúng tôi cũng đã tạo ra ba phiên bản của các tập dữ liệu thiết kế đồ họa, bao gồm các kích thước 100K, 500K, và 1M, trong đó chúng tôi sử dụng LLaVA [15] dựa trên Llama 2-13B [26] để tạo ra các chú thích chi tiết cho mỗi hình ảnh thiết kế đồ họa, với văn bản ký hiệu chữ thật sự có thể truy cập ngay lập tức trong dữ liệu thô. Chúng tôi cũng đã tiến hành làm sạch dữ liệu để đảm bảo rằng ít hình ảnh thiết kế đồ họa chia sẻ cùng kiểu chữ với các hình ảnh ký hiệu chữ-văn bản được sử dụng cho đào tạo trước căn chỉnh ký hiệu chữ.

--- TRANG 6 ---
Glyph-ByT5
Bộ mã hóa văn bản DINOv2
Bộ mã hóa thị giác
Hình ảnh ký hiệu chữ Yêu cầu văn bản Nhúng văn bản Nhúng hình ảnh Mục tiêu đối chiếu cấp độ hộp
Hình ảnh ký hiệu chữ
Hình ảnh ký hiệu chữ Yêu cầu văn bản
Yêu cầu ký hiệu chữ Tăng cường ký hiệu chữ Mã hóa token đặc biệt loại font và màu sắc (a) Đào tạo trước căn chỉnh ký hiệu chữ

Nhúng pixel (Query)
Glyph-ByT5
 Bộ mã hóa văn bản CLIP
 Bộ mã hóa văn bản
Yêu cầu ký hiệu chữ-1 Yêu cầu ký hiệu chữ-2 Yêu cầu toàn cục Nhúng văn bản ký hiệu chữ-1 (Key1-Value1) Nhúng văn bản ký hiệu chữ-2 (Key2-Value2) Nhúng văn bản toàn cục (Key-Value) Chú ý chéo đa đầu theo vùng
Nhúng pixel được cập nhật (Đầu ra)
Mã hóa token đặc biệt loại font và màu sắc Ánh xạ ByT5-to-SDXL (b) Hòa trộn đa bộ mã hóa văn bản theo vùng

Hình 4. Minh họa khung đào tạo trước căn chỉnh ký hiệu chữ và mô-đun chú ý chéo đa đầu theo vùng

Glyph-SDXL Chúng tôi đào tạo Glyph-SDXL trên tập dữ liệu văn bản thiết kế được xây dựng ở trên. Để bảo tồn khả năng vốn có của SDXL, chúng tôi khóa toàn bộ trọng số của mô hình, bao gồm cả kiến trúc UNet và hai bộ mã hóa văn bản CLIP. Đầu tiên, chúng tôi triển khai mô-đun LoRA [11] độc quyền trên các thành phần UNet. Thứ hai, chúng tôi giới thiệu một cơ chế hòa trộn đa bộ mã hóa văn bản theo vùng được thiết kế để tích hợp khả năng nhận thức về ký hiệu chữ của bộ mã hóa văn bản Glyph-ByT5 với những điểm mạnh mạnh mẽ của hai bộ mã hóa văn bản CLIP ban đầu. Phương pháp này nhằm tạo ra sự tương hỗ giữa các đặc trưng độc đáo của mỗi bộ mã hóa văn bản, nâng cao hiệu suất hiển thị văn bản trực quan. Trong triển khai, chúng tôi chỉ cần sửa đổi mô-đun chú ý chéo đa đầu ban đầu bằng cơ chế chú ý chéo đa đầu theo vùng của chúng tôi tương ứng.

Chúng tôi trình bày chi tiết về những khác biệt giữa phương pháp của chúng tôi và các công cụ hiển thị kiểu chữ truyền thống trong tài liệu bổ sung. Glyph-ByT5 được điều chỉnh của chúng tôi phù hợp với độ chính xác hiển thị của các công cụ thông thường trong khi tận dụng khả năng của các mô hình hoàn toàn dựa trên khuếch tán. Điều này cho phép nó giải quyết các nhiệm vụ tạo văn bản cảnh vượt quá khả năng của các công cụ hiển thị tiêu chuẩn.

3.3. Căn chỉnh thiết kế-với-cảnh: Tinh chỉnh Glyph-SDXL cho việc tạo văn bản cảnh

Glyph-SDXL được xây dựng trước đó, chủ yếu được đào tạo trên hình ảnh thiết kế đồ họa, gặp khó khăn trong việc tạo ra văn bản cảnh duy trì bố cục nhất quán. Hơn nữa, chúng tôi đã nhận thấy một hiện tượng được gọi là 'drift ngôn ngữ', làm suy giảm nhẹ khả năng ban đầu của mô hình. Để giải quyết những vấn đề này và tạo thuận lợi cho việc tạo ra một mô hình tạo văn bản cảnh vượt trội, chúng tôi đề xuất phát triển một tập dữ liệu căn chỉnh thiết kế-với-cảnh kết hợp. Tập dữ liệu này kết hợp ba loại dữ liệu chất lượng cao: 4.000 hình ảnh văn bản cảnh và văn bản thiết kế từ TextSeg [27], 4.000 hình ảnh tổng hợp được tạo ra bằng SDXL, và 4.000 hình ảnh thiết kế. Chúng tôi đơn giản tinh chỉnh Glyph-SDXL của chúng tôi trên tập dữ liệu căn chỉnh thiết kế-với-cảnh kết hợp trong 2 epoch. Chúng tôi tiến hành đánh giá kỹ lưỡng khả năng hiển thị văn bản cảnh của phương pháp của chúng tôi trên ba điểm chuẩn công khai và báo cáo những cải thiện hiệu suất đáng kể so với các phương pháp tiên tiến trước đó. Để phân biệt với Glyph-SDXL ban đầu, chúng tôi gọi phiên bản được tinh chỉnh trên tập dữ liệu căn chỉnh thiết kế-với-cảnh là Glyph-SDXL-Scene. Ngoài ra, chúng tôi chứng minh rằng mỗi tập con đều hữu ích cho ba mục đích kết hợp: bố cục nhất quán, hiển thị văn bản chính xác, và chất lượng thị giác, như được chi tiết trong tài liệu bổ sung.

4. Thí nghiệm
Chúng tôi đánh giá khả năng của phương pháp chúng tôi trong việc tạo ra văn bản thiết kế chính xác trong hình ảnh thiết kế đồ họa, thường có nhiều hộp văn bản cấp độ đoạn văn, cũng như văn bản cảnh trong hình ảnh chụp thực tế. Để tạo thuận lợi cho việc đánh giá hiển thị văn bản trực quan cấp độ đoạn văn, chúng tôi đã phát triển điểm chuẩn VISUAL PARAGRAPHY. Điểm chuẩn này bao gồm văn bản trực quan đa dòng trong các hộp giới hạn có tỷ lệ khung hình và quy mô đa dạng.

Đánh giá của chúng tôi so sánh phương pháp của chúng tôi với các sản phẩm thương mại và những kỹ thuật hiển thị văn bản trực quan tiên tiến nhất, như DALL·E, trong nhiệm vụ tạo văn bản thiết kế. Chúng tôi báo cáo các chỉ số OCR khách quan và tiến hành một nghiên cứu người dùng chủ quan để đánh giá chất lượng thị giác từ các khía cạnh khác. Đối với nhiệm vụ tạo văn bản cảnh, chúng tôi so sánh phương pháp của chúng tôi với các mô hình đại diện GlyphControl [30] và TextDiffuser-2[7] trên ba điểm chuẩn công khai.

Ngoài ra, chúng tôi tiến hành các thí nghiệm loại bỏ kỹ lưỡng để nghiên cứu tác động của mỗi thành phần trong phương pháp của chúng tôi và trực quan hóa các bản đồ chú ý chéo để chứng minh rằng bộ mã hóa văn bản tùy chỉnh của chúng tôi có thể cung cấp một tiên nghiệm ký hiệu chữ cho mô hình khuếch tán. Chúng tôi chi tiết các cài đặt đào tạo và cung cấp

--- TRANG 7 ---
kết quả so sánh bổ sung trong tài liệu bổ sung.

4.1. Chỉ số
Trong phần lớn các thí nghiệm của chúng tôi, chúng tôi mặc định báo cáo độ chính xác cấp độ từ phân biệt chữ hoa chữ thường, ngoại trừ các so sánh liên quan đến GlyphControl và TextDiffuser. Trong những trường hợp này, chúng tôi căn chỉnh với các phương pháp ban đầu của họ bằng cách báo cáo các chỉ số không phân biệt chữ hoa chữ thường và chỉ số cấp độ hình ảnh. Ví dụ, như được chỉ ra trong Bảng 2, Case-Recall được sử dụng như một chỉ số phân biệt chữ hoa chữ thường để phân biệt giữa chữ cái viết hoa và viết thường. Ngược lại, tất cả các chỉ số khác đều không phân biệt chữ hoa chữ thường. Accuracy [IMG] được sử dụng để biểu thị độ chính xác cấp độ hình ảnh, phụ thuộc vào việc chính tả chính xác của mọi từ trực quan trong toàn bộ hình ảnh để đạt được đánh giá thuận lợi. Hơn nữa, chúng tôi xác định một tương ứng trực tiếp giữa chỉ số OCR Accuracy trong GlyphControl và chỉ số Recall trong TextDiffuser. Kết quả là, để đảm bảo tính nhất quán trong báo cáo chỉ số cho cả SimpleBench và CreativeBench, chúng tôi đã thống nhất phương pháp bằng cách chọn Recall làm chỉ số chính.

4.2. Điểm chuẩn VISUAL PARAGRAPHY
Chúng tôi đã xây dựng một điểm chuẩn cho nhiệm vụ tạo văn bản thiết kế, tích lũy khoảng ∼1.000 yêu cầu văn bản thiết kế bao gồm số lượng ký tự khác nhau với độ khó khác nhau, hiển thị ít hơn 20 ký tự, hiển thị 20 đến 50 ký tự, hiển thị 50 đến 100 ký tự, và hiển thị hơn 100 ký tự. Chúng tôi cung cấp một số ví dụ đại diện về yêu cầu trong tài liệu bổ sung. Chúng tôi sử dụng khoảng 1.000 yêu cầu văn bản thiết kế trong so sánh với sản phẩm thương mại, DALL·E3, trong khi theo mặc định, một tập con nhỏ hơn khoảng 400 yêu cầu văn bản thiết kế được sử dụng trong tất cả các thí nghiệm loại bỏ tiếp theo để hiệu quả.

4.3. So sánh với sản phẩm thương mại DALL·E3
Chúng tôi so sánh phương pháp của chúng tôi với sản phẩm thương mại mạnh nhất trong nhiệm vụ hiển thị văn bản trực quan, cụ thể là DALL·E3 trên điểm chuẩn VISUAL PARAGRAPHY. Chúng tôi tiến hành một nghiên cứu người dùng để đánh giá kết quả từ ba khía cạnh quan trọng: thẩm mỹ thị giác, chất lượng bố cục, và độ chính xác kiểu chữ. Chúng tôi thuê 10 người dùng có nền tảng thiết kế để xếp hạng kết quả từ những khía cạnh này và báo cáo kết quả tỷ lệ thắng trong Hình 6. Chúng tôi kết luận rằng Glyph-SDXL được ưa thích đáng kể về mặt kiểu chữ và tương đương hoặc thấp hơn một chút ở các khía cạnh khác. Ngoài ra, chúng tôi trực quan hóa kết quả so sánh đại diện trong Hình 5. Chúng tôi thấy rằng phương pháp của chúng tôi thể hiện những lợi thế đáng kể trong việc hiển thị văn bản thiết kế. Chúng tôi cải thiện thêm thẩm mỹ thị giác trong công việc tiếp theo [17].

4.4. So sánh với các phương pháp tiên tiến
Mục tiêu hàng đầu của chúng tôi là xác nhận khả năng áp dụng rộng rãi của mô hình tạo văn bản trực quan của chúng tôi. Để đạt được mục tiêu này, chúng tôi đã chi tiết cẩn thận các kết quả thu được bằng cách áp dụng phương pháp của chúng tôi vào các điểm chuẩn hiển thị văn bản cảnh đại diện được nêu trong nghiên cứu trước đó, như TextDiffuser [6], TextDiffuser-2 [7] và GlyphControl [30]. Điều này bao gồm kiểm tra toàn diện trên các điểm chuẩn

--- TRANG 8 ---
Hình 5. Kết quả so sánh định tính. Chúng tôi hiển thị kết quả được tạo ra bằng Glyph-SDXL của chúng tôi và DALL·E3 lần lượt ở hàng đầu và hàng thứ hai.

như MARIO-Eval, SimpleBench, và CreativeBench. Kết quả so sánh được tóm tắt trong Bảng 2. Theo những kết quả so sánh này, rõ ràng là Glyph-SDXL-Scene của chúng tôi vượt trội đáng kể so với các phương pháp tiên tiến trước đó với một biên độ đáng kể trên ba điểm chuẩn này. Tất cả kết quả của phương pháp chúng tôi đều đại diện cho hiệu suất zero-shot.

0 50 100 Thẩm mỹ Bố cục Kiểu chữ
41.5 26.3 8.8
20.7 29.1 0.6
37.8 44.6 90.6
Tỷ lệ phần trăm thắng (%) Glyph-SDXL thắng
Hòa
DALL-E3 thắng Hình 6. Tỷ lệ phần trăm thắng Glyph-SDXL so với DALL·E3.

4.5. Chỉnh sửa kiểu chữ trên DALL·E3
Chúng tôi chứng minh rằng Glyph-SDXL của chúng tôi có khả năng chỉnh sửa kiểu chữ trong hình ảnh được tạo ra bởi DALL·E3 theo SDEdit [19] trong tài liệu bổ sung.

4.6. Thí nghiệm loại bỏ
Chúng tôi thực hiện tất cả các nghiên cứu loại bỏ bằng cách ban đầu thực hiện đào tạo trước căn chỉnh ký hiệu chữ, tiếp theo là đào tạo mô hình Glyph-SDXL trên các điểm chuẩn thiết kế đồ họa của chúng tôi. Hơn nữa, tất cả các loại bỏ được thực hiện trên 100K cặp hình ảnh-văn bản ký hiệu chữ cho các mô hình Glyph-ByT5 và Glyph-SDXL tương ứng trừ khi được chỉ định.

Phương pháp SimpleBench CreativeBench MARIO-Eval
Recall Case-Recall Edit-Dis. Recall Case-Recall Edit-Dis. Accuracy [IMG] Precision Recall F-measure
DeepFloyd IF [14] 0.6 33 1.63 1 21 3.09 2.6 14.5 22.5 17.6
GlyphControl [30] 42 48 1.43 28 34 2.40 - - - -
TextDiffuser [6] - - - - - - 56.1 78.5 78.0 78.2
TextDiffuser-2 [7] - - - - - - 57.6 74.0 76.1 75.1
Glyph-SDXL 93.56 93.62 0.09 92.00 92.06 0.16 74.8 88.2 92.6 90.4
Glyph-SDXL-Scene 92.69 95.88 0.05 88.81 91.38 0.15 66.5 83.9 89.0 86.4

Bảng 2. So sánh trên SimpleBench, CreativeBench, và MARIO-Eval.

Bộ mã hóa thị giác Độ chính xác (%)
≤20 ký tự ≤20-50 ký tự ≤50-100 ký tự ≥100 ký tự
DINOv2 ViT-B/14 + reg 84.54 84.56 79.89 73.29
CLIP ViT-B/16 77.17 74.78 74.94 66.34
ViTSTR 79.29 78.2 75.35 68.49
CLIP4STR ViT-B/16 80.38 79.12 77.08 69.24

Bảng 3. Tác động của việc sử dụng bộ mã hóa thị giác được đào tạo trước khác nhau.

Thiết kế hàm mất mát Độ chính xác (%)
≤20 ký tự ≤20-50 ký tự ≤50-100 ký tự ≥100 ký tự
IL-CL 83.13 81.83 77.15 69.42
BL-CL 84.54 84.56 79.89 73.29
IL-CL + BL-CL 83.86 82.08 78.07 70.54

Bảng 4. Tác động của việc sử dụng các thiết kế hàm mất mát khác nhau. IL-CL: hàm mất mát đối chiếu cấp độ hình ảnh. BL-CL: hàm mất mát đối chiếu cấp độ hộp.

Tỷ lệ tăng cường ký hiệu chữ Độ chính xác (%)
≤20 ký tự ≤20-50 ký tự ≤50-100 ký tự ≥100 ký tự
Không có 78.93 78.35 74.0 65.40
1:8 81.15 80.45 77.03 70.03
1:16 84.54 84.56 79.89 73.29
1:32 83.24 85.02 78.92 72.16

Bảng 5. Tác động của tỷ lệ tăng cường ký hiệu chữ.

Ánh xạ ByT5-to-SDXL Độ chính xác (%)
≤20 ký tự ≤20-50 ký tự ≤50-100 ký tự ≥100 ký tự
không có ánh xạ 80.22 78.48 72.91 65.02
có ánh xạ 84.54 84.56 79.89 73.29

Bảng 6. Tác động của ánh xạ ByT5-to-SDXL trong Glyph-SDXL.

# Hình ảnh-văn bản ký hiệu chữ Độ chính xác (%)
≤20 ký tự ≤20-50 ký tự ≤50-100 ký tự ≥100 ký tự
100K 85.6 85.02 81.2 74.58
500K 91.11 93.35 85.43 82.83
1M 93.54 93.96 91.0 89.96

Bảng 7. Tác động của việc mở rộng quy mô dữ liệu đào tạo cho Glyph-ByT5 và Glyph-SDXL.

Bộ mã hóa văn bản #Tham số Độ chính xác (%)
≤20 ký tự ≤20-50 ký tự ≤50-100 ký tự ≥100 ký tự
Glyph-ByT5-S 292M 84.54 84.56 79.89 73.29
Glyph-ByT5-B 510M 87.10 84.93 78.72 72.81
Glyph-ByT5-L 963M 87.07 82.87 79.12 73.72

Bảng 8. Tác động của việc mở rộng quy mô mô hình bộ mã hóa văn bản tùy chỉnh.

Lựa chọn bộ mã hóa thị giác được đào tạo trước Chúng tôi nghiên cứu tác động của việc chọn bốn bộ mã hóa thị giác được đào tạo trước khác nhau: bộ mã hóa thị giác CLIP [24], DINOv2 [9], ViTSTR [1], và bộ mã hóa thị giác CLIP4STR [32]. Chúng tôi báo cáo kết quả so sánh chi tiết trong Bảng 3. Đáng chú ý, chúng tôi cũng quan sát thấy rằng điều khiển loại font và màu sắc chính xác chỉ xảy ra khi sử dụng DINOv2 làm bộ mã hóa thị giác được đào tạo trước.

Thiết kế hàm mất mát Chúng tôi nghiên cứu tác động của việc chọn các thiết kế hàm mất mát đào tạo khác nhau và báo cáo kết quả so sánh chi tiết trong Bảng 4. Rõ ràng là hàm mất mát đối chiếu cấp độ hộp được đề xuất đạt được hiệu suất thuận lợi.

Tăng cường ký hiệu chữ Chúng tôi nghiên cứu tác động của việc tăng cường ký hiệu chữ trong quá trình đào tạo trước căn chỉnh ký hiệu chữ. Như được chỉ ra trong Bảng 5, việc tăng cường ký hiệu chữ cung cấp một cải thiện đáng chú ý so với các cài đặt không tăng cường, đạt đỉnh ở khoảng 1:16. Đáng chú ý, chúng tôi cũng quan sát thấy rằng điều khiển loại font và

--- TRANG 9 ---
QUỐC TẾ
 MÈO
 QUỐC TẾ
 NGÀY
 Tháng tám

Hình 8. Trực quan hóa các bản đồ chú ý chéo trong mô hình Glyph-SDXL của chúng tôi. Chúng tôi hiển thị các bản đồ nhiệt giữa tất cả pixel và các ký tự được chọn từ hộp văn bản với 'INTERNATIONAL CAT DAY' và '8 August 2022'.

màu sắc chỉ xảy ra khi tỷ lệ đạt hoặc vượt quá 1:16, cũng chỉ ra hiệu quả của nó.

Ánh xạ, mở rộng quy mô tập dữ liệu ký hiệu chữ-văn bản và kích thước bộ mã hóa văn bản, và nhiều hơn nữa Bảng 6 cho thấy tầm quan trọng của việc sử dụng ánh xạ ByT5-to-SDXL để căn chỉnh khoảng cách. Bảng 7 và Bảng 8 xác minh lợi ích của việc mở rộng quy mô kích thước tập dữ liệu ký hiệu chữ-văn bản và kích thước bộ mã hóa văn bản. Chúng tôi cung cấp thêm các loại bỏ, cũng như các thí nghiệm của Glyph-SDXL-Scene trong phụ lục.

Phân tích định tính Để có được hiểu biết sâu sắc hơn về cách Glyph-ByT5 của chúng tôi xuất sắc trong nhiệm vụ hiển thị văn bản trực quan, chúng tôi tiếp tục trực quan hóa các bản đồ chú ý chéo giữa các yêu cầu văn bản ký hiệu chữ và hình ảnh được hiển thị, cung cấp một ví dụ trong Hình 8. Việc trực quan hóa này xác nhận rằng mô hình khuếch tán hiệu quả sử dụng tiên nghiệm căn chỉnh ký hiệu chữ được mã hóa trong bộ mã hóa văn bản Glyph-ByT5 của chúng tôi.

5. Kết luận
Bài báo này trình bày thiết kế và đào tạo bộ mã hóa văn bản Glyph-ByT5, được điều chỉnh cho việc hiển thị văn bản trực quan chính xác với các mô hình khuếch tán. Trung tâm của nỗ lực này là hai phát triển quan trọng: việc tạo ra một tập dữ liệu ký hiệu chữ-văn bản có thể mở rộng, chất lượng cao và việc triển khai các kỹ thuật đào tạo trước cho việc căn chỉnh ký hiệu chữ-văn bản. Những tiến bộ quan trọng này hiệu quả thu hẹp khoảng cách giữa hình ảnh ký hiệu chữ và yêu cầu văn bản, tạo thuận lợi cho việc tạo ra văn bản chính xác cho cả hình ảnh thiết kế giàu văn bản và hình ảnh miền mở với văn bản cảnh. Hiệu suất hấp dẫn đạt được bởi mô hình Glyph-SDXL được đề xuất của chúng tôi cho thấy rằng việc phát triển các bộ mã hóa văn bản chuyên biệt đại diện cho một hướng đi đầy hứa hẹn để vượt qua một số thách thức cơ bản liên quan đến các mô hình khuếch tán, chỉ ra một xu hướng đáng kể trong lĩnh vực này.

Tài liệu tham khảo
[1] Rowel Atienza. Vision transformer for fast and efficient scene text recognition. In International Conference on Document Analysis and Recognition, pages 319–334. Springer, 2021. 5, 9
[2] Omri Avrahami, Ohad Fried, and Dani Lischinski. Blended latent diffusion. ACM Transactions on Graphics (TOG), 42(4):1–11, 2023. 1
[3] James Betker, Gabriel Goh, Li Jing, Tim Brooks, Jianfeng Wang, Linjie Li, Long Ouyang, Juntang Zhuang, Joyce Lee, Yufei Guo, Wesam Manassra, Prafulla Dhariwal, Casey Chu, Yunxin Jiao, and Aditya Ramesh. Improving image generation with better captions. 2023. 2
[4] Ioana Bica, Anastasija Ili´c, Matthias Bauer, Goker Erdogan, Matko Bošnjak, Christos Kaplanis, Alexey A Gritsenko, Matthias Minderer, Charles Blundell, Razvan Pascanu, et al. Improving fine-grained understanding in image-text pre-training. arXiv preprint arXiv:2401.09865, 2024. 6
[5] Haoxing Chen, Zhuoer Xu, Zhangxuan Gu, Jun Lan, Xing Zheng, Yaohui Li, Changhua Meng, Huijia Zhu, and Weiqiang Wang. Diffute: Universal text editing diffusion model. 3
[6] Jingye Chen, Yupan Huang, Tengchao Lv, Lei Cui, Qifeng Chen, and Furu Wei. Textdiffuser: Diffusion models as text painters. arXiv preprint arXiv:2305.10855, 2023. 3, 8, 9
[7] Jingye Chen, Yupan Huang, Tengchao Lv, Lei Cui, Qifeng Chen, and Furu Wei. Textdiffuser-2: Unleashing the power of language models for text rendering. arXiv preprint arXiv:2311.16465, 2023. 3, 7, 8, 9
[8] Xi Chen, Lianghua Huang, Yu Liu, Yujun Shen, Deli Zhao, and Hengshuang Zhao. Anydoor: Zero-shot object-level image customization. arXiv preprint arXiv:2307.09481, 2023. 5
[9] Timothée Darcet, Maxime Oquab, Julien Mairal, and Piotr Bojanowski. Vision transformers need registers, 2023. 5, 9
[10] Patrick Esser, Sumith Kulal, Andreas Blattmann, Rahim Entezari, Jonas Müller, Harry Saini, Yam Levi, Dominik Lorenz, Axel Sauer, Frederic Boesel, Dustin Podell, Tim Dockhorn, Zion English, Kyle Lacey, Alex Goodwin, Yannik Marek, and Robin Rombach. Scaling rectified flow transformers for high-resolution image synthesis, 2024. 3
[11] Edward J Hu, Yelong Shen, Phillip Wallis, Zeyuan Allen-Zhu, Yuanzhi Li, Shean Wang, Lu Wang, and Weizhu Chen. Lora: Low-rank adaptation of large language models. arXiv preprint arXiv:2106.09685, 2021. 7
[12] Jiabao Ji, Guanhua Zhang, Zhaowen Wang, Bairu Hou, Zhifei Zhang, Brian Price, and Shiyu Chang. Improving diffusion models for scene text editing with dual encoders. arXiv preprint arXiv:2304.05568, 2023. 3
[13] Peidong Jia, Chenxuan Li, Zeyu Liu, Yichao Shen, Xingru Chen, Yuhui Yuan, Yinglin Zheng, Dong Chen, Ji Li, Xiaodong Xie, et al. Cole: A hierarchical generation framework for graphic design. arXiv preprint arXiv:2311.16974, 2023. 4, 6

--- TRANG 10 ---
[14] DeepFloyd Lab. Deepfloyd if. https://github.com/deep-floyd/IF, 2023. 9
[15] Haotian Liu, Chunyuan Li, Qingyang Wu, and Yong Jae Lee. Visual instruction tuning. Advances in neural information processing systems, 36, 2024. 6
[16] Rosanne Liu, Daniel H Garrette, Chitwan Saharia, William Chan, Adam Roberts, Sharan Narang, Irina Blok, R. J. Mical, Mohammad Norouzi, and Noah Constant. Character-aware models improve visual text rendering. In Annual Meeting of the Association for Computational Linguistics, 2022. 2, 3, 6
[17] Zeyu Liu, Weicong Liang, Yiming Zhao, Bohan Chen, Ji Li, and Yuhui Yuan. Glyph-byt5-v2: A strong aesthetic baseline for accurate multilingual visual text rendering. arXiv preprint arXiv:2406.10208, 2024. 8
[18] Jian Ma, Mingjun Zhao, Chen Chen, Ruichen Wang, Di Niu, Haonan Lu, and Xiaodong Lin. Glyphdraw: Learning to draw chinese characters in image synthesis models coherently. arXiv preprint arXiv:2303.17870, 2023. 3
[19] Chenlin Meng, Yutong He, Yang Song, Jiaming Song, Jiajun Wu, Jun-Yan Zhu, and Stefano Ermon. Sdedit: Guided image synthesis and editing with stochastic differential equations. arXiv preprint arXiv:2108.01073, 2021. 9, 1
[20] OpenAI. Dall·e 3 system card. 2023. 2
[21] Maxime Oquab, Timothée Darcet, Théo Moutakanni, Huy V o, Marc Szafraniec, Vasil Khalidov, Pierre Fernandez, Daniel Haziza, Francisco Massa, Alaaeldin El-Nouby, et al. Dinov2: Learning robust visual features without supervision. arXiv preprint arXiv:2304.07193, 2023. 5
[22] Roni Paiss, Ariel Ephrat, Omer Tov, Shiran Zada, Inbar Mosseri, Michal Irani, and Tali Dekel. Teaching clip to count to ten. arXiv preprint arXiv:2302.12066, 2023. 3
[23] Dustin Podell, Zion English, Kyle Lacey, Andreas Blattmann, Tim Dockhorn, Jonas Müller, Joe Penna, and Robin Rombach. Sdxl: improving latent diffusion models for high-resolution image synthesis. arXiv preprint arXiv:2307.01952, 2023. 2, 6
[24] Alec Radford, Jong Wook Kim, Chris Hallacy, Aditya Ramesh, Gabriel Goh, Sandhini Agarwal, Girish Sastry, Amanda Askell, Pamela Mishkin, Jack Clark, et al. Learning transferable visual models from natural language supervision. In International conference on machine learning, pages 8748–8763. PMLR, 2021. 5, 9
[25] Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Björn Ommer. High-resolution image synthesis with latent diffusion models. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 10684–10695, 2022. 2
[26] Hugo Touvron, Louis Martin, Kevin Stone, Peter Albert, Amjad Almahairi, Yasmine Babaei, Nikolay Bashlykov, Soumya Batra, Prajjwal Bhargava, Shruti Bhosale, et al. Llama 2: Open foundation and fine-tuned chat models. arXiv preprint arXiv:2307.09288, 2023. 6
[27] Xingqian Xu, Zhifei Zhang, Zhaowen Wang, Brian Price, Zhonghao Wang, and Humphrey Shi. Rethinking text segmentation: A novel dataset and a text-specific refinement approach. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 12045–12055, 2021. 7
[28] Linting Xue, Noah Constant, Adam Roberts, Mihir Kale, Rami Al-Rfou, Aditya Siddhant, Aditya Barua, and Colin Raffel. mt5: A massively multilingual pre-trained text-to-text transformer. arXiv preprint arXiv:2010.11934, 2020. 5
[29] Linting Xue, Aditya Barua, Noah Constant, Rami Al-Rfou, Sharan Narang, Mihir Kale, Adam Roberts, and Colin Raffel. Byt5: Towards a token-free future with pre-trained byte-to-byte models. Transactions of the Association for Computational Linguistics, 10:291–306, 2022. 5
[30] Yukang Yang, Dongnan Gui, Yuhui Yuan, Haisong Ding, Han Hu, and Kai Chen. Glyphcontrol: Glyph conditional control for visual text generation, 2023. 3, 7, 8, 9, 2
[31] Xiaohua Zhai, Xiao Wang, Basil Mustafa, Andreas Steiner, Daniel Keysers, Alexander Kolesnikov, and Lucas Beyer. Lit: Zero-shot transfer with locked-image text tuning. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 18123–18133, 2022. 4
[32] Shuai Zhao, Xiaohan Wang, Linchao Zhu, and Yi Yang. Clip4str: A simple baseline for scene text recognition with pre-trained vision-language model. arXiv preprint arXiv:2305.14014, 2023. 5, 9
[33] Yiming Zhao and Zhouhui Lian. Udifftext: A unified framework for high-quality text synthesis in arbitrary images via character-aware diffusion models. arXiv preprint arXiv:2312.04884, 2023. 3
[34] Yiwu Zhong, Jianwei Yang, Pengchuan Zhang, Chunyuan Li, Noel Codella, Liunian Harold Li, Luowei Zhou, Xiyang Dai, Lu Yuan, Yin Li, et al. Regionclip: Region-based language-image pretraining. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 16793–16803, 2022. 6
[35] Yufan Zhou, Ruiyi Zhang, Jiuxiang Gu, and Tong Sun. Customization assistant for text-to-image generation. arXiv preprint arXiv:2312.03045, 2023. 5

--- TRANG 11 ---
Glyph-ByT5: Một Bộ Mã Hóa Văn Bản Tùy Chỉnh cho Việc Hiển Thị Văn Bản Trực Quan Chính Xác
Tài liệu Bổ sung

Siêu tham số Glyph-CLIP-Small Glyph-CLIP-Base Glyph-CLIP-Large
Bộ mã hóa văn bản ByT5-Small ByT5-Base ByT5-Large
Bộ mã hóa thị giác DINOv2 ViT-B/14 DINOv2 ViT-L/14 DINOv2 ViT-g/14
Tỷ lệ học đỉnh 5.00E-04 5.00E-04 5.00E-04
Kích thước batch 1536 1024 768
Epochs 5 5 5
Iterations khởi động 100 100 100
Weight Decay 0.2 0.2 0.2
Dropout bộ mã hóa văn bản 0.1 0.1 0.1

Bảng 9. Siêu tham số đào tạo trước Glyph-ByT5.

A. Thống kê tập dữ liệu
Chúng tôi trình bày thống kê về số lượng hộp văn bản, từ, và ký tự trên toàn bộ tập dữ liệu ký hiệu chữ-văn bản và tập dữ liệu ký hiệu chữ-văn bản đoạn văn trong Hình 9.

B. Cài đặt đào tạo
Bảng 9 và Bảng 10 chi tiết các siêu tham số để đào tạo Glyph-CLIP và Glyph-SDXL, tương ứng. Glyph-CLIP được đào tạo với 4×A100 GPU trong khi Glyph-SDXL được đào tạo với 32×MI200 GPU.

C. Chỉnh sửa kiểu chữ với SDEdit theo vùng
Lấy cảm hứng từ thành công của SDEdit [19] và Blended Latent Diffusion [2], chúng tôi giới thiệu một sơ đồ SDEdit theo vùng, biến đổi Glyph-SDXL của chúng tôi thành một trình chỉnh sửa văn bản trực quan chính xác và thích ứng. Điều này cho phép việc tinh chỉnh văn bản trực quan trong hình ảnh chất lượng cao được tạo ra bởi các mô hình tạo ra tiên tiến (SOTA), như DALL·E3. Kết quả chỉnh sửa kiểu chữ được hiển thị trong Hình 11, thể hiện khả năng mạnh mẽ của phương pháp chúng tôi cho việc chỉnh sửa kiểu chữ chính xác.

Sơ đồ SDEdit theo vùng: Đối với bất kỳ hình ảnh đầu vào nào, t0 bước nhiễu được thêm vào ban đầu. Bắt đầu từ t0, mô hình Glyph-SDXL được sử dụng lặp lại trên hình ảnh có nhiễu để thực hiện khử nhiễu. Để đảm bảo các sửa đổi được giới hạn độc quyền ở các pixel ký hiệu chữ—từ đó giữ nguyên các pixel nền—chỉ các vùng ký hiệu chữ trải qua khử nhiễu trong suốt giai đoạn này. Quá trình tiến triển cho đến bước thời gian t1, tại thời điểm đó toàn bộ hình ảnh trải qua khử nhiễu để đảm bảo tính nhất quán tổng thể. Hình 10 mô tả khung của sơ đồ SDEdit theo vùng của chúng tôi.

Tác động của lựa chọn tham số: Chúng tôi nghiên cứu tác động của các lựa chọn khác nhau cho t0 và t1.

Siêu tham số Glyph-SDXL-Small Glyph-SDXL-Base Glyph-SDXL-Large
Bộ mã hóa văn bản Glyph-ByT5-Small Glyph-ByT5-Base Glyph-ByT5-Large
Tỷ lệ học UNet 5.00E-05 5.00E-05 5.00E-05
Tỷ lệ học bộ mã hóa văn bản 1.00E-04 1.00E-04 1.00E-04
Kích thước batch 256 256 256
Epochs 10 10 10
Weight Decay 0.01 0.01 0.01
Weight Decay bộ mã hóa văn bản 0.2 0.2 0.2
Dropout bộ mã hóa văn bản 0.1 0.1 0.1
Gradient Clipping 1.0 1.0 1.0

Bảng 10. Siêu tham số đào tạo mô hình Glyph-SDXL.

Phương pháp Độ chính xác (%)
≤20 ký tự ≤20-50 ký tự ≤50-100 ký tự ≥100 ký tự
GlyphControl-SDXL 65.17 61.04 45.31 32.75
Glyph-SDXL 84.54 84.56 79.89 73.29

Bảng 11. So sánh với mô hình kiểu ControlNet.

Bộ mã hóa thị giác Độ chính xác (%)
≤20 ký tự ≤20-50 ký tự ≤50-100 ký tự ≥100 ký tự
SDXL-VAE 70.02 70.57 66.34 56.28
DINOv2 84.54 84.56 79.89 73.29

Bảng 12. So sánh với việc căn chỉnh với không gian latent của SDXL.

Phương pháp hòa trộn bộ mã hóa văn bản Độ chính xác (%)
≤20 ký tự ≤20-50 ký tự ≤50-100 ký tự ≥100 ký tự
nối nhúng văn bản 1.47 2.5 2.77 3.91
chú ý chéo theo vùng 84.54 84.56 79.89 73.29

Bảng 13. Tác động của cơ chế chú ý chéo đa đầu theo vùng.

Trước tiên, chúng tôi cố định t1 = 300 và nghiên cứu tác động của các t0 khác nhau. Như được minh họa trong Hình 12, một t0 lớn là quan trọng để đảm bảo rằng các latent ký hiệu chữ được chỉnh sửa hoàn toàn. t0 nhỏ hơn giữ một tỷ lệ lớn hơn của các latent ban đầu, dẫn đến xung đột và làm giảm hiệu suất.

Hơn nữa, chúng tôi cố định t0 = 800 và nghiên cứu tác động của các lựa chọn khác nhau của t1. Như được minh họa trong Hình 13, t1 lớn hơn đảm bảo tính nhất quán tốt hơn giữa các pixel bên trong và bên ngoài các hộp ký hiệu chữ, nhưng thay đổi đáng kể hình ảnh nền. t1 nhỏ hơn, ngược lại, duy trì hình ảnh nền trong khi hy sinh tính nhất quán.

D. Loại bỏ về căn chỉnh thiết kế-với-cảnh
Chúng tôi kiểm tra tác động của việc sử dụng ba loại dữ liệu chất lượng cao, như được hiển thị trong Hình 14, Hình 15, và Hình 16.

Đầu tiên, Hình 14 trình bày một so sánh xác nhận tầm quan trọng của việc tinh chỉnh Glyph-SDXL với hình ảnh tổng hợp được tạo ra bởi SDXL. Quá trình này giảm thiểu đáng kể hiện tượng 'drift ngôn ngữ' quan sát được khi tinh chỉnh chỉ với dữ liệu thiết kế đồ họa. Hơn nữa, phân tích của chúng tôi

--- TRANG 12 ---
0 1 2 3 4 5 6 7 0% 5% 10% 15% 20% 25% 30% 35% (a)
5 10 15 20 25 30 35 0% 2% 4% 6% 8% 10% 12% (b)
0 20 40 60 80 100 120 140 160 0% 2% 4% 6% 8% 10% 12% (c)
0 2 4 6 8 10 0% 5% 10% 15% 20% 25% 30% (d)
20 30 40 50 60 70 0% 1% 2% 3% 4% 5% 6% 7% (e)
160 180 200 220 240 260 280 300 320 340 360 380 0% 1% 2% 3% 4% 5% 6% (f)

Hình 9. Minh họa thống kê của Tập dữ liệu ký hiệu chữ-văn bản và Tập dữ liệu ký hiệu chữ-văn bản đoạn văn của chúng tôi Đối với Tập dữ liệu ký hiệu chữ-văn bản: (a) # hộp văn bản, (b) # từ, (c) # ký tự. Đối với Tập dữ liệu ký hiệu chữ-văn bản đoạn văn: (d) # hộp văn bản, (e) # từ, (f) # ký tự. Chúng ta có thể thấy rằng các hình ảnh ký hiệu chữ của Tập dữ liệu ký hiệu chữ-văn bản đoạn văn bao gồm số lượng từ và ký tự lớn hơn nhiều.

Bộ mã hóa Thêm nhiễu Glyph-SDXL
Thêm nhiễu Glyph-SDXL các bước Bộ giải mã
Mặt nạ hòa trộn  các bước

Hình 10. Minh họa quy trình SDEdit theo vùng.

tiết lộ rằng việc tinh chỉnh với một tập dữ liệu kết hợp TextSeg và hình ảnh thiết kế đồ họa có lợi, ngay cả khi không có hình ảnh được tạo ra bởi SDXL.

Sau đó, chúng tôi minh họa tác động của việc kết hợp hình ảnh thiết kế đồ họa trong Hình 15, làm nổi bật tầm quan trọng của chúng để đảm bảo hiển thị font chính xác. Điều này rõ ràng từ việc so sánh kết quả được hiển thị trong hàng thứ hai và thứ ba. Cuối cùng, trong Hình 16, chúng tôi xác nhận vai trò quan trọng của việc kết hợp tập dữ liệu TextSeg trong việc tạo ra văn bản cảnh hòa quyện liền mạch với các đối tượng nền. Ví dụ, không có tập dữ liệu TextSeg, việc đặt văn bản cảnh thường xuất hiện không hợp lý, thỉnh thoảng thậm chí nằm ngoài các bảng hoặc chỗ đặt biển hiệu dự định.

E. Thêm thí nghiệm loại bỏ
So sánh với mô hình kiểu ControlNet Để xác thực hiệu quả của bộ mã hóa văn bản tùy chỉnh của chúng tôi so với các hình thức hướng dẫn đặc trưng khác, chúng tôi tinh chỉnh một mô hình SDXL kiểu ControlNet đại diện, tức là, GlyphControl [30], và báo cáo kết quả trong Bảng 11. Chúng ta có thể thấy rằng Glyph-SDXL của chúng tôi hoạt động tốt hơn đáng kể, và khoảng cách hiệu suất tăng lên với số lượng ký tự lớn hơn. Điều này chỉ ra rằng mô hình kiểu ControlNet, được điều kiện hóa trên các mặt nạ văn bản được hiển thị, gặp những hạn chế cơ bản khi xử lý văn bản trực quan dày đặc cấp độ đoạn văn.

So sánh với việc căn chỉnh trực tiếp với không gian latent SDXL Chúng tôi so sánh phương pháp của chúng tôi với việc căn chỉnh trực tiếp với không gian latent của SDXL, tức là sử dụng SDXL-VAE làm bộ mã hóa thị giác. Như được chỉ ra trong Bảng 12, SDXL-VAE yếu trong việc trích xuất các đặc trưng văn bản trực quan đáng tin cậy và tụt hậu so với DINOv2 đáng kể.

Loại bỏ về sơ đồ hòa trộn bộ mã hóa văn bản khác Người ta có thể đặt câu hỏi về hiệu quả của một phương pháp cơ bản nối các nhúng văn bản từ các bộ mã hóa văn bản khác nhau. Kết quả so sánh được chi tiết trong Bảng 13. Thực nghiệm, chúng tôi thấy rằng baseline này hoạt động kém đáng kể do những khác biệt đáng kể giữa các bộ mã hóa văn bản.

F. Hòa trộn loại font
Chúng tôi minh họa tác động của việc hòa trộn các loại font khác nhau để tạo ra các loại font mới chưa thấy nhằm chứng minh khả năng ngoại suy của mô hình Glyph-SDXL của chúng tôi. Như được minh họa trong Hình 17, chúng tôi nội suy các nhúng của loại font nghiêng Brightwall-Italic với loại font đặc biệt Creepster-Regular để tạo ra một loại font hòa trộn mới nghiêng và chứa hiệu ứng đặc biệt của Creepster-Regular.

G. Danh sách yêu cầu chi tiết
Chúng tôi minh họa các yêu cầu chi tiết cho các hình ảnh được tạo ra được hiển thị trong Hình 1 và Hình 5 trong Bảng 14.

H. Quy hoạch bố cục kiểu chữ với GPT-4
Để giảm sự phụ thuộc vào các bố cục kiểu chữ được cung cấp thủ công, như các hộp văn bản mục tiêu, chúng tôi sử dụng khả năng quy hoạch thị giác

--- TRANG 13 ---
Hình ảnh Yêu cầu
Hình 1, Hàng 1, Cột 1 Nền: Thẻ và lời mời. Hình ảnh có một tấm thẻ trắng được trang trí bằng hoa xanh và cây xanh. Thẻ: xanh, trắng, hiện đại, đơn giản, thanh lịch, hoa, minh họa, chuyên nghiệp, thẩm mỹ, thông báo. Văn bản: Văn bản "It was the best of times, it was the worst of times. It was the age of wisdom, it was the age of foolishness." trong <color-1 >,<font-421 >.
Hình 1, Hàng 1, Cột 2 Nền: Thẻ và lời mời. Hình ảnh có một tấm thẻ trắng được trang trí bằng hoa xanh và cây xanh. Thẻ: xanh, trắng, hiện đại, đơn giản, thanh lịch, hoa, minh họa, chuyên nghiệp, thẩm mỹ, thông báo. Văn bản: Văn bản "It was the best of times, it was the worst of times. It was the age of wisdom, it was the age of foolishness." trong <color-1 >,<font-469 >.
Hình 1, Hàng 1, Cột 3 Nền: Thẻ và lời mời. Hình ảnh có một khu rừng xanh tươi bất tận. Thẻ: thanh lịch, minh họa, chuyên nghiệp, thẩm mỹ, thông báo. Văn bản: Văn bản "It was the best of times, it was the worst of times." trong <color-36 >,<font-126 >. Văn bản "It was the age of wisdom, it was the age of foolishness." trong <color-19 >,<font-42 >.
Hình 1, Hàng 1, Cột 4 Nền: Bookmark sao xanh hiện đại. Hình ảnh có vũ trụ đầy sao với sao Thổ, sao Hỏa và các hành tinh khác theo phong cách vẽ sơn dầu thẩm mỹ. Thẻ: thanh lịch, minh họa, chuyên nghiệp, thẩm mỹ. Văn bản: Văn bản "It was the best of times, it was the worst of times." trong <color-0 >,<font-47 >. Văn bản "It was the age of wisdom, it was the age of foolishness." trong <color-38 >,<font-420 >.
Hình 1, Hàng 2, Cột 1 Nền: Bài đăng Instagram. Hình ảnh có một chồng bánh pancake với xi-rô và dâu tây trên đỉnh. Bánh pancake được sắp xếp theo cách hấp dẫn về mặt thị giác, với một số bánh pancake đặt chồng lên nhau. Xi-rô được rưới hào phóng lên bánh pancake, và dâu tây được rải xung quanh, thêm một chút màu sắc và sự tươi mát cho cảnh. Việc trình bày tổng thể của bánh pancake rất hấp dẫn và mời gọi. Thẻ: nâu, đào, xám, hiện đại, tối giản, đơn giản, đầy màu sắc, minh họa, bài đăng Instagram, instagram, bài đăng, ngày bánh pancake quốc gia, ngày bánh pancake quốc tế, ngày bánh pancake vui vẻ, ngày bánh pancake, bánh pancake, ngọt, bánh, giảm giá, khuyến mại. Văn bản: Văn bản "Get 50% Discount for your first order" trong <color-3 >,<font-97 >. Văn bản "Have a try!" trong <color-0 >,<font-97 >. Văn bản "Celebrate with Pancakes!" trong <color-4 >,<font-97 >.
Hình 1, Hàng 2, Cột 2 Nền: Thẻ và lời mời. Hình ảnh có một con voi xám lớn ngồi trong cánh đồng hoa, ôm một con voi nhỏ hơn trong vòng tay. Cảnh khá thanh bình và đẹp như tranh, với hai con voi là tâm điểm chính của hình ảnh. Cánh đồng đầy các loài hoa khác nhau, tạo ra một bối cảnh đẹp và sống động cho các con voi. Thẻ: Xanh lá nhạt, cam, Minh họa, màu nước, vui tươi, Lời mời tiệc em bé, lời mời tiệc em bé trai, em bé trai, chào đón em bé trai, lời mời tiệc em bé koala, lời mời tiệc em bé cho tiệc em bé, lời mời em bé trai, nền, thẻ tiệc em bé vui tươi, tiệc em bé, thẻ, trẻ sơ sinh, sinh ra, Lời mời tiệc em bé áo sơ mi em bé. Văn bản: Văn bản "RSVP to +123-456-7890" trong <color-18 >,<font-100 >. Văn bản "John Doe" trong <color-99 >,<font-210 >. Văn bản "Baby Shower" trong <color-53 >,<font-210 >. Văn bản "Please Join Us For a" trong <color-18 >,<font-100 >. Văn bản "In Honoring" trong <color-18 >,<font-100 >. Văn bản "01 July, 2024 — 00:00 PM Grand Central Hotel" trong <color-18 >,<font-100 >.
Hình 1, Hàng 2, Cột 3 Nền: Tờ rơi. Hình ảnh có nền tím với một phù thủy bay trên chổi, được bao quanh bởi một số quả bí ngô. Các quả bí ngô được rải khắp cảnh, với một số được đặt gần phù thủy hơn và những quả khác ở xa hơn. Sự kết hợp của nền tím, phù thủy, và quả bí ngô tạo ra một bầu không khí lễ hội và ma quái. Thẻ: tím, cam, đầy màu sắc, minh họa, sáng tạo, vui nhộn, tối, đậm, vui tươi, dễ thương, hoạt hình, tờ rơi, halloween, trick or treat, trang phục, tiệc, ma quái, bí ngô, trick, sự kiện. Văn bản: Văn bản "Games" trong <color-27 >,<font-197 >. Văn bản "Costume Party" trong <color-27 >,<font-197 >. Văn bản "Candies" trong <color-27 >,<font-197 >. Văn bản "Warmly welcome to join us at our new playground on October 31st from 6 p.m. to 9 p.m." trong <color-51 >,<font-197 >. Văn bản "Treat" trong <color-51 >,<font-371 >. Văn bản "or" trong <color-51 >,<font-371 >. Văn bản "Trick" trong <color-51 >,<font-371 >.
Hình 1, Hàng 2, Cột 4 Nền: Bài đăng Instagram. Hình ảnh có một chiếc mũ phù thủy tím trên một quả bí ngô, được đặt trước một nghĩa trang. Quả bí ngô được đặt ở giữa cảnh, và chiếc mũ hơi nghiêng về bên trái. Có ba con ma trong nền, với một con ở bên trái, một con ở bên phải, và một con khác ở giữa. Các con ma được đặt ở các độ cao khác nhau, với con ở bên trái cao nhất, con ở giữa thấp nhất, và con ở bên phải cao hơn một chút so với con ở giữa. Thẻ: tím, cam, vàng, minh họa, halloween, ngày halloween, tiệc halloween, halloween vui vẻ, bí ngô, trick or treats, ma quái, ma ám, sự kiện, tiệc, lễ hội, phù thủy, quái vật, đáng sợ, ma, bài đăng instagram. Văn bản: Văn bản "Big promotion" trong <color-14 >. Văn bản "31 October 2024" trong <color-14 >. Văn bản "HALLOWEEN SALE" trong <color-57 >,<font-252 >. Văn bản "ONCE IN A YEAR" trong <color-57 >,<font-252 >. Văn bản "60% OFF" trong <color-57 >,<font-252 >.
Hình 1, Hàng 3, Cột 1 Nền: Một bức ảnh của một con sóc dễ thương cầm một tấm biển, 4k, dslr. Văn bản: Văn bản "Glyph-ByT5: A Customized Text Encoder for Accurate Visual Text Rendering".
Hình 1, Hàng 3, Cột 2 Nền: Một người đàn ông đứng giữa một cánh đồng hướng dương rực rỡ với một dãy núi trong nền dưới bầu trời xanh, cầm một tấm biển ghi "Glyph-ByT5: A Customized Text Encoder for Accurate Visual Text Rendering" theo phong cách Vincent van Gogh. Văn bản: Văn bản "Glyph-ByT5: A Customized Text Encoder for Accurate Visual Text Rendering".
Hình 1, Hàng 3, Cột 3 Nền: Một cảnh hấp dẫn của một tấm biển trống đứng giữa một cảnh quan đá, với nền là bầu trời trong và một cây cọ. Văn bản: Văn bản "Words on sign are". Văn bản "CORRECT". Văn bản "exactly with Glyph ByT5".
Hình 1, Hàng 3, Cột 4 Nền: Hình ảnh hiển thị một tấm biển với thiết kế phong cách, có một con chim và cành cây. Tấm biển được treo từ trần nhà, và nó dường như nằm bên ngoài một tòa nhà. Thiết kế đơn giản và hiện đại, với bảng màu hạn chế bao gồm các sắc thái của nâu và trắng. Con chim và cành cây được mô tả theo phong cách tối giản, với các đường nét sạch sẽ và thiếu chi tiết tạo cho tấm biển cảm giác đương đại. Tấm biển có thể nhằm cung cấp thông tin hoặc chỉ dẫn cho người qua đường, nhưng nội dung cụ thể của tấm biển không nhìn thấy được trong hình ảnh. Văn bản "Glyph ByT5: A Customized Text Encoder for Accurate". Văn bản "Visual Text Rendering".
Hình 5, Hàng 1, Cột 1 Nền: Hình ảnh có một khung trang trí với thiết kế hoa, thể hiện nhiều loại hoa. Khung được trang trí bằng sự kết hợp của hoa hồng, vàng và trắng, tạo ra một màn hình hấp dẫn và đầy màu sắc về mặt thị giác. Những bông hoa được sắp xếp theo cách lấp đầy khung, tạo ấn tượng về một cảnh sống động và sôi nổi. Văn bản: Văn bản " "Marriage does not guarantee you will be together forever, it's only paper. It takes love, respect, trust, understanding, friendship, and faith in your relationship to make it last."" trong <color-10 >,<font-358 >.
Hình 5, Hàng 1, Cột 2 Nền: Hình ảnh có nền trắng với một vài cây và hoa rải rác trên đó. Có ba cây chính trong cảnh, với một cây nằm ở bên trái, một cây khác ở giữa, và cây thứ ba ở bên phải. Ngoài ra, có hai cây nhỏ hơn ở phần trên của hình ảnh. Các cây có kích thước và hình dạng khác nhau, thêm cảm giác đa dạng cho cảnh. Văn bản: Văn bản "Give yourself the same amount of attention and warmth you selflessly give to others." trong <color-7 >,<font-196 >.
Hình 5, Hàng 1, Cột 3 Nền: Bài đăng Instagram. Hình ảnh có một người phụ nữ ngồi ở tư thế sen, còn được gọi là tư thế yoga, với hai chân giao nhau và hai tay đặt trên đầu gối. Cô ấy được bao quanh bởi một môi trường thanh bình, với cây cối trong nền và mặt trời trên bầu trời phía trên cô ấy. Người phụ nữ dường như đang thiền hoặc tập yoga trong một khung cảnh ngoài trời yên bình. Thẻ: TRẮNG, NÂU, XANH, HIỆN ĐẠI, thiền, tập thể dục, thể dục, ngày yoga, poster, sức khỏe, minh họa, quốc tế, tư thế, khái niệm, thư giãn, yoga, phụ nữ. Văn bản: Văn bản "" let's get moving for a healthy body!"" trong <color-2 >,<font-30 >. Văn bản "BEAUTY OF YOGA" trong <color-2 >,<font-30 >. Văn bản "Experience" trong <color-2 >,<font-500 >.
Hình 5, Hàng 1, Cột 4 Nền: Hình ảnh có nền trắng với một khung tròn làm từ bút chì màu. Khung được lấp đầy bằng nhiều bút chì màu khác nhau, tạo ra một thiết kế hấp dẫn và nghệ thuật về mặt thị giác. Các bút chì được sắp xếp ở các vị trí khác nhau, với một số chồng lên nhau và những cái khác đứng một mình. Sự kết hợp của màu sắc và hình dạng tròn của khung làm cho hình ảnh trở thành một tác phẩm nghệ thuật độc đáo và sáng tạo. Văn bản: Văn bản "I TOTALLY REMEMBERED YOUR BIRTHDAY DEAR FRIEND!" trong <color-14 >,<font-101 >.
Hình 5, Hàng 1, Cột 5 Nền: Bài đăng Facebook. Hình ảnh có một người đàn ông mặc áo sơ mi đen và quần yếm xanh, cầm một hộp nâu. Anh ấy đứng trước nền xanh, có một vài bong bóng hội thoại rải rác xung quanh. Người đàn ông dường như đang mỉm cười, có thể chỉ ra rằng anh ấy hạnh phúc hoặc hào hứng về chiếc hộp anh ấy đang cầm. Thẻ: Tím, tím, minh họa, được minh họa, doanh nghiệp, chuyên nghiệp, Chuyển phát, giao hàng, bưu kiện, gói hàng, nhanh, miễn phí, express, vận chuyển, phương tiện, vận tải, nhận hàng, trung tâm, đàn ông, nhân vật. Văn bản: Văn bản "EXPRESS PARCEL SHIPPING" trong <color-0 >,<font-4>. Văn bản "awesome design website" trong <color-0 >,<font-4>. Văn bản "tel.: +123-456-7890" trong <color-0 >,<font-4>. Văn bản "over 1000 Delivery Centres" trong <color-0 >,<font-4>. Văn bản "Online Tracking" trong <color-0 >,<font-4>. Văn bản "10% off for New Clients" trong <color-0 >,<font-4>. Văn bản "FOR BUSINESS AND INDIVIDUALS" trong <color-123 >,<font-4>. Văn bản "DELIVERY" trong <color-123 >,<font-54 >. Văn bản "COURIER" trong <color-0 >,<font-54 >.

Bảng 14. Yêu cầu chi tiết cho các hình ảnh được tạo ra trong Hình 1 và Hình 5.

--- TRANG 14 ---
Hình 11. Minh họa kết quả chỉnh sửa kiểu chữ dựa trên Glyph-SDXL của chúng tôi. Hình ảnh gốc được tạo ra bởi DALL·E3 và hình ảnh được chỉnh sửa bởi Glyph-SDXL được minh họa lần lượt trong các hàng 1, 3, 5 và các hàng 2, 4, 6.

(a)t0= 800
 (b)t0= 700
 (c)t0= 600
 (d)t0= 500
 (e)t0= 400
 (f)gốc

Hình 12. Tác động của các lựa chọn khác nhau của t0 cho SDEdit theo vùng.

(a)t1= 600
 (b)t1= 500
 (c)t1= 400
 (d)t1= 300
 (e)t1= 200
 (f)t1= 100

Hình 13. Tác động của các lựa chọn khác nhau của t1 cho SDEdit theo vùng.

của GPT-4 để tự động hóa việc tạo bố cục và sau đó hiển thị hình ảnh dựa trên những bố cục này. Ngoài ra, chúng tôi sử dụng khả năng dự đoán bố cục của LLM của TextDiffuser-2 để xác định các hộp văn bản mục tiêu. Theo những dự đoán này, chúng tôi triển khai mô hình Glyph-SDXL của chúng tôi để tạo ra hình ảnh văn bản trực quan, như được hiển thị trong Hình

--- TRANG 15 ---
19. Kết quả chỉ ra rằng khả năng bố cục của GPT-4 đáng tin cậy hơn đáng kể so với LLM bố cục của TextDiffuser-2.

Hơn nữa, chúng tôi trình bày một số trường hợp thất bại điển hình gặp phải với GPT-4 trong Hình 18. Đáng chú ý, GPT-4 có xu hướng phân bố đồng đều tất cả các hộp văn bản trong cùng một cột (Cột 1 & 2), gom các hộp văn bản vào một góc (Cột 3 & 4), hoặc bỏ qua các ràng buộc bố cục được ngụ ý bởi ngữ nghĩa văn bản, như đặt "Happy" và "Father" cùng nhau (Cột 5 & 6).

I. Chất lượng thị giác
Để đánh giá chất lượng thị giác, chúng tôi báo cáo điểm số FID của Glyph-SDXL trên hai điểm chuẩn: điểm chuẩn COCO, bao gồm 5K cặp văn bản-hình ảnh, và điểm chuẩn VISUAL PARAGRAPHY, bao gồm 1K cặp văn bản-hình ảnh hướng thiết kế có chứa văn bản trực quan trong mỗi hình ảnh. Điểm số FID lần lượt là 28.06 và 47.96. Trong khi điểm số FID của phương pháp chúng tôi trên hình ảnh COCO cao hơn một chút so với 26.48 đạt được bởi SDXL, quan trọng là lưu ý rằng chỉ số FID vốn dĩ ưu tiên hình ảnh tự nhiên hơn hình ảnh thiết kế. Điều này là do sự phụ thuộc của FID vào Inception-v3, được đào tạo trước trên tập dữ liệu hình ảnh tự nhiên ImageNet.

J. Thống kê qua nhiều lần chạy
Chúng tôi báo cáo mean+std của độ chính xác cấp độ từ OCR qua năm lần chạy trong Bảng 15. Ngoài ra, chúng tôi cũng định nghĩa một mẫu thành công như một hình ảnh có độ chính xác cấp độ từ lớn hơn một ngưỡng θ. Chúng tôi báo cáo mean+std của tỷ lệ thành công qua các ngưỡng khác nhau trong Bảng 16. Tỷ lệ thành công 23% được ghi nhận ở góc dưới bên phải của bảng chỉ ra rằng trung bình, một trong bốn nỗ lực sẽ dẫn đến việc tạo ra ký hiệu chữ chính xác 100%, ngay cả đối với các văn bản vượt quá 100 ký tự (tương đương với 20 từ tiếng Anh). Để so sánh, DALL·E3 thất bại trong việc tạo ra bất kỳ hình ảnh ký hiệu chữ hoàn toàn chính xác nào trên cùng cài đặt. Hơn nữa, tỷ lệ thành công của DALL·E3 ở θ = 100% là 20.75%, 19.25%, và 0% cho ba độ dài văn bản ngắn hơn.

Phương pháp Độ chính xác (%)
≤20 ký tự ≤20-50 ký tự ≤50-100 ký tự ≥100 ký tự
Glyph-SDXL 93.20±0.64 93.19±0.67 91.23±0.60 89.98±0.51

Bảng 15. Mean+std của dự đoán cấp độ từ qua năm lần chạy.

Ngưỡng độ chính xác OCR θ Tỷ lệ thành công (%)
≤20 ký tự ≤20-50 ký tự ≤50-100 ký tự ≥100 ký tự
90% 79.76±0.78 65.68±1.07 68.64±1.33 62.32±1.65
95% 79.76±0.78 64.96±1.32 50.40±1.01 47.20±1.41
100% 79.76±0.78 64.96±1.32 45.04±1.90 23.12±1.67

Bảng 16. Mean+std của tỷ lệ thành công qua năm lần chạy.

--- TRANG 16 ---
Hình 14. Minh họa tác động của việc kết hợp hình ảnh được tạo ra bởi SDXL trong quá trình tinh chỉnh thiết kế-với-cảnh. Được hiển thị theo thứ tự là các hình ảnh được tạo ra bởi: SDXL ban đầu ở hàng đầu, Glyph-SDXL ở hàng thứ hai, Glyph-SDXL-Scene được tinh chỉnh không có hình ảnh được tạo ra bởi SDXL ở hàng thứ ba, và cuối cùng, Glyph-SDXL-Scene sử dụng hình ảnh được tạo ra bởi SDXL ở hàng cuối.

Hình 15. Minh họa tác động của việc kết hợp hình ảnh thiết kế đồ họa trong quá trình tinh chỉnh thiết kế-với-cảnh. Được hiển thị theo thứ tự là các hình ảnh được tạo ra bởi: Glyph-SDXL ở hàng đầu, Glyph-SDXL-Scene được tinh chỉnh không có hình ảnh thiết kế đồ họa ở hàng thứ hai, và cuối cùng, Glyph-SDXL-Scene sử dụng hình ảnh thiết kế đồ họa ở hàng cuối.

--- TRANG 17 ---
Hình 16. Minh họa tác động của việc kết hợp hình ảnh văn bản cảnh trong quá trình tinh chỉnh thiết kế-với-cảnh. Được hiển thị theo thứ tự là các hình ảnh được tạo ra bởi: Glyph-SDXL ở hàng đầu, Glyph-SDXL-Scene được tinh chỉnh không có hình ảnh TextSeg ở hàng thứ hai, và cuối cùng, Glyph-SDXL-Scene sử dụng hình ảnh TextSeg ở hàng cuối.

Hình 17. Minh họa tác động của việc hòa trộn loại font.

GPT4
 Con người
 GPT4
 Con người
 GPT4
 Con người

Hình 18. Các trường hợp thất bại quy hoạch bố cục GPT-4. Kết quả được tạo ra sử dụng bố cục được dự đoán với GPT- và các nhà thiết kế con người được thể hiện lần lượt trong Cột 1, 3, 5 và Cột 2, 4, 6.

--- TRANG 18 ---
Hình 19. Minh họa các ví dụ hình ảnh và bố cục được tạo ra bằng cách tích hợp GPT-4 (Hàng 1 & 2) và TextDiffuser-2 (Hàng 3 & 4) (vì TextDiffuser-2 không được đào tạo để quy hoạch loại font và màu sắc, chúng tôi sử dụng các phong cách được khuyến nghị bởi GPT-4) như một tiên nghiệm quy hoạch, tương ứng.
