AI có phải là đối tác lập trình tốt hơn không?
Lập trình cặp Người-Người so với Lập trình cặp Người-AI (pAIr Programming)

Qianou Ma∗
Đại học Carnegie Mellon
Pittsburgh, USA
qianouma@cmu.edu

Tongshuang Wu
Đại học Carnegie Mellon
Pittsburgh, USA
sherryw@cs.cmu.edu

Kenneth Koedinger
Đại học Carnegie Mellon
Pittsburgh, USA
koedinger@cmu.edu

TÓM TẮT
Sự xuất hiện của các mô hình ngôn ngữ lớn (LLM) xuất sắc trong việc sinh mã và các sản phẩm thương mại như GitHub Copilot đã khơi dậy sự quan tâm về lập trình cặp người-AI (gọi là "pAIr programming") trong đó hệ thống AI cộng tác với lập trình viên con người. Trong khi lập trình cặp truyền thống giữa người với người đã được nghiên cứu rộng rãi, vẫn chưa rõ liệu những phát hiện của nó có thể áp dụng cho lập trình cặp người-AI hay không. Chúng tôi so sánh lập trình cặp người-người và người-AI, khám phá những điểm tương đồng và khác biệt trong tương tác, phép đo, lợi ích và thách thức. Chúng tôi phát hiện rằng hiệu quả của cả hai phương pháp đều không nhất quán trong tài liệu (mặc dù các phép đo được sử dụng cho pAIr programming không toàn diện bằng). Chúng tôi tổng hợp các yếu tố điều tiết về thành công của lập trình cặp người-người, điều này mở ra cơ hội cho nghiên cứu pAIr programming. Ví dụ, sự không khớp về chuyên môn làm cho lập trình cặp kém hiệu quả hơn, do đó các trợ lý lập trình AI được thiết kế tốt có thể thích nghi với sự khác biệt về mức độ chuyên môn.

TỪ KHÓA
Lập trình cặp, LLM, Tương tác Người-AI, Copilot, Lập trình hỗ trợ AI

1 GIỚI THIỆU
Lập trình cặp lần đầu được giới thiệu vào những năm 1990 như một phần của thực hành phát triển phần mềm Agile [9]. Trong định nghĩa ban đầu, lập trình cặp mô tả thực hành của hai lập trình viên cùng làm việc trên cùng một tác vụ sử dụng một máy tính, bàn phím và chuột duy nhất. Một lập trình viên trong cặp, "người lái" (driver), thực hiện việc mã hóa (gõ phím) và triển khai tác vụ, trong khi lập trình viên còn lại, "người định hướng" (navigator), hỗ trợ trong việc lập kế hoạch, xem xét, gỡ lỗi và đề xuất cải tiến và lựa chọn thay thế. Theo thời gian, lập trình cặp đã phát triển và thích nghi với các bối cảnh và mục đích khác nhau. Hiện tại, nó được sử dụng trong nhiều môi trường khác nhau, bao gồm giáo dục, công nghiệp và phát triển phần mềm mã nguồn mở [5,83].

Những tiến bộ gần đây trong các mô hình ngôn ngữ lớn sinh mã đã dẫn đến sự phổ biến rộng rãi của các công cụ hỗ trợ lập trình thương mại được hỗ trợ bởi AI như GitHub Copilot [26], công cụ tự quảng cáo là "lập trình viên cặp AI của bạn." Đối với pAIr programming, thay vì hai con người làm việc trên một máy tính, chính lập trình viên và AI dựa trên LLM cùng làm việc trên cùng một tác vụ. Sự thay đổi trong mô hình đặt ra các câu hỏi: Liệu đối tác lập trình AI có so sánh được với lập trình viên cặp con người không? Chúng có thể áp dụng trong cùng bối cảnh, có thể đạt được hiệu suất tương tự hoặc tốt hơn, và mọi người có nên tương tác với chúng theo cùng một cách không?

Trong công trình này, chúng tôi đi sâu vào tình trạng nghiên cứu hiện tại về lập trình cặp người-người và người-AI để khám phá những điểm tương đồng và khác biệt của chúng, và chúng tôi hy vọng sẽ truyền cảm hứng cho việc đánh giá và thiết kế tốt hơn các LLM sinh mã như một lập trình viên cặp pAIr. Chúng tôi bắt đầu bằng việc xem xét bối cảnh ứng dụng, phương pháp và tác vụ cho cả tài liệu lập trình cặp người-người và người-AI (Phần 2), sau đó đi sâu vào so sánh chi tiết về các phép đo thành công của chúng (Phần 3), cũng như các yếu tố điều tiết đóng góp, ví dụ như các yếu tố tương thích cặp như chuyên môn (Phần 4).

Chúng tôi phát hiện rằng (1) công trình trước đây về cả hai mô hình lập trình cặp đều quan sát thấy kết quả không nhất quán trong chất lượng, năng suất, sự hài lòng, học tập và chi phí, (2) pAIr programming vẫn chưa phát triển các phép đo toàn diện, và (3) các yếu tố chính cho thành công của pAIr phần lớn chưa được khám phá.

Dựa trên khám phá của chúng tôi, sau đó chúng tôi thảo luận về các quan điểm và thách thức trong việc đặc tả AI như một lập trình viên cặp, và phát triển các cơ hội tương lai để phát triển các thực hành tốt nhất và hướng dẫn cho lập trình cặp người-AI (Phần 5). Đầu tiên, chúng tôi lập luận rằng các yếu tố điều tiết mang lại thách thức cho lập trình cặp người-người (ví dụ, tương thích và giao tiếp) mở ra cơ hội cải thiện lập trình cặp người-AI. Có thể hứa hẹn khi khai thác sự khác biệt giữa con người và đối tác AI (ví dụ, mức độ chuyên môn có thể tùy chỉnh hơn và phong cách giao tiếp có thể thích nghi hơn) để thiết kế cho trải nghiệm lập trình cặp người-AI thành công hơn. Thứ hai, chúng tôi khuyến khích nghiên cứu tương lai khám phá môi trường triển khai tốt nhất cho lập trình cặp người-AI. Trong khi hầu hết các công trình lập trình cặp người-AI đã tập trung vào hỗ trợ các nhà phát triển chuyên nghiệp, chúng tôi hy vọng sẽ truyền cảm hứng cho nhiều công trình tương lai hơn trong bối cảnh học tập (hoặc, lập trình cặp sinh viên-AI), và chúng tôi nhấn mạnh các thách thức tiềm ẩn liên quan.

2 BỐI CẢNH, PHƯƠNG PHÁP VÀ TÁC VỤ
Lập trình cặp người-người bắt nguồn như một thực hành trong ngành kỹ thuật phần mềm [9] và sau đó trở thành thực hành học tập cộng tác phổ biến trong lớp học [83]. Do đó, trong bài báo này, chúng tôi so sánh lập trình cặp người-người và người-AI trong cả bối cảnh công nghiệp và giáo dục, vì chúng là những bối cảnh phổ biến nhất. Chúng tôi tuân theo định nghĩa ban đầu của lập trình cặp người-người để tương tự chặt chẽ với tương tác người-AI trên một thiết bị duy nhất. Các chế độ tương tác khác tồn tại để so sánh các đội người và người-AI trong các tác vụ lập trình, như học tập cộng tác qua máy tính [71] và lập trình cặp phân tán [19], nhưng chúng nằm ngoài phạm vi của bài báo này.

Đối với lập trình cặp người-AI, hầu hết các công trình hiện tại đã đánh giá Copilot bằng cách sử dụng nghiên cứu tình huống (ví dụ, [12]) hoặc nghiên cứu thực nghiệm (ví dụ, [84]) với các lập trình viên có kinh nghiệm trong ngành. Tương tự như lập trình cặp người-người, các nhà nghiên cứu đã cố gắng bắt chước môi trường phát triển chuyên nghiệp thực tế trong thiết lập tác vụ của họ. Ví dụ, Barke et al. [8] đã mời 20 người tham gia, chủ yếu là sinh viên tiến sĩ và kỹ sư phần mềm, để hoàn thành các tác vụ như phát triển Chat Client và Server. Tuy nhiên, thiếu các nghiên cứu quan sát thực địa không xâm lấn như những gì các nghiên cứu lập trình cặp người-người đã làm [65,75].

Ít công trình gần đây đã khám phá việc sử dụng môi trường lập trình dựa trên LLM hoặc Copilot với sinh viên. Ví dụ, Kazemitabaar et al. [39] đã sử dụng nghiên cứu thực nghiệm có kiểm soát với 69 sinh viên mới bắt đầu từ 10 đến 17 tuổi làm việc trên 45 tác vụ tạo mã Python và sửa đổi mã. Tuy nhiên, các công trình hiện tại về lập trình cặp người-AI chủ yếu trong các thí nghiệm phòng lab, và vẫn thiếu nghiên cứu quy mô lớn [51] và triển khai lớp học [57,87] như trong tài liệu lập trình cặp người-người.

Khi thiết lập các nhóm so sánh, các công trình pAIr programming hiện tại đã so sánh cặp người-AI với người-người [35] hoặc người đơn lẻ (ví dụ, so sánh công việc của các nhà phát triển khi họ sử dụng Copilot hoặc công cụ hoàn thành mã mặc định) [84]. Không có nghiên cứu hiện tại nào thiết lập so sánh ba chiều cho người-AI, người-người và người đơn lẻ.

Tóm tắt: So với các công trình lập trình cặp người-người, các nghiên cứu pAIr hiện tại thiếu triển khai thực tế trong không gian làm việc hoặc lớp học, và kích thước mẫu lớn hơn cũng sẽ được mong muốn. Các nhà nghiên cứu của cả hai mô hình lập trình cặp sử dụng các thiết kế nghiên cứu khác nhau để kiểm tra những gì ảnh hưởng đến hiệu quả của lập trình cặp. Trong Phần 3 và Phần 4, chúng tôi so sánh các biến và phép đo mà họ sử dụng để tiếp tục khám phá những gì thiếu trong các nghiên cứu pAIr.

3 KẾT QUẢ KHÔNG NHẤT QUÁN
Các đánh giá tài liệu về lập trình cặp người-người đã đề xuất nhiều lợi ích cũng như các tác động không nhất quán. Trong bối cảnh công nghiệp, theo Alves De Lima Salge và Berente [5], lập trình cặp cải thiện chất lượng mã, tăng năng suất và nâng cao kết quả học tập. Tuy nhiên, theo Hannay et al. [31], lập trình cặp cải thiện chất lượng và rút ngắn thời gian, nhưng tăng nỗ lực, chất lượng cao hơn đi kèm với nỗ lực lớn hơn đáng kể, và thời gian hoàn thành giảm đi kèm với chất lượng thấp hơn. Trong bối cảnh giáo dục, lập trình cặp mang lại lợi ích bao gồm phần mềm chất lượng cao hơn, sự tự tin của sinh viên vào giải pháp, điểm bài tập tăng, điểm thi, tỷ lệ thành công/đỗ trong các khóa học giới thiệu và khả năng giữ chân [29,52,83]. Tất cả các đánh giá về lập trình cặp người-người đều thừa nhận rằng mặc dù phân tích meta có thể cho thấy xu hướng tổng thể và kích thước hiệu ứng đáng kể, các nghiên cứu riêng lẻ có thể báo cáo kết quả mâu thuẫn (xem ví dụ trong Bảng 1).

Đối với lập trình cặp người-AI, các công trình hiện tại chủ yếu tập trung vào chất lượng, năng suất và sự hài lòng, và đã chứng minh kết quả không nhất quán trong chất lượng và năng suất [8, 35,84] (xem ví dụ trong Bảng 1). Ngoài ra, không có đủ nghiên cứu cho một đánh giá toàn diện, vì vậy chúng ta chưa thể đi đến kết luận nào về hiệu quả của lập trình cặp người-AI. Cũng khó so sánh tài liệu lập trình cặp người-người và người-AI, vì chúng khác nhau về kết quả và phép đo mà chúng áp dụng.

Do đó, trong các hàng trên của Bảng 1, chúng tôi liệt kê các biến kết quả phổ biến nhất trong cả hai tài liệu (chất lượng, năng suất, sự hài lòng, học tập và chi phí) và một số công trình mẫu để chứng minh kết quả không nhất quán và các phép đo khác nhau. Chúng tôi phát triển về sự đa dạng của các cách để đo một số kết quả được liệt kê như sau.

3.1 Chất lượng
Trong tài liệu lập trình cặp người-người, chất lượng có thể được đo bằng mật độ lỗi, phép đo nỗ lực cảm nhận, khả năng đọc, khả năng hoạt động, số lượng trường hợp thử nghiệm vượt qua, độ phức tạp mã, điểm số, ý kiến chuyên gia, v.v. [5, 70, 79].

3.2 Năng suất
Trong tài liệu lập trình cặp người-người, thời gian, nỗ lực và năng suất đều là các loại kết quả "hiệu quả" liên quan đến thời gian và thành tích. Năng suất có thể được đo bằng số lượng tác vụ hoàn thành trong một đơn vị thời gian cố định, thời gian có thể được đo bằng lượng thời gian trôi qua hoặc tổng thời gian được sử dụng để hoàn thành một số lượng tác vụ cố định theo một tiêu chuẩn nhất định, và nỗ lực có thể được đo bằng hai lần thời gian, số giờ-người cần thiết, v.v. [5]. Chúng tôi sử dụng năng suất như một biến kết quả tổng hợp của các phép đo khác nhau, để phù hợp với tài liệu người-AI.

Trong các công trình người-AI hiện tại, một số phép đo có thể coi là quá đơn giản như các chỉ số đánh giá, ví dụ, Imai [35] đã sử dụng số lượng dòng mã được thêm vào như phép đo năng suất; tuy nhiên, bản chất tương tác với Copilot (tab để chấp nhận gợi ý) có thể đóng góp vào nhiều dòng được thêm vào hơn trong điều kiện người-Copilot, và việc nó đại diện cho khái niệm năng suất như thế nào là có thể nghi ngờ.

Lưu ý rằng một số nhà nghiên cứu đã kiểm tra năng suất cảm nhận của lập trình viên khi làm việc với Copilot và phát hiện rằng nó tương quan mạnh nhất với tỷ lệ chấp nhận chung của mã do AI tạo ra [90]. Điều này không được bao gồm trong Bảng 1 để giữ sự nhất quán với tài liệu lập trình cặp người-người, vì năng suất cảm nhận là một phép đo khác với năng suất thực tế.

3.3 Học tập
Trong tài liệu lập trình cặp người-người, học tập có thể được đánh giá bằng các phép đo định lượng như điểm bài tập, điểm thi, tỷ lệ đỗ và tỷ lệ giữ chân, hoặc các phép đo định tính về kỹ năng tư duy bậc cao [29, 52, 83].

3.4 Chi phí
Về chi phí, có quan sát rằng người tham gia gặp khó khăn trong việc hiểu và gỡ lỗi mã do Copilot tạo ra, dẫn đến giả thuyết rằng lập trình cặp người-AI có thể tiêu tốn nỗ lực bổ sung và cản trở hiệu quả giải quyết tác vụ của lập trình viên [12,84]. Tuy nhiên, Dakhel et al. [21] cho thấy rằng mặc dù mã của Copilot có thể ít chính xác hơn mã của con người, nhưng lỗi của nó dễ gỡ lỗi hơn lỗi của con người. Hiện tại không có công trình nào đặc tả thực nghiệm chi phí của lập trình cặp người-AI.

Tóm tắt: Tài liệu về lập trình cặp người-người đã cho thấy kết quả không nhất quán trong nhiều biến kết quả, bao gồm chất lượng, năng suất, sự hài lòng, học tập và chi phí. Đối với lập trình cặp người-AI, hoặc chủ yếu là người-Copilot trong bài báo này, vẫn chỉ có ít công trình với các phép đo không toàn diện, nhưng kết quả không nhất quán cũng được quan sát. Chúng tôi tiếp tục xem xét các nguyên nhân tiềm ẩn của kết quả không nhất quán của cả hai chế độ lập trình cặp trong Phần 4.

4 CÁC YẾU TỐ ĐIỀU TIẾT
Trong việc tìm kiếm giải thích cho lợi ích-chi phí của trải nghiệm lập trình cặp người-người, các nhà nghiên cứu đã tìm thấy các yếu tố điều tiết như loại tác vụ & độ phức tạp [31], các yếu tố tương thích như chuyên môn [6,67], giao tiếp [17,24, 65], các yếu tố cộng tác như sự phụ thuộc quá mức và chuyển đổi vai trò [30,70,87], và khó khăn về hậu cần bao gồm lập lịch và đào tạo [11, 31] (như được thể hiện trong các hàng dưới của Bảng 1). Những yếu tố chính này ảnh hưởng đến thành công của lập trình cặp người-người. Nếu chúng hoạt động tốt, lập trình cặp giúp lập trình viên phát hiện lỗi dễ dàng hơn, giải quyết vấn đề nhanh hơn, xem xét mã kỹ lưỡng hơn và sản xuất mã chất lượng cao hơn tổng thể; nó cũng thúc đẩy chia sẻ kiến thức giữa các thành viên trong đội, có thể dẫn đến một đội gắn kết và hiệu quả hơn. Nếu không, những thách thức như lập lịch và tìm kiếm cặp phù hợp với phong cách làm việc tương thích thường dẫn đến hiệu quả chi phí thấp trong lập trình cặp, và làm chậm quá trình phát triển nếu có xung đột hoặc bất đồng giữa các đối tác cặp [11, 18].

Đối với các yếu tố điều tiết của lập trình cặp người-AI, nhiều thứ chưa được khám phá – chúng ta không biết điều gì có thể làm cho lập trình cặp người-AI hiệu quả hơn hoặc kém hiệu quả hơn. Do đó, trong phần này, chúng tôi thảo luận về các yếu tố điều tiết chính được kiểm tra trong tài liệu lập trình cặp người-người, và các ví dụ riêng lẻ về tác động điều tiết được cung cấp trong Bảng 1.

4.1 Loại tác vụ & Độ phức tạp
Đối với loại tác vụ và độ phức tạp tác vụ, Chaparro et al. [16] phát hiện rằng các tác vụ gỡ lỗi dẫn đến ít sự hài lòng và hiệu quả cảm nhận hơn so với các tác vụ hiểu và tái cấu trúc. Hannay et al. [31] phát hiện rằng thời gian ngắn hơn đối với các tác vụ độ phức tạp thấp, với cái giá của kết quả chất lượng thấp hơn, và chất lượng cao hơn khi độ phức tạp cao hơn, nhưng đòi hỏi nỗ lực lớn hơn đáng kể. Arisholm et al. [6] phát hiện rằng tác động điều tiết của độ phức tạp cũng phụ thuộc vào chuyên môn của cặp, trong đó "lợi ích về tính chính xác trên hệ thống phức tạp áp dụng chủ yếu cho người mới, trong khi việc giảm thời gian để thực hiện các tác vụ chính xác trên hệ thống đơn giản áp dụng chủ yếu cho người trung cấp và cao cấp."

4.2 Tương thích
Salleh et al. [70] liệt kê nhiều yếu tố cho tương thích cặp, như tính cách, kỹ năng cảm nhận, kỹ năng thực tế (chuyên môn), lòng tự trọng, giới tính và đạo đức công việc. Thomas et al. [81] phát hiện rằng các sinh viên được ghép cặp với mức độ tự tin tương tự tạo ra công việc tốt nhất của họ. Hannay et al. [30] phát hiện rằng các đặc điểm tính cách Big Five chỉ có giá trị dự đoán khiêm tốn về hiệu suất lập trình cặp, và chuyên môn, độ phức tạp tác vụ và quốc gia có sức mạnh dự đoán mạnh hơn so với. Cũng có vẻ có bằng chứng rằng phụ nữ được hưởng lợi từ lập trình cặp nhiều hơn nam giới [29, 67].

Chuyên môn như một yếu tố tương thích đã được nghiên cứu rộng rãi trong tài liệu lập trình cặp người-người. Ví dụ, các nhà nghiên cứu phát hiện rằng một cặp sinh viên hoạt động tốt nhất khi chuyên môn của họ tương tự [70] và sinh viên thích được ghép cặp với các đối tác có kỹ năng tương tự [16]. Tuy nhiên, trong ngành, Jensen [36] báo cáo rằng khi cả hai thành viên gần cùng mức năng lực và có ý kiến mạnh mẽ, sự cộng tác phản tác dụng và phiền toái.

Trong bối cảnh lập trình giới thiệu, Lui và Chan [45] phát hiện rằng việc ghép cặp người mới dẫn đến cải thiện năng suất lớn hơn so với việc ghép cặp chuyên gia. Tuy nhiên, có lo ngại về rủi ro "người mù dẫn người mù" nếu họ không có chuyên gia để tham khảo [4]. Các nhà nghiên cứu cũng phát hiện rằng sinh viên ít kỹ năng học và tận hưởng nhiều hơn sinh viên có kỹ năng cao hơn trong lập trình cặp [16,47]. Tuy nhiên, khi khoảng cách kiến thức quá lớn, sinh viên có thể ít hài lòng hơn và lợi ích về chất lượng có thể nhỏ hơn [60]. Chong và Hurlbutt [17] báo cáo rằng một lập trình viên mới cộng tác với một chuyên gia có thể trở nên thiếu hứng thú, có lòng tự trọng thấp hơn và sợ làm chậm hoặc làm phiền đối tác có kỹ năng cao hơn [4].

4.3 Giao tiếp
Theo Freudenberg et al. [24], "chìa khóa của thành công lập trình cặp [là] sự phổ biến của cuộc nói chuyện ở mức độ chi tiết trung gian trong các cuộc hội thoại của lập trình viên cặp." Các nhà nghiên cứu cũng phát hiện rằng lập trình cặp loại bỏ hoạt động gây phân tâm và cho phép lập trình viên tập trung vào hoạt động hiệu quả [75], điều này có thể là lý do tại sao giao tiếp hấp dẫn đóng góp vào thành công của lập trình cặp.

Murphy et al. [55] đã sử dụng phân tích giao dịch để chia nhỏ giao tiếp bằng các loại giao dịch khác nhau, và họ phát hiện rằng cố gắng nhiều vấn đề hơn liên quan đến nhiều giao dịch hoàn thành hơn và thành công gỡ lỗi tương quan với nhiều giao dịch phê bình hơn. Một số công trình khác chỉ ra khía cạnh hỗ trợ xã hội của giao tiếp [17] và hiệu ứng giải thích nơi việc diễn đạt bằng lời của quá trình tư duy làm cho nó rõ ràng hơn [12].

Trong lập trình cặp người-người, lập trình viên dành khoảng 1/3 thời gian chủ yếu tập trung vào giao tiếp [65], điều này buộc họ phải tập trung, hợp lý hóa và giải thích suy nghĩ của mình [31,75]. Trong lập trình cặp người-AI, Mozannar et al. [53] đã cho thấy rằng một lượng thời gian tương tự 1/3 được dành để giao tiếp với Copilot, như suy nghĩ và xác minh (22.4%) gợi ý của Copilot, điều này có thể sao chép các hiệu ứng tự giải thích theo một cách nào đó, và tạo prompt, chiếm 11.56% thời gian. Những hoạt động này có thể được coi là nỗ lực để hiểu và giao tiếp với Copilot. Tuy nhiên, không có con người khác để đồng xác minh câu trả lời, và không có nghiên cứu nào đánh giá bản chất giao tiếp của tương tác người-Copilot như lập trình cặp người-người.

4.4 Cộng tác
Cách các đối tác cộng tác tốt là các yếu tố quan trọng ảnh hưởng đến hiệu quả lập trình cặp [4,79], và hành vi hợp tác và sự phụ thuộc tích cực là chìa khóa cho thành công lập trình cặp [67].

Cộng tác có thể thất bại theo nhiều cách trong một cặp người-người. Ví dụ, vấn đề người "ăn bám", nơi toàn bộ khối lượng công việc đặt lên một đối tác trong khi người kia vẫn là người chơi biên, có thể dẫn đến ít sự hài lòng và học tập hơn [57,87]. Trong lập trình cặp người-AI, các nhà giáo dục lo lắng rằng các công cụ sinh mã có sẵn dễ dàng có thể dẫn đến gian lận, và sự phụ thuộc quá mức vào AI có thể cản trở việc học của sinh viên [10]. Tuy nhiên, không có nghiên cứu nào chính thức đánh giá điều này.

Đối với lập trình cặp người-người, có một mô hình cộng tác được đề xuất về chuyển đổi vai trò – hai nhà phát triển phần mềm định kỳ và thường xuyên chuyển đổi giữa việc viết mã (người lái) và đề xuất mã (người định hướng), nhằm đảm bảo rằng cả hai đều tham gia vào tác vụ và giảm bớt tải trọng vật lý và nhận thức mà người lái phải gánh chịu [5, 65].

Một số nhà nghiên cứu Freudenberg et al. [24] lập luận rằng thành công của lập trình cặp nên được quy cho giao tiếp hơn là "sự khác biệt trong hành vi hoặc tập trung giữa người lái và người định hướng," vì họ phát hiện cả người lái và người định hướng đều làm việc ở mức độ trừu tượng tương tự. Tuy nhiên, các giảng viên vẫn khuyến nghị người lái và người định hướng thường xuyên luân phiên vai trò để đảm bảo trải nghiệm học tập công bằng [83].

Trong tương tác người-AI, với khả năng tuyệt vời của Copilot trong việc viết mã bằng các ngôn ngữ khác nhau, một số người lập luận rằng Copilot có thể đảm nhận vai trò "người lái" trong lập trình cặp, cho phép lập trình viên đơn lẻ đảm nhận vai trò "người định hướng" và tập trung vào việc hiểu mã ở mức độ cao hơn [35]. Tuy nhiên, trong khi con người có thể giảm tải một số tra cứu API và chi tiết cú pháp cho Copilot, con người vẫn cần phải nhảy trở lại ghế người lái thường xuyên và linh hoạt chuyển đổi giữa các hoạt động suy nghĩ và viết [53]. Cuối cùng, đó là trách nhiệm duy nhất của lập trình viên con người để hiểu mã ở mức độ câu lệnh [72].

4.5 Hậu cần
Các thách thức hậu cần, bao gồm khó khăn lập lịch, dạy và đánh giá cộng tác cho cặp, và tìm ra trách nhiệm và sự chịu trách nhiệm cá nhân [11,67], có thể thêm vào chi phí quản lý của lập trình cặp người-người [4, 79].

Trong lập trình cặp người-AI, một số người có thể lập luận rằng con người chịu trách nhiệm duy nhất trong cặp người-AI [72], nhưng trách nhiệm của các AI tạo sinh dựa trên LLM này vẫn đang được tranh luận [10]. Có thể có các vấn đề hậu cần mới cho cặp người-AI, như dạy con người cách cộng tác tốt nhất với Copilot. Cũng có thể có những thách thức độc đáo như trong mọi tình huống tương tác người-AI, như thiên vị, niềm tin và hạn chế kỹ thuật – còn nhiều thứ cần khám phá. Cần có nhiều nghiên cứu hơn để xác minh thực nghiệm và thực nghiệm các tác động điều tiết của các biến khác nhau trong lập trình cặp người-AI.

Tóm tắt: Tài liệu lập trình cặp người-người đã tìm thấy các yếu tố điều tiết bao gồm loại tác vụ & độ phức tạp, tương thích, giao tiếp, cộng tác và hậu cần. Tuy nhiên, thiếu kiểm tra sâu về các tác động điều tiết tiềm ẩn trong các công trình pAIr hiện tại.

5 THẢO LUẬN VÀ CÔNG VIỆC TƯƠNG LAI

5.1 LLM, Lập trình viên cặp pAIr của bạn?
Trước khi xuất hiện các công cụ dựa trên LLM tuyên bố là "lập trình viên cặp AI của bạn [26]," mọi người đã phát triển các hệ thống hỗ trợ AI để hỗ trợ lập trình viên, như các công cụ hoàn thành mã (ví dụ, Tabnine), hệ thống tái cấu trúc mã và xác minh chính thức, và các công cụ tổng hợp và gỡ lỗi mã. Trọng tâm đánh giá chủ yếu là về thiết kế khả năng sử dụng, hiệu quả chi phí và năng suất [53,56], nhưng không phải về tính khả thi của việc sử dụng những công cụ lập trình hỗ trợ AI này như đối tác lập trình cặp.

Với những tiến bộ gần đây trong công nghệ LLM tạo sinh, các công cụ AI thương mại như Copilot có khả năng cung cấp gợi ý mã thời gian thực và phản hồi vượt ra ngoài tự động hoàn thành dường như có sự tương đồng gần hơn với đối tác lập trình cặp [12]. Nhiều nghiên cứu đã đánh giá và phê bình khả năng của Copilot trong việc tạo mã đúng, hiệu quả [21,58], an toàn [7,62], có thể đọc được [3] và có thể xác minh [88]. Không nghi ngờ gì, Copilot tạo ra lỗi và sai sót trong mã gợi ý của nó, nhưng con người cũng không hoàn hảo. Một lập trình viên không thể và không cần phải hoàn hảo để mang lại lợi ích vào trải nghiệm lập trình cặp, nhưng liệu Copilot có đủ điều kiện như một đối tác lập trình?

Trong việc trả lời câu hỏi này, các nhà nghiên cứu bắt đầu xem xét động lực tương tác giữa lập trình viên và lập trình viên cặp AI được tuyên bố. Một số nhà nghiên cứu lập luận chống lại việc đặc tả lập trình hỗ trợ AI như lập trình cặp. Họ tin rằng sự tương tự với lập trình cặp người-AI khá hời hợt, vì những gì làm cho lập trình cặp người-người hiệu quả (ví dụ, giao tiếp hiệu quả) biến mất trong lập trình cặp người-AI. Theo Sarkar et al. [72], "lập trình hỗ trợ LLM nên được xem như một cách lập trình mới với các đặc tính và thách thức riêng biệt."

Chúng tôi sử dụng cụm từ "lập trình cặp người-AI pAIr" trong bài báo này, đơn giản vì chúng tôi áp dụng định nghĩa lập trình cặp rằng một cặp làm việc trên cùng một thiết bị và cùng một tác vụ, vì vậy chúng tôi có thể so sánh thuận tiện con người và AI như một đối tác lập trình cặp. Như được xem xét trong Phần 3 và Phần 4, Copilot và đối tác con người chia sẻ nhiều kết quả tương tự trong lập trình cặp, nhưng các yếu tố điều tiết cho lập trình cặp người-AI ít được kiểm tra hơn. Chúng tôi tin rằng so sánh này có ý nghĩa ở chỗ nó giúp chúng tôi rút ra những hiểu biết để tiếp tục cải thiện các công cụ lập trình dựa trên LLM.

Lưu ý rằng trong bài báo này, chúng tôi chủ yếu bao gồm các nghiên cứu sử dụng VSCode Extension Copilot. Các công cụ như ChatGPT có thể hỗ trợ khía cạnh giao tiếp tốt hơn Copilot [82], và cũng có Bard được phát triển bởi Google [27] và phiên bản thực nghiệm của Copilot Labs bởi Github [25], hỗ trợ nhiều chức năng hơn như sửa lỗi, làm sạch và prompt có thể tùy chỉnh. Những công cụ đó có thể đã cải thiện tương tác lập trình cặp người-AI theo một cách nào đó, vì vậy các nghiên cứu tương lai cũng có thể so sánh trên nhiều công cụ lập trình dựa trên LLM.

Có một thách thức khác trong việc mô tả AI như một lập trình viên cặp, theo cuộc tranh luận về nhân hóa giao diện người dùng [74] và thảo luận đang diễn ra khi AI thể hiện khả năng ngày càng tăng để sao chép hành vi của con người [43,80]. Mối quan tâm là AI được nhân hóa có thể đánh lừa các nhà thiết kế và lừa dối người dùng, cản trở quyền đại diện và trách nhiệm của người dùng, có rủi ro đạo đức và xã hội sâu sắc hơn, và có thể không hiệu quả hơn.

Tuy nhiên, trong tài liệu giáo dục, các nhà nghiên cứu đã cố gắng làm cho các tác nhân cung cấp tương tác tự nhiên và giống con người với sinh viên, sử dụng các tác nhân có thể dạy được [13,59], tác nhân sư phạm [44,46,49], tác nhân đối thoại [69,71], v.v. Kuttal et al. [41] khám phá sự đánh đổi của việc sử dụng con người so với tác nhân AI như đối tác lập trình cặp. Họ phát hiện rằng người-người và người-AI dẫn đến kết quả năng suất, chất lượng mã và tự hiệu quả tương tự, và sinh viên "tin tưởng và thể hiện sự khiêm tốn đối với các tác nhân." Họ cũng phát hiện rằng các tác nhân AI đã thành công trong việc tạo thuận lợi cho việc chuyển giao kiến thức trong khi thất bại trong việc cung cấp giải thích hoặc thảo luận logic.

Những tác nhân được nhân hóa đó hầu hết dường như hiệu quả trong việc cải thiện học tập và động lực [32,73]. Một số giải thích các hiệu ứng sử dụng lý thuyết tác nhân xã hội [49], lý thuyết tải trọng nhận thức [44], và các nguyên tắc học tập đa phương tiện liên quan đến tín hiệu xã hội [48]. Làm thế nào chúng ta có thể áp dụng những lý thuyết này cho các tác nhân AI được hỗ trợ bởi LLM, và điều gì khác biệt trong bối cảnh ngành so với giáo dục sẽ thú vị để khám phá. Cần nhiều công trình hơn để tạo ra từ vựng chung cho lĩnh vực này.

5.2 LLM, Lập trình viên cặp pAIr tốt hơn?
Như được xem xét trong Phần 3, tài liệu trước đây đã khám phá nhiều phép đo để đánh giá các khía cạnh khác nhau của lập trình cặp người-người, trong khi việc khám phá hiện tại trong lập trình cặp người-AI khá hạn chế. Murillo và D'Angelo [54] đã đề xuất các chỉ số đánh giá cho các trợ lý viết mã sáng tạo dựa trên LLM trong kỹ thuật phần mềm. Nhiều công trình hơn có thể sử dụng các phép đo hợp lệ hơn trong tài liệu lập trình cặp người-người để khám phá cách tốt nhất giúp con người và trợ lý lập trình AI dựa trên LLM cộng tác với nhau. Sẽ cũng thú vị khi có một thiết lập nghiên cứu với ba điều kiện – người-người, người-AI và người đơn lẻ – làm việc trên cùng một tác vụ.

Tài liệu trước đây đã đề xuất một số yếu tố chính trong thành công của lập trình cặp người-người, như được tóm tắt trong Bảng 1. Những yếu tố điều tiết gây ra thách thức cho lập trình cặp người-người có thể mang lại cơ hội để khám phá trong lập trình cặp người-AI (Bảng 2). Ví dụ, tự hiệu quả có thể dẫn đến sự khác biệt về sự hài lòng [81] và giới tính có thể dẫn đến sự khác biệt trong học tập [47], những yếu tố điều tiết tương thích này có ảnh hưởng đến pAIr cũng không? Chúng ta có thể cải thiện kết quả pAIr bằng cách sử dụng những hiểu biết rút ra từ tài liệu người-người không (ví dụ, mô phỏng đối tác AI với mức độ tự hiệu quả tương tự và cùng giới tính)? Do đó, nói chung, chúng ta có thể đặt những câu hỏi sau cho các công trình tương lai: Những yếu tố này có thể được thực hiện cho lập trình cặp người-AI không? Chúng sẽ làm cho lập trình cặp người-AI hiệu quả hơn, kém hiệu quả hơn, hoặc không có ảnh hưởng gì, và tại sao?

Loại tác vụ & Độ phức tạp. Như chúng ta biết từ tài liệu lập trình cặp người-người, một tác vụ cộng tác tốt với độ phức tạp phù hợp là quan trọng, nhưng việc tạo ra hoặc chọn những tác vụ như vậy có thể khó khăn. Trong khi đó, LLM giúp các nhà giáo dục tạo ra hiệu quả các tài liệu giảng dạy như câu hỏi [85], câu hỏi-trả lời [40], phản hồi [20], và gợi ý [61], có thể có chất lượng tương tự như nội dung do con người tạo ra. Cũng có công trình đề xuất thành công sơ bộ trong việc sử dụng LLM để chia nhỏ vấn đề thành các câu hỏi con [78]. Do đó, dựa trên hiểu biết từ tài liệu lập trình cặp người-người và khả năng đã biết của LLM, có một câu hỏi mở để khám phá trong lập trình cặp người-AI pAIr: liệu LLM có thể được cấu hình để tạo ra loại tác vụ với mục tiêu học tập cộng tác và tùy chỉnh độ phức tạp tác vụ cho lập trình viên?

Tương thích - Chuyên môn. Về yếu tố tương thích chuyên môn, tài liệu lập trình cặp đề xuất rằng việc ghép cặp các đối tác với mức độ chuyên môn tương tự có thể là tốt nhất trong việc thúc đẩy năng suất và học tập [5,16, 31]. Các nghiên cứu đánh giá cho thấy các mô hình dựa trên GPT3 có thể là sinh viên trên trung bình trong lớp học CS1 [22,68] và hiệu suất của nó trở nên tệ hơn khi mã trở nên phức tạp hơn [89]. GPT4 thậm chí còn làm tốt hơn trong việc giải quyết các vấn đề lập trình giới thiệu và cơ bản (mặc dù tính chính xác của nó vẫn không so sánh được với nhà phát triển trong thực tế) [14]. Chúng ta cũng có thể cố ý tạo ra lỗi và để các mô hình mắc sai lầm [38], vì vậy có khả năng, chúng ta có thể tạo ra một đối tác AI với mức độ kỹ năng tương tự như sinh viên mới. Các công trình tương lai có thể kiểm tra cách cấu hình AI để thích nghi với mức độ kỹ năng của sinh viên và liệu nó có hiệu quả hay không.

Các yếu tố tương thích khác. Các nhà nghiên cứu đã khám phá cách để LLM tạo ra tương tác dựa trên persona được thiết kế và sao chép hành vi của con người một cách hợp lý [1,34], và trong giáo dục, Cao [15] để LLM tương tác với sinh viên trong khi đóng vai các nhân vật hư cấu khác nhau để giúp giảm lo lắng của sinh viên và tăng động lực. Có khả năng cá nhân hóa đối tác AI với các đặc điểm tính cách khác nhau hoặc các yếu tố tương thích cặp khác như giới tính, dân tộc và lòng tự trọng mà Salleh et al. [70] đề xuất. Có khả năng, nó có thể được sử dụng để tăng động lực và/hoặc sự tham gia của lập trình viên, nhưng nó hữu ích như thế nào cho lập trình cặp người-AI vẫn chưa được kiểm tra.

Giao tiếp. Đối với giao tiếp, chúng ta biết khía cạnh xã hội của cuộc hội thoại quan trọng [17] và một số loại diễn ngôn có thể hiệu quả hơn để tạo thuận lợi cho việc gỡ lỗi [55] trong lập trình cặp người-người. Do đó, vì các công cụ dựa trên LLM như ChatGPT có thể mô phỏng tương tác xã hội, sẽ thú vị khi khám phá liệu LLM có thể hỗ trợ các loại giao tiếp khác nhau, các thành phần khác nhau của giao tiếp có thể được sao chép trong trợ lý lập trình dựa trên LLM hay không, và liệu nó có hiệu quả hay không.

Cộng tác. Về cộng tác, thường xuyên báo cáo rằng tạo ra cộng tác suôn sẻ là thách thức trong cả bối cảnh ngành [11] và giáo dục [57,87]. Với việc vấn đề người "ăn bám" làm giảm hiệu quả của lập trình cặp [57] và việc chuyển đổi vai trò thường xuyên có khả năng giảm bớt tải trọng nhận thức của người lái và đảm bảo kết quả học tập cân bằng [5,83], sẽ thú vị khi khám phá liệu AI dựa trên LLM có thể được cấu hình để tránh giúp đỡ quá mức, hỗ trợ chuyển đổi vai trò và cách tốt nhất hỗ trợ cặp người-AI cộng tác.

Hậu cần. Về hậu cần, việc sử dụng Copilot như một đối tác lập trình có thể có lợi thế đặc biệt là tránh hậu cần lập lịch, nhưng cũng có lo ngại về trách nhiệm cần được giải quyết [12,22]. Nói chung, sẽ có rủi ro đạo đức và tác động xã hội của việc sử dụng AI trong lập trình cặp tại nơi làm việc và trong bối cảnh giáo dục, cần được kiểm tra sâu hơn trong các công trình tương lai.

5.3 LLM, Lập trình viên cặp pAIr của sinh viên?
Như được xem xét trong Phần 2, hầu hết các nghiên cứu hiện tại đánh giá hiệu quả của Copilot được tiến hành với các nhà phát triển phần mềm có kinh nghiệm. Nếu chúng ta ước tính khả năng giải quyết vấn đề của Copilot như một sinh viên trung bình trong các lớp lập trình giới thiệu, việc đánh giá hiệu suất của nó khi ghép cặp với một nhà phát triển phần mềm chuyên nghiệp có nhiều chuyên môn hơn có thể không mang lại đủ lợi ích cho người chuyên nghiệp. Do đó, làm việc với khả năng hiện tại của LLM, có vẻ như thiết lập lập trình cặp sinh viên-AI sẽ hứa hẹn nhất để khám phá, vì vậy câu hỏi tiếp theo là: chúng ta nên hỗ trợ lập trình cặp sinh viên-AI tốt nhất như thế nào?

Ưu tiên lại kỹ năng lập trình. Cộng tác với AI đòi hỏi một bộ kỹ năng đặc biệt, và công việc tương lai có thể khám phá cách hỗ trợ sinh viên phát triển tốt hơn những kỹ năng quan trọng này. Bird et al. [12] lập luận rằng sự phổ biến của các trợ lý lập trình dựa trên LLM sẽ dẫn đến tầm quan trọng ngày càng tăng của việc xem xét mã như một kỹ năng cho các nhà phát triển. Tuy nhiên, trong cuộc phỏng vấn của Perscheid et al. [64], không có nhà phát triển chuyên nghiệp nào nhớ đến việc đào tạo về gỡ lỗi ở trường. Đã có tài liệu phong phú về hướng dẫn gỡ lỗi và thử nghiệm [2,50,77], nhưng những thách thức hậu cần như thiếu thời gian giảng dạy vẫn tồn tại [23,50], và các nhà giáo dục cần chuẩn bị tốt hơn cho sinh viên với kỹ năng gỡ lỗi và thử nghiệm cần thiết để làm việc với AI không đáng tin cậy.

Tích hợp khung AIEd. Về mặt lý thuyết, Holstein et al. [33] đã phát triển một khung để ánh xạ các cách tăng cường lẫn nhau giữa con người và AI trong giáo dục, ví dụ, bằng cách tăng cường diễn giải, hành động, khả năng mở rộng và năng lực. Các công trình tương lai có thể sử dụng các lý thuyết hiện có trong không gian giáo dục AI để cải thiện thiết kế của đối tác lập trình cặp AI pAIr, và tiếp tục điều tra liệu LLM có mang lại tập trung và khả năng mới cho các khung giáo dục người-AI trước đây hay không.

Hỗ trợ giải thích và giao tiếp với sinh viên. Những nỗ lực trước đây sử dụng tác nhân AI như đối tác lập trình cặp đã cho thấy một số thành công sơ bộ trong việc chuyển giao và lưu giữ kiến thức [28,69], và hạn chế được thảo luận là thiếu thảo luận và giải thích [41]. Ngày nay, khi một tác nhân dựa trên LLM có thể hỗ trợ tương tác tự nhiên hơn và cung cấp giải thích chất lượng tốt trong bối cảnh lập trình giới thiệu [42], sẽ thú vị khi khám phá liệu AI dựa trên LLM có thể giải quyết một số hạn chế được đề cập trong các công trình tác nhân sư phạm và đối thoại trước đây hay không. Các kỹ thuật tự phản ánh và giải thích cũng có thể được áp dụng để bù đắp cho khía cạnh giao tiếp như trong lập trình cặp người-người.

Phù hợp chuyên môn với sinh viên. Như đã thảo luận trong Phần 4, việc phù hợp chuyên môn là một vấn đề phức tạp. Lui và Chan [45] phát hiện rằng cặp chuyên gia-chuyên gia có thể không có được nhiều lợi thế so với một lập trình viên chuyên gia đơn lẻ, so với cặp mới-mới so với một người mới đơn lẻ. Trong khi đó, việc ghép cặp hai người mới với nhau làm dấy lên lo ngại về "người mù dẫn người mù," nhưng việc ghép cặp một người mới với một chuyên gia có thể dẫn đến lòng tự trọng thấp hơn của người mới [4]. Với tất cả những phức tạp này, khi nói đến cặp sinh viên-AI và khi chúng ta chỉ quan tâm đến lợi ích học tập của sinh viên, có rất nhiều câu hỏi nghiên cứu để đặt ra. Nếu chúng ta có toàn quyền kiểm soát mức độ kỹ năng cảm nhận của đối tác AI, chúng ta có nên cấu hình nó để tương tự như sinh viên, có kỹ năng cao hơn một chút, hay tốt hơn rất nhiều không? Liệu có lợi khi có cả tác nhân AI ngang hàng nhưng cũng có tác nhân AI thầy giáo để hỗ trợ nếu sinh viên bị mắc kẹt không?

Tránh giúp đỡ quá mức sinh viên. Đối với người học lập trình, sẽ quan trọng khi cấu hình trợ lý lập trình dựa trên LLM để tránh giúp đỡ quá mức. Trong vài nghiên cứu kiểm tra tương tác người mới với Copilot [66] hoặc môi trường lập trình tùy chỉnh dựa trên mô hình tạo mã dựa trên LLM Codex [39]. Prather et al. [66] phát hiện rằng người mới thực sự có các mô hình tương tác độc đáo với Copilot và xu hướng dựa vào và tin tưởng mã được tạo ra quá mức. Kazemitabaar et al. [39] thảo luận về các tác động thiết kế bao gồm kiểm soát việc sử dụng quá mức và hỗ trợ người mới hoàn toàn. Cũng có lo ngại về tính chính trực học thuật và thay đổi nhận thức về học tập khi các công cụ lập trình dựa trên LLM trở nên dễ tiếp cận với sinh viên [10,66,68], cần được khám phá thêm cho lập trình cặp sinh viên-AI.

Tăng cường sự tự tin của sinh viên. Cuối cùng nhưng không kém phần quan trọng, lập trình cặp đã được chứng minh là có lợi cho sinh viên có mức độ tự hiệu quả và tự tin thấp hơn [81] và phụ nữ [47] nhiều hơn, có thể làm cho nó trở thành một công cụ sư phạm để thu hút các nhóm dân số dễ tổn thương hoặc không được đại diện hơn trong CS. Khi AI được giới thiệu trong lập trình cặp, liệu lợi ích tương tự có được duy trì không? Chúng ta nên trình bày AI khác nhau như thế nào để làm cho nó tương thích với sinh viên có mức độ tự tin khác nhau? Làm thế nào để chúng ta giảm thiểu rủi ro của AI không đáng tin cậy nhưng có vẻ có thẩm quyền? LLM có thể là cơ hội để giải quyết một số thách thức hiện tại trong lập trình cặp sinh viên-sinh viên (như được tóm tắt trong Bảng 2), nhưng vẫn còn rất nhiều câu hỏi mở để đặt ra.

6 KẾT LUẬN
Bài báo này đã thảo luận về khái niệm lập trình cặp người-AI (pAIr programming). Chúng tôi phát hiện rằng cả lập trình cặp người-người và người-AI đều có lợi ích và thách thức, nhưng nghiên cứu hiện tại không đưa ra câu trả lời rõ ràng về hiệu quả của lập trình cặp người-AI. Tài liệu lập trình cặp người-người mang lại hiểu biết về thiết kế nghiên cứu nào mà các nhà nghiên cứu pAIr nên áp dụng (ví dụ, quan sát thực tế hơn), kết quả và phép đo nào mà các nhà nghiên cứu pAIr nên sử dụng để đánh giá công việc của họ (ví dụ, sử dụng các phép đo chất lượng và năng suất hợp lệ hơn, và tiếp tục điều tra chi phí), và các yếu tố điều tiết nào mà các nhà nghiên cứu pAIr nên xem xét để tiếp tục phân tích quá trình pAIr và cải thiện thiết kế pAIr (ví dụ, tương thích, giao tiếp, v.v.).

Tóm lại, cần có các phép đo hợp lệ và toàn diện hơn để đánh giá pAIr, có thể rút ra nhiều so sánh hơn giữa lập trình cặp người-người so với người-AI, và nhiều công trình hơn có thể khám phá cách hỗ trợ tốt nhất lập trình hỗ trợ LLM với những hiểu biết từ tài liệu phong phú về lập trình cặp người-người.

LỜI CẢM ƠN
Cảm ơn các thành viên phòng thí nghiệm của Ken vì đã đưa ra phản hồi về công việc này. Cảm ơn Tiến sĩ Stephen MacNeil vì đã nghĩ ra từ khóa sáng tạo "pAIr" cho dự án này.

TÀI LIỆU THAM KHẢO
[1]Gati Aher, Rosa I Arriaga, và Adam Tauman Kalai. 2022. Using Large Language Models to Simulate Multiple Humans and Replicate Human Subject Studies. (Aug. 2022). arXiv:2208.10264 [cs.CL] http://arxiv.org/abs/2208.10264

[2]Wolfgang Ahrendt, Richard Bubel, và Reiner Hähnle. 2009. Integrated and Tool-Supported Teaching of Testing, Debugging, and Verification. In Teaching Formal Methods. Springer Berlin Heidelberg, 125–143. https://doi.org/10.1007/978-3-642-04912-5_9

[3]Naser Al Madi. 2023. How Readable is Model-generated Code? Examining Readability and Visual Inspection of GitHub Copilot. In Proceedings of the 37th IEEE/ACM International Conference on Automated Software Engineering. Association for Computing Machinery, New York, NY, USA, 1–5. https://doi.org/10.1145/3551349.3560438

[4]Mustafa Ally, Fiona Darroch, và Mark Toleman. 2005. A framework for understanding the factors influencing pair programming success. In Extreme Programming and Agile Processes in Software Engineering. Springer Berlin Heidelberg, Berlin, Heidelberg, 82–91. https://doi.org/10.1007/11499053_10

[5]Carolina Alves De Lima Salge và Nicholas Berente. 2016. Pair Programming vs. Solo Programming: What Do We Know After 15 Years of Research?. In 2016 49th Hawaii International Conference on System Sciences (HICSS). 5398–5406. https://doi.org/10.1109/HICSS.2016.667

[6]Erik Arisholm, Hans Gallis, Tore Dyba, và Dag I K Sjoberg. 2007. Evaluating Pair Programming with Respect to System Complexity and Programmer Expertise. IEEE Trans. Software Eng. 33, 2 (Feb. 2007), 65–86. https://doi.org/10.1109/TSE.2007.17

[7]Owura Asare, Meiyappan Nagappan, và N Asokan. 2022. Is GitHub's Copilot as Bad as Humans at Introducing Vulnerabilities in Code? (April 2022). arXiv:2204.04741 [cs.SE] http://arxiv.org/abs/2204.04741

[8]Shraddha Barke, Michael B James, và Nadia Polikarpova. 2022. Grounded Copilot: How Programmers Interact with Code-Generating Models. (June 2022). arXiv:2206.15000 [cs.HC] http://arxiv.org/abs/2206.15000

[9]Kent Beck. 1999. Extreme programming explained: embrace change. Addison-Wesley Longman Publishing Co., Inc., USA. https://dl.acm.org/doi/10.5555/318762

[10] Brett A Becker, Paul Denny, James Finnie-Ansley, Andrew Luxton-Reilly, James Prather, và Eddie Antonio Santos. 2023. Programming Is Hard - Or at Least It Used to Be: Educational Opportunities and Challenges of AI Code Generation. In Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1 (Toronto ON, Canada) (SIGCSE 2023). Association for Computing Machinery, New York, NY, USA, 500–506. https://doi.org/10.1145/3545945.3569759

[11] Andrew Begel và Nachiappan Nagappan. 2008. Pair programming: what's in it for me?. In Proceedings of the Second ACM-IEEE international symposium on Empirical software engineering and measurement (Kaiserslautern Germany). ACM, New York, NY, USA. https://doi.org/10.1145/1414004.1414026

[12] Christian Bird, Denae Ford, Thomas Zimmermann, Nicole Forsgren, Eirini Kalliamvakou, Travis Lowdermilk, và Idan Gazit. 2023. Taking Flight with Copilot: Early insights and opportunities of AI-powered pair-programming tools. Queueing Syst. 20, 6 (Jan. 2023), 35–57. https://doi.org/10.1145/3582083

[13] Bobby Bodenheimer, B Sanders, M R Kramer, K Viswanath, R Balachandran, Kadira Belynne, và Gautam Biswas. 2009. Construction and Evaluation of Animated Teachable Agents. J. Educ. Technol. Soc. (2009). https://www.semanticscholar.org/paper/2899ac4dfe209db4767ec01b5df337079bada517

[14] Sébastien Bubeck, Varun Chandrasekaran, Ronen Eldan, Johannes Gehrke, Eric Horvitz, Ece Kamar, Peter Lee, Yin Tat Lee, Yuanzhi Li, Scott Lundberg, Harsha Nori, Hamid Palangi, Marco Tulio Ribeiro, và Yi Zhang. 2023. Sparks of Artificial General Intelligence: Early experiments with GPT-4. (March 2023). arXiv:2303.12712 [cs.CL] http://arxiv.org/abs/2303.12712

[15] Chen Cao. 2023. Scaffolding CS1 Courses with a Large Language Model-Powered Intelligent Tutoring System. In Companion Proceedings of the 28th International Conference on Intelligent User Interfaces (Sydney, NSW, Australia) (IUI '23 Companion). Association for Computing Machinery, New York, NY, USA, 229–232. https://doi.org/10.1145/3581754.3584111

[16] E A Chaparro, Aybala Yuksel, Pablo Romero, và Sallyann Bryant. 2005. Factors Affecting the Perceived Effectiveness of Pair Programming in Higher Education. Annual Workshop of the Psychology of Programming Interest Group (2005). https://www.semanticscholar.org/paper/c095f0d9b17cd9c2851000534740e7cc087253fa

[17] Jan Chong và Tom Hurlbutt. 2007. The Social Dynamics of Pair Programming. In 29th International Conference on Software Engineering (ICSE'07). ieeexplore.ieee.org, 354–363. https://doi.org/10.1109/ICSE.2007.87

[18] Alistair Cockburn và L Williams. 2001. The costs and benefits of pair programming. Computer Science (2001). https://www.semanticscholar.org/paper/5ff7b75b20fdbfae23587b660b7093aec2f48e69

[19] Bernardo José da Silva Estácio và Rafael Prikladnicki. 2015. Distributed Pair Programming: A Systematic Literature Review. Information and Software Technology 63 (July 2015), 1–10. https://doi.org/10.1016/j.infsof.2015.02.011

[20] Wei Dai, Jionghao Lin, Flora Jin, Tongguang Li, Yi-Shan Tsai, Dragan Gasevic, và Guanliang Chen. 2023. Can Large Language Models Provide Feedback to Students? A Case Study on ChatGPT. (April 2023). https://doi.org/10.35542/osf.io/hcgzj

[21] Arghavan Moradi Dakhel, Vahid Majdinasab, Amin Nikanjam, Foutse Khomh, Michel C Desmarais, Zhen Ming, và Jiang. 2022. GitHub Copilot AI pair programmer: Asset or Liability? ArXiv (2022). https://doi.org/10.48550/ARXIV.2206.15331

[22] James Finnie-Ansley, Paul Denny, Brett A Becker, Andrew Luxton-Reilly, và James Prather. 2022. The Robots Are Coming: Exploring the Implications of OpenAI Codex on Introductory Programming. In Australasian Computing Education Conference (Virtual Event, Australia) (ACE '22). Association for Computing Machinery, New York, NY, USA, 10–19. https://doi.org/10.1145/3511861.3511863

[23] Sue Fitzgerald, Renée McCauley, Brian Hanks, Laurie Murphy, Beth Simon, và Carol Zander. 2010. Debugging From the Student Perspective. IEEE Trans. Educ. 53, 3 (Aug. 2010), 390–396. https://doi.org/10.1109/TE.2009.2025266

[24] S Freudenberg, Pablo Romero, và Benedict Du Boulay. 2007. Talking the talk: Is intermediate-level conversation the key to the pair programming success story?. In AGILE 2007. unknown, 84–91. https://doi.org/10.1109/AGILE.2007.1

[25] Github. [n. d.]. GitHub Copilot Labs. https://githubnext.com/projects/copilot-labs/. https://githubnext.com/projects/copilot-labs/ Accessed: 2023-5-19.

[26] GitHub. 2021. Your AI pair programmer: Copilot. https://github.com/features/copilot. https://github.com/features/copilot Accessed: 2022-10-5.

[27] Google. [n. d.]. Bard. https://bard.google.com/. https://bard.google.com/ Accessed: 2023-5-19.

[28] Keun-Woo Han, Eunkyoung Lee, và Youngjun Lee. 2010. The Impact of a Peer-Learning Agent Based on Pair Programming in a Programming Course. IEEE Trans. Educ. 53, 2 (May 2010), 318–327. https://doi.org/10.1109/TE.2009.2019121

[29] Brian Hanks, Sue Fitzgerald, Renée McCauley, Laurie Murphy, và Carol Zander. 2011. Pair programming in education: a literature review. Comput. Sci. Educ. 21, 2 (June 2011), 135–173. https://doi.org/10.1080/08993408.2011.579808

[30] Jo E Hannay, Erik Arisholm, Harald Engvik, và Dag I K Sjoberg. 2010. Effects of Personality on Pair Programming. IEEE Trans. Software Eng. 36, 1 (Jan. 2010), 61–80. https://doi.org/10.1109/TSE.2009.41

[31] Jo E Hannay, Tore Dybå, Erik Arisholm, và Dag I K Sjøberg. 2009. The effectiveness of pair programming: A meta-analysis. Information and Software Technology 51, 7 (July 2009), 1110–1122. https://doi.org/10.1016/j.infsof.2009.02.001

[32] Steffi Heidig và Geraldine Clarebout. 2011. Do pedagogical agents make a difference to student motivation and learning? Educational Research Review 6, 1 (Jan. 2011), 27–54. https://doi.org/10.1016/j.edurev.2010.07.004

[33] Kenneth Holstein, Vincent Aleven, và Nikol Rummel. 2020. A Conceptual Framework for Human–AI Hybrid Adaptivity in Education. Artificial Intelligence in Education 12163 (June 2020), 240. https://doi.org/10.1007/978-3-030-52237-7_20

[34] John J Horton. 2023. Large Language Models as Simulated Economic Agents: What Can We Learn from Homo Silicus? (Jan. 2023). arXiv:2301.07543 [econ.GN] http://arxiv.org/abs/2301.07543

[35] Saki Imai. 2022. Is GitHub Copilot a Substitute for Human Pair-programming? An Empirical Study. In 2022 IEEE/ACM 44th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion). ieeexplore.ieee.org, 319–321. https://doi.org/10.1145/3510454.3522684

[36] Randall W Jensen. 2005. A Pair Programming Experience. ACCU - professionalism in programming Overload 13, 65 (Feb. 2005). https://accu.org/journals/overload/13/65/jensen_254/

[37] Eirini Kalliamvakou. 2022. Research: quantifying GitHub Copilot's impact on developer productivity and happiness. https://github.blog/2022-09-07-research-quantifying-github-copilots-impact-on-developer-productivity-and-happiness/. https://github.blog/2022-09-07-research-quantifying-github-copilots-impact-on-developer-productivity-and-happiness/ Accessed: 2022-10-13.

[38] Sungmin Kang, Juyeon Yoon, và Shin Yoo. 2022. Large Language Models are few-shot testers: Exploring LLM-based general bug reproduction. ArXiv (2022). https://doi.org/10.48550/ARXIV.2209.11515

[39] Majeed Kazemitabaar, Justin Chow, Carl Ka To Ma, Barbara J Ericson, David Weintrop, và Tovi Grossman. 2023. Studying the effect of AI Code Generators on Supporting Novice Learners in Introductory Programming. (Feb. 2023). arXiv:2302.07427 [cs.HC] http://arxiv.org/abs/2302.07427

[40] Shobhan Kumar, Arun Chauhan, và Pavan Kumar C. 2022. Learning Enhancement Using Question-Answer Generation for e-Book Using Contrastive Fine-Tuned T5. In Big Data Analytics. Springer Nature Switzerland, 68–87. https://doi.org/10.1007/978-3-031-24094-2_5

[41] Sandeep Kaur Kuttal, Bali Ong, Kate Kwasny, và Peter Robe. 2021. Trade-offs for Substituting a Human with an Agent in a Pair Programming Context: The Good, the Bad, and the Ugly. In Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems (Yokohama, Japan) (CHI '21, Article 243). Association for Computing Machinery, New York, NY, USA, 1–20. https://doi.org/10.1145/3411764.3445659

[42] Juho Leinonen, Paul Denny, Stephen MacNeil, Sami Sarsa, Seth Bernstein, Joanne Kim, Andrew Tran, và Arto Hellas. 2023. Comparing Code Explanations Created by Students and Large Language Models. (April 2023). arXiv:2304.03938 [cs.CY] http://arxiv.org/abs/2304.03938

[43] Mengjun Li và Ayoung Suh. 2021. Machinelike or Humanlike? A Literature Review of Anthropomorphism in AI-Enabled Technology. In Hawaii International Conference on System Sciences 2021 (HICSS-54). https://aisel.aisnet.org/hicss-54/in/ai_based_assistants/5/

[44] Lijia Lin, Robert K Atkinson, Robert M Christopherson, Stacey S Joseph, và Caroline J Harrison. 2013. Animated agents and learning: Does the type of verbal feedback they provide matter? Comput. Educ. 67 (Sept. 2013), 239–249. https://doi.org/10.1016/j.compedu.2013.04.017

[45] Kim Man Lui và Keith C C Chan. 2006. Pair programming productivity: Novice–novice vs. expert–expert. Int. J. Hum. Comput. Stud. 64, 9 (Sept. 2006), 915–925. https://doi.org/10.1016/j.ijhcs.2006.04.010

[46] Mary Margaret Lusk và Robert K Atkinson. 2007. Animated pedagogical agents: does their degree of embodiment impact learning from static or animated worked examples? Appl. Cogn. Psychol. 21, 6 (Sept. 2007), 747–764. https://doi.org/10.1002/acp.1347

[47] Phil Maguire, Rebecca Maguire, Philip Hyland, và Patrick Marshall. 2014. Enhancing collaborative learning using pair programming: Who benefits? AISHE-J 6, 2 (June 2014). https://ojs.aishe.org/index.php/aishe-j/article/view/141

[48] Richard E Mayer. 2014. Principles based on social cues in multimedia learning: Personalization, voice, image, and embodiment principles. The Cambridge handbook of multimedia learning 16 (2014), 345–370. https://books.google.com/books?hl=en&lr=&id=r3rsAwAAQBAJ&oi=fnd&pg=PA345&ots=iUhQ53T8QY&sig=5tQyKi_f-7aILMxRLuwGTLIix3c

[49] Richard E Mayer và C Scott DaPra. 2012. An embodiment effect in computer-based learning with animated pedagogical agents. J. Exp. Psychol. Appl. 18, 3 (Sept. 2012), 239–252. https://doi.org/10.1037/a0028616

[50] Renee McCauley, Sue Fitzgerald, Gary Lewandowski, Laurie Murphy, Beth Simon, Lynda Thomas, và Carol Zander. 2008. Debugging: A Review of the Literature from an Educational Perspective. Computer Science Education 18, 2 (June 2008), 67–92. https://doi.org/10.1080/08993400802114581

[51] Charlie McDowell, Linda Werner, Heather Bullock, và Julian Fernald. 2002. The effects of pair-programming on performance in an introductory programming course. In Proceedings of the 33rd SIGCSE technical symposium on Computer science education (Cincinnati, Kentucky) (SIGCSE '02). Association for Computing Machinery, New York, NY, USA, 38–42. https://doi.org/10.1145/563340.563353

[52] Charlie McDowell, Linda Werner, Heather E Bullock, và Julian Fernald. 2006. Pair programming improves student retention, confidence, and program quality. Commun. ACM 49, 8 (Aug. 2006), 90–95. https://doi.org/10.1145/1145287.1145293

[53] Hussein Mozannar, Gagan Bansal, Adam Fourney, và Eric Horvitz. 2022. Reading between the lines: Modeling user behavior and costs in AI-assisted programming. ArXiv (2022). https://doi.org/10.48550/ARXIV.2210.14306

[54] Ambar Murillo và Sarah D'Angelo. 2023. An Engineering Perspective on Writing Assistants for Productivity and Creative Code. The Second Workshop on Intelligent and Interactive Writing Assistants (2023). https://cdn.glitch.global/d058c114-3406-43be-8a3c-d3afff35eda2/paper1_2023.pdf

[55] Laurie Murphy, Sue Fitzgerald, Brian Hanks, và Renée McCauley. 2010. Pair debugging: a transactive discourse analysis. In Proceedings of the Sixth international workshop on Computing education research (Aarhus, Denmark) (ICER '10). Association for Computing Machinery, New York, NY, USA, 51–58. https://doi.org/10.1145/1839594.1839604

[56] Brad A Myers, Amy J Ko, Thomas D LaToza, và Youngseok Yoon. 2016. Programmers are users too: Human-centered methods for improving programming tools. Computer 49, 7 (July 2016), 44–52. https://doi.org/10.1109/MC.2016.200

[57] Nachiappan Nagappan, Laurie Williams, Miriam Ferzli, Eric Wiebe, Kai Yang, Carol Miller, và Suzanne Balik. 2003. Improving the CS1 experience with pair programming. In Proceedings of the 34th SIGCSE technical symposium on Computer science education (Reno Navada USA). ACM, New York, NY, USA. https://doi.org/10.1145/611892.612006

[58] N Nguyen và Sarah Nadi. 2022. An Empirical Evaluation of GitHub Copilot's Code Suggestions. 2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR) (2022). https://doi.org/10.1145/3524842.3528470

[59] Amy Ogan, Samantha Finkelstein, Elijah Mayfield, Claudia D'Adamo, Noboru Matsuda, và Justine Cassell. 2012. "Oh dear stacy!": social interaction, elaboration, and learning with teachable agents. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (Austin, Texas, USA) (CHI '12). Association for Computing Machinery, New York, NY, USA, 39–48. https://doi.org/10.1145/2207676.2207684

[60] Venkata Vinod Kumar Padmanabhuni, Hari Praveen Tadiparthi, và Sagar Madina Muralidhar Yanamadala. 2012. Effective pair programming practice-an experimental study. Journal of Emerging Trends in Computing and Information Sciences 3, 4 (2012), 471–479. http://www.agilemethod.csie.ncu.edu.tw/agileMethod/download/2012papers/2012%20Effective%20Pair%20Programming%20Practice-%20An%20Experimental%20Study/Effective%20Pair%20Programming%20Practice-%20An%20Experimental%20Study.pdf

[61] Zachary A Pardos và Shreya Bhandari. 2023. Learning gain differences between ChatGPT and human tutor generated algebra hints. (Feb. 2023). arXiv:2302.06871 [cs.CY] http://arxiv.org/abs/2302.06871

[62] Hammond Pearce, Baleegh Ahmad, Benjamin Tan, Brendan Dolan-Gavitt, và Ramesh Karri. 2021. Asleep at the Keyboard? Assessing the Security of GitHub Copilot's Code Contributions. (Aug. 2021). arXiv:2108.09293 [cs.CR] http://arxiv.org/abs/2108.09293

[63] Sida Peng, Eirini Kalliamvakou, Peter Cihon, và Mert Demirer. 2023. The Impact of AI on Developer Productivity: Evidence from GitHub Copilot. (Feb. 2023). arXiv:2302.06590 [cs.SE] http://arxiv.org/abs/2302.06590

[64] Michael Perscheid, Benjamin Siegmund, Marcel Taeumel, và Robert Hirschfeld. 2017. Studying the advancement in debugging practice of professional software developers. Software Quality Journal 25, 1 (March 2017), 83–110. https://doi.org/10.1007/s11219-015-9294-2

[65] Laura Plonka, Judith Segal, Helen Sharp, và Janet van der Linden. 2011. Collaboration in Pair Programming: Driving and Switching. In Agile Processes in Software Engineering and Extreme Programming - 12th International Conference, XP 2011, Madrid, Spain, May 10-13, 2011. Proceedings, Vol. 77. unknown, 43–59. https://doi.org/10.1007/978-3-642-20677-1_4

[66] James Prather, Brent N Reeves, Paul Denny, Brett A Becker, Juho Leinonen, Andrew Luxton-Reilly, Garrett Powell, James Finnie-Ansley, và Eddie Antonio Santos. 2023. "It's Weird That it Knows What I Want": Usability and Interactions with Copilot for Novice Programmers. (April 2023). arXiv:2304.02491 [cs.HC] http://arxiv.org/abs/2304.02491

[67] David Preston. 2006. Using collaborative learning research to enhance pair programming pedagogy. SIGITE Newsl. 3, 1 (Jan. 2006), 16–21. https://doi.org/10.1145/1113378.1113381

[68] Ben Puryear và Gina Sprint. 2022. Github copilot in the classroom: learning to code with AI assistance. J. Comput. Sci. Coll. 38, 1 (Dec. 2022), 37–47. https://dl.acm.org/doi/pdf/10.5555/3575618.3575622

[69] Peter Robe và Sandeep Kaur Kuttal. 2022. Designing PairBuddy—A Conversational Agent for Pair Programming. ACM Trans. Comput.-Hum. Interact. 29, 4 (May 2022), 1–44. https://doi.org/10.1145/3498326

[70] Norsaremah Salleh, Emilia Mendes, và John Grundy. 2011. Empirical Studies of Pair Programming for CS/SE Teaching in Higher Education: A Systematic Literature Review. IEEE Trans. Software Eng. 37, 4 (July 2011), 509–525. https://doi.org/10.1109/TSE.2010.59

[71] S Sankaranarayanan, S R Kandimalla, S Hasan, và others. 2020. Agent-in-the-loop: Conversational agent support in service of reflection for learning during collaborative programming. Artif. Intell. (2020). https://link.springer.com/chapter/10.1007/978-3-030-52240-7_50

[72] Advait Sarkar, Andrew D Gordon, Carina Negreanu, Christian Poelitz, Sruti Srinivasa Ragavan, và Ben Zorn. 2022. What is it like to program with artificial intelligence? (Aug. 2022). arXiv:2208.06213 [cs.HC] http://arxiv.org/abs/2208.06213

[73] Noah L Schroeder, Olusola O Adesope, và Rachel Barouch Gilbert. 2013. How Effective are Pedagogical Agents for Learning? A Meta-Analytic Review. Journal of Educational Computing Research 49, 1 (July 2013), 1–39. https://doi.org/10.2190/EC.49.1.a

[74] Ben Shneiderman và Pattie Maes. 1997. Direct manipulation vs. interface agents. Interactions 4, 6 (Nov. 1997), 42–61. https://doi.org/10.1145/267505.267514

[75] Alberto Sillitti, Giancarlo Succi, và Jelena Vlasenko. 2012. Understanding the impact of Pair Programming on developers attention: A case study on a large industrial experimentation. In 2012 34th International Conference on Software Engineering (ICSE) (Zurich). IEEE, 1094–1101. https://doi.org/10.1109/ICSE.2012.6227110

[76] Raymund Sison. 2009. Investigating the Effect of Pair Programming and Software Size on Software Quality and Programmer Productivity. In 2009 16th Asia-Pacific Software Engineering Conference. 187–193. https://doi.org/10.1109/APSEC.2009.71

[77] Joanna Smith, Joe Tessler, Elliot Kramer, và Calvin Lin. 2012. Using peer review to teach software testing. In Proceedings of the ninth annual international conference on International computing education research (Auckland, New Zealand) (ICER '12). Association for Computing Machinery, New York, NY, USA, 93–98. https://doi.org/10.1145/2361276.2361295

[78] Shashank Sonkar, Lucy Liu, Debshila Basu Mallick, và Richard G Baraniuk. 2023. CLASS Meet SPOCK: An Education Tutoring Chatbot based on Learning Science Principles. (May 2023). arXiv:2305.13272 [cs.CL] http://arxiv.org/abs/2305.13272

[79] W Sun và G Marakas. 2009. The True Cost of Pair Programming: Development of a Comprehensive Model and Test. Americas Conference on Information Systems (2009). https://www.semanticscholar.org/paper/647fc48650e4f19962c8a6feb87f3bdedde9dd04

[80] Chenhao Tan. 2023. On AI Anthropomorphism - Human-Centered AI - Medium. https://medium.com/human-centered-ai/on-ai-anthropomorphism-abff4cecc5ae. https://medium.com/human-centered-ai/on-ai-anthropomorphism-abff4cecc5ae Accessed: 2023-4-23.

[81] Lynda Thomas, Mark Ratcliffe, và Ann Robertson. 2003. Code warriors and code-a-phobes: a study in attitude and pair programming. SIGCSE Bull. 35, 1 (Jan. 2003), 363–367. https://doi.org/10.1145/792548.612007

[82] H Holden Thorp. 2023. ChatGPT is fun, but not an author. Science 379, 6630 (Jan. 2023), 313. https://doi.org/10.1126/science.adg7879

[83] Karthikeyan Umapathy và Albert D Ritzhaupt. 2017. A Meta-Analysis of Pair-Programming in Computer Programming Courses: Implications for Educational Practice. ACM Trans. Comput. Educ. 17, 4 (Aug. 2017), 1–13. https://doi.org/10.1145/2996201

[84] Priyan Vaithilingam, Tianyi Zhang, và Elena L Glassman. 2022. Expectation vs. Experience: Evaluating the Usability of Code Generation Tools Powered by Large Language Models. In Extended Abstracts of the 2022 CHI Conference on Human Factors in Computing Systems (New Orleans, LA, USA) (CHI EA '22, Article 332). Association for Computing Machinery, New York, NY, USA, 1–7. https://doi.org/10.1145/3491101.3519665

[85] Zichao Wang, Jakob Valdez, Debshila Basu Mallick, và Richard G Baraniuk. 2022. Towards Human-Like Educational Question Generation with Large Language Models. In Artificial Intelligence in Education. Springer International Publishing, 153–166. https://doi.org/10.1007/978-3-031-11644-5_13

[86] Laurie Williams và Richard L Upchurch. 2001. In support of student pair-programming. In Proceedings of the thirty-second SIGCSE technical symposium on Computer Science Education (Charlotte North Carolina USA). ACM, New York, NY, USA. https://doi.org/10.1145/364447.364614

[87] Laurie Williams, Eric Wiebe, Kai Yang, Miriam Ferzli, và Carol Miller. 2002. In support of pair programming in the introductory computer science course. Comput. Sci. Educ. 12, 3 (Sept. 2002), 197–212. https://doi.org/10.1076/csed.12.3.197.8618

[88] Dakota Wong, Austin Kothig, và Patrick Lam. 2022. Exploring the Verifiability of Code Generated by GitHub Copilot. ACM on Programming Languages (2022). https://www.semanticscholar.org/paper/b5051fedaf17836f6b2a042cc4af4155159795c5

[89] Burak Yetiştiren, Işik Özsoy, và Eray Tüzün. 2022. Assessing the Quality of GitHub Copilot's Code Generation. In 18th International Conference on Predictive Models and Data Analytics in Software Engineering (PROMISE '22). https://doi.org/10.1145/3558489.3559072

[90] Albert Ziegler, Eirini Kalliamvakou, X Alice Li, Andrew Rice, Devon Rifkin, Shawn Simister, Ganesh Sittampalam, và Edward Aftandilian. 2022. Productivity assessment of neural code completion. In Proceedings of the 6th ACM SIGPLAN International Symposium on Machine Programming (San Diego CA USA). ACM, New York, NY, USA. https://doi.org/10.1145/3520312.3534864
