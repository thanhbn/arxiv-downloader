# Tận dụng các Mô hình Ngôn ngữ Lớn để Cải thiện Kiểm thử REST API

Myeongsoo Kim
Viện Công nghệ Georgia
Atlanta, Georgia, Hoa Kỳ
mkim754@gatech.edu

Tyler Stennett
Viện Công nghệ Georgia
Atlanta, Georgia, Hoa Kỳ
tstennett3@gatech.edu

Dhruv Shah
Viện Công nghệ Georgia
Atlanta, Georgia, Hoa Kỳ
dshah374@gatech.edu

Saurabh Sinha
IBM Research
Yorktown Heights, New York, Hoa Kỳ
sinhas@us.ibm.com

Alessandro Orso
Viện Công nghệ Georgia
Atlanta, Georgia, Hoa Kỳ
orso@cc.gatech.edu

TÓM TẮT
Việc áp dụng rộng rãi các REST API, cùng với độ phức tạp và quy mô ngày càng tăng của chúng, đã dẫn đến nhu cầu về các công cụ kiểm thử REST API tự động. Các công cụ hiện tại tập trung vào dữ liệu có cấu trúc trong các đặc tả REST API nhưng thường bỏ qua những hiểu biết có giá trị có sẵn trong các mô tả ngôn ngữ tự nhiên không có cấu trúc trong các đặc tả, điều này dẫn đến phạm vi kiểm thử không tối ưu. Gần đây, để giải quyết khoảng trống này, các nhà nghiên cứu đã phát triển các kỹ thuật trích xuất quy tắc từ những mô tả có thể đọc được bằng con người này và truy vấn các cơ sở tri thức để rút ra các giá trị đầu vào có ý nghĩa. Tuy nhiên, những kỹ thuật này bị hạn chế trong các loại quy tắc mà chúng có thể trích xuất và có xu hướng tạo ra kết quả không chính xác. Bài báo này trình bày RESTGPT, một phương pháp tinh tế tận dụng sức mạnh và khả năng nhận thức bối cảnh nội tại của các Mô hình Ngôn ngữ Lớn (LLM) để cải thiện kiểm thử REST API. RESTGPT nhận vào một đặc tả API, trích xuất các quy tắc có thể diễn giải bằng máy, và tạo ra các giá trị tham số ví dụ từ các mô tả ngôn ngữ tự nhiên trong đặc tả. Sau đó nó bổ sung đặc tả gốc với những quy tắc và giá trị này. Các đánh giá của chúng tôi chỉ ra rằng RESTGPT vượt trội hơn các kỹ thuật hiện có trong cả trích xuất quy tắc và tạo giá trị. Với những kết quả hứa hẹn này, chúng tôi phác thảo các hướng nghiên cứu tương lai để tiến bộ kiểm thử REST API thông qua LLM.

KHÁI NIỆM CCS
• Hệ thống thông tin → Dịch vụ web RESTful; • Phần mềm và kỹ thuật phần mềm → Kiểm thử và gỡ lỗi phần mềm.

TỪ KHÓA
Mô hình Ngôn ngữ Lớn cho Kiểm thử, Phân tích Đặc tả OpenAPI

1 GIỚI THIỆU

Trong kỷ nguyên số hóa ngày nay, các ứng dụng web và hệ thống dựa trên đám mây đã trở nên phổ biến, khiến các Giao diện Lập trình Ứng dụng (API) REpresentational State Transfer (REST) trở thành những yếu tố then chốt trong phát triển phần mềm [29]. Các REST API cho phép các hệ thống khác nhau giao tiếp và trao đổi dữ liệu một cách liền mạch, tạo điều kiện thuận lợi cho việc tích hợp một loạt các dịch vụ và chức năng [11]. Khi tính phức tạp và sự phổ biến của chúng tăng lên, việc kiểm thử hiệu quả các REST API đã nổi lên như một thách thức đáng kể [12, 19, 40].

Các công cụ kiểm thử REST API tự động (ví dụ: [3,5,6,9,14–16,18,20,22,39]) chủ yếu tạo ra các trường hợp kiểm thử từ các đặc tả API [2,23,25,34]. Khó khăn của chúng trong việc đạt được độ bao phủ mã cao [19] thường xuất phát từ những khó khăn trong việc hiểu ngữ nghĩa và các ràng buộc có mặt trong tên tham số và mô tả [1,17,19]. Để giải quyết những vấn đề này, các công cụ hỗ trợ đã được phát triển. Những công cụ này tận dụng Xử lý Ngôn ngữ Tự nhiên (NLP) để trích xuất các ràng buộc từ mô tả tham số [17] và truy vấn tên tham số đối với các cơ sở dữ liệu [1], chẳng hạn như DBPedia [7]. Tuy nhiên, đạt được độ chính xác cao vẫn là một thách thức đáng kể đối với những công cụ này. Hơn nữa, chúng bị hạn chế trong các loại và độ phức tạp của quy tắc mà chúng có thể trích xuất.

Bài báo này giới thiệu RESTGPT, một phương pháp mới tận dụng các Mô hình Ngôn ngữ Lớn (LLM) để nâng cao các đặc tả REST API bằng cách xác định các ràng buộc và tạo ra các giá trị tham số liên quan. Với một Đặc tả OpenAPI [25], RESTGPT bổ sung nó bằng cách rút ra các ràng buộc và giá trị ví dụ. Các phương pháp hiện có như NLP2REST [17] yêu cầu một quá trình xác thực để cải thiện độ chính xác, bao gồm không chỉ việc trích xuất các ràng buộc mà còn thực hiện các yêu cầu đối với các API để kiểm tra động những ràng buộc này. Một quá trình như vậy đòi hỏi nỗ lực kỹ thuật đáng kể và một thể hiện dịch vụ được triển khai, khiến nó trở nên cồng kềnh và tốn thời gian. Ngược lại, RESTGPT đạt được độ chính xác cao hơn mà không cần xác thực đắt đỏ. Hơn nữa, không giống như ARTE [1], RESTGPT xuất sắc trong việc hiểu bối cảnh của một tên tham số dựa trên phân tích mô tả tham số, do đó tạo ra các giá trị liên quan đến bối cảnh hơn.

Kết quả sơ bộ của chúng tôi chứng minh lợi thế đáng kể của phương pháp chúng tôi so với các công cụ hiện có. So với NLP2REST không có mô-đun xác thực, phương pháp của chúng tôi cải thiện độ chính xác từ 50% lên 97%. Thậm chí khi so sánh với NLP2REST được trang bị mô-đun xác thực, phương pháp của chúng tôi vẫn tăng độ chính xác từ 79% lên 97%. Ngoài ra, RESTGPT thành công tạo ra các đầu vào hợp lệ cả về mặt cú pháp và ngữ nghĩa cho 73% các tham số trên các dịch vụ và hoạt động được phân tích, một cải thiện đáng kể so với ARTE, chỉ có thể tạo ra các đầu vào hợp lệ cho 17% các tham số. Với những kết quả khuyến khích này, chúng tôi phác thảo một số hướng nghiên cứu để tận dụng LLM theo những cách khác nhằm nâng cao thêm kiểm thử REST API.

2 BỐI CẢNH VÀ VÍ DỤ TẠO ĐỘNG LỰC

2.1 REST API và Đặc tả OpenAPI

REST API là các giao diện được xây dựng trên các nguyên tắc của Representational State Transfer (REST), một mô hình thiết kế cho các ứng dụng mạng [11]. Được thiết kế cho web, REST API tạo điều kiện trao đổi dữ liệu giữa client và server thông qua các endpoint được xác định trước chủ yếu sử dụng giao thức HTTP [30,35]. Mỗi tương tác client có thể bao gồm header và payload, trong khi phản hồi tương ứng thường chứa header, nội dung, và một mã trạng thái HTTP chỉ ra kết quả.

Đặc tả OpenAPI (OAS) [25] có thể được coi là tiêu chuẩn ngành để định nghĩa các giao diện RESTful API. Nó mang lại lợi thế về khả năng đọc được bằng máy, hỗ trợ các quy trình tự động hóa, đồng thời cũng trình bày thông tin ở định dạng rõ ràng, có thể đọc được bằng con người. Các tính năng chính của OAS bao gồm việc định nghĩa các endpoint, các phương thức HTTP liên quan, các tham số đầu vào mong đợi, và các phản hồi có thể có. Như một ví dụ, Hình 1 hiển thị một phần của đặc tả API của FDIC Bank Data. Phần này của đặc tả minh họa cách một người có thể truy vấn thông tin về các tổ chức. Nó cũng chi tiết một phản hồi mong đợi, chẳng hạn như mã trạng thái 200, cho biết một tình huống được xử lý thành công.

2.2 Kiểm thử REST API và Công cụ Hỗ trợ

Các công cụ kiểm thử REST API tự động [5,6,9,14–16,18,20,22,39] tạo ra các trường hợp kiểm thử từ các đặc tả được chấp nhận rộng rãi, chủ yếu là OpenAPI [25]. Tuy nhiên, những công cụ này thường gặp khó khăn trong việc đạt được độ bao phủ toàn diện [19]. Một lý do quan trọng cho điều này là khả năng không thể diễn giải các phần có thể đọc được bằng con người của đặc tả [17,19]. Đối với các tham số như filters và sort_order được hiển thị trong Hình 1, các công cụ kiểm thử có xu hướng tạo ra các giá trị chuỗi ngẫu nhiên, thường không phải là đầu vào hợp lệ cho những tham số như vậy.

Để đáp ứng những thách thức này, các công cụ hỗ trợ đã được giới thiệu để nâng cao khả năng của những công cụ kiểm thử này. Ví dụ, ARTE [1] khai thác DBPedia [7] để tạo ra các giá trị ví dụ tham số liên quan. Tương tự, NLP2REST áp dụng xử lý ngôn ngữ tự nhiên để trích xuất các giá trị ví dụ và ràng buộc từ các phần văn bản mô tả của đặc tả [17].

2.3 Mô hình Ngôn ngữ Lớn

Các Mô hình Ngôn ngữ Lớn (LLM) [13,24,36] đại diện cho một bước nhảy vọt mang tính chuyển đổi trong các lĩnh vực xử lý ngôn ngữ tự nhiên (NLP) và Machine Learning. Được đặc trưng bởi kích thước khổng lồ của chúng, thường chứa hàng tỷ tham số, những mô hình này được huấn luyện trên các kho văn bản khổng lồ để tạo ra, hiểu, và thao tác văn bản giống con người [28]. Kiến trúc đằng sau LLM chủ yếu là các thiết kế dựa trên transformer [37]. Các mô hình nổi bật dựa trên kiến trúc này bao gồm GPT (Generative Pre-trained Transformer) [27], được thiết kế chủ yếu để tạo văn bản, và BERT (Bidirectional Encoder Representations from Transformers) [10], xuất sắc trong việc hiểu bối cảnh. Những mô hình này nắm bắt các sắc thái ngôn ngữ phức tạp và bối cảnh ngữ nghĩa, khiến chúng thành thạo trong một loạt các tác vụ từ tạo văn bản đến trả lời câu hỏi.

2.4 Ví dụ Tạo Động lực

Đặc tả OpenAPI cho API của Federal Deposit Insurance Corporation (FDIC) Bank Data, được hiển thị trong Hình 1, phục vụ để cung cấp hiểu biết về dữ liệu ngân hàng. Sử dụng ví dụ này, chúng tôi làm nổi bật những thách thức trong việc tạo giá trị tham số mà các công cụ hỗ trợ kiểm thử REST API hiện tại gặp phải và minh họa cách RESTGPT giải quyết những thách thức này.

(1) Tham số filters: Mặc dù mô tả cung cấp hướng dẫn về cách tham số nên được sử dụng, sự phụ thuộc của ARTE vào DBPedia dẫn đến không có việc tạo giá trị liên quan nào cho filters. NLP2REST, với việc trích xuất theo từ khóa, xác định các ví dụ từ mô tả, đặc biệt được hỗ trợ bởi thuật ngữ "example". Do đó, các mẫu như STNAME: "West Virginia" và STNAME: ("West Virginia", "Delaware") được nắm bắt chính xác.

(2) Tham số sort_order: Ở đây, cả hai công cụ đều thể hiện những hạn chế. ARTE, trong khi truy vấn DBPedia, lấy các giá trị không liên quan như "List of colonial heads of Portuguese Timor", làm nổi bật sự không phù hợp về bối cảnh của nó. Trong trường hợp không có từ khóa có thể xác định, NLP2REST thất bại trong việc xác định "ASC" hoặc "DESC" như những giá trị tiềm năng.

Ngược lại với những công cụ này, RESTGPT hiệu quả hơn nhiều: với sự hiểu biết ngữ nghĩa sâu sắc hơn, RESTGPT chính xác nhận ra rằng tham số filters được bối cảnh hóa xung quanh tên bang gắn với hồ sơ ngân hàng, và tạo ra các giá trị kiểm thử như STNAME: "California" và các bộ lọc đa bang như STNAME: ("California", "New York"). Ngoài ra, nó thành công xác định các giá trị "ASC" hoặc "DESC" từ mô tả của tham số sort_order. Ví dụ này minh họa sự hiểu biết bối cảnh vượt trội của RESTGPT, cho phép nó vượt trội hơn các phương pháp hạn chế hoặc mù bối cảnh của các công cụ hiện có.

3 PHƯƠNG PHÁP CỦA CHÚNG TÔI

3.1 Tổng quan

Hình 2 minh họa quy trình làm việc của RESTGPT, bắt đầu bằng việc phân tích đặc tả OpenAPI đầu vào. Trong giai đoạn này, cả các phần có thể đọc được bằng máy và bằng con người của mỗi tham số đều được xác định. Các phần có thể đọc được bằng con người cung cấp hiểu biết về bốn loại ràng buộc: ràng buộc hoạt động, ràng buộc tham số, loại và định dạng tham số, và ví dụ tham số [17].

Bộ Tạo Quy tắc, sử dụng một tập hợp các prompt được thiết kế, trích xuất bốn quy tắc này. Chúng tôi đã chọn GPT-3.5 Turbo làm LLM cho công việc này, do độ chính xác và hiệu quả của nó, như được làm nổi bật trong một báo cáo gần đây của OpenAI [24]. Việc bao gồm học few-shot càng tinh chỉnh đầu ra của mô hình. Bằng cách cung cấp cho LLM các hướng dẫn ngắn gọn, phong phú bối cảnh và ví dụ, các prompt few-shot đảm bảo rằng các đầu ra được tạo ra vừa liên quan vừa chính xác [8,21].

Cuối cùng, RESTGPT kết hợp các quy tắc được tạo ra với đặc tả gốc để tạo ra một đặc tả nâng cao.

3.2 Bộ Tạo Quy tắc

Để hướng dẫn tốt nhất mô hình về diễn giải quy tắc và định dạng đầu ra, các prompt của chúng tôi được thiết kế xung quanh bốn thành phần cốt lõi: hướng dẫn, trường hợp, điểm nổi bật ngữ pháp, và cấu hình đầu ra.

Hướng dẫn
1. Xác định tham số bằng tên và mô tả của nó.
2. Trích xuất các ràng buộc logic từ mô tả tham số, tuân thủ nghiêm ngặt định dạng được cung cấp.
3. Diễn giải mô tả theo cách ít ràng buộc nhất.

Các hướng dẫn được cung cấp phục vụ như các chỉ dẫn cơ bản cho mô hình, định hình quan điểm của nó và làm rõ các mục tiêu chính của nó. Sử dụng các hướng dẫn làm cơ sở, RESTGPT sau đó có thể tiếp tục với việc prompting cụ thể hơn.

Trường hợp
Trường hợp 1: Nếu mô tả không xác định về yêu cầu tham số: Đầu ra "None".
...
Trường hợp 10: Đối với mối quan hệ phức tạp giữa các tham số: Kết hợp các quy tắc từ ngữ pháp.

Việc triển khai các trường hợp trong prompting mô hình đóng vai trò quan trọng trong việc hướng dẫn hành vi của mô hình, đảm bảo rằng nó tuân thủ các tiêu chí chính xác như được mô tả trong ví dụ. Lấy cảm hứng từ prompting Chain-of-Thought [38], chúng tôi phân tách việc trích xuất quy tắc thành các mảnh cụ thể, có thể quản lý để giảm thiểu sự mơ hồ và do đó, cải thiện khả năng xử lý của mô hình.

Điểm nổi bật Ngữ pháp
Toán tử Quan hệ: '<', '>', '<=', '>=', '==', '!='
Toán tử Số học: '+', '−', '∗', '/'
Toán tử Phụ thuộc: 'AllOrNone', 'ZeroOrOne', ...

Các Điểm nổi bật Ngữ pháp nhấn mạnh các toán tử và từ vựng chính mà mô hình nên nhận biết và sử dụng trong quá trình trích xuất quy tắc. Bằng cách cung cấp cho mô hình một ngôn ngữ cụ thể bối cảnh cơ bản, RESTGPT xác định các quy tắc trong văn bản.

Cấu hình Đầu ra
Ví dụ Ràng buộc Tham số: min [minimum], max [maximum], default [default]
Ví dụ Định dạng Tham số: type [type], items [item type], format [format], collectionFormat [collectionFormat]

Sau khi hướng dẫn mô hình thông qua quá trình trích xuất quy tắc thông qua prompting cụ thể, cuối cùng chúng tôi định nghĩa định dạng đầu ra để biên dịch các phát hiện của mô hình thành một cấu trúc đơn giản cho việc xử lý tiếp theo.

Ngoài ra, Bộ Tạo Quy tắc cũng giám sát quá trình tạo giá trị, được thực hiện trong quá trình trích xuất các quy tắc ví dụ tham số. Artifact của chúng tôi [31,32] cung cấp chi tiết về tất cả các prompt và kết quả tương ứng của chúng.

3.3 Nâng cao Đặc tả

Mục tiêu chính của RESTGPT là cải thiện hiệu quả của các công cụ kiểm thử REST API. Chúng tôi thực hiện điều này bằng cách tạo ra các đặc tả OpenAPI nâng cao, được bổ sung với các quy tắc rút ra từ các mô tả ngôn ngữ tự nhiên có thể đọc được bằng con người kết hợp với các từ khóa OpenAPI có thể đọc được bằng máy [33].

Như minh họa trong Hình 2, giai đoạn Phân tích Đặc tả trích xuất các thành phần có thể đọc được bằng máy và bằng con người từ đặc tả API. Sau khi các quy tắc từ đầu vào ngôn ngữ tự nhiên đã được xác định bởi Bộ Tạo Quy tắc, giai đoạn Xây dựng Đặc tả bắt đầu. Trong giai đoạn này, các đầu ra từ mô hình được xử lý và kết hợp với các thành phần có thể đọc được bằng máy, đảm bảo rằng không có xung đột nào giữa các hạn chế. Ví dụ, đặc tả kết quả phải có thuộc tính style chỉ khi kiểu dữ liệu là array hoặc object. Kết quả cuối cùng là một đặc tả API được làm giàu có chứa các ràng buộc, ví dụ, và quy tắc được trích xuất từ các mô tả có thể đọc được bằng con người.

4 KẾT QUẢ SƠ BỘ

4.1 Phương pháp Đánh giá

Chúng tôi đã thu thập chín dịch vụ RESTful từ nghiên cứu NLP2REST. Động lực đằng sau việc lựa chọn này là sự có sẵn của ground truth về các quy tắc được trích xuất trong công việc NLP2REST [17]. Có dữ liệu này, chúng tôi có thể dễ dàng so sánh công việc của chúng tôi với NLP2REST.

Để thiết lập một điểm chuẩn toàn diện, chúng tôi cũng kết hợp so sánh với ARTE. Phương pháp của chúng tôi được hướng dẫn bởi bài báo ARTE, từ đó chúng tôi trích xuất các chỉ số cần thiết để so sánh. Tuân thủ cách phân loại giá trị đầu vào của ARTE là Hợp lệ Cú pháp và Hợp lệ Ngữ nghĩa [1], hai tác giả đã tỉ mỉ xác minh các giá trị đầu vào được tạo ra bởi RESTGPT và ARTE. Đáng chú ý, chúng tôi mô phỏng phương pháp của ARTE trong các tình huống khi có hơn mười giá trị được tạo ra bằng cách chọn ngẫu nhiên mười từ nhóm để phân tích.

4.2 Kết quả và Thảo luận

Bảng 1 trình bày so sánh về khả năng trích xuất quy tắc của NLP2REST và RESTGPT. RESTGPT xuất sắc về độ chính xác, recall, và điểm F1 trên đa số các dịch vụ REST. NLP2REST, mặc dù hiệu quả, phụ thuộc vào một quá trình xác thực liên quan đến việc đánh giá phản hồi server để lọc ra các quy tắc không thành công. Phương pháp này đòi hỏi nỗ lực kỹ thuật, và hiệu quả của nó bị hạn chế bởi hiệu suất của validator.

Ngược lại, RESTGPT loại bỏ hoàn toàn nhu cầu xác thực như vậy với độ chính xác cao của nó. Đáng ấn tượng, độ chính xác 97% của RESTGPT vượt trội thậm chí cả độ chính xác của NLP2REST sau xác thực, đứng ở 79%. Điều này nhấn mạnh rằng RESTGPT có thể mang lại kết quả vượt trội mà không cần giai đoạn xác thực. Kết quả này cho thấy khả năng vượt trội của LLM trong việc phát hiện quy tắc tinh tế, không giống như các kỹ thuật NLP thông thường phụ thuộc nhiều vào các từ khóa cụ thể.

Hơn nữa, Bảng 2 trình bày dữ liệu về độ chính xác của ARTE và RESTGPT. Dữ liệu vẽ nên một bức tranh rõ ràng: RESTGPT liên tục đạt được độ chính xác cao hơn ARTE trên tất cả các dịch vụ. Điều này có thể được quy cho khả năng nhận thức bối cảnh của LLM, như đã thảo luận trong Phần 2. Ví dụ, trong dịch vụ language-tool, chúng tôi thấy rằng, đối với tham số language, ARTE tạo ra các giá trị như "Arabic", "Chinese", "English", và "Spanish". Tuy nhiên, RESTGPT hiểu bối cảnh của tham số language, và tạo ra mã ngôn ngữ như "en-US" và "de-DE".

5 KẾ HOẠCH TƯƠNG LAI

Với kết quả khuyến khích của chúng tôi về trích xuất quy tắc dựa trên LLM, chúng tôi tiếp theo phác thảo một số hướng nghiên cứu mà chúng tôi dự định theo đuổi trong việc tận dụng LLM để cải thiện kiểm thử REST API một cách rộng rãi hơn.

Cải thiện Mô hình. Có hai cách mà chúng tôi dự định tạo ra các mô hình cải thiện để hỗ trợ kiểm thử REST API. Đầu tiên, chúng tôi sẽ thực hiện fine-tuning cụ thể tác vụ của LLM sử dụng dữ liệu từ APIs-guru [4] và RapidAPI [26], chứa hàng nghìn đặc tả API thế giới thực. Chúng tôi sẽ fine-tune RESTGPT với những bộ dữ liệu này, điều này sẽ nâng cao khả năng của mô hình để hiểu các bối cảnh và sắc thái API đa dạng. Chúng tôi tin rằng việc tinh chỉnh dựa trên bộ dữ liệu này sẽ giúp RESTGPT hiểu một phổ rộng hơn các đặc tả và tạo ra các đề xuất kiểm thử thậm chí chính xác hơn. Thứ hai, chúng tôi sẽ tập trung vào việc tạo ra các mô hình nhẹ để hỗ trợ kiểm thử REST API, sao cho các mô hình không cần tài nguyên tính toán đắt đỏ và có thể được triển khai trên CPU thông thường. Để đạt được mục tiêu này, chúng tôi sẽ khám phá các phương pháp để cắt giảm mô hình, tập trung vào việc giữ lại các neuron và layer thiết yếu quan trọng cho tác vụ của chúng tôi.

Cải thiện phát hiện lỗi. RESTGPT hiện tại bị hạn chế trong việc phát hiện các lỗi biểu hiện như mã phản hồi server 500. Bằng cách tận dụng LLM, chúng tôi có ý định mở rộng các loại bug có thể được phát hiện, chẳng hạn như bug liên quan đến lỗi ngữ nghĩa CRUD hoặc sự không phù hợp trong mối quan hệ producer-consumer. Bằng cách nâng cao khả năng tìm lỗi của RESTGPT theo cách này, chúng tôi nhằm mục đích làm cho kiểm thử REST API tự động hiệu quả hơn và hữu ích hơn trong thực tế.

Phương pháp Kiểm thử dựa trên LLM. Chúng tôi nhằm mục đích phát triển một công cụ kiểm thử REST API tận dụng các thông điệp server. Mặc dù các thông điệp server thường chứa thông tin có giá trị, các công cụ kiểm thử hiện tại thất bại trong việc tận dụng thông tin này [17]. Ví dụ, nếu một gợi ý server đề xuất tạo ra một yêu cầu hợp lệ cụ thể, RESTGPT, với sự hiểu biết ngữ nghĩa của nó, có thể tự động tạo ra các kiểm thử liên quan. Điều này sẽ không chỉ nâng cao quá trình kiểm thử mà còn đảm bảo rằng các lỗ hổng tiềm năng mà các thông điệp server có thể chỉ ra sẽ không bị bỏ qua.

LỜI CẢM ÖN

Công việc này được hỗ trợ một phần bởi NSF, theo grant CCF-0725202, DOE, theo hợp đồng DE-FOA-0002460, và những tặng phẩm từ Facebook, Google, IBM Research, và Microsoft Research.

TÀI LIỆU THAM KHẢO

[1] J. C. Alonso, A. Martin-Lopez, S. Segura, J. Garcia, và A. Ruiz-Cortes. 2023. ARTE: Automated Generation of Realistic Test Inputs for Web APIs. IEEE Transactions on Software Engineering 49, 01 (jan 2023), 348–363. https://doi.org/10.1109/TSE.2022.3150618

[2] API Blueprint. 2023. API Blueprint. https://apiblueprint.org/

[3] Apiary. 2023. Dredd. https://github.com/apiaryio/dredd

[4] APIs.guru. 2023. APIs-guru. https://apis.guru/

[5] Andrea Arcuri. 2019. RESTful API Automated Test Case Generation with EvoMaster. ACM Transactions on Software Engineering and Methodology (TOSEM) 28, 1, Article 3 (jan 2019), 37 pages. https://doi.org/10.1145/3293455

[6] Vaggelis Atlidakis, Patrice Godefroid, và Marina Polishchuk. 2019. RESTler: Stateful REST API Fuzzing. In Proceedings of the 41st International Conference on Software Engineering (Montreal, Quebec, Canada) (ICSE '19). IEEE Press, Piscataway, NJ, USA, 748–758. https://doi.org/10.1109/ICSE.2019.00083

[7] Christian Bizer, Jens Lehmann, Georgi Kobilarov, Sören Auer, Christian Becker, Richard Cyganiak, và Sebastian Hellmann. 2009. Dbpedia-a crystallization point for the web of data. Journal of web semantics 7, 3 (2009), 154–165.

[8] Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. 2020. Language models are few-shot learners. Advances in neural information processing systems 33 (2020), 1877–1901.

[9] Davide Corradini, Amedeo Zampieri, Michele Pasqua, Emanuele Viglianisi, Michael Dallago, và Mariano Ceccato. 2022. Automated black-box testing of nominal and error scenarios in RESTful APIs. Software Testing, Verification and Reliability 32 (01 2022). https://doi.org/10.1002/stvr.1808

[10] Jacob Devlin, Ming-Wei Chang, Kenton Lee, và Kristina Toutanova. 2019. BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding. arXiv:1810.04805 [cs.CL]

[11] Roy Thomas Fielding. 2000. Architectural Styles and the Design of Network-Based Software Architectures. Ph. D. Dissertation. University of California, Irvine.

[12] Amid Golmohammadi, Man Zhang, và Andrea Arcuri. 2023. Testing RESTful APIs: A Survey. ACM Trans. Softw. Eng. Methodol. 33, 1, Article 27 (nov 2023), 41 pages. https://doi.org/10.1145/3617175

[13] Google. 2023. Google Bard. https://bard.google.com/

[14] Zac Hatfield-Dodds và Dmitry Dygalo. 2022. Deriving Semantics-Aware Fuzzers from Web API Schemas. In Proceedings of the ACM/IEEE 44th International Conference on Software Engineering: Companion Proceedings (Pittsburgh, Pennsylvania) (ICSE '22). Association for Computing Machinery, New York, NY, USA, 345–346. https://doi.org/10.1145/3510454.3528637

[15] Stefan Karlsson, Adnan Causevic, và Daniel Sundmark. 2020. QuickREST: Property-based Test Generation of OpenAPI-Described RESTful APIs. In 2020 IEEE 13th International Conference on Software Testing, Validation and Verification (ICST). IEEE Press, Piscataway, NJ, USA, 131–141. https://doi.org/10.1109/ICST46399.2020.00023

[16] Stefan Karlsson, Adnan Čaušević, và Daniel Sundmark. 2021. Automatic Property-based Testing of GraphQL APIs. In 2021 IEEE/ACM International Conference on Automation of Software Test (AST). IEEE Press, Piscataway, NJ, USA, 1–10. https://doi.org/10.1109/AST52587.2021.00009

[17] Myeongsoo Kim, Davide Corradini, Saurabh Sinha, Alessandro Orso, Michele Pasqua, Rachel Tzoref-Brill, và Mariano Ceccato. 2023. Enhancing REST API Testing with NLP Techniques. In Proceedings of the 32nd ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2023). Association for Computing Machinery, New York, NY, USA, 1232–1243. https://doi.org/10.1145/3597926.3598131

[18] Myeongsoo Kim, Saurabh Sinha, và Alessandro Orso. 2023. Adaptive REST API Testing with Reinforcement Learning. In 2023 38th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE Press, Piscataway, NJ, USA, 446–458. https://doi.org/10.1109/ASE56229.2023.00218

[19] Myeongsoo Kim, Qi Xin, Saurabh Sinha, và Alessandro Orso. 2022. Automated Test Generation for REST APIs: No Time to Rest Yet. In Proceedings of the 31st ACM SIGSOFT International Symposium on Software Testing and Analysis (Virtual, South Korea) (ISSTA 2022). Association for Computing Machinery, New York, NY, USA, 289–301. https://doi.org/10.1145/3533767.3534401

[20] Kerry Kimbrough. 2023. Tcases. https://github.com/Cornutum/tcases

[21] Pengfei Liu, Weizhe Yuan, Jinlan Fu, Zhengbao Jiang, Hiroaki Hayashi, và Graham Neubig. 2023. Pre-train, prompt, and predict: A systematic survey of prompting methods in natural language processing. Comput. Surveys 55, 9 (2023), 1–35.

[22] Alberto Martin-Lopez, Sergio Segura, và Antonio Ruiz-Cortés. 2021. RESTest: Automated Black-Box Testing of RESTful Web APIs. In Proceedings of the 30th ACM SIGSOFT International Symposium on Software Testing and Analysis (Virtual, Denmark) (ISSTA 2021). Association for Computing Machinery, New York, NY, USA, 682–685. https://doi.org/10.1145/3460319.3469082

[23] MuleSoft, LLC, a Salesforce company. 2020. RAML. https://raml.org/

[24] OpenAI. 2023. GPT-4 Technical Report. arXiv:2303.08774 [cs.CL]

[25] OpenAPI. 2023. OpenAPI standard. https://www.openapis.org.

[26] R Software Inc. 2023. RapidAPI. https://rapidapi.com/terms/

[27] Alec Radford, Karthik Narasimhan, Tim Salimans, Ilya Sutskever, et al. 2018. Improving language understanding by generative pre-training.

[28] Alec Radford, Jeffrey Wu, Dario Amodei, Daniela Amodei, Jack Clark, Miles Brundage, và Ilya Sutskever. 2019. Better language models and their implications.

[29] Leonard Richardson, Mike Amundsen, và Sam Ruby. 2013. RESTful Web APIs: Services for a Changing World. O'Reilly Media, Inc., Sebastopol, CA, USA.

[30] Alex Rodriguez. 2008. Restful web services: The basics. IBM developerWorks 33, 2008 (2008), 18.

[31] SE@GT. 2024. Experiment infrastructure, data, and results for RESTGPT (GitHub). https://github.com/selab-gatech/RESTGPT.

[32] SE@GT. 2024. Experiment infrastructure, data, and results for RESTGPT (Zenodo). https://doi.org/10.5281/zenodo.10467805.

[33] SmartBear Software. 2023. OpenAPI data model. https://swagger.io/docs/specification/data-models/keywords/.

[34] SmartBear Software. 2023. Swagger. https://swagger.io/specification/v2/.

[35] Stefan Tilkov. 2007. A brief introduction to REST.

[36] Hugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne Lachaux, Timothée Lacroix, Baptiste Rozière, Naman Goyal, Eric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin, Edouard Grave, và Guillaume Lample. 2023. LLaMA: Open and Efficient Foundation Language Models. arXiv:2302.13971 [cs.CL]

[37] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz Kaiser, và Illia Polosukhin. 2017. Attention is All you Need. In Advances in Neural Information Processing Systems, I. Guyon, U. Von Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, và R. Garnett (Eds.), Vol. 30. Curran Associates, Inc., Red Hook, NY, USA. https://proceedings.neurips.cc/paper_files/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf

[38] Jason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, Fei Xia, Ed Chi, Quoc V Le, Denny Zhou, et al. 2022. Chain-of-thought prompting elicits reasoning in large language models. Advances in Neural Information Processing Systems 35 (2022), 24824–24837.

[39] Huayao Wu, Lixin Xu, Xintao Niu, và Changhai Nie. 2022. Combinatorial Testing of RESTful APIs. In Proceedings of the 44th International Conference on Software Engineering (Pittsburgh, Pennsylvania) (ICSE '22). Association for Computing Machinery, New York, NY, USA, 426–437. https://doi.org/10.1145/3510003.3510151

[40] Man Zhang và Andrea Arcuri. 2023. Open Problems in Fuzzing RESTful APIs: A Comparison of Tools. ACM Trans. Softw. Eng. Methodol. 32, 6, Article 144 (sep 2023), 45 pages. https://doi.org/10.1145/3597205
