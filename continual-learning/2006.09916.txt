# 2006.09916.pdf
# Converted from PDF to TXT
# Source path: /home/admin88/arxiv-downloader/continual-learning/2006.09916.pdf
# File size: 4801556 bytes

===============================================
PDF FILE CONTENT
===============================================


--- PAGE 1 ---
Bayesian active learning for production, a systematic study and a reusable
library
Parmida Atighehchian* 1Fr´ed´eric Branchaud-Charron* 1Alexandre Lacoste1
Figure 1. Baselines results on CIFAR10 using MC-Dropout and
VGG-16. On an academic dataset, both active learning techniques
are competitive.
Abstract
Active learning is able to reduce the amount of la-
belling effort by using a machine learning model
to query the user for speciﬁc inputs. While there
are many papers on new active learning tech-
niques, these techniques rarely satisfy the con-
straints of a real-world project. In this paper,
we analyse the main drawbacks of current active
learning techniques and we present approaches
to alleviate them. We do a systematic study on
the effects of the most common issues of real-
world datasets on the deep active learning process:
model convergence, annotation error, and dataset
imbalance. We derive two techniques that can
speed up the active learning loop such as partial
uncertainty sampling and larger query size. Fi-
nally, we present our open-source Bayesian active
learning library, BaaL.
*Equal contribution1Element AI, Montr ´eal, Canada. Corre-
spondence to: Fr ´ed´eric Branchaud-Charron <frederic.branchaud-
charron@elementai.com >.
Presented at the ICML 2020 Workshop on Uncertainty and Ro-
bustness in Deep Learning. Copyright 2020 by the author(s).1. Introduction
The amount of data readily available for machine learning
has exploded in recent years. However, for data to be used
for deep learning models, labelling is often a required step.
A common problem when labelling new datasets is the re-
quired human effort to perform the annotation. In particular,
tasks that require particular domain knowledge such as med-
ical imaging, are expensive to annotate. To solve this, active
learning (AL) has been proposed to only label the core set
of observations useful for training.
While the active learning ﬁeld includes many approaches
(Kirsch et al., 2019; Tsymbalov et al., 2019; Beluch et al.,
2018; Maddox et al., 2019), these methods are often not
scalable to large datasets or too slow to be used in a more
realistic environment e.g. in a production setup. In partic-
ular, active learning applied to images or text requires the
usage of deep learning models which are slow to train and
themselves require a noticeable huge amount of data to be
effective (Deng et al., 2009; Abu-El-Haija et al., 2016).
Furthermore, deep learning models require carefully tuned
hyperparameters to be effective. In a research environment,
one can ﬁne-tune and perform hyperparameter search to ﬁnd
the optimal combination that gives the biggest reduction in
labelling effort. In a real-world setting, the hyperparameters
are set at the beginning with no guarantee for the outcome.
Finally, in a real-world setup, the data is often not cleaned
nor balanced. In particular, studies have shown that humans
are far from perfect when labelling and the problem is even
worse when using crowd-sourcing (Ipeirotis et al., 2010;
Allahbakhsh et al., 2013).
Our contributions are three-fold. We perform a systematic
study on the effect of the most common pathologies found in
real-world datasets on active learning. Second, we propose
several techniques that make active learning suitable for
production. Finally, we present a case study of using active
learning on a real-world dataset.
In addition, we present our freely available Bayesian active
learning library, BaaL1which provides all the necessary set
up and tools for active learning experiments at any scale.
1https://github.com/ElementAI/baalarXiv:2006.09916v1  [cs.LG]  17 Jun 2020

--- PAGE 2 ---
Bayesian active learning for production
2. Problem setting
We consider the problem of supervised learning where we
observe a dataset made of npairsDL=f(xi;yi)gN
iand
our goal is to estimate a prediction function p(yjx). In addi-
tion, we have N0observations without label DU=fxigN0
i.
More speciﬁcally, we consider the problem of active learn-
ing where the algorithm is summarized in Algorithm 1.
Algorithm 1 Active learning process. For batch active
learning, the algorithm train a model on DLbefore esti-
mating the uncertainty on the pool DU, the most uncertain
samples are labelled by a human before restarting the loop.
Data:D=fx0;:::;x ng
Result:DL=f(x0;y0);:::g
DL Label randomly B points
DU DnDL
while labelling budget is available do
Train model to convergence on DL
Compute uncertainty U(x);for allx2DU
Label top- kmost uncertain samples
3. Background
Active learning has received a lot of attention in the past
years, speciﬁcally on classiﬁcation tasks (Gal et al., 2017).
However, some work has been done on segmentation
(Kendall & Gal, 2017), localization (Miller et al., 2019),
natural language processing (Siddhant & Lipton, 2018), and
time series (Peng et al., 2017). In this paper, we focus our
attention on image classiﬁcation.
Bayesian active Learning Current state-of-the-art tech-
niques used in active learning relies on uncertainty estima-
tion to perform queries (Gal et al., 2017). A common issue
highlighted in Tsymbalov et al. (2019); Kirsch et al. (2019)
is the need to retrain the model and recompute the uncer-
tainties as often as possible. Otherwise, the next samples
to be selected may be too similar to previously annotated
samples. This is problematic due to the long training time
of deep-learning models as well as the expensive task of
uncertainty estimation. Tsymbalov et al. (2019); Houlsby
et al. (2011) and Wilson et al. (2015) proposed solutions to
this issue, are memory expensive and time-consuming when
used on large input size or large datasets. In reality, due
to the large cost of inference and retraining for large scale
datasets, it is not feasible to recompute the uncertainties
in a timely fashion. In consequence, multiple samples are
annotated between retraining. We call this framework batch
active learning.
Machine leanings algorithms can suffer from two types of
uncertainties (Kendall & Gal, 2017):
1)Aleatoric Uncertainty , the uncertainty intrinsic to thedata, which cannot be explained with more samples. This
is due to e.g.: errors during labelling, occlusion, poor data
acquisition ,or when two classes are highly confused.
2)Epistemic Uncertainty , the uncertainty about the under-
lying model. Obtaining more samples will provide more
information about the underlying model and reduce the
amount of epistemic uncertainty. Crucially, some samples
are more informative than others.
Uncertainty estimations Computing the uncertainty of
deep neural networks is crucial to many applications from
medical imaging to loan application. Unfortunately, deep
neural networks are often overconﬁdent as they are not de-
signed to provide calibrated predictions (Scalia et al., 2019;
Gal, 2016). Hence, researchers proposed new methods to
get a trustful estimation of the epistemic uncertainty such
as MC-Dropout (Gal & Ghahramani, 2016), Bayesian neu-
ral networks (Blundell et al., 2015) or Ensembles. More
recently, Wilson & Izmailov (2020) proposed to combine
variational inference and ensembles. While this approach is
state-of-the-art, it is far too computationally expensive to be
used in the industry.
In this paper, we will use MC-Dropout (Gal & Ghahramani,
2016). In this technique proposes the Dropout layers are
kept activated at test time to sample from the posterior distri-
bution. Hence, this method can be used on any architecture
that uses Dropout which makes it usable on a wide range of
applications.
Acquisition functions Many heuristics have been pro-
posed to extract the uncertainty value from the stochastic
prediction sampling. We deﬁne Monte-Carlo sampling from
the posterior distribution p(wjD)as:
pt(yjx) =p(yjx;wt);t2f1:::Tg;wtp(wjD)
whereTis the number of Monte-Carlo samples. We com-
pute the Bayesian model average, ^p(yjx) =1
TPT
tpt(yj
x). When highly uncertain, ^p(yjx)will be close to a
uniform distribution. A naive approach to estimate the un-
certainty is to compute the entropy of this distribution.
A more sophisticated approach is BALD (Houlsby et al.,
2011), which estimates the epistemic uncertainty by com-
puting the mutual information between the model posterior
distribution and the prediction:
I(y;wjx;DL) =H[yjx;DL] Ep(wjDL)(H[yjx;w]):
BALD compares the entropy of the mean estimator to the
entropies of all estimators. The result is high when there are
high disagreements between predictions, which addresses
the overconﬁdence issue in deep learning models.

--- PAGE 3 ---
Bayesian active learning for production
Dataset size 5000 10000 20000
= 0
BALD 0.65 0.01 0.53 0.01 0.43 0.02
Entropy 0.68 0.03 0.52 0.02 0.43 0.03
Random 0.71 0.02 0.58 0.02 0.47 0.01
= 0.05
BALD 0.72 0.02 0.57 0.01 0.43 0.02
Entropy 0.72 0.02 0.54 0.02 0.41 0.01
Random 0.73 0.03 0.61 0.03 0.51 0.02
= 0.1
BALD 0.78 0.03 0.62 0.01 0.48 0.01
Entropy 0.71 0.02 0.57 0.01 0.44 0.02
Random 0.76 0.02 0.64 0.02 0.54 0.01
Table 1. Effect of annotation error on active learning by randomly
shufﬂing% labels. The test log-likelihood is averaged over 5
runs.
4. Experiments
In this paper, we want to demonstrate the usability of active
learning in a real-world scenario. First, we analyze the
effect of common pathologies in deep learning on active
learning. Secondly, a common issue in active learning is the
time required between steps in the active learning loop. As
stated by Kirsch et al. (2019), retraining as soon as possible
is crucial to obtain decorrelated samples. We investigate if
a) this is the case in large-scale datasets and b) what can
we do to make this faster. Implementation details can be
found in Annex. Baselines for all acquisition functions can
be found in Fig. 1.
4.1. Pathologies
In this section, we verify if common pathologies in deep
learning hold for active learning. Problems such as anno-
tation error or model convergence may be hurtful to the
procedure and are often overlooked in the literature. In par-
ticular, due to the small amount of annotated data, models
are more at risk than when they are trained on large datasets.
Effect of annotation error While standard datasets are of
good quality, humans are far from perfect and will produce
errors when labelling. This is especially true when using
crowdsourcing (Allahbakhsh et al., 2013). Because active
learning relies on the training data to train a model and there
are only a few labelled samples, we make the hypothesis
that active learning would be highly sensitive to noise.
To conﬁrm this hypothesis, we introduce noise by cor-
rupting%of the labels. We test our hypothesis on CI-
FAR10 (Krizhevsky et al., 2009). In Table 1, we can assess
that depending on , the active learning procedure is highly
affected by labelling noise. Furthermore, when we com-
pare to random selection, the gain of using active learning
decreases when noise is involved, but it is still useful.
Figure 2. Effect of different training schedules. By comparing
overﬁtted and underﬁtted models, we assess the impact of uncer-
tainty quality on active learning. Performance averaged over 5
runs.
Effect of model convergence Because we have no con-
trol over the training regime at each time step, it is hard to
train the model to an optimal solution. With fully annotated
datasets, we can ﬁne-tune our training setup with hyper-
parameter search or train for days at a time. In a production
environment, we are limited in our ability to best train the
model. In consequence, the model may be under or over-
ﬁtted to the current dataset and provide ﬂawed uncertainty
estimations.
To conﬁrm our hypothesis, we vary the number of epochs
the model is trained for. As seen in Fig. 2, underﬁtted
models are highly affected while overﬁtted models suffer,
but are still performant. This is due to a poor ﬁt of the model
that lead to a wrong estimation of the model uncertainty. In
Annex, we present the difference in performance between
BALD and Random.
In this section, we investigated the effect of two common
deep learning pathologies in active learning. In summary,
prior knowledge on the quality of the annotations and on
how long to train the model, could help using active learn-
ing.
4.2. Efﬁcient techniques for active learning
An important problem with current active learning pipelines
is the delay between active learning steps. To make active
learning efﬁcient, we propose several techniques that main-
tain performance while speeding up the training or inference
phases.
Query size An important hyper-parameter in batch active
learning is to decide how many samples should be labelled at
each active learning step (Gal et al., 2017; Tsymbalov et al.,
2019). In a real-world scenario, we can’t ask the annotation
team to wait between steps especially in a crowd-sourcing
environment. Therefore, there needs to be a conﬁguration

--- PAGE 4 ---
Bayesian active learning for production
Dataset size 5000 10000 20000
Random 0.710.03 0.54 0.01 0.42 0.05
Q=50
BALD 0.59 0.01 0.46 0.05 0.34 0.02
Entropy 0.69 0.06 0.55 0.11 0.34 0.00
Q=250
BALD 0.61 0.03 0.43 0.01 0.35 0.03
Entropy 0.67 0.05 0.49 0.04 0.35 0.00
Q=500
BALD 0.61 0.07 0.42 0.02 0.36 0.01
Entropy 0.61 0.07 0.47 0.00 0.37 0.00
Q=2000
BALD 0.77 0.05 0.53 0.03 0.37 0.03
Entropy 0.87 0.01 0.52 0.07 0.35 0.01
Table 2. Effect of increasing the query size Qon CIFAR10. Per-
formance averaged over 5 runs. BALD is weaker when used with
a large query size, making Entropy competitive.
where we could beneﬁt from a good uncertainty estimation
quality and a reasonable runtime. We present our ﬁndings in
Table 2 where we tested this approach on CIFAR10. From
our results, the query size does decreases performances,
especially at 10,000 labels where the gap between BALD
and Entropy is thinner as the query size grows.
Limit pool size The most time-consuming part of active
learning is the uncertainty estimation step. In particular,
this step is expensive when using techniques that require
Monte-Carlo sampling such as MC-Dropout or Bayesian
neural networks. Of course, this problem is embarrassingly
parallel, but for low-budget deployment, one has not access
to the resources required to parallelize this task cheaply. A
simple idea to solve this is to randomly select unlabelled
samples from the pool instead of using the entire pool. We
test this idea by varying the number of samples selected
for uncertainty estimation. From our experiments (ﬁgure
in Annex), we show that the performance is not affected
when using less than 25% of the pool. By doing this, we
can speed up this phase by a factor of 3.
In this section, we proposed two approaches to make active
learning usable in production. First, we can increase the
query size higher than previously used in the literature. Sec-
ond, we can select the next batch using a small subset of the
pool.
5. Case study: Mio-TCD
Few datasets have been proposed to mimic a ”real-world”
situation where the dataset suffers from labelling noise, du-
plicates, or imbalanced datasets. Mio-TCD (Luo et al.,
2018) has been recently proposed to showcase these issues.
The dataset contains 500,000 samples split into 11 classes
with heavy class imbalance. For example, the training set
Figure 3. Performance of different active learning procedures on
Mio-TCD. While any active learning method is strong against
random, BALD is especially strong at the beginning of the labelling
process. Performance averaged over 5 runs.
contains 50% Cars and 20% Background .
Beneﬁts of active learning. As shown in Gal et al. (2017)
(and further in Annex), active learning helps when used
on imbalanced data. We can verify this, by comparing the
performance of underrepresented classes in Mio-TCD. From
the current leader board, we can select two difﬁcult classes:
Single-Unit Truck, and Bicycle . We use the same setup as
before, but limit the size of the pool to 20,000 samples.
In Fig. 3, we present the F1 scores for the two most difﬁcult
classes. One can clearly see the impact of using active learn-
ing in this setting. With active learning, underrepresented
classes are quickly selected and get decent performance. In
addition, the performance for the most populous class Cars
stays similar across acquisition functions (ﬁgure in Annex).
This experiment shows that using active learning on non-
academic datasets is highly beneﬁcial and the need for the
active learning community to use new benchmarks to com-
pare methods.
6. Conclusion
In this paper, we have investigated the impact of uncleaned
data on deep active learning models used for active learning.
We also propose several techniques to make active learning
usable in a real-world environment. Subsequently, we test
our ﬁndings on a real-world dataset Mio-TCD, showing that
active learning can be used in this setting. As a result of
this study, we introduce our newly released Bayesian active
learning library which can be useful to both researchers and
developers (see Annex).
In summary, we show that active learning can be used in
a production setting on real data with success. We hope
this work can fasten the application of active learning on
real-world projects and improve the quality of annotation
by getting more information per sample. Interesting areas
of research include the study of the interaction between the
human and the machine during a labelling task.

--- PAGE 5 ---
Bayesian active learning for production
References
Abu-El-Haija, S., Kothari, N., Lee, J., Natsev, A. P.,
Toderici, G., Varadarajan, B., and Vijayanarasimhan, S.
Youtube-8m: A large-scale video classiﬁcation bench-
mark. In arXiv:1609.08675 , 2016. URL https://arxiv.org/
pdf/1609.08675v1.pdf.
Allahbakhsh, M., Benatallah, B., Ignjatovic, A., Motahari-
Nezhad, H. R., Bertino, E., and Dustdar, S. Quality
control in crowdsourcing systems: Issues and directions.
IEEE Internet Computing , 17(2):76–81, 2013.
Beluch, W. H., Genewein, T., N ¨urnberger, A., and K ¨ohler,
J. M. The power of ensembles for active learning in image
classiﬁcation. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition , pp. 9368–
9377, 2018.
Blundell, C., Cornebise, J., Kavukcuoglu, K., and Wierstra,
D. Weight uncertainty in neural networks. arXiv preprint
arXiv:1505.05424 , 2015.
Deng, J., Dong, W., Socher, R., Li, L.-J., Li, K., and Fei-
Fei, L. ImageNet: A Large-Scale Hierarchical Image
Database. In CVPR09 , 2009.
Gal, Y . Uncertainty in deep learning. University of Cam-
bridge , 1:3, 2016.
Gal, Y . and Ghahramani, Z. Dropout as a bayesian approx-
imation: Representing model uncertainty in deep learn-
ing. In international conference on machine learning , pp.
1050–1059, 2016.
Gal, Y ., Islam, R., and Ghahramani, Z. Deep bayesian active
learning with image data. In Proceedings of the 34th
International Conference on Machine Learning-Volume
70, pp. 1183–1192. JMLR. org, 2017.
Houlsby, N., Husz ´ar, F., Ghahramani, Z., and Lengyel, M.
Bayesian active learning for classiﬁcation and preference
learning. arXiv preprint arXiv:1112.5745 , 2011.
Ipeirotis, P. G., Provost, F., and Wang, J. Quality man-
agement on amazon mechanical turk. In Proceedings of
the ACM SIGKDD workshop on human computation , pp.
64–67, 2010.
Kendall, A. and Gal, Y . What uncertainties do we need in
bayesian deep learning for computer vision? In Advances
in neural information processing systems , pp. 5574–5584,
2017.
Kirsch, A., van Amersfoort, J., and Gal, Y . Batchbald:
Efﬁcient and diverse batch acquisition for deep bayesian
active learning, 2019.Krawczyk, B. Learning from imbalanced data: open chal-
lenges and future directions. Progress in Artiﬁcial Intelli-
gence , 5(4):221–232, 2016.
Krizhevsky, A., Hinton, G., et al. Learning multiple layers
of features from tiny images. 2009.
Luo, Z., Branchaud-Charron, F., Lemaire, C., Konrad, J.,
Li, S., Mishra, A., Achkar, A., Eichel, J., and Jodoin,
P.-M. Mio-tcd: A new benchmark dataset for vehicle
classiﬁcation and localization. IEEE Transactions on
Image Processing , 27(10):5129–5141, 2018.
Maddox, W. J., Izmailov, P., Garipov, T., Vetrov, D. P., and
Wilson, A. G. A simple baseline for bayesian uncertainty
in deep learning. In Advances in Neural Information
Processing Systems , pp. 13132–13143, 2019.
Miller, D., Dayoub, F., Milford, M., and S ¨underhauf, N.
Evaluating merging strategies for sampling-based uncer-
tainty techniques in object detection. In 2019 Interna-
tional Conference on Robotics and Automation (ICRA) ,
pp. 2348–2354. IEEE, 2019.
Oliphant, T. E. A guide to NumPy , volume 1. Trelgol
Publishing USA, 2006.
Paszke, A., Gross, S., Chintala, S., Chanan, G., Yang, E.,
DeVito, Z., Lin, Z., Desmaison, A., Antiga, L., and Lerer,
A. Automatic differentiation in pytorch. 2017.
Peng, F., Luo, Q., and Ni, L. M. Acts: An active learning
method for time series classiﬁcation. In 2017 IEEE 33rd
International Conference on Data Engineering (ICDE) ,
pp. 175–178. IEEE, 2017.
Scalia, G., Grambow, C. A., Pernici, B., Li, Y .-P., and Green,
W. H. Evaluating scalable uncertainty estimation meth-
ods for dnn-based molecular property prediction. arXiv
preprint arXiv:1910.03127 , 2019.
Siddhant, A. and Lipton, Z. C. Deep bayesian active learning
for natural language processing: Results of a large-scale
empirical study. arXiv preprint arXiv:1808.05697 , 2018.
Tsymbalov, E., Makarychev, S., Shapeev, A., and Panov, M.
Deeper connections between neural networks and gaus-
sian processes speed-up active learning. arXiv preprint
arXiv:1902.10350 , 2019.
Wilson, A. G. and Izmailov, P. Bayesian deep learning and a
probabilistic perspective of generalization. arXiv preprint
arXiv:2002.08791 , 2020.
Wilson, A. G., Hu, Z., Salakhutdinov, R., and Xing, E. P.
Deep kernel learning. In AISTATS , 2015.

--- PAGE 6 ---
Bayesian active learning for production
Zhang, X., Zou, J., He, K., and Sun, J. Accelerating very
deep convolutional networks for classiﬁcation and detec-
tion. IEEE transactions on pattern analysis and machine
intelligence , 38(10):1943–1955, 2015.

--- PAGE 7 ---
Supplementary Material
A. Implementation details
Our methodology is as follows. We train a VGG-16 (Zhang
et al., 2015) pretrained on ImageNet (Deng et al., 2009).
Our initial training set contains 500 samples. We estimate
the uncertainty using 20 MC samples and label the 100 most
uncertain elements. Following Gal et al. (2017), we reset
the weights to their initial value between steps.
B. Imbalanced datasets
How to deal with imbalanced datasets is an entire area
of research (Krawczyk, 2016), but little has been done to
deal with it when we are not aware of the a priori class
distribution. In consequence, the active learning model
may quickly overﬁt to the more popular classes and reduce
the effectiveness of active learning procedure. From Gal
et al. (2017), it is known that Bayesian active learning will
favor underrepresented classes. But, we ﬁnd the reported
experiments to be too simple. We test this hypothesis in
a controlled environment where we can set the number of
unrepresented classes.
In Table 3, we took the standard CIFAR100 dataset and
we mimic an imbalanced dataset where few classes have
a high number of examples. A class selected to be under-
represented sees its number of samples to be reduced by
75%. When we increase the number of underrepresented
classes, the gain of using MC-Dropout versus random sam-
pling becomes more obvious. This is due to regions on the
learned manifold associated with underrepresented classes
to be highly uncertain. In consequence, these regions will
be selected for labelling very early in the process.
C. Effect of convergence
In Fig. 4, we computed the difference in performance be-
tween BALD and random. We call this measure the Active
gain=NLL Random NLL BALD . When using an under-
ﬁtted model, the gain goes negative i.e. you would be better
to use random selection.
D. Effect of reducing the pool size
As part of the experiments, we test whether limiting the pool
size would affect the performance of active learning. Our
experiments in Fig. 5 show that whether to calculate the
uncertainty for the whole pool data or a randomly selectedDataset size 5000 10000 20000
 = 10
BALD 4.39 0.4 3.990.01 3.570.05
Entropy 4.71 0.02 4.540.07 3.940.01
Random 4.52 0.09 4.100.03 3.710.05
 = 25
BALD 4.40 0.03 4.040.03 3.610.08
Entropy 4.76 0.02 4.680.08 4.000.01
Random 4.58 0.08 4.180.04 3.750.01
 = 50
BALD 4.49 0.08 4.070.02 3.660.04
Entropy 4.83 0.04 4.600.14 4.070.28
Random 4.62 0.03 4.210.02 3.760.04
Table 3. Effect of using active learning on imbalanced versions of
CIFAR100. is the number of class that contains 25% of their
data. From (Gal et al., 2017), we know that BALD is robust to
imbalanced datasets, but the study was not extensive. While BALD
is robust to imbalanced datasets, the effect is catastrophic when
using Entropy. Performance averaged over 5 runs.
Figure 4. Gain of using active learning when varying the number
of training epochs. An underﬁtted model will cause harm to the
model training and in this case, just using random would’ve been
better.

--- PAGE 8 ---
Bayesian active learning for production
Figure 5. Effect of reducing the size of the pool on CIFAR100. -1
indicates no reduction. For all heuristics, the performance is not
affected by the size of the pool showing that AL can be efﬁcient
when tuned properly. Performance averaged over 5 runs.
Figure 6. F1 for the class car. BALD is great for underrepre-
sented classes while not affecting more popular classes. Entropy
decreases the performance on this class.
subset, the performance of active learning is not affected.
This leads to an the interesting outcome of limiting the
uncertainty calculations (which is the most expensive part
of an active learning loop) in production setup for faster
active learning loops.
E. Bayesian active learning Library (BaaL)
All the experiments in this paper have done using our pub-
licly available Bayesian active learning library. The goal of
this library is to provide an easy to use but complete setup
to test active learning on any project with few lines of code.
We included features that current active learning libraries
do not support. In particular, Bayesian methods such as
MC-Dropout or Coresets are not widely available and there
is no standard implementation of the active learning loop.
Furthermore, research codebases are often hard to read andhard to maintain. Our proposed uniﬁed API could satisfy
both research and industrial users.
Our recently published open-source package named BaaL,
aims at accelerating the transition from research to produc-
tion. The core philosophy behind our library is to provide
researchers with a well-designed API so that they focus on
their novel idea and not on technical details. Our library pro-
poses a task-agnostic system where one can mix-and-match
any set of acquisition functions and uncertainty estimation
methods. The library consists of three main components:
1.Dataset management to keep track and manage the
labelled data DLand the unlabelled data DU.
2.Bayesian Methods i.e. MC-Dropout, MC-
DropConnect and so on.
3.Acquisition functions i.e. BALD, BatchBALD, En-
tropy and more.
We provide full support for Pytorch (Paszke et al., 2017)
deep learning modules but our acquisition functions which
are the most important part of active learning is implemented
in Numpy(Oliphant, 2006) and hence can be used on any
platform. Our Data management module keeps track of
what is labelled and what is unlabelled. We also provide fa-
cilitator methods to label a data point, update the pool of un-
labelled data, and to randomly label a portion of the dataset.
In our Bayesian module, we provide utilities to make any Py-
torch model Bayesian with a single instruction. We also pro-
vide training, testing, and active learning loops that facilitate
the active training procedure. Our acquisition functions are
up-to-date with state-of-the-art methods. We provide easy
to follow tutorials (https://baal.readthedocs.io/en/latest/) for
each section of the library so that the user understands how
each component works. Finally, our library is a member
of Pytorch Ecosystem, which is reserved for libraries with
outstanding documentation.
Our road-map has been indicated in the repository. Our
current focus will include model calibration and semi-
supervised learning. As more researchers contribute their
methods to our library, we aim to become the standard
Bayesian active learning library.
