StrokeNUWA: Token hóa Nét Vẽ cho Tổng hợp Đồ họa Vector
Zecheng Tang* 1 2Chenfei Wu* 2Zekai Zhang2Mingheng Ni2Shengming Yin2Yu Liu2Zhengyuan Yang3
Lijuan Wang3Zicheng Liu3Juntao Li1Nan Duan2

Tóm tắt
Để tận dụng LLMs cho tổng hợp thị giác, các phương pháp truyền thống chuyển đổi thông tin hình ảnh raster thành token lưới rời rạc thông qua các mô-đun thị giác chuyên biệt, trong khi làm gián đoạn khả năng của mô hình trong việc nắm bắt biểu diễn ngữ nghĩa thực sự của các cảnh thị giác. Bài báo này đặt ra rằng một biểu diễn thay thế cho hình ảnh, đồ họa vector, có thể vượt qua hiệu quả hạn chế này bằng cách cho phép phân đoạn tự nhiên và mạch lạc về mặt ngữ nghĩa hơn của thông tin hình ảnh. Do đó, chúng tôi giới thiệu StrokeNUWA, một công trình tiên phong khám phá biểu diễn thị giác tốt hơn - "stroke tokens" trên đồ họa vector, vốn dĩ giàu ngữ nghĩa thị giác, tương thích tự nhiên với LLMs, và được nén cao. Được trang bị stroke tokens, StrokeNUWA có thể vượt trội đáng kể so với các phương pháp dựa trên LLM truyền thống và dựa trên tối ưu hóa trên nhiều chỉ số khác nhau trong tác vụ tạo đồ họa vector. Bên cạnh đó, StrokeNUWA đạt được tăng tốc lên đến 94× trong suy luận so với tốc độ của các phương pháp trước đó với tỷ lệ nén mã SVG đặc biệt là 6.9%.

1. Giới thiệu

Trong những năm gần đây, các Mô hình Ngôn ngữ Lớn dựa trên transformer, thường được gọi là LLMs, đã có những bước tiến đáng kể, đặc biệt trong lĩnh vực Xử lý Ngôn ngữ Tự nhiên (NLP) (Brown et al., 2020; Chowdhery et al., 2022; Touvron et al., 2023; Anil et al., 2023). Đồng thời, LLMs đang dần mở rộng khả năng của mình sang các phương thức khác, như âm thanh (Ghosal et al., 2023), y tế (Singhal et al., 2023) và robot học (Brohan et al., 2023).

Các phương pháp luận hiện tại (Reddy et al., 2021; Wu et al., 2022; Chang et al., 2022; Kondratyuk et al., 2023) cho phép LLMs tạo ra thông tin thị giác bằng cách chuyển đổi các pixel thị giác liên tục thành token lưới rời rạc thông qua các mô-đun thị giác chuyên biệt như VQ-VAE (Van Den Oord et al., 2017) và VQ-GAN (Esser et al., 2021). Sau đó, các token lưới được chuyển đổi này được xử lý bởi LLM theo cách tương tự như xử lý từ văn bản, điều này tạo thuận lợi cho quá trình mô hình hóa sinh của LLMs. Tuy nhiên, khi so sánh với các mô hình khuếch tán (Rombach et al., 2022), LLMs vẫn còn thua kém (Lee et al., 2022; Sun et al., 2023). Những thiếu sót của LLMs trong các tác vụ thị giác chủ yếu phát sinh từ hai lý do: Thứ nhất, quá trình chuyển đổi dựa vào các mô-đun thị giác cụ thể, vốn dĩ có những hạn chế. Ví dụ, các mô-đun thị giác tiên tiến như VQ-GAN (Esser et al., 2021) có thể dẫn đến việc tạo ra hình ảnh có artifact (Yu et al., 2023); Thứ hai, việc sử dụng token lưới có thể làm gián đoạn ngữ nghĩa thị giác, vì các lưới được thiết kế một cách nhân tạo và không có nhận thức ngữ nghĩa vốn có. Sự rời rạc hóa nhân tạo này áp đặt các ràng buộc lên khả năng của mô hình trong việc nắm bắt biểu diễn ngữ nghĩa thực sự của các cảnh thị giác.

Có tồn tại một biểu diễn thị giác nào bảo tồn tính toàn vẹn ngữ nghĩa của thông tin thị giác trong khi có lợi cho việc xử lý bởi LLMs? Việc tìm ra biểu diễn như vậy trong khuôn khổ của token lưới là không tầm thường, vì việc sắp xếp token lưới thường đều đặn và thống nhất, trong khi cấu trúc ngữ nghĩa bên trong hình ảnh thường bất thường và phức tạp. Như được minh họa trong Hình 1, thân cá heo được phân đoạn một cách tùy ý thành các token lưới khác nhau. Mặc dù đã có những nỗ lực để cải thiện phương pháp VQ-VAE (Esser et al., 2021; Yu et al., 2023), nâng cao chất lượng biểu diễn thị giác, chúng về cơ bản bị hạn chế bởi những giới hạn vốn có của định dạng hình ảnh raster, dẫn đến các nút thắt cổ chai trong việc bảo tồn ngữ nghĩa. Trước những thách thức này, chúng tôi đề xuất một cách tiếp cận mới về cơ bản giữ lại các khái niệm ngữ nghĩa của hình ảnh bằng cách sử dụng một định dạng hình ảnh thay thế: đồ họa vector. Khác với các định dạng dựa trên pixel, đồ họa vector về bản chất tiết lộ cấu trúc của các đối tượng, tự nhiên đóng gói các khái niệm ngữ nghĩa của hình ảnh. Ví dụ, "stroke tokens" được đề xuất của chúng tôi phân đoạn cá heo thành các nét vẽ được kết nối tuần tự, trong đó mỗi đơn vị nét vẽ chứa thông tin ngữ nghĩa hoàn chỉnh, như vây cá heo (nét ①) và lưng (nét ②).

Đáng chú ý rằng ý định của chúng tôi không phải là khẳng định rằng đồ họa vector vượt trội hơn hình ảnh raster, mà là giới thiệu một góc nhìn mới về biểu diễn thị giác. Những ưu điểm của khái niệm "stroke token" của chúng tôi bao gồm: (1) Vốn dĩ chứa ngữ nghĩa thị giác: mỗi stroke token về bản chất chứa ngữ nghĩa thị giác, cung cấp phân đoạn ngữ nghĩa trực quan hơn của nội dung hình ảnh; (2) Tương thích tự nhiên với LLMs: quá trình tạo đồ họa vector tự nhiên tuần tự và liên kết với nhau, phản ánh cách LLMs xử lý thông tin. Nói cách khác, mỗi nét vẽ được tạo ra có liên quan đến những nét trước và sau nó, thiết lập một chuỗi liên tục và mạch lạc mà LLMs có thể xử lý tự nhiên hơn; (3) Được nén cao: các nét vẽ trong đồ họa vector có thể được nén cao, cho phép mỗi stroke token đóng gói một biểu diễn nén phong phú của thông tin thị giác, giảm đáng kể kích thước dữ liệu trong khi duy trì chất lượng và tính toàn vẹn ngữ nghĩa.

Dựa trên phân tích trên, chúng tôi giới thiệu StrokeNUWA, một mô hình tạo đồ họa vector mà không phụ thuộc vào mô-đun thị giác. StrokeNUWA bao gồm một mô-đun VQ-Stroke và một mô hình Encoder-Decoder. VQ-Stroke, dựa trên kiến trúc mô hình quantizer dư (Martinez et al., 2014), có thể nén thông tin đồ họa vector được tuần tự hóa thành nhiều token SVG. Mô hình Encoder-Decoder chủ yếu sử dụng khả năng của LLM được huấn luyện trước để tạo ra token SVG được hướng dẫn bởi text prompts.

Chúng tôi so sánh StrokeNUWA với các phương pháp dựa trên tối ưu hóa trong tác vụ tạo Scalable Vector Graphic (SVG) được hướng dẫn bởi văn bản. Cách tiếp cận của chúng tôi đạt được chỉ số CLIPScore (Hessel et al., 2021) cao hơn, cho thấy rằng việc sử dụng stroke tokens có thể tạo ra nội dung với ngữ nghĩa thị giác phong phú hơn. Khi được đánh giá so với các baseline dựa trên LLM, phương pháp của chúng tôi vượt trội hơn chúng trên tất cả các chỉ số, cho thấy rằng stroke tokens có thể tích hợp hiệu quả với LLMs. Cuối cùng, do khả năng nén vốn có trong đồ họa vector, mô hình của chúng tôi thể hiện hiệu quả đáng kể trong việc tạo ra, đạt được cải thiện tốc độ lên đến 94 lần.

Tóm lại, các đóng góp của chúng tôi có thể được phác thảo như sau:
• Chúng tôi giới thiệu StrokeNUWA, nghiên cứu tiên phong khám phá biểu diễn thị giác tốt hơn - stroke token, để tổng hợp đồ họa vector chỉ thông qua LLMs mà không phụ thuộc vào các mô-đun thị giác chuyên biệt.
• Chúng tôi đề xuất VQ-Stroke, một Vector Quantized Variational Autoencoder (VQ-VAE) chuyên biệt được thiết kế để nén đồ họa vector thành stroke tokens, cung cấp tỷ lệ nén đặc biệt là 6.9%.
• Chúng tôi tiến hành các thí nghiệm chi tiết chứng minh tiềm năng đáng kể của stroke tokens trong tác vụ tổng hợp đồ họa vector được hướng dẫn bởi văn bản.

2. Công trình liên quan

2.1. Biểu diễn Thị giác

Trong lĩnh vực đồ họa máy tính, hai định dạng hình ảnh chủ đạo tồn tại: hình ảnh raster, được đặc trưng bởi ma trận pixel; và hình ảnh vector, còn gọi là Scalable Vector Graphic (SVG), được đặc trưng bởi một chuỗi các lệnh ngôn ngữ mã (Zhang et al., 2023). Những phát triển gần đây trong tổng hợp thị giác chủ yếu tập trung vào việc tạo ra hình ảnh raster. Ý tưởng cơ bản là chuyển đổi các pixel hình ảnh liên tục thành token lưới rời rạc thông qua các mô-đun thị giác chuyên biệt như VQ-VAE (Van Den Oord et al., 2017) và VQ-GAN (Esser et al., 2021), sau đó tận dụng LLMs để tạo ra các token này (Reddy et al., 2021; Wu et al., 2022; Kondratyuk et al., 2023). Gần đây nhất, một số công trình đã cố gắng cải thiện token "lưới" bằng cách thiết kế các kiến trúc tiên tiến như Lookup-Free Quantization (Yu et al., 2023) và Efficient VQ-GAN (Cao et al., 2023). Tuy nhiên, các biểu diễn token "lưới" này có thể làm gián đoạn ngữ nghĩa thị giác vì các lưới được thiết kế một cách nhân tạo, thiếu nhận thức ngữ nghĩa vốn có, và dễ bị ảnh hưởng bởi những hạn chế nội tại của mô-đun thị giác như nhiễu và can thiệp (Hu et al., 2023). Ngược lại, nghiên cứu của chúng tôi là một nỗ lực tiên phong khám phá biểu diễn thị giác tốt hơn bằng cách đề xuất khái niệm "stroke token". Khác với token "lưới", "stroke token" được định nghĩa vốn có bởi các lệnh ngôn ngữ mã có liên kết ngữ cảnh mang lại tính toàn vẹn ngữ nghĩa mạnh mẽ, có khả năng giảm thiểu các vấn đề nêu trên.

2.2. Tạo SVG

Tạo SVG sử dụng phương pháp tạo mã có cấu trúc để sản xuất đồ họa, cung cấp khả năng diễn giải, linh hoạt và khả năng mở rộng tốt hơn trong biểu diễn hình ảnh. Cách tiếp cận chủ lưu hiện tại của việc tạo SVG là các phương pháp dựa trên tối ưu hóa (Su et al., 2023; Jain et al., 2023; Xing et al., 2023), có điểm tương đồng với việc tạo hình ảnh raster truyền thống, bao gồm việc tinh chỉnh lặp đi lặp lại các đường dẫn SVG được khởi tạo ngẫu nhiên để phù hợp với hình ảnh raster mục tiêu với một rasterizer có thể vi phân (Li et al., 2020). Tuy nhiên, quá trình tối ưu hóa vừa tốn thời gian vừa tốn nhiều tài nguyên tính toán, ví dụ, tạo một đồ họa SVG bao gồm 24 đường dẫn SVG có thể mất hơn 20 phút. Thay vào đó, một số cách tiếp cận gần đây đã bắt đầu áp dụng các mô hình tự hồi quy để trực tiếp tạo mã cho tổng hợp SVG (Wang et al., 2022; Wu et al., 2023a). Tuy nhiên, do bản chất độ dài mở rộng vốn có của SVGs và thiếu biểu diễn SVG hiệu quả, các phương pháp này hạn chế LLMs trong việc tạo ra SVGs phức tạp. Để giải quyết những thách thức này, chúng tôi giới thiệu VQ-Stroke và trình bày khái niệm "stroke tokens". Bằng cách chuyển đổi SVGs thành stroke tokens, cách tiếp cận của chúng tôi cho phép LLMs tạo ra SVGs phức tạp với tốc độ suy luận được cải thiện đáng kể.

3. Phương pháp luận

3.1. Công thức hóa Vấn đề

Mã SVG cung cấp một bộ quy tắc lệnh và cú pháp, ví dụ, lệnh "<rect>" định nghĩa một hình chữ nhật với vị trí, chiều rộng và chiều cao của nó, có thể được viết như <rect x="10" y="20" width="50" height="80"/>. Tuy nhiên, xem xét sự đa dạng của các loại lệnh SVG, việc tạo ra hệ thống như vậy không chỉ đòi hỏi cấu trúc dữ liệu phức tạp, mà nếu không có tập dữ liệu lớn, LLMs sẽ gặp khó khăn trong việc mô hình hóa hiệu quả phạm vi đa dạng của các lệnh. Do đó, như được thể hiện trong Bảng 1, chúng ta có thể đơn giản hóa mỗi SVG chỉ bằng ba lệnh cơ bản: "Move To", "Line To", và "Cubic Bézier" theo Iconshop (Wu et al., 2023a) và DeepSVG (Carlier et al., 2020). Ví dụ, các lệnh phức tạp như "<rect>" có thể được xây dựng bởi ba lệnh cơ bản đó. Sau khi đơn giản hóa, một SVG G={Pi}N i=1 có thể được mô tả với N đường dẫn SVG, với mỗi đường dẫn SVG Pi bao gồm Mi lệnh cơ bản: Pi={Cj i}Mi j=1, trong đó Cj i là lệnh thứ j trong đường dẫn thứ i. Cuối cùng, mỗi lệnh cơ bản C = (T,V) bao gồm loại lệnh T trong {M,L,C}, và đối số vị trí tương ứng V.

3.2. StrokeNUWA

StrokeNUWA chứa ba thành phần cốt lõi: một Vector Quantized-Stroke (VQ-Stroke) để nén SVG, một LLM dựa trên Encoder-Decoder (EDM) để tạo SVG, và một SVG Fixer (SF) để hậu xử lý. Đầu tiên, VQ-Stroke nén SVG thành stroke tokens, cho phép chuyển đổi giữa mã SVG và stroke tokens rời rạc. Sau đó, EDM sử dụng stroke tokens được tạo ra từ VQ-Stroke để tạo mã SVG. Cuối cùng, SF là một mô-đun hậu xử lý được thiết kế để tinh chỉnh chất lượng của SVGs được tạo ra, do đầu ra được tạo từ EDM hoặc VQ-Stroke có thể không phải lúc nào cũng tuân thủ các quy tắc cú pháp nghiêm ngặt của mã SVG. Dưới đây, chúng tôi sẽ giới thiệu chi tiết từng thành phần.

3.2.1. VECTOR QUANTIZED-STROKE

VQ-Stroke bao gồm hai giai đoạn chính: giai đoạn "Code to Matrix" chuyển đổi mã SVG thành định dạng ma trận phù hợp cho đầu vào mô hình, và giai đoạn "Matrix to Token" chuyển đổi dữ liệu ma trận thành stroke tokens.

Code to Matrix Như được mô tả trong Hình 3, đầu tiên chúng tôi chuyển đổi mã SVG đã đơn giản hóa (Mục 3.1) thành định dạng ma trận SVG bằng cách chuyển đổi mỗi lệnh cơ bản Cj i thành vector riêng lẻ Kj i trong R9 với quy tắc f:

Kj i=f(Cj i) = (T, x0, y0, cx0, cy0, cx1, cy1, x1, y1)j i, (1)

trong đó T biểu thị loại lệnh cơ bản, (x0, y0) và (x1, y1) đại diện cho điểm bắt đầu và điểm kết thúc, với (cx0, cy0) và (cx1, cy1) là các điểm điều khiển của mỗi lệnh cơ bản. Sau đó, để thiết lập kết nối giữa các lệnh liền kề, chúng tôi đặt điểm kết thúc của lệnh thứ j (x1, y1)j i bằng với điểm bắt đầu (x0, y0)j+1 i của lệnh tiếp theo (j+ 1) trong mỗi đường dẫn riêng lẻ.

Sau đó chúng tôi phân tách tất cả các đường dẫn trong SVG G thành các lệnh cơ bản riêng biệt và kết hợp các vector tương ứng của chúng thành dạng ma trận:

f(G) = (f(Pi))N i=1 = f(Cj i)Mi j=1N i=1 = (K1 1;K2 1;···;KM1 1) ............ (K1 N;K2 N;···;KMN N), (2)

trong đó ";" biểu thị phép toán stack, và mỗi hàng ma trận đại diện cho một lệnh riêng lẻ. Do đó, chúng ta có thể thu được ma trận SVG có cấu trúc f(G) trong R(ΣN i=1Mi)×9 để biểu diễn một SVG chứa ΣN i=1Mi lệnh cơ bản riêng lẻ.

Matrix to Stroke Sau khi thu được ma trận SVG f(G), chúng tôi muốn nén ma trận thành stroke tokens rời rạc thông qua biểu diễn ẩn, với đó người ta có thể tái tạo f(G). Như được thể hiện trong Hình 3, mô hình VQ-Stroke bao gồm các khối Down-Sample, một Stroke Codebook B, và các khối Up-Sample. Ma trận SVG f(G) đầu tiên được mã hóa bởi các khối Down-Sample để thu được các biểu diễn nén, điều này đòi hỏi tăng số lượng kênh biểu diễn (cột của f(G)) trong khi đồng thời nén các chiều không gian (hàng của f(G)) để tạo ra biểu diễn compact hơn, tức là nén số lượng lệnh thành T sao cho T < ΣN i=1Mi. Sau đó, Codebook B đồng thời tiến hành d mức độ nén với residual vector quantization (Martinez et al., 2014), cho phép VQ-Stroke mô hình hóa tốt hơn các biểu diễn nén. Chúng tôi mô tả kiến trúc chi tiết của các khối Down-Sample và Up-Sample trong Hình 4, trong đó cả hai khối đầu tiên sử dụng mô hình Conv1d hoặc ConvTranspose1d để nén hoặc mở rộng các đặc trưng, tiếp theo là một mô-đun ResNet1d và một mô-đun Conv1d bổ sung để trích xuất đặc trưng. Đáng chú ý rằng tỷ lệ nén thấp cho phép VQ-Stroke học các chi tiết tinh của SVGs (cột thứ nhất và thứ hai), trong khi nén mạnh mẽ hơn (cột thứ ba) cho phép VQ-Stroke nắm bắt đường viền tổng thể của SVGs. Như được minh họa trong Hình 5, tỷ lệ nén thấp cho phép VQ-Stroke học các chi tiết tinh của SVGs (cột thứ nhất và thứ hai), trong khi nén mạnh mẽ hơn (cột thứ ba) cho phép VQ-Stroke nắm bắt đường viền tổng thể của SVGs. Chúng tôi có thêm thảo luận trong Mục 4.2. Cuối cùng, các khối Down-Sample tái tạo biểu diễn ẩn SVG từ đầu ra của Codebook B.

Để huấn luyện mạng như vậy, chúng tôi tuân theo Dhariwal et al. để tính toán commitment loss, codebook loss, và reconstruction loss để cùng nhau cập nhật VQ-Stroke trong Phương trình 3:

ℓVQ−Stroke = α(ℓcodebook + ℓcommit) + ℓrecon = α(|| Z − sg[Z̃]||2 2 + ||sg[Z] − Z̃ ||2 2) + MSE(f̂(G), f(G)), (3)

trong đó α là siêu tham số, Z là đầu ra ẩn nén từ các khối down-sample, Z̃ là ẩn được tra cứu từ codebook B, và sg[·] là phép toán gradient clipping. Bên cạnh đó, chúng tôi tiền chuẩn hóa dữ liệu đầu vào vào phạm vi [−1,1] để ổn định quá trình huấn luyện.

3.2.2. LLM DỰA TRÊN ENCODER-DECODER

Chúng tôi sử dụng LLM Encoder-Decoder (EDM) để dự đoán các stroke tokens thu được từ codebook B. Xem xét khả năng hướng dẫn văn bản vốn có của LLM, chúng tôi đóng băng encoder EDM để tận dụng kiến thức văn bản được thừa kế. Sau đó, chúng tôi tinh chỉnh decoder EDM để học tác vụ dự đoán stroke token. Do sự khác biệt giữa từ vựng của stroke tokens và từ vựng gốc của LLM, chúng tôi mở rộng EDM với một lớp embedding stroke bổ sung và một predictor stroke. Do đó, với các tham số mô hình có thể huấn luyện θ và text prompt K, chúng tôi tối đa hóa xác suất log arg maxθ ΠT i=1 P(ti|t<i,K) với cross-entropy loss.

3.2.3. SVG FIXER

Một vấn đề quan trọng phát sinh trong kết quả tạo ra từ cả SDM và EDM, vì chúng không đảm bảo Phương trình 1 do sự khác biệt của các điểm kết nối giữa các lệnh liền kề trong mỗi đường dẫn SVG riêng lẻ, tức là (x1, y1)j i ≠ (x0, y0)j+1 i trong đường dẫn thứ i. Để giải quyết vấn đề này, chúng tôi giới thiệu SVG Fixer (SF) như một mô-đun hậu xử lý cho kết quả được tạo ra. Nó bao gồm hai chiến lược: Path Clipping (PC) và Path Interpolation (PI). Cụ thể, PC bao gồm việc thay thế trực tiếp điểm bắt đầu của mỗi lệnh SVG bằng điểm kết thúc của các lệnh SVG liền kề: (x0, y0)j+1 i := (x1, y1)j i. Mặt khác, PI bao gồm việc thêm M lệnh giữa mỗi cặp lệnh SVG liền kề nhưng không kết nối để bắc cầu cho sự khác biệt, tức là nếu (x1, y1)j i ≠ (x0, y0)j+1 i ⟹ thêm một lệnh bổ sung M,(x1, y1)j i,0,0,0,0,(x0, y0)j+1 i để buộc điểm kết thúc của lệnh trước di chuyển đến điểm bắt đầu của lệnh liền kề tiếp theo. Như được thể hiện trong Hình 5, PC có thể hợp lý hóa các đường dẫn tổng thể của SVGs, làm cho chúng ngắn gọn hơn, nhưng có thể dẫn đến một số sai sót trong chi tiết. Mặt khác, PI có xu hướng tiết lộ nhiều chi tiết của các nét vẽ được tạo ra hơn, nhưng có thể giới thiệu thêm các đường cong. Mỗi chiến lược có các tình huống áp dụng riêng của nó.

4. Thí nghiệm

4.1. Cài đặt Thí nghiệm

Tập dữ liệu Chúng tôi xây dựng dữ liệu huấn luyện và đánh giá với tập dữ liệu FIGR-8-SVG (Clouâtre & Demers, 2019), bao gồm các biểu tượng SVG đơn sắc (đen-trắng) lớn. Chúng tôi tiền xử lý dữ liệu SVG bằng cách chuyển đổi mỗi mẫu SVG thành biểu diễn chuẩn hóa, loại bỏ các đường dẫn SVG dư thừa, bỏ hộp đen bên ngoài, và lọc dữ liệu bằng cách áp dụng ngưỡng 1,024 lệnh cơ bản về độ dài. Chúng tôi lọc các instance với ít hơn hai từ khóa rời rạc được chú thích và áp dụng template "Generating SVG according to keywords: {···}" để xây dựng text prompt. Sau khi tiền xử lý, chúng tôi lấy mẫu 2,000 instances với độ dài mã SVG khác nhau làm tập kiểm tra, 8,000 mẫu để xác thực, và áp dụng 740K mẫu còn lại để huấn luyện.

Chỉ số Đánh giá Chúng tôi đánh giá chất lượng SVG được tạo ra của VQ-Stroke và StrokeNUWA từ nhiều khía cạnh khác nhau. Đối với VQ-Stroke, chúng tôi chủ yếu xem xét chất lượng tái tạo và hiệu quả nén. Chúng tôi đánh giá chất lượng tái tạo với Fréchet Inception Distance (FID) (Heusel et al., 2017) và CLIPScore (Radford et al., 2021). Do các đồ họa SVG được tạo ra chỉ bao gồm các đường kẻ, chúng tôi đặt màu nền thành trắng để giảm thiểu các thiên vị tiềm ẩn cho FID và CLIPScore do nền gây ra (Wu et al., 2023a). Ngoài ra, chúng tôi tính toán Edit Score (EDIT) giữa mã SVG được tái tạo và mã SVG Vàng để phản ánh độ trung thực của đồ họa SVG được tái tạo trong việc sao chép các chi tiết tinh. Để phản ánh hiệu quả nén thực tế của VQ-Stroke, chúng tôi tính toán điểm Compression Ratio (CR) giữa mã SVG được token hóa và stroke tokens, tức là CR = Len(tokenized SVG code) / Len(stroke tokens).

Đối với StrokeNUWA, ngoài việc sử dụng các chỉ số đã đề cập ở trên, chúng tôi bổ sung đánh giá với Human Preference Score (HPS) (Wu et al., 2023b) và Recall Score để phản ánh chất lượng của đồ họa SVG được tạo ra và mức độ chồng chéo của chúng với mã SVG Vàng. Ngoài ra, chúng tôi cũng báo cáo thời gian cần thiết để tạo ra mỗi SVG và tiến hành đánh giá định tính.

Tác vụ và Baseline Chúng tôi đánh giá VQ-Stroke và SVGNUWA với các tác vụ tái tạo SVG và tạo SVG được hướng dẫn bởi văn bản, tương ứng. Đối với VQ-Stroke, xem xét sự vắng mặt của các công trình trong lĩnh vực biểu diễn SVG, chúng tôi tập trung vào việc so sánh hiệu suất của hai phương pháp SF, tức là PI và PC. Ngoài ra, chúng tôi đánh giá hiệu suất tái tạo của hai tỷ lệ nén khác nhau, tức là tỷ lệ nén 2 và 4. Đối với SVGNUWA, chúng tôi so sánh với các phương pháp dựa trên tối ưu hóa, bao gồm Vector Fusion (Jain et al., 2023) và Stable Diffusion (Rombach et al., 2022) kết hợp với phương pháp LIVE (Li et al., 2020). Do các phương pháp dựa trên tối ưu hóa đặc biệt tốn thời gian, tức là cần hơn 20 phút để tạo ra một SVG trên một GPU NVIDIA V100, chúng tôi lấy mẫu ngẫu nhiên 500 instances từ tập kiểm tra để đánh giá nhằm đảm bảo khung thời gian khả thi. Ngoài ra, chúng tôi cũng so sánh với phương pháp dựa trên LLM Iconshop (Wu et al., 2023a). Chúng tôi tái triển khai Iconshop với cùng backbone Flan-T5 như trong StrokeNUWA và sử dụng tokenizer T5 để mã hóa các giá trị số được tích hợp trong Iconshop. Đáng chú ý, sự khác biệt chính giữa Iconshop và StrokeNUWA nằm ở cách tiếp cận của chúng trong việc xử lý biểu diễn thị giác. Trong khi Iconshop trực tiếp xem mã SVG như visual tokens, StrokeNUWA chuyển đổi mã SVG thành stroke visual tokens với VQ-Stroke. Chúng tôi đặt độ dài tối đa của mô hình là 1,500 cho IconShop để đảm bảo tính đầy đủ của mã SVG.

Chi tiết Triển khai Đối với VQ-Stroke, chúng tôi đặt độ sâu của residual vector quantization d là 2, tương ứng với tỷ lệ nén 2 và 4. Sau đó, chúng tôi đặt kích thước codebook |B| là 4096, với mỗi mã tương ứng với biểu diễn ẩn 512 chiều. Chúng tôi đặt α = 1 trong Phương trình 3 trong quá trình huấn luyện. Đối với EDM, chúng tôi sử dụng mô hình Flan-T5 3B (Chung et al., 2022) làm backbone. Chúng tôi sử dụng DeepSpeed Library (Rajbhandari et al., 2020) để triển khai các mô hình trên 64 GPU NVIDIA V100 và đặt độ dài tối đa của mô hình là 512.

4.2. Đánh giá Định lượng

VQ-Stroke Chúng tôi báo cáo chất lượng tái tạo của VQ-Stroke trong Bảng 3. Không có SF, VQ-Stroke không thể tạo ra kết quả tuân thủ cú pháp SVG. Sau khi trang bị VQ-Stroke với SF, PI tạo thuận lợi cho việc xấp xỉ trung thực hơn của đồ họa SVG gốc bằng cách đạt được điểm FID thấp nhất và thể hiện sự phù hợp cao hơn với các text prompts đã cho, như được chứng minh bởi điểm CLIP thấp nhất. Ngược lại, phương pháp PC mang lại kết quả căn chỉnh tốt hơn với mã SVG gốc vì nó đạt được điểm EDIT thấp nhất. Sử dụng mức nén 2 (C-4), VQ-Stroke đạt được Compression Ratio (CR) đáng chú ý là 6.9%, duy trì hiệu suất ngang bằng với C-2 như được chứng minh bởi CLIPScore và FID tương đương. Điều này cho thấy VQ-Stroke bảo tồn tính toàn vẹn ngữ nghĩa của đồ họa SVG gốc mặc dù nén đường dẫn đáng kể.

StrokeNUWA Như được minh họa trong Bảng 2, StrokeNUWA vượt trội hơn các phương pháp khác bằng cách đạt được kết quả vượt trội. Cụ thể, về hiệu suất thị giác, StrokeNUWA có khả năng tạo ra đồ họa giống với SVG Vàng hơn - được chứng minh bởi điểm FID thấp nhất (6.513) và HPS cao nhất (16.801). Điều này cho thấy Stroke Tokens của chúng tôi cung cấp khả năng tương thích lớn hơn với LLMs so với cách tiếp cận vanilla (Iconshop). Hơn nữa, StrokeNUWA đã đạt được CLIPScore cao nhất (17.994), vượt trội hơn cả các phương pháp dựa trên Tối ưu hóa. Điều này cho thấy StrokeTokens đóng gói ngữ nghĩa thị giác một cách hiệu quả. Về chất lượng của mã SVG và hiệu quả tạo ra, Stroke Token không chỉ căn chỉnh chặt chẽ với tiêu chuẩn Vàng mà còn nâng cao đáng kể tốc độ tạo ra, tức là khoảng 19 giây của StrokeNUWA so với khoảng 30 phút của phương pháp dựa trên Tối ưu hóa LIVE. Điều này nhấn mạnh khả năng nén ấn tượng của Stroke token trên mã SVG gốc, thể hiện cả hiệu quả và chất lượng nén.

4.3. Đánh giá Định tính

Nghiên cứu Trường hợp Chúng tôi thể hiện kết quả tái tạo của VQ-Stroke với các mức độ phức tạp khác nhau trong Hình 7 và trình bày so sánh định tính giữa StrokeNUWA và các baseline khác trong Hình 8(a). Thật ấn tượng rằng VQ-Stroke có thể tái tạo các SVG phức tạp chỉ với giới hạn 4,096 kích thước codebook. Sau đó, ở Compression Rate 2 (CR-2), VQ-Stroke thành công trong việc phác thảo biên của các đối tượng trong đồ họa, chứng minh rằng stroke tokens có thể được nén cao với biểu diễn dày đặc và vốn dĩ kết hợp phân đoạn ngữ nghĩa, điều này rất quan trọng để giữ lại ngữ nghĩa thị giác. Về so sánh StrokeNUWA, chúng tôi lưu ý rằng việc sử dụng các phương pháp tạo ra dựa trên LLM có thể dẫn đến SVGs không hoàn chỉnh (Iconshop). Điều này được quy cho độ dài mã SVG quá mức và LLMs gặp khó khăn trong việc nắm bắt thông tin chính được nhúng trong đồ họa SVG. Tuy nhiên, việc sử dụng stroke tokens có thể giảm thiểu những vấn đề này bằng cách nén các đường dẫn và tương thích với LLMs. Hơn nữa, chúng tôi thấy rằng hiệu suất của phương pháp dựa trên tối ưu hóa phụ thuộc nhiều vào đầu ra được tạo ra bởi mô hình stable diffusion, vốn chịu những hạn chế của grid tokens được đề cập trong Mục 1, ví dụ, khó nắm bắt ngữ nghĩa thị giác và có xu hướng tạo ra thông tin thị giác bổ sung không căn chỉnh với text prompt. Bên cạnh đó, quá trình tối ưu hóa cực kỳ chậm. Ngược lại, StrokeNUWA, sử dụng stroke tokens, vốn dĩ chứa phân đoạn ngữ nghĩa thị giác. Kết quả là, nội dung được tạo ra phù hợp hơn với ngữ nghĩa văn bản, cung cấp đồ họa mạch lạc và chính xác về mặt ngữ nghĩa hơn.

Đánh giá của Con người Hơn nữa, chúng tôi tiến hành đánh giá của con người để so sánh đầu ra SVG được tạo ra từ StrokeNUWA với những đầu ra được sản xuất bởi phương pháp dựa trên LLM, Iconshop. Chúng tôi chọn 50 text prompts khác nhau và hướng dẫn mô hình tạo ra SVGs tương ứng để đánh giá. Như được mô tả trong Hình 9, so sánh của chúng tôi được dựa trên ba tiêu chí: Prompt Alignment (tính nhất quán giữa kết quả được tạo ra và text prompt), Overall Quality (chất lượng chung của SVGs), và Graphic Details (các chi tiết phức tạp như đường cong). Chúng tôi quan sát rằng StrokeNUWA, so với Iconshop, vốn xem mã như biểu diễn thị giác, không chỉ tạo ra nội dung hoàn chỉnh hơn (Overall Quality tốt hơn) mà còn tạo ra kết quả phù hợp hơn với text prompts (Prompt Alignment tốt hơn). Do stroke tokens nén các chi tiết của SVG, thật tự nhiên rằng StrokeNUWA vượt trội trong việc tạo ra Graphic Details.

5. Nghiên cứu Loại bỏ

5.1. Phân tích Kiến trúc Mô hình VQ-Stroke

Để điều tra tác động của cấu hình kiến trúc VQ-Stroke lên hiệu suất stroke token, chúng tôi thí nghiệm với các kích thước codebook |B| và chiều codebook Dim khác nhau. Như được thể hiện trong Bảng 4, chúng tôi có thể quan sát rằng bằng cách tăng kích thước codebook trong khi đồng thời giảm chiều của mỗi stroke token, VQ-Stroke đạt được hiệu suất vượt trội trên nhiều chỉ số. Chúng tôi lấy mẫu một tập hợp các trường hợp tái tạo để thể hiện xu hướng thay đổi trong Hình 7, cho thấy rằng, với kích thước codebook lớn hơn và chiều nhỏ hơn, VQ-Stroke có thể phác thảo chi tiết với độ chính xác lớn hơn, ví dụ, các đường thẳng hơn.

5.2. So sánh với GPT-4

Chúng tôi so sánh kết quả tạo ra với GPT-4 (Achiam et al., 2023) bằng cách sử dụng template sau để hướng dẫn GPT-4 tạo ra mã SVG tương ứng: Generate SVG codes in icon style based on keywords: {KEYWORDS}. Chúng tôi thể hiện các SVGs được render trong Hình 8(b), nơi chúng tôi có thể quan sát rằng GPT-4 chỉ có thể tạo ra SVGs đơn giản, điều này phù hợp với các phương pháp dựa trên LLM. Hơn nữa, GPT-4 thường tạo ra SVGs không phù hợp với văn bản liên quan.

6. Kết luận và Công việc Tương lai

Bài báo này trình bày StrokeNUWA, một nghiên cứu tiên phong khám phá biểu diễn thị giác vượt trội - "stroke" tokens, như một phương pháp thay thế để biểu đạt hình ảnh thông qua đồ họa vector. Stroke tokens không chỉ bảo tồn tính toàn vẹn ngữ nghĩa của hình ảnh mà còn có lợi cho việc xử lý bởi LLMs. Hơn nữa, các nét vẽ trong đồ họa vector có thể được nén cao. Các thí nghiệm cho thấy rằng, được trang bị stroke tokens, LLMs có thể đạt được kết quả vượt trội trên nhiều chỉ số khác nhau trong tác vụ tổng hợp SVG. Bài báo này thể hiện tiềm năng to lớn của biểu diễn stroke token trong lĩnh vực tổng hợp đồ họa vector. Trong tương lai, chúng tôi muốn tiếp tục cải thiện chất lượng của stroke tokens thông qua các phương pháp token hóa thị giác tiên tiến được thiết kế riêng cho LLMs. Ngoài ra, chúng tôi dự định tổng quát hóa việc sử dụng stroke token cho phạm vi rộng hơn các tác vụ (SVG Understanding), các lĩnh vực (3D), và việc tạo ra SVGs cho hình ảnh có nguồn gốc từ thế giới thực.

Tuyên bố Tác động

Ý nghĩa của công trình này là đa dạng, có khả năng cách mạng hóa tổng hợp thị giác từ một định dạng hình ảnh khác, đồ họa vector. Khi stroke tokens tinh chỉnh sự tương tác giữa biểu diễn thị giác và LLMs, những tiến bộ trong tương lai trong các kỹ thuật token hóa thị giác được thiết kế cho LLMs được dự đoán. Trong tương lai, cộng đồng có thể mở rộng ứng dụng stroke token vào các tác vụ và lĩnh vực rộng hơn, bao gồm hiểu SVG và tổng hợp SVG miền mở cho hình ảnh từ thế giới thực. Khi chúng tôi tiên phong lĩnh vực mới nổi này, chúng tôi ý thức về tác động xã hội sâu sắc mà những tiến bộ như vậy trong học máy và biểu diễn đồ họa mang lại. Các khả năng cho thiết kế đồ họa tự động, sản xuất đồ họa vector có thể mở rộng, và nghệ thuật số nâng cao báo trước những thay đổi đáng kể trong các ngành công nghiệp phụ thuộc vào nội dung thị giác. Bằng cách tạo ra các con đường mới cho biểu đạt nghệ thuật và giao tiếp thị giác, công trình của chúng tôi không chỉ đóng góp cho cộng đồng khoa học mà còn xúc tác cho những chuyển đổi trong các lĩnh vực sáng tạo, công nghệ và giáo dục. Chúng tôi nhận ra tầm quan trọng của công trình và trách nhiệm của mình trong việc đảm bảo rằng những đóng góp của chúng tôi cho lĩnh vực này được tiến hành một cách đạo đức, nhằm mục đích mang lại lợi ích cho toàn xã hội, dân chủ hóa cảnh quan thị giác, và làm phong phú nó thông qua đổi mới có trách nhiệm và thận trọng.
