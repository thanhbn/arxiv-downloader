# 2305.11598.pdf
# Converted from PDF to TXT
# Source path: /home/admin88/arxiv-downloader/icl/2305.11598.pdf
# File size: 2043152 bytes

===============================================
PDF FILE CONTENT
===============================================


--- PAGE 1 ---
Introspective Tips: Large Language Model for
In-Context Decision Making
Liting Chen1, Lu Wang1, Hang Dong1, Yali Du2, Jie Yan1, Fangkai Yang1,
Shuang Li3, Pu Zhao1, Si Qin1, Saravan Rajmohan1, Qingwei Lin1,
Dongmei Zhang1
1Microsoft2Kings College London3The Chinese University of Hong Kong (Shenzhen)
Abstract
The emergence of large language models (LLMs) has substantially inuenced natural
language processing, demonstrating exceptional results across various tasks. In this study,
we employ \Introspective Tips" to facilitate LLMs in self-optimizing their decision-making.
By introspectively examining trajectories, LLM renes its policy by generating succinct and
valuable tips. Our method enhances the agent's performance in both few-shot and zero-
shot learning situations by considering three essential scenarios: learning from the agent's
past experiences, integrating expert demonstrations, and generalizing across diverse games.
Importantly, we accomplish these improvements without ne-tuning the LLM parameters;
rather, we adjust the prompt to generalize insights from the three aforementioned situa-
tions. Our framework not only supports but also emphasizes the advantage of employing
LLM in in-contxt decision-making. Experiments involving over 100 games in TextWorld
illustrate the superior performance of our approach.
1 Introduction
Large Language Models (LLMs), including OpenAI's GPT-3.5 (Ouyang et al., 2022), GPT-
4 (OpenAI, 2023), Google's PaLM (Chowdhery et al., 2022) and other benchmarks (Meta,
2023; Taori et al., 2023) have consistently achieved remarkable performance across various
NLP tasks. The integration of LLMs into decision-making tasks (Huang et al., 2022a; Ahn
et al., 2022; Kwon et al., 2023; Brooks et al., 2022; Yao et al., 2022) has garnered signicant
attention, as it presents an opportunity to develop decision-making agents that can emulate
human-like cognitive processes (Shevlin et al., 2019). In decision-making tasks, such as
in the domain of Reinforcement Learning (RL), limited interactions hinder optimal policy
learning (Yarats et al., 2021). Owing to the power of LLMs, which have undergone extensive
pre-training on vast amounts of data, agents can leverage the generalization capabilities of
LLMs to enhance their performance across dierent tasks. In addition, common sense
knowledge is a valuable asset in safety decision-making tasks (Brunke et al., 2022), and
LLMs possess a wealth of this knowledge due to their extensive training and tuned with
human feedback (Ouyang et al., 2022). By leveraging the inherent common sense knowledge
within LLMs, decision-making agents can make more informed decisions, eectively tackling
challenges such as sparse rewards and enhancing the learning process.
However, LLMs sometimes demonstrate errors or hallucinations (Ji et al., 2023; Peng
et al., 2023), especially in domain-specic scenarios. Recent works focus on designing self-
correction mechanisms to enhance the LLM's decision-making performance. For example,
1arXiv:2305.11598v1  [cs.AI]  19 May 2023

--- PAGE 2 ---
Chain-of-thought (CoT) (Wei et al., 2022) concentrates on static reasoning for one-step
actions without self-correction. ReAct (Yao et al., 2022) and Reexion (Shinn et al., 2023)
focus on dynamic reasoning based on historical interactions to enable better decision-making
performance. However, these works primarily focus on generating instructions or reections
specic to individual agents, hindering the adoption of the generalization and universality
abilities of LLMs. Furthermore, the absence of correction for the generated reections can
lead to errors during the decision-making process.
Humans possess high generalization and self-evolution capabilities due to their natural
ability to summarize tipsthrough introspection (Cox, 1996; Van Merrienboer and Sweller,
2005). Introspection enables humans to reect on their past experiences (successes or fail-
ures), distill key insights, and extract valuable lessons that can be applied to new situations.
Inspired by the remarkable introspection capabilities of humans, we introduce \Introspec-
tive Tips" (or \Tips" for short) as a novel prompt-based paradigm, empowering an LLM
decision-making agent with self-optimizing capabilities via learning tips from trajectories of
itself, experts, and other environments. Figure 1 provides an example of introspective tips
in a text-based game.
Figure 1: In both Game 1 and Game 2, the agent is tasked with checking the cookbook
and cooking a meal. The cookbooks for each game are dierent, but the initial state
remains the same. After playing in Game 1, the agent is asked to participate in Game 2,
using tips or reections generated from the Game 1 trajectory. The agent's reection
focuses on the errors made in Game 1 and is specic to that game. Tips, on the other
hand, oer more general and high-level information about the game. Utilizing tips from
Game 1, the agent learns that the stove is for frying ingredients and uses the oven to roast
the apple. The agent subsequently updates its knowledge about the game by
incorporating a third tip. However, when using reections, the agent receives an irrelevant
message about potatoes, which leads to its failure to check the cookbook and complete the
task in Game 2. In this case, the general tips prove to be more helpful in guiding the
agent's behavior and improving its performance, whereas the specic reections from
Game 1 do not provide useful information for Game 2.
Distinct from reection (Shinn et al., 2023), which is a self-analysis process that delves
into an agent's actions and experiences in detail, "tips" are compact pieces of information
oering high-level guidance or suggestions. The goal of tips is to provide succinct and
2

--- PAGE 3 ---
practical advice for enhancing decision-making performance without requiring an in-depth
examination of past trajectories. In contrast, reections can only be derived from the agent
itself and primarily concentrate on learning from failures. Tips, on the other hand, can be
acquired from the trajectories of other agents and human experts, focusing on learning from
both successes and failures. For example, in the game setting, the agent can generalize tips
to correctly use oven based on its successful trajectory, but reection may focus more on
failures.
Additionally, in contrast to using original trajectories as prompts, introspective tips serve
as condensed and comprehensive insights extracted from lengthy trajectories. This allows
LLMs to overcome the challenges in discerning the intricate relationship between dependent
actions and sparse rewards across multiple trajectories (Adhikari et al., 2020). Introspective
tips provide distinct advantages in terms of their applicability and generalization across
dierent agents and contexts, as opposed to previous prompting methods such as reections.
Unlike reections that target specic agents, tips can be shared among dierent agents,
allowing for higher generalization performance. In the game setting of Figure 1, the tips
generalized by the agent can be applied to various game settings with dierent recipes. In
contrast, reections are more specic to a single past trajectory.
Furthermore, designing suitable prompts for LLMs to generate introspective tips is a
crucial challenge; manually crafting prompts can be burdensome. Therefore we propose
a framework that dynamically adjusts the prompt based on insights derived from past
trajectories or expert demonstrations through introspection.
Our contributions can be summarized as follows:
â€¢Introspective Tips for Self-Optimizing Decision-Making: We introduce Introspec-
tive Tips as a novel prompt-based paradigm, empowering LLM decision-making agents
with self-optimizing capabilities for both few-shot and zero-shot scenarios. Unlike pre-
vious RL agents, Introspective Tips oers an end-to-end solution without the need for
training or ne-tuning. It generates meaningful and easy-to-understand tips, facilitating
human understanding and intervention in the decision-making process.
â€¢Multiple Strategies in dierent scenarios for Learning Introspective Tips: We
present distinct strategies applicable in dierent scenarios to prompt LLMs to learn Intro-
spective Tips from their own trajectories, expert demonstrations, and multi-environment
trajectories, which also shows the generalization andadaptability of Introspective
Tips.
â€¢A Dynamic Prompt Adjustment Framework: To simplify the prompting engineer-
ing process, we introduce a framework that dynamically adjusts the prompt by leverag-
ing insights from past trajectories or expert demonstrations through introspection. This
framework streamlines the improvement process, enhances the model's adaptability, and
enables more ecient decision-making.
â€¢Comprehensive Evaluation and Comparison: Our extensive experiments encom-
pass over 100 games in TextWorld (Adhikari et al., 2020; C^ ot e et al., 2019), testing
few-shot and zero-shot learning scenarios. We evaluate the performance of our decision-
making agent against state-of-the-art methods in the eld (Tuli et al., 2022), highlighting
3

--- PAGE 4 ---
the eectiveness and superiority of Introspective Tips. With tips generated from 48 tra-
jectories, LLM agent performs better than previous deep learning method training for
100, 000 episodes in the unseen game with the highest diculty level.
2 Related work
Language model for decision making LLMs (OpenAI, 2023; Chowdhery et al., 2022)
have exhibited impressive prociencies, facilitating their use in tasks beyond mere language
generation and increasingly serving as policy models for decision-making in interactive set-
tings (Yang et al., 2023). Wei et al. (2022) demonstrates that incorporating a series of
intermediate reasoning steps can enhance decision-making abilities. Yao et al. (2022) in-
troduces ReAct, a method for interleaved reasoning and action generation that fosters
improved synergy between language comprehension and interactive decision-making tasks.
Shinn et al. (2023) presents Reexion, a technique that equips an LLM-based agent with a
self-reective LLM and a straightforward heuristic for detecting hallucination and inecient
action execution to examine the hypothesis. Madaan et al. (2023) adopts a similar strategy,
enabling an LLM to oer feedback on its previously generated text and rene it to meet
specic requirements. When regarded as dialogue agents, LLMs can also be trained to learn
from human feedback and optimize their output (Ouyang et al., 2022; Bai et al., 2022).
With further training, Li et al. (2022) constructs a general framework for decision-making
tasks using pre-trained LMs, even in scenarios where language is neither provided as input
nor output. Other studies (Singh et al., 2022; Huang et al., 2022a,b; Liang et al., 2022;
Vemprala et al., 2023) have explored innovative strategies involving prompt engineering
and the utilization of high-level function libraries to enhance the capabilities of LLMs.
Recent attempts explored dierent aspects of LLMs for decision-making. Huang et al.
(2022a) and Ahn et al. (2022) use LLMs to generate plans or sub-goals that guide low-level
Reinforcement Learning (RL) agents in taking actions. Kwon et al. (2023) utilize LLMs as
proxy reward functions by prompting them with desired behaviors. Yao et al. (2022) focus
on enabling LLM agents to select actions in text-based environments. In addition, a recent
approach considers LLMs as world models (Brooks et al., 2022), where the agent learns the
policy by interacting with the LLM-based world model. In this paper, we focus on directly
grounding LLM in decision-making to take action because the other three methods required
learning an extra decision-making agent, which required more samples.
In-context reinforcement learning In-context learning pertains to the ability of se-
quence prediction models to adapt to novel downstream tasks solely through the use of
prompts without retraining or ne-tuning (Lu et al., 2021; Brown et al., 2020; Min et al.,
2022). When applied to reinforcement learning, in-context learning models can generalize
to diverse downstream tasks when provided with contexts such as demonstrations and task
information. Laskin et al. (2022) recasts RL as an across-episode sequential prediction prob-
lem, and trains a causal transformer to autoregressively predict actions based on preceding
learning histories as context. Brooks et al. (2022) employs the LLM as a world model for
planning future trajectories and executing decisions in-context. Team et al. (2023) develops
a versatile in-context learning algorithm capable of adapting to new and open-ended 3D
challenging problems as rapidly as humans, by training an RL agent at a large scale. Lu
et al. (2023) proposes to meta-learn across random linear projections of the observation and
4

--- PAGE 5 ---
action spaces of randomly sampled DMControl tasks (Tassa et al., 2018). Trained on an
extensive dataset, Gato (Reed et al., 2022) can generalize to new tasks by conditioning on
demonstrations of the desired behavior.
Text-based game Text-based games are typically turn-based experiences played via
a command line terminal. During each turn, the game state is conveyed through mul-
tiple lines of text, which enables players to input text commands that modify the state
according to their preferences (Liu et al., 2022; Hendrycks et al., 2021; Osborne et al.,
2022). Text-based games can be formally characterized as partially observable Markov de-
cision processes (POMDPs) (C^ ot e et al., 2019), considering that the agent only observes
partial information about the environment at each turn. Intrinsic obstacles such as long-
term dependencies, partial observation of current states, and sparse rewards, and complex
action combinations render these games particularly challenging. Various deep learning ap-
proaches have been employed to address text-based games (Xu et al., 2022; Yin and May,
2019; Ammanabrolu and Hausknecht, 2020; Kimura et al., 2021). Focusing on tasks in
the TextWorld domain (C^ ot e et al., 2019), Adhikari et al. (2020) explores learning graph-
structured state representations via a data-driven approach, introducing the Graph Aided
Transformer Agent (GATA) that learns to construct and update graph-structured beliefs
while optimizing rewards. Building upon their work, Tuli et al. (2022) equips GATA with an
internal structured representation of natural language instructions using Linear Temporal
Logic (LTL) to enhance the instruction-following capabilities of text-based game agents.
3 Method
In this section, we elaborate on the method employed to leverage the capabilities of LLMs
in sequential decision-making tasks, particularly text-based games, by addressing LLMs
inherent limitations and capitalizing on their strengths. LLMs' prociency in understand-
ing and generating human-like text renders them promising candidates for tasks involving
natural language processing, such as text-based games. However, they lack specic domain
knowledge when asked to make decisions in certain tasks thus may not reach the greatest
potential when used directly.
We conjecture that the function space of generative LLMs P() is suciently expansive
to encompass the function of an expert policy in text-based games. The action space of
policyis constrained by text output. By selecting an appropriate prompt prcontaining
enough domain knowledge, we can derive a model P(jpr) that can function as a in
decision making, bridging the gap between LLMs and reinforcement learning. Through
incorporating strategies including learning from past experiences, expert demonstrations,
and multiple games, we aim to develop a versatile and robust framework that excels in a wide
range of gaming scenarios. This approach ultimately opens up the journey of discovering
the potential of LLMs in the domain of complex sequential decision-making tasks.
3.1 Challenges and Solutions for LLMs in Decision-Making Problems
There are several major challenges when applying Language Learning Models (LLMs) to
solve decision-making problems, including self-optimization, input length limitations, and
prompt dependence. In this section, we discuss these challenges and potential solutions.
5

--- PAGE 6 ---
Self-Optimizing decision-making LLMs can exhibit errors or hallucinations, partic-
ularly in domain-specic scenarios. Developing self-optimizing mechanisms to enable LLMs
to correct their mistakes is essential for improving their decision-making performance. More-
over, allowing LLMs to self-optimize across various scenarios poses a signicant challenge.
Current approaches, such as self-reection, attempt to rectify errors by concentrating on the
model's own mistakes. However, this method has limitations, including the risk of LLMs
becoming misled by their own errors during reection and lacking a comprehensive under-
standing of the task or environment. To address these challenges, we employ "Introspective
Tips" to facilitate LLMs in self-optimizing their decision-making. We empower LLMs to
learn from their own trajectories, expert demonstrations, and trajectories in dierent envi-
ronments. By extracting concise and actionable advice from these trajectories, the agent
gains a better understanding of the environment. Furthermore, by rening its own tips, the
problem of hallucination is alleviated.
Limited input length Language models like GPT-4 (OpenAI, 2023) and PaLM (Chowd-
hery et al., 2022) often encounter input length limitations. In RL, agents typically face
lengthy and complex trajectories, as well as sparse rewards that oer feedback only after
numerous steps or interactions. Due to the restricted input capacity and extended trajec-
tories, LLMs struggle to discern the relationship between actions and rewards, ultimately
impeding the acquisition of the optimal policy. To address these issues and optimize the
available input space, we use tips that eectively condense the training dataset or critical
information generally found in classical RL settings. By incorporating these summaries,
LLMs can better understand the relationships within the data and identify essential pat-
terns that might be otherwise obscured by the sheer length or complexity of the trajectories.
Moreover, providing concise, relevant information enables LLMs to focus on the crucial as-
pects of the problem at hand, potentially leading to more accurate results. This strategy
can be particularly benecial in scenarios where the agent must learn from limited data or
adapt to changing environments, as the distilled information can help guide the learning
process more eciently.
Prompt dependence: The LLM's performance on a specic problem heavily relies
on the quality and order of prompts. In order to solve the sequential decision problem in
text-based games, that is to produce more relevant and valuable responses in each round, it
is crucial to craft prompts in decision making. However, creating prompts using human in-
teraction can be time-consuming and tedious. To address this issue, our method introduces
a framework that dynamically adjusts the prompt based on past trajectories through intro-
spection, streamlining the process and improving the model's adaptability. While designing
a specic tip for one game can be laborious, we also explore the possibility of generating
a universal prompt that can transform the LLM into an ecient RL agent across various
games and contexts. This general prompt would further facilitate the LLM's ability to
adapt and perform eectively in a wide range of decision-making situations.
3.2 Basic setting
In our basic setting (Fig 2a), we directly utilize an LLM as an agent participating in a
text-based game. A sample interaction proceeds as follows:
6

--- PAGE 7 ---
Figure 2: LLM as RL agent
system: You are an agent playing in a
text-based game. All of your available ac-
tions are in the ActionList:
inventory() # print player's inventory
...(see appendix for the full list of action)
Based on the game's description that I
give you, provide me with only one action
per step in the action list and wait for my
response. (Following is the description of
the rst state in a TextWorld game.)
Agent: inventory()The system (user) clearly denes the
role and action space for the LLM agent
and provides an initial text-based descrip-
tion of the environment, setting the scene
for the agent. The LLM-agent interprets
the provided information and decides on an
action based on its understanding of the
game's context. The agent submits its cho-
sen action as text, which the system inter-
prets, processes, updates the environment,
and provides new feedback, including infor-
mation on invalid actions or a description of
the updated state, to the agent. The LLM-
agent continues to interact with the game, choosing actions and receiving feedback, until
the game reaches its conclusion. The game concludes as a success if the agent completes all
required steps, or as a failure if the agent takes erroneous actions or reaches the maximum
number of turns. Throughout the entire process, the agent's goal is to navigate the game
world and make decisions based on textual input and output.
3.3 Strategies for three scenarios
We have developed strategies for three scenarios to enhance the agent's learning addressing
the two challenges:
Learning from its own history: The agent employs a history replay method to
generate tips for self-improvement. The agent is prompted as the basic setting to nish a
basic trial. If the agent fails, the agent creates several tips to address its past mistakes. In
subsequent attempts, these tips serve as prompts. If the agent fails even if provided with
tips, it is prompted to generate more eective tips for itself. The agent is also provided with
all its previous actions that led to failure in the game. By introspectively analyzing its past
7

--- PAGE 8 ---
actions and their outcomes, the agent generates valuable insights to rene its policy. This
self-enhancement process enables the agent to overcome obstacles and make better choices
in future gameplay. Moreover, since tips and incorrect actions are shorter than an entire
trajectory, the agent can learn from a more extensive history than relying solely on past
experiences as memory (Fig 2b).
Learning from expert demonstrations: The agent evaluates its performance by
comparing it to expert demonstrations and makes adjustments as necessary. In this setting,
the agent is instructed to observe both the actions leading the expert agent to achieve the
goal and the actions causing it to fail the game. By examining successful strategies and
tactics employed by experts, the agent can pinpoint areas for improvement and generat tips
that can help modify its actions accordingly. This learning approach is faster compared to
a purely trial-and-error method. For instance, the agent can learn the correct usage of an
appliance by contrasting its failed attempts with the successful actions demonstrated by an
expert in a text-based game, rather than experimenting with all possible actions.
The agent generates tips based on these observations, and these tips serve as new
prompts when playing subsequent rounds. If the agent fails even when provided with
tips, it is prompted to reect on the given advice. This method enables knowledge trans-
fer from expert demonstrations, resulting in a more ecient and informed decision-making
process. Feedback from the environment acts as guidance for the LLM model, assisting it
in determining the accuracy and eectiveness of its generated tips (Fig 2c).
Learning from multiple games: In this scenario, agents are allowed to participate
in several games. All nal tips (tips that lead to a successful trial) generated across these
games are sent to another LLM, which is then tasked with generating general tips to help the
agent become an expert across various game settings. In this context, the LLM leverages
its knowledge of summarization to produce comprehensive and valuable tips that enable
the agent to improve its performance in a wide range of games. These games share some
similarities but with some information dierent. For example, in the cooking game, these
games share a similar theme (cooking in a modern house), similar text commands, and
similar entities (i.e., interactable objects within the games), but with dierent cookbooks
and maps involved in the game. The LLM generalizes knowledge across diverse games,
functioning similarly to a Meta-RL agent. The general tips are served as prompts in the
unseen test game. This ability allows the LLM to perform eectively in a broad range of
text-based games, positioning it as a powerful tool for reinforcement learning in complex
environments (see Fig 2d).
By incorporating these strategies in the three scenarios, our method presents a robust
framework for exploiting the potential of LLMs in reinforcement learning for text-based
games. Learning from past experiences, expert demonstrations, and multiple games allows
the agent to adapt and excel in various gaming scenarios, ultimately demonstrating the
versatility and eectiveness of LLMs in the realm of reinforcement learning.
4 Experimental Results
We conduct experiments on text-based games to assess the performance of LLMs as agents
and address three key questions: Q1: Can LLMs learn from their historical trajectories and
improve their performance by reecting on dierent tips? Q2: Can LLM learn from expert
8

--- PAGE 9 ---
Figure 3: Few shot performance over dierent diculty levels of games
demonstrations and can expert demonstration boost the learning of dierent strategies?
Q3: Can LLMs generalize some tips to play in various game settings? For Q1 and Q2, we
analyze the few-shot decision-making capabilities of LLMs, while for Q3, we concentrate on
their zero-shot decision-making abilities.
4.1 Experiment setup
Table 1: Statistics of The Game
Level #Ingredients #Locations Points (Cook, Cut, Open )
0 1 1 3 ( Ã—,Ã—,X)
1 1 1 4 ( Ã—,X,X)
2 1 1 5 ( X,X,X)
3 1 9 3 ( Ã—,Ã—,X)
4 3 6 11 ( X,X,X)
We concentrate on the TextWorld Cooking domain, which gained prominence through
GATA (Adhikari et al., 2020) and Microsoft's TextWorld Problems: A Language and Rein-
forcement Learning Challenge (Trischler et al., 2019). Following Adhikari et al. (2020) and
9

--- PAGE 10 ---
Tuli et al. (2022), we divide the games into ve subsets with dierent diculty levels. For
easier games (with smaller diculty levels), the recipe requires fewer ingredients, and the
agent does not need to navigate through the world. For harder games, the agent is asked
to navigate through dierent rooms to acquire various ingredients and cook the meal. The
score is related to the relevant steps required in the cookbook of each game. If the agent
completes a required step, it will earn one point. For the hardest game, the agent is required
to nish 11 steps to complete this task. These steps involve opening certain containers to
obtain the ingredients, cutting the ingredients as required (dice, slice, chop), and cooking
the ingredient using the correct heat source (oven or stove). Statistics of the games are
presented in Table 1. In the dataset, expert demonstrations are provided in the form of
walkthroughs and do not require human intervention for generation. Following previous
work, we measure the performance of the algorithms using two metrics: normalized game
points and game success rate. We test the game in 20 dierent games for each diculty
level. By averaging the points over the 20 games, and then dividing by the maximum score
an agent can earn, we obtain the normalized game points. The game success rate is calcu-
lated as the percentage of games in which the agent successfully completes all the required
steps. We use GPT-4 as our base LLM.
4.2 Few-shot performance
We rst test the few-shot performance of our method. We make a comparison between
purely replay, tips summary using past history, and tips summary compared to expert
trajectory. The latter two cases corresponds to our rst and second scenario. For purely
replay, we directly ingest the past trajectory as LLM's prompts to see if it can learn. Given
that the input length is limited, we set the maximum number of trajectories as 3 in the
experiments. For tips summary memory, the LLM agent is provided with the past failed
actions and the tips generated from the last trial. We observe that with tips memory, the
agent can collect more information using dierent trials and cumulatively achieve a high
success rate (larger than 0.9) and high points earned (larger than 0.95) in the end, as shown
in Figure 3. With expert demonstration, the agent can learn faster and achieve zero error
in all diculty levels after at most 6 trajectories. This comparison shows that concise tip
summary assists the LLM in gathering information and making better decisions. With
expert demonstrations, the LLM can learn more eciently compared to solely relying on
trial and error.
We further show an example about how tip summary can help the agent make better
decision. In this log le (showing only relevant information), the agent is tasked with
roasting a purple potato using a predened ActionList in a text-based game. In the rst
attempt, the agent mistakenly uses the stove to cook the purple potato, resulting in frying
it and losing the game. The agent then generates a tip to use the "roast" action. However,
this is an invalid action, and it fails again. Next, the agent generates a second tip to use
the "cook" command with the stove, suggesting a dierent heat setting or method to avoid
frying. Unfortunately, in this text-based game, there are no commands to change the heat
setting, leading to another failure. After the third attempt, the agent realizes it should try
using an oven to roast the potato, and nally succeeds in the fourth trial. This demonstrates
that improved tips can lead to successful learning.
10

--- PAGE 11 ---
4.3 Zero-shot Performance
First trial:
>agent: cook purple potato with stove
system: You fried the purple potato.
Tips to win the game next time:
1. You should try roast the potato next
time instead of cook purple potato with
stove after dicing the purple potato;
Second trial:
>agent: roast the potato
system: Invalid action.
>agent: cook purple potato with stove
system: You fried the purple potato.
Tips to win the game next time:
1. You should try cook purple potato
with stove next time after you have dicing
the purple potato, but make sure to use a
dierent heat setting or method to avoid
frying the purple potato;
Third trial:
>agent: cook purple potato with stove
system: You fried the purple potato.
Tips to win the game next time:
1. You should try cook purple potato
with oven next time instead of cook pur-
ple potato with stove, as the recipe sug-
gests roasting the purple potato rather
than frying it;
Forth trial:
>agent: cook purple potato with oven
system: You roasted the purple potato.
Your score has just gone up by one point.In this experiment, we focus on training
LLM agents using tips generated from the
training set. We collect nal tips, which are
those leading to successful trials, from dif-
culty level 4 (the most challenging level)
games in the training set. These tips are
then sent to another LLM, which generates
tips aimed at helping the agent become pro-
cient across various game settings. The -
nal tips can be found in the appendix. We
used 10 games, which consist of 48 trajecto-
ries in total (averaging 4.8 trajectories per
game) to generate the nal tip. We then
test these tips on an unseen test set across
dierent diculty levels. To evaluate our
LLM model with general tips as prompts,
we compare it to state-of-the-art (SOTA)
text-based game agents utilizing deep learn-
ing techniques, including TDQN (Adhikari
et al., 2020), GATA (Adhikari et al., 2020),
and ITL (Tuli et al., 2022). These mod-
els are trained on 100 dierent games for
each diculty level, with 100,000 episodes
per level. Results for levels 0 to 3 are pro-
vided by the authors of (Tuli et al., 2022),
while level 4 results are obtained from Ad-
hikari et al. (2020).
As shown in Figure 4, we prompt the
LLM with general tips and test it on lev-
els 1 to 4. Given level 0's simplicity, we
do not provide tips for this level. Our nd-
ings reveal that the LLM with tips, using
only 10 games and 48 trajectories, achieves
performance comparable to SOTA methods
for diculty levels 0-3. For levels 3-4, LLM
outperforms other methods, due to the rea-
soning ability of the LLM that allows us to
bypass the need to learn navigation and the correct tips generated in the same diculty
level, an aspect that hinders SOTA methods(Adhikari et al., 2020).
Limitation Despite these achievements, the LLM agent underperforms in some lower
diculty level games. This underperformance can be attributed to two factors. First, the
LLM fails to generate a general tip that addresses specic situations encountered in easier
levels. For instance, in diculty level 1, when an ingredient is already in its desired state
11

--- PAGE 12 ---
according to the recipe (e.g., roasted or fried), the corresponding actions (roasting or frying)
become unnecessary. By incorporating human-generated tips (see the appendix for the full
list of tips), the LLM agent can achieve signicantly higher points and success rates, as
demonstrated in Table 2. Second, the LLM's probabilistic nature leads to non-deterministic
outputs, which occasionally cause the agent to disregard the tips and execute erroneous
actions. Despite being provided with tips, the LLM agents will still make some mistakes
due to their inherent probabilistic behavior. Nevertheless, even with this randomness, the
LLM agent with general tips can outperform state-of-the-art (SOTA) agents specically
trained to excel in this task.
Figure 4: Performance of LLM as a text-based game agent compared to SOTA methods.
Given that experimental results of diculty level 4 is not included in Tuli et al. (2022), we
obtain data from Adhikari et al. (2020) and some data is missing.
Table 2: Performance of the LLM agent with human-generated tips across dierent
diculty levels.
Level 0 Level 1 Level 2 Level 3 Level 4
Points Suc. Rate Points Suc. Rate Points Suc. Rate Points Suc. Rate Points Suc. Rate
1 1 0.88 0.80 0.92 0.90 0.96 0.95 0.96 0.95
5 Conclusion
We introduce the novel concept of "Introspective Tips" as a powerful mechanism to im-
prove the decision-making capabilities of LLM agents. Drawing inspiration from human in-
trospection, this approach enables agents to extract and learn from generalized, high-level
information that can be applied across various tasks and contexts. To eectively imple-
ment Introspective Tips, we propose a framework that dynamically adjusts prompts based
on insights derived from past trajectories or expert demonstrations through introspection.
This approach alleviates the burden of manual prompt crafting while empowering LLM
agents with self-optimizing capabilities. By leveraging the rich common sense knowledge
and generalization abilities of LLMs, our Introspective Tips paradigm outperforms SOTA
methods in text-based game. Future work could focus on rening the framework for prompt
generation, exploring more sophisticated methods for extracting tips from trajectories, and
evaluating the eectiveness of introspective tips in a broader range of tasks and real-world
applications.
12

--- PAGE 13 ---
References
A. Adhikari, X. Yuan, M.-A. C^ ot e, M. Zelinka, M.-A. Rondeau, R. Laroche, P. Poupart,
J. Tang, A. Trischler, and W. Hamilton. Learning dynamic belief graphs to generalize
on text-based games. Advances in Neural Information Processing Systems , 33:3045{3057,
2020.
M. Ahn, A. Brohan, N. Brown, Y. Chebotar, O. Cortes, B. David, C. Finn, K. Gopalakr-
ishnan, K. Hausman, A. Herzog, et al. Do as i can, not as i say: Grounding language in
robotic aordances. arXiv preprint arXiv:2204.01691 , 2022.
P. Ammanabrolu and M. Hausknecht. Graph constrained reinforcement learning for natural
language action spaces. arXiv preprint arXiv:2001.08837 , 2020.
Y. Bai, A. Jones, K. Ndousse, A. Askell, A. Chen, N. DasSarma, D. Drain, S. Fort, D. Gan-
guli, T. Henighan, et al. Training a helpful and harmless assistant with reinforcement
learning from human feedback. arXiv preprint arXiv:2204.05862 , 2022.
E. Brooks, L. Walls, R. L. Lewis, and S. Singh. In-context policy iteration. arXiv preprint
arXiv:2210.03821 , 2022.
T. Brown, B. Mann, N. Ryder, M. Subbiah, J. D. Kaplan, P. Dhariwal, A. Neelakantan,
P. Shyam, G. Sastry, A. Askell, et al. Language models are few-shot learners. Advances
in neural information processing systems , 33:1877{1901, 2020.
L. Brunke, M. Gree, A. W. Hall, Z. Yuan, S. Zhou, J. Panerati, and A. P. Schoellig. Safe
learning in robotics: From learning-based control to safe reinforcement learning. Annual
Review of Control, Robotics, and Autonomous Systems , 5:411{444, 2022.
A. Chowdhery, S. Narang, J. Devlin, M. Bosma, G. Mishra, A. Roberts, P. Barham, H. W.
Chung, C. Sutton, S. Gehrmann, et al. Palm: Scaling language modeling with pathways.
arXiv preprint arXiv:2204.02311 , 2022.
M.-A. C^ ot e, A. K ad ar, X. Yuan, B. Kybartas, T. Barnes, E. Fine, J. Moore, M. Hausknecht,
L. El Asri, M. Adada, et al. Textworld: A learning environment for text-based games.
InComputer Games: 7th Workshop, CGW 2018, Held in Conjunction with the 27th
International Conference on Articial Intelligence, IJCAI 2018, Stockholm, Sweden, July
13, 2018, Revised Selected Papers 7 , pages 41{75. Springer, 2019.
M. T. Cox. Introspective multistrategy learning: Constructing a learning strategy under
reasoning failure . Georgia Institute of Technology, 1996.
D. Hendrycks, M. Mazeika, A. Zou, S. Patel, C. Zhu, J. Navarro, D. Song, B. Li,
and J. Steinhardt. -[what would jiminy cricket do? towards agents that behave
morally](https://arxiv. org/abs/2110.13136),* advances in neural information process-
ing systems (datasets and benchmarks track),* 2021. Advances in neural information
processing systems , 2021.
13

--- PAGE 14 ---
W. Huang, P. Abbeel, D. Pathak, and I. Mordatch. Language models as zero-shot planners:
Extracting actionable knowledge for embodied agents. In International Conference on
Machine Learning , pages 9118{9147. PMLR, 2022a.
W. Huang, F. Xia, T. Xiao, H. Chan, J. Liang, P. Florence, A. Zeng, J. Tompson, I. Mor-
datch, Y. Chebotar, et al. Inner monologue: Embodied reasoning through planning with
language models. arXiv preprint arXiv:2207.05608 , 2022b.
Z. Ji, N. Lee, R. Frieske, T. Yu, D. Su, Y. Xu, E. Ishii, Y. J. Bang, A. Madotto, and P. Fung.
Survey of hallucination in natural language generation. ACM Computing Surveys , 55(12):
1{38, 2023.
D. Kimura, M. Ono, S. Chaudhury, R. Kohita, A. Wachi, D. J. Agravante, M. Tatsubori,
A. Munawar, and A. Gray. Neuro-symbolic reinforcement learning with rst-order logic.
arXiv preprint arXiv:2110.10963 , 2021.
M. Kwon, S. M. Xie, K. Bullard, and D. Sadigh. Reward design with language models.
arXiv preprint arXiv:2303.00001 , 2023.
M. Laskin, L. Wang, J. Oh, E. Parisotto, S. Spencer, R. Steigerwald, D. Strouse, S. Hansen,
A. Filos, E. Brooks, et al. In-context reinforcement learning with algorithm distillation.
arXiv preprint arXiv:2210.14215 , 2022.
S. Li, X. Puig, C. Paxton, Y. Du, C. Wang, L. Fan, T. Chen, D.-A. Huang, E. Aky urek,
A. Anandkumar, A. Jacob, M. Igor, T. Antonio, and Z. Yuke. Pre-trained language mod-
els for interactive decision-making. Advances in Neural Information Processing Systems ,
35:31199{31212, 2022.
J. Liang, W. Huang, F. Xia, P. Xu, K. Hausman, B. Ichter, P. Florence, and A. Zeng.
Code as policies: Language model programs for embodied control. arXiv preprint
arXiv:2209.07753 , 2022.
G. Liu, A. Adhikari, A.-m. Farahmand, and P. Poupart. Learning object-oriented dynamics
for planning from text. In International Conference on Learning Representations , 2022.
C. Lu, Y. Schroecker, A. Gu, E. Parisotto, J. Foerster, S. Singh, and F. Behbahani.
Structured state space models for in-context reinforcement learning. arXiv preprint
arXiv:2303.03982 , 2023.
K. Lu, A. Grover, P. Abbeel, and I. Mordatch. Pretrained transformers as universal com-
putation engines. arXiv preprint arXiv:2103.05247 , 1, 2021.
A. Madaan, N. Tandon, P. Gupta, S. Hallinan, L. Gao, S. Wiegree, U. Alon, N. Dziri,
S. Prabhumoye, Y. Yang, et al. Self-rene: Iterative renement with self-feedback. arXiv
preprint arXiv:2303.17651 , 2023.
A. Meta. Introducing llama: A foundational, 65-billion-parameter large language model.
Meta AI. https://ai. facebook. com/blog/large-language-model-llama-meta-ai , 2023.
14

--- PAGE 15 ---
S. Min, X. Lyu, A. Holtzman, M. Artetxe, M. Lewis, H. Hajishirzi, and L. Zettlemoyer.
Rethinking the role of demonstrations: What makes in-context learning work? arXiv
preprint arXiv:2202.12837 , 2022.
OpenAI. Gpt-4 technical report. ArXiv , abs/2303.08774, 2023.
P. Osborne, H. N~ omm, and A. Freitas. A survey of text games for reinforcement learn-
ing informed by natural language. Transactions of the Association for Computational
Linguistics , 10:873{887, 2022.
L. Ouyang, J. Wu, X. Jiang, D. Almeida, C. Wainwright, P. Mishkin, C. Zhang, S. Agarwal,
K. Slama, A. Ray, et al. Training language models to follow instructions with human
feedback. Advances in Neural Information Processing Systems , 35:27730{27744, 2022.
B. Peng, M. Galley, P. He, H. Cheng, Y. Xie, Y. Hu, Q. Huang, L. Liden, Z. Yu, W. Chen,
et al. Check your facts and try again: Improving large language models with external
knowledge and automated feedback. arXiv preprint arXiv:2302.12813 , 2023.
S. Reed, K. Zolna, E. Parisotto, S. G. Colmenarejo, A. Novikov, G. Barth-Maron,
M. Gimenez, Y. Sulsky, J. Kay, J. T. Springenberg, et al. A generalist agent. arXiv
preprint arXiv:2205.06175 , 2022.
H. Shevlin, K. Vold, M. Crosby, and M. Halina. The limits of machine intelligence: Despite
progress in machine intelligence, articial general intelligence is still a major challenge.
EMBO reports , 20(10):e49177, 2019.
N. Shinn, B. Labash, and A. Gopinath. Reexion: an autonomous agent with dynamic
memory and self-reection. arXiv preprint arXiv:2303.11366 , 2023.
I. Singh, V. Blukis, A. Mousavian, A. Goyal, D. Xu, J. Tremblay, D. Fox, J. Thomason,
and A. Garg. Progprompt: Generating situated robot task plans using large language
models. arXiv preprint arXiv:2209.11302 , 2022.
R. Taori, I. Gulrajani, T. Zhang, Y. Dubois, X. Li, C. Guestrin, P. Liang, and T. B.
Hashimoto. Stanford alpaca: An instruction-following llama model. https://github.
com/tatsu-lab/stanford_alpaca , 2023.
Y. Tassa, Y. Doron, A. Muldal, T. Erez, Y. Li, D. d. L. Casas, D. Budden, A. Abdolmaleki,
J. Merel, A. Lefrancq, et al. Deepmind control suite. arXiv preprint arXiv:1801.00690 ,
2018.
A. A. Team, J. Bauer, K. Baumli, S. Baveja, F. Behbahani, A. Bhoopchand, N. Bradley-
Schmieg, M. Chang, N. Clay, A. Collister, et al. Human-timescale adaptation in an
open-ended task space. arXiv preprint arXiv:2301.07608 , 2023.
A. Trischler, M.-A. C^ ot e, and P. Lima. First textworld problems, the competition: Using
text-based games to advance capabilities of ai agents. Microsoft Research Blog, 2019.
M. Tuli, A. Li, P. Vaezipoor, T. Klassen, S. Sanner, and S. McIlraith. Learning to follow
instructions in text-based games. Advances in Neural Information Processing Systems ,
35:19441{19455, 2022.
15

--- PAGE 16 ---
J. J. Van Merrienboer and J. Sweller. Cognitive load theory and complex learning: Recent
developments and future directions. Educational psychology review , pages 147{177, 2005.
S. Vemprala, R. Bonatti, A. Bucker, and A. Kapoor. Chatgpt for robotics: Design principles
and model abilities. 2023.
J. Wei, X. Wang, D. Schuurmans, M. Bosma, E. Chi, Q. Le, and D. Zhou. Chain of thought
prompting elicits reasoning in large language models. arXiv preprint arXiv:2201.11903 ,
2022.
Y. Xu, M. Fang, L. Chen, Y. Du, J. T. Zhou, and C. Zhang. Perceiving the world: Question-
guided reinforcement learning for text-based games. arXiv preprint arXiv:2204.09597 ,
2022.
S. Yang, O. Nachum, Y. Du, J. Wei, P. Abbeel, and D. Schuurmans. Foundation
models for decision making: Problems, methods, and opportunities. arXiv preprint
arXiv:2303.04129 , 2023.
S. Yao, J. Zhao, D. Yu, N. Du, I. Shafran, K. Narasimhan, and Y. Cao. React: Synergizing
reasoning and acting in language models. arXiv preprint arXiv:2210.03629 , 2022.
D. Yarats, A. Zhang, I. Kostrikov, B. Amos, J. Pineau, and R. Fergus. Improving sample
eciency in model-free reinforcement learning from images. In Proceedings of the AAAI
Conference on Articial Intelligence , volume 35, pages 10674{10681, 2021.
X. Yin and J. May. Comprehensible context-driven text game playing. In 2019 IEEE
Conference on Games (CoG) , pages 1{8. IEEE, 2019.
16

--- PAGE 17 ---
Appendix A. Full Action List
â€¢look() # describe the current room
â€¢goal() # print the goal of this game
â€¢inventory() # print player's inventory
â€¢go(direction) # move the player north, east, south, or west
â€¢examine(item) # examine something more closely
â€¢eat(food) # eat edible food
â€¢open(item) # open a door or a container
â€¢close(item) # close a door or a container
â€¢drop(item) # drop an item on the oor
â€¢take(item) # take an item that is on the oor
â€¢put(item, supporter) # place an item on a supporter
â€¢take from(item, container) # take an item from a container or a supporter
â€¢insert(item, container) # place an item into a container
â€¢lock(item, key) # lock a door or a container with a key
â€¢unlock(item, key) # unlock a door or a container with a key
â€¢cook(food, heat source) # cook cookable food with something providing heat
â€¢slice(food, sharp object) # slice cuttable food with something sharp
â€¢chop(food, sharp object) # chop cuttable food with something sharp
â€¢dice(food, sharp object) # dice cuttable food with something sharp
â€¢prepare meal() # combine ingredients from inventory into a meal
Appendix B. Gnenral Tips
B.1 Tips generated using 10 games
â€¢1. Always double-check the recipe before performing any actions, and follow the
instructions closely.
â€¢2. Make sure to gather all required ingredients and tools before starting to cook. Use
the "examine(item)" and "take(item)" actions to interact with items in the environ-
ment.
17

--- PAGE 18 ---
â€¢3. Pay attention to the cooking methods mentioned in the recipe, such as roasting
or frying, and use the appropriate appliances like the oven and stove. To operate an
appliance, use actions from the ActionList, such as "cook(food, heat source)".
â€¢4. Use the correct actions from the ActionList to prepare the ingredients, such as
"slice(food, sharp object)", "dice(food, sharp object)", or "chop(food, sharp object)".
â€¢5. Keep track of your inventory and the state of each item to avoid making mistakes
in the preparation process. Use the "inventory()" action to check your inventory.
â€¢6. Follow the steps in the recipe in the correct order, ensuring each ingredient is
prepared as instructed.
â€¢7. Once all ingredients are prepared according to the recipe, use the "prepare meal()"
action to combine them into a meal.
â€¢8. If you encounter any diculties or errors, refer back to the ActionList and the
environment description to make sure you're using the correct actions and items.
B.2 Human-generated tips
â€¢1 If you get stuck, use the actions goal(), examine(cookbook), inventory() and look()
to gure out what you have and what you need to do.
â€¢2 Before cooking an ingredient, always use inventory() rst to check current state of
the ingredient. If an ingredient is already in the desired state(roasted or fried) as per
the recipe, there is no need to perform the actions (roast or fry) mentioned in the
recipe.
â€¢3 Try take(food) before you prepare(meal). After you take(food), use inventory() to
check the status of the food.
â€¢4 Make sure the food is in your inventory before you prepare(meal). Try eat(meal)
when the meal is prepared.
â€¢5 Dice, chop, and slice are dierent.
â€¢6 Fry and Roast are dierent. Use correct heat source to cook the ingredient. Oven
is for roasting something, not frying something.
â€¢7 Use cook(food, oven) to roast something, instead of putting the food into the oven
and wait.
â€¢8 Be careful when you cook(food, stove) or cook(food, oven), make sure the food is
not fried or roasted before. Otherwise you may burn the food and lose the game.
18

--- PAGE 19 ---
Appendix C. Prompts
Prompts for generating the tips:
Generating tips for the rst trial
Now you failed the game. Come up with tips for yourself to win the game next time.
Pay attention to steps that make you lose the game. Pay attention to those actions and
come up with concise actions in the ActionList that you should try next time. Starting
your response with "Tips to win the game next time:"
Generating tips for other trial
Now you failed the game. Come up with tips for yourself to win the game next time.
Pay attention to steps that make you lose the game. Make a note on those actions and
come up with concise actions in the ActionList that you should try next time. Correct
and improve the previous tips that I gave you if you think some of them are
wrong.
Generating general tips
I want you to provide me all possible specic reasons that an agent may fail in a text-
based game and summarize all tips for the agent to improve. I will present you several
reasons and tips that summarized by others before. In every le, the action that make an
agent failed before and some tips to correct this error are provided. Noticed that the tips
provided may not be correct. For example, some actions suggested by the tips are not in
the ActionList. Correct this kind of error in the tips that you generate. This tips will be
used by another rookie agent. So make sure to provide all necessary and userful information
for the rookie agent. You should also include action in the ActionList that the agent should
use to operate appliance.
Appendix D. Sample Trajectory
Env: You are hungry! Let's cook a delicious meal. Check the cookbook in the kitchen for
the recipe. Once done, enjoy your meal!
-= Bedroom =-
You are in a bedroom. An ordinary kind of place.
You smell an intriguing smell, and follow it to a bed. Unfortunately, there isn't a thing on
it. You move on, clearly infuriated by TextWorld.
You don't like doors? Why not try going west, that entranceway is not blocked by one.
>agent: go(west)
Env:
-= Corridor =-
You are in a corridor. An usual kind of place. I guess you better just go and list everything
you see here.
There is an exit to the east. There is an exit to the north. There is an exit to the west.
Don't worry, there is no door.
>agent : go(north)
Env:
-= Kitchen =-
You nd yourself in a kitchen. A standard kind of place.
19

--- PAGE 20 ---
You can see a closed fridge, which looks conventional, nearby. You can see a closed oven.
What's that over there? It looks like it's a table. The table is massive. On the table you
can make out a cookbook. You rest your hand against a wall, but you miss the wall and fall
onto a counter! On the counter you make out a raw red potato, a red apple, a raw purple
potato, a red hot pepper, a raw yellow potato, a banana and a knife. You see a stove. The
stove is conventional. However, the stove, like an empty stove, has nothing on it.
There is a closed plain door leading north. You don't like doors? Why not try going south,
that entranceway is not blocked by one. There is an exit to the west.
>agent: examine(cookbook)
Env: You open the copy of "Cooking: A Modern Approach (3rd Ed.)" and start reading:
Recipe #1
|||
Gather all following ingredients and follow the directions to prepare this tasty meal.
Ingredients:
red potato
white onion
yellow bell pepper
Directions:
slice the red potato
roast the red potato
dice the white onion
fry the white onion
slice the yellow bell pepper
fry the yellow bell pepper
prepare meal
>agent : take(red potato)
Env: You take the red potato from the counter. Your score has just gone up by one point.
>agent : take(cutting tool)
Env: You take the knife from the counter.
>agent : slice(red potato, cutting tool)
Env: You slice the red potato.
Your score has just gone up by one point.
>agent : cook(red potato, oven)
Env: You roasted the red potato.
Your score has just gone up by one point.
>agent: go(south)
Env:
-= Corridor =-
You are in a corridor. An usual kind of place. I guess you better just go and list everything
you see here.
There is an exit to the east. There is an exit to the north. There is an exit to the west.
Don't worry, there is no door.
>agent : go(west)
Env:
-= Bathroom =-
20

--- PAGE 21 ---
You nd yourself in a bathroom. An ordinary kind of place.
You make out a toilet. But oh no! there's nothing on this piece of garbage.
You need an exit without a door? You should try going east.
>agent : go(east)
Env:
-= Corridor =-
You are in a corridor. An usual kind of place. I guess you better just go and list everything
you see here.
There is an exit to the east. There is an exit to the north. There is an exit to the west.
Don't worry, there is no door.
>agent : go(east)
Env:
-= Bedroom =-
You are in a bedroom. An ordinary kind of place.
You smell an intriguing smell, and follow it to a bed. Unfortunately, there isn't a thing on
it. You move on, clearly infuriated by TextWorld.
You don't like doors? Why not try going west, that entranceway is not blocked by one.
>agent : go(west)
Env:
-= Corridor =-
You are in a corridor. An usual kind of place. I guess you better just go and list everything
you see here.
There is an exit to the east. There is an exit to the north. There is an exit to the west.
Don't worry, there is no door.
>agent : go(north)
Env:
-= kitchen =-
You nd yourself in a kitchen. A standard kind of place.
You can see a closed fridge, which looks conventional, nearby. You can see a closed oven.
What's that over there? It looks like it's a table. The table is massive. On the table you
can make out a cookbook. You rest your hand against a wall, but you miss the wall and
fall onto a counter! On the counter you make out a red apple, a raw purple potato, a red
hot pepper, a raw yellow potato and a banana. You see a stove. The stove is conventional.
However, the stove, like an empty stove, has nothing on it.
There is a closed plain door leading north. You don't like doors? Why not try going south,
that entranceway is not blocked by one. There is an exit to the west.
>agent : open(fridge)
Env: You open the fridge, revealing a yellow bell pepper, a white onion, a carrot, a red
onion, an orange bell pepper, a block of cheese and a raw pork chop.
>agent : take(white onion)
Env: You take the white onion from the fridge.
Your score has just gone up by one point.
>agent : take(yellow bellpepper)
Env: You take the yellow bell pepper from the fridge.
Your score has just gone up by one point.
21

--- PAGE 22 ---
>agent: dice(white onion, cutting tool)
Env: You dice the white onion.
Your score has just gone up by one point.
>agent: cook(white onion, stove)
Env: You fried the white onion.
Your score has just gone up by one point.
>agent: slice(yellow bellpepper, cutting tool)
Env: You slice the yellow bell pepper.
Your score has just gone up by one point.
>agent: cook(yellow bellpepper, stove)
Env: You fried the yellow bell pepper.
Your score has just gone up by one point.
>agent: prepare meal()
Env: Adding the meal to your inventory.
Your score has just gone up by one point.
>agent: eat(meal)
Env: You eat the meal. Not bad. Your score has just gone up by one point.
*** The End ***
You scored 11 out of a possible 11, in 23 turn(s).
22
