GitTables: Một Kho Dữ Liệu Lớn các Bảng Quan Hệ

MADELON HULSEBOS*, Đại học Amsterdam, Hà Lan
ÇAĞATAY DEMIRALP, Sigma Computing, Hoa Kỳ  
PAUL GROTH, Đại học Amsterdam, Hà Lan

Tệp CSV được tuyển chọn
sản phẩm, id, tên, địa chỉ, ...
giá sản phẩm
số sản phẩm
tên email
bảng được chú thích thực thể, đối tượng, id, vật, ... WordNet

Phân tích CSV
lọc bảng
tuyển chọn nội dung
chú thích cú pháp
chú thích ngữ nghĩa
truy vấn tệp CSV
kho lưu trữ GitHub

Hình 1. Quy trình tạo GitTables bao gồm 1) truy vấn tệp CSV từ kho lưu trữ GitHub dựa trên WordNet, 2) phân tích tệp CSV và tuyển chọn bảng, và 3) chú thích bảng với ngữ nghĩa cột từ DBpedia và Schema.org.

Sự thành công của học sâu đã khơi dậy sự quan tâm đến việc cải thiện các tác vụ bảng quan hệ, như chuẩn bị dữ liệu và tìm kiếm, bằng các mô hình biểu diễn bảng được huấn luyện trên các kho dữ liệu bảng lớn. Các kho dữ liệu bảng hiện tại chủ yếu chứa các bảng được trích xuất từ các trang HTML, hạn chế khả năng đại diện cho các bảng cơ sở dữ liệu ngoại tuyến. Để huấn luyện và đánh giá các mô hình có khả năng cao cho các ứng dụng ngoài Web, chúng ta cần các nguồn tài nguyên với các bảng giống như các bảng cơ sở dữ liệu quan hệ. Ở đây chúng tôi giới thiệu GitTables, một kho dữ liệu gồm 1 triệu bảng quan hệ được trích xuất từ GitHub. Việc tuyển chọn tiếp tục của chúng tôi nhằm mục đích mở rộng kho dữ liệu lên ít nhất 10 triệu bảng. Phân tích GitTables cho thấy rằng cấu trúc, nội dung và phạm vi chủ đề của nó khác biệt đáng kể so với các kho dữ liệu bảng hiện có. Chúng tôi chú thích các cột bảng trong GitTables với các loại ngữ nghĩa, quan hệ phân cấp và mô tả từ Schema.org và DBpedia. Việc đánh giá quy trình chú thích của chúng tôi trên điểm chuẩn T2Dv2 minh họa rằng phương pháp của chúng tôi cung cấp kết quả ngang bằng với các chú thích của con người. Chúng tôi trình bày ba ứng dụng của GitTables, chứng minh giá trị của nó cho các mô hình phát hiện loại ngữ nghĩa học được, phương pháp hoàn thiện schema, và điểm chuẩn cho việc khớp bảng với KG, tìm kiếm dữ liệu và chuẩn bị. Chúng tôi cung cấp kho dữ liệu và mã tại https://gittables.github.io.

Khái niệm CCS: •Hệ thống thông tin → Mô hình cơ sở dữ liệu quan hệ; Tích hợp thông tin; •Phương pháp tính toán → Trích xuất thông tin; Mạng nơ-ron.

Từ khóa và cụm từ bổ sung: bảng quan hệ, quản lý dữ liệu, học sâu, tập dữ liệu

Định dạng tham chiếu ACM:
Madelon Hulsebos, Çağatay Demiralp, và Paul Groth. 2023. GitTables: Một Kho Dữ Liệu Lớn các Bảng Quan Hệ. Proc. ACM Manag. Data 1, 1, Bài báo 30 (Tháng 5 2023), 17 trang. https://doi.org/10.1145/3588710

*Tác giả liên hệ (m.hulsebos@uva.nl)

Địa chỉ tác giả: Madelon Hulsebos, Đại học Amsterdam, Amsterdam, 1012 WX, Hà Lan, m.hulsebos@uva.nl; Çağatay Demiralp, Sigma Computing, San Francisco, CA 94105, Hoa Kỳ, cagatay@sigmacomputing.com; Paul Groth, Đại học Amsterdam, Amsterdam, 1012 WX, Hà Lan, p.t.groth@uva.nl.

Quyền được cấp để tạo bản sao kỹ thuật số hoặc bản cứng của một phần hoặc toàn bộ tác phẩm này cho mục đích sử dụng cá nhân hoặc lớp học mà không mất phí với điều kiện bản sao không được tạo hoặc phân phối vì lợi nhuận hoặc lợi thế thương mại và bản sao mang thông báo này và trích dẫn đầy đủ trên trang đầu tiên. Bản quyền cho các thành phần của bên thứ ba trong tác phẩm này phải được tôn trọng. Đối với tất cả các mục đích sử dụng khác, liên hệ với chủ sở hữu/tác giả.

©2023 Bản quyền thuộc về chủ sở hữu/tác giả.
2836-6573/2023/5-ART30
https://doi.org/10.1145/3588710

Proc. ACM Manag. Data, Tập 1, Số 1, Bài báo 30. Ngày xuất bản: Tháng 5 2023.

1 GIỚI THIỆU

Các mô hình học sâu (DL), trong thập kỷ qua, đã cải thiện đáng kể nhiều tác vụ thị giác máy tính và xử lý ngôn ngữ tự nhiên lâu đời. Sự thành công thực tế của DL cũng đã thúc đẩy sự quan tâm đến các ứng dụng của nó trong các tác vụ ở các lĩnh vực khác, bao gồm quản lý dữ liệu, từ làm sạch dữ liệu đến chú thích. Để huấn luyện các mô hình DL cho dữ liệu quan hệ, các nghiên cứu trước đây chủ yếu dựa vào các kho dữ liệu bao gồm các bảng được thu thập từ các trang HTML như WDC WebTables, kho dữ liệu bảng lớn nhất cho đến nay. Các mô hình này đã đóng vai trò quan trọng trong việc tạo điều kiện cho nghiên cứu quản lý dữ liệu dựa trên dữ liệu, đặc biệt là với các ứng dụng Web.

Tuy nhiên, các bảng được trích xuất từ các trang HTML trên Web (bảng Web) cung cấp một đại diện lệch của các bảng trong thực tế, đặc biệt là những bảng nằm trong các cơ sở dữ liệu (doanh nghiệp). Thuộc tính phổ biến "ID", ví dụ, không xuất hiện trong hai mươi tên cột thường gặp nhất của kho dữ liệu WDC WebTables, và kích thước của các bảng Web nhỏ hơn đáng kể so với các bảng cơ sở dữ liệu điển hình. Do đó, không có gì ngạc nhiên khi các mô hình dựa trên bảng Web có ứng dụng hạn chế ngoài Web. Để mở rộng tác động của nghiên cứu quản lý dữ liệu dựa trên dữ liệu, chúng ta cần các bộ sưu tập bảng mới bổ sung cho các kho dữ liệu hiện có với các bảng giống như các bảng cơ sở dữ liệu điển hình.

Để giải quyết nhu cầu này, chúng tôi giới thiệu GitTables: một kho dữ liệu với 1 triệu bảng quan hệ được trích xuất từ các tệp CSV trong các kho lưu trữ GitHub. Chúng tôi sẽ tiếp tục phát triển kho dữ liệu để có ít nhất 10 triệu bảng nhằm tạo điều kiện cho việc mở rộng học chuyển giao sâu sang lĩnh vực quan hệ, tương tự như cách các kho dữ liệu lớn về ngôn ngữ tự nhiên đã kích thích các mô hình ngôn ngữ được tiền huấn luyện như BERT và GPT. Chúng tôi kỳ vọng GitTables sẽ kích thích tiến bộ tương tự trong các tác vụ quản lý dữ liệu như tìm kiếm và chuẩn bị dữ liệu.

Ngoài việc có các bảng đại diện, nhiều ứng dụng quản lý dữ liệu hưởng lợi từ việc hiểu ngữ nghĩa của các cột bảng. Một hệ thống khám phá dữ liệu thông minh, ví dụ, có thể đề xuất biểu đồ bản đồ để trực quan hóa hai cột dữ liệu đại diện cho các quốc gia và doanh thu bán hàng. Khi gặp các giá trị bị thiếu, hệ thống cũng có thể tự động điền vào các khoảng trống bằng cách sử dụng cơ sở tri thức. Hệ thống có thể, ví dụ, gán "Pháp" vào một ô trống trong cột có giá trị quốc gia, nếu ô lân cận trong cột có thành phố thủ đô là "Paris".

Để tạo điều kiện cho các chức năng như vậy, chúng tôi cải thiện các cột bảng với các loại ngữ nghĩa từ DBpedia và Schema.org (ví dụ: địa chỉ) bằng cách sử dụng phương pháp chú thích cú pháp cũng như ngữ nghĩa (một ví dụ trong Hình 2). Mỗi loại ngữ nghĩa cũng được liên kết với loại dữ liệu nguyên tử dự kiến (ví dụ: chuỗi và số), một mô tả, và các quan hệ loại phân cấp. Những chú thích giàu ngữ nghĩa này cùng với DL tạo ra một cơ hội độc đáo để học ngữ nghĩa bảng như được chứng minh với TURL và TaBERT.

Phân tích của chúng tôi về GitTables xác nhận bản chất khác biệt của các bảng: các bảng có kích thước lớn hơn đáng kể (hàng và cột). Một mô hình học máy để phát hiện sự dịch chuyển dữ liệu giữa GitTables và bảng Web phân biệt chính xác các cột bảng từ mỗi kho dữ liệu nguồn. Điều này phản ánh nội dung khác biệt về mặt cấu trúc của các kho dữ liệu này. Phân phối loại ngữ nghĩa cũng khác biệt đáng kể so với phân phối ngữ nghĩa của bảng Web, minh họa phạm vi chủ đề đặc biệt của nó. Chúng tôi cung cấp GitTables thông qua https://gittables.github.io. Chúng tôi đóng góp:

(1) GitTables, một kho dữ liệu mới quy mô lớn gồm 1 triệu bảng. Theo hiểu biết của chúng tôi, GitTables là kho dữ liệu bảng quan hệ quy mô lớn đầu tiên với phạm vi chủ đề và nội dung khác biệt về mặt cấu trúc so với các bảng được trích xuất từ các trang HTML.

(2) Một phương pháp chú thích cột có thể mở rộng sử dụng giám sát từ xa. Chúng tôi chú thích các cột trong GitTables với ngữ nghĩa bao gồm các loại ngữ nghĩa, loại dữ liệu nguyên tử, quan hệ phân cấp, và mô tả, làm cho GitTables trở thành kho dữ liệu bảng được chú thích lớn nhất cho đến nay.

(3) Ba ứng dụng chứng minh giá trị của GitTables: 1) chúng tôi huấn luyện một mô hình phát hiện loại ngữ nghĩa và đạt được độ chính xác dự đoán cao, 2) chúng tôi sử dụng GitTables như một nguồn tài nguyên cho các phương pháp hoàn thiện schema trong các ngữ cảnh cơ sở dữ liệu điển hình, và 3) chúng tôi trình bày một điểm khởi đầu cho các tập dữ liệu điểm chuẩn cho các tác vụ quản lý dữ liệu điển hình.

2 NGHIÊN CỨU LIÊN QUAN

Các sáng kiến Web như Common Crawl, Wikipedia, và Open Data đã là các nguồn tài nguyên hiệu quả về chi phí để tuyển chọn dữ liệu không có cấu trúc và có cấu trúc ở quy mô lớn. Dưới đây chúng tôi thảo luận về các kho dữ liệu bảng quy mô lớn có nguồn từ các sáng kiến này và xem xét nghiên cứu trước đây về chú thích ngữ nghĩa cột của các bảng được lấy mẫu từ các kho dữ liệu này.

2.1 Các kho dữ liệu bảng quy mô lớn

WDC WebTables và Dresden Web Table Corpus. Các kho dữ liệu bảng Web này trích xuất bảng từ các trang HTML trong kho dữ liệu Common Crawl như được lấy cảm hứng từ. Chúng cung cấp một lượng lớn bảng quan hệ từ 59 triệu đến 90 triệu và đã là công cụ quan trọng trong việc thúc đẩy các ứng dụng như tăng cường và tích hợp bảng. Tuy nhiên, bảng Web khái quát hóa kém do kích thước nhỏ và nội dung khác biệt của chúng.

WikiTables. Để cung cấp các bảng chất lượng cao với ngữ nghĩa dễ phát hiện hơn so với các bảng Web tùy ý, WikiTables trích xuất khoảng 2 triệu bảng từ Wikipedia. Kho dữ liệu này chủ yếu phù hợp cho các tác vụ như trả lời câu hỏi dựa vào chất lượng nội dung bảng. Không ngạc nhiên, các bảng trong WikiTables cũng nhỏ như những bảng trong WDC WebTables.

Open Data Portal Watch. Với 227K tệp CSV được trích xuất từ 260 cổng Open Data, đây là kho dữ liệu đầu tiên đáng kể không có nguồn từ các trang HTML. 108K trong số các tệp CSV này được phân tích thành bảng và phân tích dựa trên định dạng, cấu trúc và loại dữ liệu của chúng. Phân tích này minh họa các kích thước bảng khác biệt và phân phối loại dữ liệu nguyên tử của các bảng như vậy so với các kho dữ liệu bảng Web, thúc đẩy việc xây dựng một kho dữ liệu như GitTables.

VizNet. VizNet được xây dựng để huấn luyện và đánh giá các phương pháp trực quan hóa với các bảng thế giới thực. Nó kết hợp 31 triệu bảng từ WebTables, ManyEyes, Plotly, và các cổng Open Data. Phân tích VizNet gợi ý rằng các bảng không từ Web thể hiện các cấu trúc nội bộ khác biệt, cung cấp thêm bằng chứng cho sự khác biệt giữa bảng Web và bảng từ các nguồn khác.

2.2 Tập dữ liệu bảng với chú thích cột

T2Dv2. Đây là một tập con của WDC WebTables và được tuyển chọn để đánh giá điểm chuẩn các phương pháp tăng cường cơ sở tri thức (KB). Các hàng, cột và bảng được chú thích thủ công với các tương ứng với các thể hiện, thuộc tính và lớp DBpedia. Điều này được cho là một mục tiêu tầm thường cho việc khớp KB do nhiều thực thể "rõ ràng" có thể liên kết. Nghiên cứu gần đây cũng chỉ ra rằng bảng Web có thể không điển hình cho các bảng được sử dụng để tăng cường KB.

SemTab. Thử thách SemTab cung cấp các tập dữ liệu để đánh giá điểm chuẩn các phương pháp khớp KG. Hầu hết các bảng được trích xuất từ Wikidata và "tinh chỉnh" bằng cách thêm ví dụ nhiễu. SemTab 2020 kết hợp 180 bảng Wikipedia có kích thước lớn được làm giàu với nhiễu để bắt chước các bảng thực. Các cột được chú thích bằng cách liên kết các giá trị cột với các loại DBpedia và tổng hợp các loại này thành chú thích cấp cột. GitTables là một nguồn tài nguyên hữu ích trong các phiên bản tương lai của thử thách SemTab để đánh giá điểm chuẩn các phương pháp diễn giải bảng trên các bảng giống cơ sở dữ liệu.

TURL. Lấy cảm hứng từ các mô hình ngôn ngữ được tiền huấn luyện (ví dụ:), TURL cung cấp một khung để học các biểu diễn nhúng của bảng Web thông qua một mô hình được tiền huấn luyện. Các mô hình được tiền huấn luyện yêu cầu tinh chỉnh với dữ liệu có nhãn để được áp dụng cho các tác vụ cụ thể trong các lĩnh vực. Để làm điều này, một tập hợp các bảng từ WikiTables được chú thích với 255 loại ngữ nghĩa từ Freebase. Ứng dụng các biểu diễn bảng học được để hiểu bảng thúc đẩy việc xây dựng một kho dữ liệu quy mô lớn hơn và phong phú để hỗ trợ dòng nghiên cứu mới nổi này.

3 GITTABLES

Trong phần này, chúng tôi tóm tắt các nguyên tắc thiết kế đằng sau GitTables và mô tả quy trình xây dựng một cách chi tiết.

3.1 Nguyên tắc thiết kế của GitTables

Dựa trên các khoảng trống được báo cáo trong tài liệu và kinh nghiệm của chúng tôi trong việc phát triển các mô hình học được cho các tác vụ diễn giải bảng, chúng tôi đã xác định bốn tiêu chí cho GitTables:

C1 Để tạo điều kiện cho các biểu diễn bảng học được khái quát hóa qua các ngữ cảnh cơ sở dữ liệu khác nhau, quy mô của kho dữ liệu nên vượt xa quy mô của các cổng Open Data.

C2 Để thúc đẩy nghiên cứu ngoài Web, chúng ta cần các bảng giống "cơ sở dữ liệu" lớn hơn đáng kể và đa dạng hơn so với các bảng Web điển hình.

C3 Kho dữ liệu nên có phạm vi chủ đề và nội dung khái quát hóa cho doanh nghiệp, chính phủ, và hơn thế nữa.

C4 Các bảng nên được làm giàu với các chú thích ngữ nghĩa để tạo điều kiện cho việc phát triển các mô hình học được cho các tác vụ quản lý dữ liệu như xác thực và chuẩn bị dữ liệu.

Chúng tôi xem xét các giao diện công cộng khác nhau để truy xuất các tệp dữ liệu có cấu trúc để trích xuất bảng quan hệ, như Zenodo và Kaggle. Trên GitHub, chúng tôi sau đó thực hiện một tìm kiếm đơn giản cho các tệp CSV, thu được 92,191,141 tệp. Điều này cho thấy rằng GitHub có thể là một nguồn tài nguyên hiệu quả để thu thập một kho dữ liệu bảng quan hệ ở quy mô lớn (tiêu chí C1). Chúng tôi tập trung vào định dạng CSV do việc sử dụng rộng rãi của nó để lưu trữ dữ liệu có cấu trúc thô, như được phản ánh bởi số lượng lớn các tệp CSV chúng tôi tìm thấy trong tìm kiếm.

GitHub thường được sử dụng bởi các lập trình viên, nhà khoa học dữ liệu, và các nhà nghiên cứu, trong số những người khác. Với sự gần gũi của những người dùng như vậy với các cơ sở dữ liệu thực tế, GitHub là một nguồn phong phú cho các bảng đa dạng. Hình 3 cho thấy tệp CSV đầu tiên được truy xuất bởi GitHub khi nó được truy vấn cho thuật ngữ "id". Bảng này với dữ liệu về "người lái xe" cho thấy tên cột và nội dung bảng điển hình cho các bảng cơ sở dữ liệu. Hình này cũng minh họa sự phong phú của các tệp CSV tương tự có mặt trên GitHub, như chúng ta có thể tìm thấy gần 16 triệu tệp CSV chỉ cho truy vấn đơn lẻ này. Phân tích trước đây về các tệp CSV từ GitHub cũng cho thấy rằng các tệp này có định dạng đa dạng và các bảng được trích xuất từ chúng có kích thước tương đối lớn, điều này phổ biến trong các ngữ cảnh cơ sở dữ liệu. Tổng cộng, chúng tôi xem các tệp CSV từ GitHub là một nguồn tài nguyên phù hợp cho các bảng giống cơ sở dữ liệu (C2).

Lấy cảm hứng từ việc xây dựng ImageNet, chúng tôi chọn 67K danh từ tiếng Anh duy nhất từ WordNet tạo ra một tập hợp các từ khóa đa dạng (được gọi là "chủ đề") để chỉ định các truy vấn tìm kiếm của chúng tôi. Mặc dù nó giới thiệu một số thiên lệch đối với các bảng tiếng Anh, các danh từ WordNet có phạm vi chủ đề mong muốn để đảm bảo sự đa dạng nội dung trong GitTables (C3). Để tránh "hiệu ứng WordNet", chúng tôi loại bỏ các chủ đề như "giết chóc" có thể tạo ra các bảng với nội dung xúc phạm và nằm ngoài phạm vi.

Để thỏa mãn tiêu chí C4, chúng tôi cung cấp các chú thích ngữ nghĩa cho các cột bảng. Chúng tôi phát triển hai phương pháp chú thích, một phương pháp cú pháp được thông báo bởi Sherlock và phương pháp khác tận dụng một mô hình ngữ nghĩa được tiền huấn luyện. Chúng tôi xem xét nhiều bản thể học để phù hợp với các trường hợp sử dụng khác nhau, và chọn DBpedia và Schema.org vì chúng được tuyển chọn tốt và cung cấp các loại ngữ nghĩa bổ sung và đa dạng (như được thảo luận thêm trong Phần 3.4).

Tổng cộng, quy trình cấp cao để xây dựng GitTables bao gồm 1) trích xuất tệp CSV từ GitHub, 2) phân tích và tuyển chọn bảng từ tệp CSV, và 3) chú thích bảng với ngữ nghĩa cột. Hình 1 trực quan hóa quy trình này.

3.2 Trích xuất tệp CSV từ GitHub

GitHub hạn chế truy vấn theo nhiều cách để tránh quá tải API Tìm kiếm của nó. Đầu tiên, không thể truy xuất các tệp lớn hơn 438 kB, điều này giới hạn các tệp CSV chúng tôi trích xuất về mặt kích thước của chúng. Mặc dù một số tổ chức có thể sử dụng các tệp lớn hơn, hầu hết các tệp CSV trong các cổng Open Data được tìm thấy nhỏ hơn 100 kB. Chúng tôi cũng quan sát thấy các kho lưu trữ với các bảng lớn hơn được chia thành nhiều tệp (ví dụ: thành các ảnh chụp hàng ngày), có thể được khôi phục bằng cách hợp nhất các bảng bắt nguồn từ cùng một kho lưu trữ. Hạn chế thứ hai giới hạn các phản hồi tìm kiếm kết quả thành 1000 tệp. Hạn chế này làm cho quá trình trích xuất một tập hợp lớn các tệp CSV trở nên không tầm thường, như được chi tiết dưới đây.

Đầu tiên, chúng tôi xây dựng một "truy vấn chủ đề" ban đầu cho mỗi chủ đề từ WordNet bị hạn chế đối với các tệp có định dạng CSV. Ví dụ, chúng tôi truy xuất các tệp CSV chứa từ "object" bằng truy vấn q="object" extension:csv. Chúng tôi loại trừ kết quả từ các kho lưu trữ được fork để giảm thiểu việc trùng lặp bảng. Chúng tôi thực hiện truy vấn chủ đề ban đầu này thông qua API GitHub Search và nhận được kích thước phản hồi ban đầu của truy vấn này đại diện cho số lượng URL GitHub trỏ đến các tệp CSV chứa từ "object".

Vì API hạn chế số lượng tệp mỗi truy vấn thành 1000 và nhiều truy vấn chủ đề trả về khoảng 100K tệp, chúng tôi phân đoạn các truy vấn ban đầu. Chúng tôi sử dụng bộ chỉ định "size" để thực hiện phân đoạn này, và tạo ra các chuỗi phạm vi kích thước tệp (theo byte) tỷ lệ với số lượng tệp trong phản hồi ban đầu. Điều này dẫn đến các truy vấn chủ đề được phân đoạn như q="id" extension:csv size:50..100, q="id" extension:csv size:100..150, và như vậy. Chúng tôi thực hiện tất cả các truy vấn được phân đoạn và thu thập các phản hồi được phân trang, mỗi phản hồi chứa khoảng 1000 URL. Chúng tôi duyệt qua các phản hồi được phân trang để trích xuất tất cả URL cho một chủ đề nhất định. Sau đó chúng tôi lặp lại ghi nội dung thô được trỏ bởi các URL vào các tệp CSV.

3.3 Phân tích và tuyển chọn bảng từ tệp CSV

Phân tích CSV. Một khi chúng tôi có các tệp CSV, chúng tôi phân tích chúng thành bảng bằng cách sử dụng trình phân tích CSV từ thư viện Pandas, một thư viện xử lý và phân tích dữ liệu được sử dụng rộng rãi cho Python. Chúng tôi tận dụng chức năng tích hợp của công cụ Sniffer của Python để xác định dấu phân cách của các tệp CSV. Chúng tôi phân tích bảng với giả định rằng các hàng đầu tiên tương ứng với các hàng tiêu đề, như thông lệ đối với các tệp CSV. Các mẫu ngẫu nhiên của bảng thông báo một số ngoại lệ đối với điều này; các dòng ở đầu tệp được bỏ qua trong trường hợp chúng trống hoặc bắt đầu bằng '#', thường chỉ ra các dòng được bình luận. Chúng tôi loại bỏ các hàng trong trường hợp chúng được coi là "dòng xấu", như dòng trống, dòng được bình luận hoặc dòng có dấu phân cách thêm. Thí nghiệm bổ sung tiết lộ rằng một số bảng bao gồm các ký tự phân tách mà không có bất kỳ giá trị nào ở cuối tất cả các hàng, dẫn đến sự không khớp giữa số lượng thuộc tính và số lượng giá trị mỗi hàng. Chúng tôi đã tái sắp xếp tiêu đề và giá trị bảng trong những trường hợp này bằng cách loại bỏ các ký tự phân tách dư thừa. Chúng tôi loại bỏ các tệp CSV không thể được phân tích với các quy tắc nêu trên. Tổng cộng, quy trình phân tích của chúng tôi dẫn đến 99,3% các tệp CSV được phân tích thành bảng.

Lọc bảng. Chúng tôi hướng đến GitTables là một kho dữ liệu quy mô lớn của các bảng chất lượng và có liên quan có thể được cộng đồng sử dụng một cách an toàn. Để thực hiện điều này, đầu tiên chúng tôi lọc ra các bảng từ các kho lưu trữ không có giấy phép cho phép phân phối nội dung kho lưu trữ. Chúng tôi thấy rằng khoảng 16% các bảng được liên kết với giấy phép như vậy, điều này phù hợp với các nghiên cứu trước đó. Trong kho dữ liệu cuối cùng của chúng tôi, chúng tôi chỉ xuất bản các bảng đến từ các kho lưu trữ có giấy phép như vậy.

Chúng tôi tiếp tục tuyển chọn kho dữ liệu bằng cách loại bỏ các bảng cực kỳ nhỏ, tức là các bảng có ít hơn hai hàng hoặc hai cột vì những bảng này có thể không mang dữ liệu có liên quan hoặc được quan sát là chứa các cột văn bản đơn lẻ. Chúng tôi cũng loại bỏ các bảng nếu hơn một nửa tên cột không được chỉ định, hoặc nếu bất kỳ tên cột nào không thuộc loại chuỗi. Cuối cùng, để tránh bao gồm nội dung xúc phạm từ các nền tảng truyền thông xã hội có thể được lưu trữ trong các bảng, như được chỉ ra có mặt trong các bộ sưu tập lớn văn bản được trích xuất từ các trang web, chúng tôi loại trừ các bảng mà tên cột chứa "twitter", "tweet", "reddit" hoặc "facebook". Tổng cộng, quy trình tuyển chọn này lọc ra 9% các bảng.

Tuyển chọn nội dung. Ngoài nội dung xúc phạm từ truyền thông xã hội, các bảng có thể chứa dữ liệu cá nhân không mong muốn phổ biến ngoài GitHub. Để giảm thiểu sự lan truyền thông tin nhận dạng cá nhân (PII), chúng tôi ẩn danh các bảng có khả năng chứa dữ liệu PII được thông báo bởi các loại ngữ nghĩa từ Schema.org. Chúng tôi làm như vậy, bằng cách thay thế các giá trị cột được chú thích với bất kỳ loại ngữ nghĩa PII nào (được chú thích như được mô tả trong Phần 3.4) bằng các giá trị giả sử dụng thư viện Faker như trong Bảng 3. Trong trường hợp một cột được chú thích với loại name, chúng tôi chỉ ẩn danh nó nếu nó xuất hiện cùng với loại ngữ nghĩa PII khác vì name không nhất thiết chỉ ra tên của một người. Tổng cộng 0,3% các cột trong GitTables chứa các giá trị giả. Với số lượng tương đối hạn chế các cột bị ảnh hưởng, quy trình ẩn danh này không thay đổi đáng kể phân phối dữ liệu cơ bản của GitTables.

3.4 Chú thích bảng với ngữ nghĩa cột

Chúng tôi chú thích các cột bảng trong GitTables với các loại ngữ nghĩa được trích xuất từ DBpedia và Schema.org để tạo điều kiện cho các trường hợp sử dụng của nó trong các ứng dụng như chuẩn bị dữ liệu như được giải thích trong Phần 1. Chúng tôi cung cấp siêu dữ liệu phong phú như quan hệ loại phân cấp, miền, và mô tả, nếu có. Thông tin này có thể được khai thác để huấn luyện và đánh giá các mô hình.

Loại ngữ nghĩa. Tổng cộng, chúng tôi trích xuất 2831 thuộc tính từ DBpedia mà chúng tôi sử dụng làm loại ngữ nghĩa. Từ Schema.org chúng tôi bao gồm các thuộc tính cũng như loại cùng nhau tổng cộng 2637 loại ngữ nghĩa. Chúng tôi cung cấp chú thích từ cả hai bản thể học, do đó một cột có thể được chú thích với một ngữ nghĩa từ DBpedia và một từ Schema.org.

Hầu hết các loại ngữ nghĩa từ DBpedia liên quan đến các miền như Person, Place hoặc PopulatedPlace trong khi các loại trong Schema.org được phân tán hơn qua các miền được dẫn đầu bởi CreativeWork, Organization, Person, và Offer. Cùng với các loại ngữ nghĩa, chúng tôi đính kèm siêu dữ liệu của chúng như quan hệ phân cấp và mô tả có thể được khai thác trong đánh giá và huấn luyện mô hình. Ví dụ, người ta có thể áp dụng một hàm mất mát hoặc đánh giá cho một mô hình dự đoán loại ngữ nghĩa ưu tiên một loại ít chi tiết hơn (ví dụ: loại place cho một cột thực tế của loại city), thay vì dự đoán một loại không liên quan (ví dụ: size). Chúng tôi cung cấp siêu dữ liệu sau đây cho mỗi loại ngữ nghĩa nếu có:

(1) loại cột ngữ nghĩa bằng tiếng Anh, ví dụ: id và name,
(2) loại nguyên tử, ví dụ: Number và Text,
(3) miền, ví dụ: address có miền Person và Organization,
(4) lớp cha hoặc thuộc tính cha, ví dụ: product id → id, và
(5) mô tả, ví dụ: cho id: "Thuộc tính định danh đại diện cho bất kỳ loại định danh nào cho bất kỳ loại Thing nào, như ISBN, mã GTIN, UUID."

Chú thích. Được thông báo bởi phân tích các tệp CSV công cộng, chúng tôi tiền xử lý các loại ngữ nghĩa và tiêu đề bảng bằng cách thay thế dấu gạch dưới và dấu gạch nối, tách các từ kết hợp camel-cased, và chuyển đổi chuỗi thành chữ thường. Thí nghiệm cho thấy rằng ít tên cột có số được chú thích với các loại ngữ nghĩa tình cờ chứa một số. Vì lý do này, quy trình chú thích không chú thích tên cột bao gồm số.

Tên cột gốc là chỉ báo hữu ích về những gì dữ liệu của một cột bao gồm và cung cấp một proxy cho các chú thích của con người với sự tham gia của con người trong việc đặt tên các cột bảng. Để cung cấp các chú thích tương đối nghiêm ngặt, do đó chúng tôi tận dụng trực tiếp các tên cột được tiền xử lý và khớp chúng một cách cú pháp với các loại ngữ nghĩa trong các bản thể học. Chúng tôi gọi đây là phương pháp chú thích cú pháp.

Thành công gần đây trong các mô hình ngôn ngữ tạo ra cơ hội để chú thích các cột có tính đến ngữ nghĩa. Chúng tôi nhúng tên cột và loại ngữ nghĩa sử dụng FastText, và khớp chúng với nhau. Chúng tôi sử dụng mô hình FastText n-gram cấp ký tự được tiền huấn luyện trên kho dữ liệu Common Crawl và lấy khớp dựa trên độ tương tự cosine cao nhất.

Mặc dù người dùng có thể quyết định về ngưỡng tương tự có liên quan đến các tác vụ của họ, chúng tôi loại bỏ các chú thích với điểm tương tự rất thấp để đảm bảo rằng các chú thích trong GitTables hữu ích ngay từ đầu. Chúng tôi gọi phương pháp này là phương pháp chú thích ngữ nghĩa.

4 PHÂN TÍCH

Ở đây, chúng tôi phân tích phiên bản đầu tiên của GitTables gồm 1 triệu bảng trên 97 tập con chủ đề, trong số các tập lớn hơn: "thing", "object", và "id". Khi hoàn thành, GitTables sẽ bao gồm khoảng 10 triệu bảng. Các bảng được phân tích trong bài báo này được phân phối như một phiên bản riêng biệt: GitTables 1M.

4.1 Thống kê kho dữ liệu

Thống kê bảng. Tổng bộ phân tích của 1,021,143 bảng bao gồm 144,833,144 hàng và 12,369,120 cột, trung bình 142 hàng và 12 cột (xem Bảng 1 và 2 để so sánh qua các kho dữ liệu). Trung bình, các bảng bao gồm 1,038 ô. Hình 4a cho thấy rằng phân phối kích thước bảng có đuôi dài trên số hàng và số cột. Nhìn chung, những kích thước này khác biệt đáng kể so với các kho dữ liệu bảng Web, có trung bình 5 cột và 15 hàng, và gần hơn với kích thước của các bảng cơ sở dữ liệu điển hình. Như được tóm tắt trong Bảng 4, gần 58% các cột được suy luận có giá trị số so với 41% văn bản, khác biệt so với phân phối khoảng 50%-50% trong bảng Web. Cùng nhau, những thống kê này đóng góp vào tiêu chí C1 và C2.

Phần lớn các bảng bắt nguồn từ các kho lưu trữ riêng biệt vì 75% các kho lưu trữ nguồn đóng góp nhiều nhất 5 bảng. Với trung bình tổng thể 34 bảng mỗi kho lưu trữ, một số kho lưu trữ đóng góp một số lượng lớn bảng trong phiên bản đầu tiên này của GitTables. Kiểm tra thủ công tiết lộ rằng các kho lưu trữ như vậy chứa các ảnh chụp của cùng một hoặc các cơ sở dữ liệu tương tự. Những bảng này, và URL nguồn tương ứng tham chiếu đến kho lưu trữ liên quan, có thể được sử dụng để xây dựng các bảng lớn hơn thông qua hợp nhất và nối.

Chúng tôi quan sát thấy lợi thế của việc tách các bảng khỏi các chủ đề truy vấn. Ví dụ, truy vấn cho các bảng "organism" truy xuất nhiều bảng liên quan đến các thực thể sinh học và y tế, trong đó một bảng điển hình được hiển thị trong Hình 2. Các tập con như vậy có thể được tận dụng để huấn luyện các mô hình cụ thể theo miền, hoặc để kết hợp các chủ đề này như ngữ nghĩa cho nhúng bảng.

Thống kê chú thích. Phương pháp cú pháp chú thích, trung bình qua hai bản thể học, 730K trong số 1 triệu bảng với ít nhất 1 chú thích cột. Trung bình, điều này tạo ra 2,7 triệu chú thích với 756 loại duy nhất. Phương pháp chú thích ngữ nghĩa chú thích trung bình 960K bảng, tạo ra tổng cộng 8,4 triệu chú thích cột qua 2,4K loại duy nhất trung bình. Thống kê liên quan đến các bản thể học khác nhau (DBpedia và Schema.org) được trình bày trong Bảng 5. Tùy thuộc vào trường hợp sử dụng, người dùng có thể chọn một bản thể học và phương pháp chú thích phù hợp để lọc các chú thích có liên quan cho mỗi bảng.

Nếu ngữ cảnh cột quan trọng, ví dụ cho các mô hình ngữ cảnh, phạm vi chú thích bảng cao là chìa khóa. Chúng tôi thấy rằng phương pháp ngữ nghĩa tạo ra chú thích cho, trung bình, 71% các cột bảng, trong khi phương pháp cú pháp chú thích 26%. Hình 4b cho thấy phân phối tổng thể của tỷ lệ phần trăm các cột được chú thích mỗi bảng được tổng hợp trên cả hai bản thể học.

Điểm tương tự cosine, mà chúng tôi đính kèm với tất cả các chú thích ngữ nghĩa, phản ánh độ tin cậy của mỗi chú thích. Từ phân phối của những điểm tương tự này như được hiển thị trong Hình 4c, chúng tôi quan sát rằng nhiều chú thích có điểm tương tự khoảng 1, cho thấy sự giống nhau về cú pháp, trong khi phân phối còn lại tập trung khoảng 0,75. Người dùng GitTables có thể đặt ngưỡng mong muốn dựa trên nhu cầu của họ và, ví dụ, chỉ chọn các chú thích có điểm tương tự cao phản ánh các chú thích có độ tin cậy cao.

4.2 Nội dung kho dữ liệu

Nội dung bảng và phạm vi chủ đề. Ngoài các thuộc tính cấu trúc của các bảng trong GitTables, chúng tôi so sánh nội dung của chúng với các bảng từ VizNet kết hợp hầu hết các kho dữ liệu hiện có. Chúng tôi diễn giải việc so sánh nội dung bảng như một vấn đề phát hiện dịch chuyển dữ liệu và đánh giá xem các phân phối dữ liệu có khác biệt đáng kể bằng cách huấn luyện một bộ phân loại miền. Để thực hiện điều này, chúng tôi lấy mẫu ngẫu nhiên 5K cột được loại bỏ trùng lặp từ mỗi kho dữ liệu và trích xuất 1,188 đặc trưng như được sử dụng để huấn luyện mô hình phát hiện loại cột ngữ nghĩa Sherlock, ghi lại thống kê cấp cột như entropy cột và độ lệch, tổng hợp từ nhúng từ, và thống kê cấp ký tự được tổng hợp (ví dụ: số ký tự '@' mỗi ô).

Sau đó chúng tôi huấn luyện một bộ phân loại Random Forest với cài đặt mặc định để phân tách xem một cột có bắt nguồn từ VizNet hay từ GitTables. Sử dụng thiết lập kiểm tra chéo 10-Fold, chúng tôi thấy rằng bộ phân loại miền này có thể dự đoán cho 93% (±0,04) các cột từ kho dữ liệu nào nó bắt nguồn. Khả năng phân tách này chỉ ra các phân phối dữ liệu khác nhau trong GitTables và VizNet, do đó giá trị bổ sung của GitTables.

Các cột trong kho dữ liệu WDC WebTables 2012 cũng đã được khớp với DBpedia dẫn đến 10 loại ngữ nghĩa hàng đầu: name, date, title, artist, description, size, type, location, model, và year. Đối với GitTables, phạm vi chủ đề và sự đa dạng của các loại ngữ nghĩa cho mỗi phương pháp chú thích và bản thể học được minh họa trong Hình 5. Mặc dù các loại hàng đầu trong cả hai kho dữ liệu chồng chéo như name và title, chúng tôi quan sát sự khác biệt rõ ràng với các loại hàng đầu trong GitTables như id, type, value, và min. Đặc biệt là loại id chiếm ưu thế, một trong những loại phổ biến nhất trong các cơ sở dữ liệu điển hình, chỉ ra rằng GitTables đáp ứng tiêu chí C2 và C3.

Thiên lệch nội dung. Phân tích phân phối chủ đề có mặt trong GitTables cho thấy một số loại ngữ nghĩa có thể tiềm ẩn làm cho các phương pháp được thông báo bởi GitTables nghiêng về các tiểu nhóm, ngành công nghiệp hoặc khu vực địa lý nhất định. Để hồ sơ thêm tập dữ liệu của chúng tôi theo hướng này, chúng tôi áp dụng 2 danh mục được đề xuất trong, là "person" và "geography" và phân tích một tập con các bảng về thiên lệch đối với các danh mục này.

Trong Bảng 6, chúng tôi đưa ra hiểu biết sâu hơn về phân phối dọc theo các chiều này được thông báo bởi các giá trị cột liên quan đến các loại ngữ nghĩa từ Schema.org. Phân tích này xác nhận rằng các bảng trong GitTables chứa dữ liệu địa lý (hơi trên 1%), chủ yếu đại diện cho các quốc gia và thành phố nói tiếng Anh. Phân phối giá trị của các cột ít trong GitTables với các loại ngữ nghĩa phản ánh các phân khúc dân số, ví dụ: gender, race, và ethnicity, chỉ ra một nồng độ tương đối cao hơn của dữ liệu đại diện cho các quốc gia phương Tây (xem Bảng 6).

4.3 Chất lượng chú thích

Vì chúng tôi không có quyền truy cập vào sự thật cơ bản của các loại cột ngữ nghĩa, chúng tôi sử dụng điểm chuẩn T2Dv2 được gắn nhãn thủ công với các loại DBpedia để đánh giá các phương pháp chú thích của chúng tôi. Mặc dù chất lượng chú thích trên T2Dv2 không đảm bảo chất lượng chú thích của GitTables, nó là một proxy tốt cho chất lượng chú thích được sản xuất bởi các phương pháp của chúng tôi. Chúng tôi xem xét các cột bảng từ các tệp mà chúng tôi có thể phân tích và được chú thích bởi T2Dv2 cũng như các phương pháp chú thích của chúng tôi. Tổng cộng, chúng tôi có 321 và 187 cột để đánh giá với các phương pháp ngữ nghĩa và cú pháp, tương ứng.

Chúng tôi thấy rằng phương pháp ngữ nghĩa của chúng tôi tạo ra trong 54% (173 cột) cùng chú thích như T2Dv2. Từ các chú thích không chính xác, phương pháp của chúng tôi chú thích 47% (69 cột) với một loại DBpedia khớp cú pháp với tên cột vì các điểm tương tự tương ứng là 1,0. Ví dụ, phương pháp ngữ nghĩa của chúng tôi chú thích một cột với các thành phố (ví dụ: Pittsburgh, Buffalo) có tên "City" với loại city trong khi T2Dv2 chú thích cột này với loại ít chi tiết hơn location. Điều này thúc đẩy một đánh giá thủ công của 148 cột mà chúng tôi tìm thấy các chú thích khác nhau giữa phương pháp ngữ nghĩa và các chú thích từ T2Dv2. Dựa trên đánh giá thủ công của chúng tôi (n=3), chúng tôi thấy rằng trung bình trong 63 (±14) trong số 148 phương pháp ngữ nghĩa tạo ra các chú thích tốt hơn, trong 37 (±3) trong số 148 các chú thích T2Dv2 rõ ràng tốt hơn. Trong 33 cột (±14) chúng cũng tốt hoặc xấu như nhau, và không xác định trong 15 trường hợp (±17).

Phương pháp cú pháp tạo ra trong 61% (114 cột) cùng chú thích như T2Dv2. Lúc đầu, chúng tôi tìm thấy các trường hợp mà các chú thích cú pháp tốt hơn. Ví dụ, một cột với tên Latin của chim có tên "Latin name" được chú thích là synonym thay vì loại DBpedia latin name. Do đó chúng tôi đã tuân theo cùng quy trình đánh giá thủ công như đối với phương pháp ngữ nghĩa để xem xét 73 chú thích mà quy trình của chúng tôi tạo ra các chú thích khác với T2Dv2. Dựa trên thỏa thuận giữa các người chú thích chúng tôi thấy rằng phương pháp cú pháp rõ ràng tạo ra các chú thích chính xác hơn cho 21 cột và T2Dv2 có các chú thích tốt hơn cho 9 cột.

Những phát hiện này chỉ ra rằng các phương pháp chú thích của chúng tôi cung cấp chất lượng cần thiết để huấn luyện và đánh giá các mô hình DL (C4). Chúng tôi cũng quan sát rằng các chú thích của điểm chuẩn T2Dv2 có thể yêu cầu một đánh giá và có thể sửa đổi trong nghiên cứu tương lai.

5 ỨNG DỤNG

Trong phần này, chúng tôi chứng minh cách GitTables có thể được sử dụng cho các mô hình phát hiện loại cột ngữ nghĩa và hoàn thiện schema, và thảo luận về việc sử dụng nó cho các điểm chuẩn quản lý dữ liệu trong các ngữ cảnh doanh nghiệp. Chúng tôi lưu ý rằng tiện ích của GitTables kéo dài ngoài các trường hợp sử dụng này đến một loạt rộng các tác vụ quản lý dữ liệu.

5.1 Phát hiện loại cột ngữ nghĩa

Nắm bắt ngữ nghĩa của một bảng thông qua các loại cột ngữ nghĩa của nó là công cụ cho nhiều tác vụ phân tích như khám phá dữ liệu như được thảo luận trong Phần 1, mà còn cho xử lý dữ liệu tuân thủ GDPR như ẩn danh dữ liệu PII như được triển khai cho GitTables. Tuy nhiên, nhiều cơ sở dữ liệu doanh nghiệp thiếu tên cột mô tả hoặc chuẩn hóa qua các bảng. Các biểu diễn cột và bảng học được từ các kho dữ liệu bảng lớn đã chỉ ra chính xác đại diện cho ngữ nghĩa của bảng Web, và chúng tôi tin rằng các mô hình này dễ dàng mở rộng đến các miền ngoài Web khi được huấn luyện trên GitTables.

Để phát hiện các loại ngữ nghĩa của các cột trong một bảng nhất định, chúng tôi huấn luyện Sherlock, một mô hình học sâu để phát hiện loại cột ngữ nghĩa, trên các cột bảng từ GitTables. Cho thí nghiệm này, chúng tôi chọn năm loại ngữ nghĩa address, class, status, name, và description và lấy mẫu ngẫu nhiên 500 cột được loại bỏ trùng lặp mỗi loại từ tập con phân tích của chúng tôi. Cho mỗi cột chúng tôi trích xuất cùng các đặc trưng cột cấp thấp như được sử dụng trong Phần 4.2, tức là nhúng đoạn văn, nhúng từ, đếm cấp ký tự, và thống kê được tổng hợp. Chúng tôi huấn luyện Sherlock sử dụng thiết lập kiểm tra chéo 5-Fold. Như Bảng 7 hiển thị, mô hình này đạt được điểm F1 macro trung bình 0,86 (±0,02) minh họa tiện ích của việc huấn luyện một mô hình trên GitTables để phát hiện loại cột ngữ nghĩa.

Chúng tôi lặp lại thí nghiệm này với các cột từ VizNet, kết hợp các bảng từ tất cả các kho dữ liệu bảng hiện có. Để đảm bảo so sánh công bằng, chúng tôi lấy mẫu 500 cột được loại bỏ trùng lặp mỗi loại của cùng các loại chính xác. Mô hình này tạo ra điểm F1 macro 0,77 (±0,02) trên các mẫu từ VizNet. Tuy nhiên, khi đánh giá mô hình được huấn luyện VizNet trên các cột từ GitTables, chúng tôi thấy rằng nó không khái quát hóa tốt đến các mẫu từ GitTables vì điểm F1 macro giảm xuống 0,66 (±0,03). Khoảng cách này xác nhận rằng các mô hình được huấn luyện chỉ trên bảng Web, có thể không khái quát hóa ngoài Web.

5.2 Hoàn thiện schema

Lấy cảm hứng từ Cafarella và cộng sự, chúng tôi sử dụng GitTables để thông báo hoàn thiện các tiền tố schema. Hoàn thiện schema trao quyền cho nhiều ứng dụng trong số đó là thiết kế cơ sở dữ liệu và tri thức chung, và tăng cường dữ liệu. Chúng tôi triển khai NearestCompletion như trong Thuật toán 1. Thuật toán của chúng tôi hoàn thiện một tiền tố schema (mục tiêu) nhất định có độ dài N dựa trên sự tương tự của nó với các tiền tố schema từ GitTables. Chúng tôi nhúng các thuộc tính từ tiền tố schema mục tiêu có độ dài N và schema từ GitTables sử dụng Universal Sentence Encoder (USE) hoạt động tốt cho các thuộc tính nhiều từ. Tương tự như cách các công cụ tìm kiếm cung cấp nhiều đề xuất cho các truy vấn tìm kiếm, chúng tôi trả về k "hoàn thiện gần nhất". Các hoàn thiện gần nhất dựa trên schema trong GitTables với khoảng cách cosine trung bình nhỏ nhất giữa N thuộc tính đầu tiên của các schema này và thuộc tính của tiền tố mục tiêu có độ dài N.

Để đánh giá tiện ích của GitTables cho hoàn thiện schema trong các ngữ cảnh công nghiệp điển hình, chúng tôi sử dụng các tiền tố schema từ ba schema bảng thực tế từ CTU Prague Relational Learning Repository. Chúng tôi trích xuất các tiền tố có độ dài N=3 và trả về k=10 hoàn thiện gần nhất như thường được sử dụng trong các hệ thống truy xuất thông tin. Sự liên quan của các hoàn thiện được đề xuất được tính như độ tương tự cosine cao nhất giữa nhúng USE của schema đầy đủ gốc của tiền tố mục tiêu và schema đầy đủ của 10 hoàn thiện được đề xuất từ GitTables. Một vài thuộc tính của hoàn thiện có liên quan nhất được trình bày trong cột thứ hai của Bảng 8.

Dữ liệu: Tiền tố schema p, tập hợp schema S từ GitTables, số lượng hoàn thiện k
Kết quả: Hoàn thiện schema c
1 N = |p|
2 tập hợp hoàn thiện schema C = tập hợp rỗng
3 tiền tố schema nhúng pe = [embed(a) cho thuộc tính a trong p]
4 for schema s trong S do
5    schema nhúng se = [embed(a) cho thuộc tính a trong s]
6    khoảng cách tiền tố trung bình d = ∑(i=1 to N) cosine distance(pe[i], se[i]) / N
7    C.append(s, d)
8 end
9 sắp xếp C theo thứ tự tăng dần của d
10 c = C.first(k)
11 return c

Thuật toán 1: Quy trình hoàn thiện schema để trả về k hoàn thiện có liên quan nhất cho một tiền tố schema đầu vào dựa trên độ tương tự cosine với các tiền tố schema trong GitTables.

Bảng 8 trình bày các tiền tố mục tiêu của các bảng được xem xét, thuộc tính từ các hoàn thiện được đề xuất, và độ tương tự cosine của toàn bộ schema. Ngữ nghĩa của những đề xuất này rõ ràng có liên quan đến các tiền tố mục tiêu. Ví dụ, các thuộc tính từ hoàn thiện schema tương tự nhất cho tiền tố từ bảng "employees" rõ ràng liên quan đến chi tiết nhân viên cá nhân như "HireDate" và "Title". Sự liên quan này cũng được phản ánh bởi độ tương tự cosine giữa toàn bộ schema gốc và schema được đề xuất cho các hoàn thiện, trung bình là 0,49 trên thang điểm [-1,1]. Những kết quả này nhấn mạnh tiện ích của GitTables như một nguồn tài nguyên cho các phương pháp hoàn thiện schema trong các cơ sở dữ liệu điển hình.

5.3 Điểm chuẩn quản lý dữ liệu

GitTables cung cấp một nguồn phong phú cho các bảng giống cơ sở dữ liệu có thể được sử dụng để biên soạn các tập con để đánh giá các tác vụ quản lý dữ liệu như hiểu bảng và tìm kiếm dữ liệu.

Chúng tôi đã tạo một tập dữ liệu điểm chuẩn để phát hiện loại cột ngữ nghĩa. Chúng tôi tuyển chọn thủ công 1,101 bảng, mỗi bảng có ít nhất 3 cột và 5 hàng. Các cột mục tiêu được liên kết với 122 loại riêng biệt từ DBpedia và 59 loại từ Schema.org, như thu được với phương pháp chú thích cú pháp. Chúng tôi hình dung rằng tập dữ liệu điểm chuẩn này sẽ kích thích phát triển các hệ thống để tăng cường đồ thị tri thức từ các nguồn dữ liệu mới. Một bước đầu tiên theo hướng này là việc bao gồm tập dữ liệu này trong thử thách SemTab để khớp bảng với KG. Kết quả trên tập dữ liệu này đã tiết lộ những thách thức mở cho tác vụ này, vì nhiều hệ thống dựa vào việc khớp các giá trị ô cột với các thực thể KG. Điều này thường không hoạt động đối với các bảng từ GitTables, như được phản ánh bởi điểm số thấp qua các hệ thống (4 hệ thống cho DBpedia, và 3 cho Schema.org), được hiển thị trong Hình 6a. Độ chính xác trung bình trên các chú thích Schema.org cao hơn một chút do các phương pháp khớp mẫu phát hiện tốt một số loại cấu trúc. Nhìn chung, tập dữ liệu điểm chuẩn của chúng tôi đặt ra những thách thức mới cho các hệ thống khớp các bảng từ các nguồn ngoài Web với KG.

Ngoài khớp bảng với KG, GitTables cung cấp cơ sở để đánh giá điểm chuẩn các tác vụ quản lý dữ liệu như tìm kiếm dữ liệu. Đánh giá các hệ thống về hiệu suất tìm kiếm của chúng với GitTables rất quan trọng để hiểu xem chúng có khái quát hóa đến ví dụ các cơ sở dữ liệu doanh nghiệp. Để minh họa sự liên quan của GitTables cho việc đánh giá điểm chuẩn tác vụ này, chúng tôi triển khai một quy trình tìm kiếm tương tự như Thuật toán 1 nhưng thay vào đó nhúng toàn bộ schema bảng và so sánh chúng với các truy vấn tìm kiếm nhúng bằng ngôn ngữ tự nhiên. Hình 6b cho thấy một bảng cơ sở dữ liệu điển hình với dữ liệu đơn hàng sản phẩm được truy xuất cho truy vấn "status and sales amount per product". Để phát triển tập dữ liệu điểm chuẩn này hơn nữa, người ta có thể thu thập một tập hợp các bảng và truy vấn và xếp hạng các bảng có liên quan nhất cho mỗi truy vấn.

6 KẾT LUẬN

Cơ sở dữ liệu quan hệ là nền tảng của các ứng dụng doanh nghiệp. Trong bài báo này, chúng tôi giới thiệu GitTables, một kho dữ liệu gồm 1 triệu bảng quan hệ bổ sung cho các kho dữ liệu bảng Web hiện có có sẵn cho các nhà nghiên cứu. Chúng tôi trích xuất các bảng từ các tệp CSV trong các kho lưu trữ mã nguồn mở trên GitHub, tuyển chọn kho dữ liệu để kiểm soát chất lượng, và cải thiện các bảng với các chú thích loại cột ngữ nghĩa từ DBpedia và Schema.org. Chúng tôi phân tích thống kê kho dữ liệu, nội dung bảng, và chất lượng chú thích, minh họa giá trị bổ sung của GitTables liên quan đến các kho dữ liệu bảng hiện có. Chúng tôi cho thấy rằng GitTables có thể được tận dụng cho 1) các mô hình học được để phát hiện loại cột ngữ nghĩa với phạm vi bổ sung so với các kho dữ liệu hiện có, 2) đề xuất chính xác hoàn thiện schema trong các ngữ cảnh cơ sở dữ liệu điển hình, và 3) phát triển các điểm chuẩn thách thức cho các tác vụ quản lý dữ liệu. Trong nghiên cứu tương lai, chúng tôi quan tâm đến việc khám phá tiện ích rộng hơn của GitTables, kéo dài ngoài các trường hợp sử dụng này đến một loạt rộng các tác vụ quản lý dữ liệu.
