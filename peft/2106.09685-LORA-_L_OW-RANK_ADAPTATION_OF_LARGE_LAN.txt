# 2106.09685.pdf
# Converted from PDF to TXT
# Source path: /home/admin88/arxiv-downloader/peft/2106.09685.pdf
# File size: 1609513 bytes

===============================================
PDF FILE CONTENT
===============================================


--- PAGE 1 ---
LORA: L OW-RANK ADAPTATION OF LARGE LAN-
GUAGE MODELS
Edward HuYelong ShenPhillip Wallis Zeyuan Allen-Zhu
Yuanzhi Li Shean Wang Lu Wang Weizhu Chen
Microsoft Corporation
fedwardhu, yeshe, phwallis, zeyuana,
yuanzhil, swang, luw, wzchen g@microsoft.com
yuanzhil@andrew.cmu.edu
(Version 2)
ABSTRACT
An important paradigm of natural language processing consists of large-scale pre-
training on general domain data and adaptation to particular tasks or domains. As
we pre-train larger models, full Ô¨Åne-tuning, which retrains all model parameters,
becomes less feasible. Using GPT-3 175B as an example ‚Äì deploying indepen-
dent instances of Ô¨Åne-tuned models, each with 175B parameters, is prohibitively
expensive. We propose Low-RankAdaptation, or LoRA, which freezes the pre-
trained model weights and injects trainable rank decomposition matrices into each
layer of the Transformer architecture, greatly reducing the number of trainable pa-
rameters for downstream tasks. Compared to GPT-3 175B Ô¨Åne-tuned with Adam,
LoRA can reduce the number of trainable parameters by 10,000 times and the
GPU memory requirement by 3 times. LoRA performs on-par or better than Ô¨Åne-
tuning in model quality on RoBERTa, DeBERTa, GPT-2, and GPT-3, despite hav-
ing fewer trainable parameters, a higher training throughput, and, unlike adapters,
no additional inference latency . We also provide an empirical investigation into
rank-deÔ¨Åciency in language model adaptation, which sheds light on the efÔ¨Åcacy of
LoRA. We release a package that facilitates the integration of LoRA with PyTorch
models and provide our implementations and model checkpoints for RoBERTa,
DeBERTa, and GPT-2 at https://github.com/microsoft/LoRA .
1 I NTRODUCTION
Pretrained 
Weights
ùëä‚àà‚Ñùùëë√óùëë
xh
ùêµ=0
ùê¥=ùí©(0,ùúé2)
ùëëùëüPretrained 
Weights
ùëä‚àà‚Ñùùëë√óùëë
xf(x)
ùëë
Figure 1: Our reparametriza-
tion. We only train AandB.Many applications in natural language processing rely on adapt-
ingonelarge-scale, pre-trained language model to multiple down-
stream applications. Such adaptation is usually done via Ô¨Åne-tuning ,
which updates all the parameters of the pre-trained model. The ma-
jor downside of Ô¨Åne-tuning is that the new model contains as many
parameters as in the original model. As larger models are trained
every few months, this changes from a mere ‚Äúinconvenience‚Äù for
GPT-2 (Radford et al., b) or RoBERTa large (Liu et al., 2019) to a
critical deployment challenge for GPT-3 (Brown et al., 2020) with
175 billion trainable parameters.1
Many sought to mitigate this by adapting only some parameters or
learning external modules for new tasks. This way, we only need
to store and load a small number of task-speciÔ¨Åc parameters in ad-
dition to the pre-trained model for each task, greatly boosting the
operational efÔ¨Åciency when deployed. However, existing techniques
Equal contribution.
0Compared to V1, this draft includes better baselines, experiments on GLUE, and more on adapter latency.
1While GPT-3 175B achieves non-trivial performance with few-shot learning, Ô¨Åne-tuning boosts its perfor-
mance signiÔ¨Åcantly as shown in Appendix A.
1arXiv:2106.09685v2  [cs.CL]  16 Oct 2021

--- PAGE 2 ---
often introduce inference latency (Houlsby et al., 2019; RebufÔ¨Å et al., 2017) by extending model
depth or reduce the model‚Äôs usable sequence length (Li & Liang, 2021; Lester et al., 2021; Ham-
bardzumyan et al., 2020; Liu et al., 2021) (Section 3). More importantly, these method often fail to
match the Ô¨Åne-tuning baselines, posing a trade-off between efÔ¨Åciency and model quality.
We take inspiration from Li et al. (2018a); Aghajanyan et al. (2020) which show that the learned
over-parametrized models in fact reside on a low intrinsic dimension. We hypothesize that the
change in weights during model adaptation also has a low ‚Äúintrinsic rank‚Äù, leading to our proposed
Low-RankAdaptation (LoRA) approach. LoRA allows us to train some dense layers in a neural
network indirectly by optimizing rank decomposition matrices of the dense layers‚Äô change during
adaptation instead, while keeping the pre-trained weights frozen, as shown in Figure 1. Using GPT-3
175B as an example, we show that a very low rank (i.e., rin Figure 1 can be one or two) sufÔ¨Åces even
when the full rank (i.e., d) is as high as 12,288, making LoRA both storage- and compute-efÔ¨Åcient.
LoRA possesses several key advantages.
‚Ä¢ A pre-trained model can be shared and used to build many small LoRA modules for dif-
ferent tasks. We can freeze the shared model and efÔ¨Åciently switch tasks by replacing the
matricesAandBin Figure 1, reducing the storage requirement and task-switching over-
head signiÔ¨Åcantly.
‚Ä¢ LoRA makes training more efÔ¨Åcient and lowers the hardware barrier to entry by up to 3
times when using adaptive optimizers since we do not need to calculate the gradients or
maintain the optimizer states for most parameters. Instead, we only optimize the injected,
much smaller low-rank matrices.
‚Ä¢ Our simple linear design allows us to merge the trainable matrices with the frozen weights
when deployed, introducing no inference latency compared to a fully Ô¨Åne-tuned model, by
construction.
‚Ä¢ LoRA is orthogonal to many prior methods and can be combined with many of them, such
as preÔ¨Åx-tuning. We provide an example in Appendix E.
Terminologies and Conventions We make frequent references to the Transformer architecture
and use the conventional terminologies for its dimensions. We call the input and output di-
mension size of a Transformer layer dmodel . We useWq,Wk,Wv, andWoto refer to the
query/key/value/output projection matrices in the self-attention module. WorW0refers to a pre-
trained weight matrix and Wits accumulated gradient update during adaptation. We use rto
denote the rank of a LoRA module. We follow the conventions set out by (Vaswani et al., 2017;
Brown et al., 2020) and use Adam (Loshchilov & Hutter, 2019; Kingma & Ba, 2017) for model
optimization and use a Transformer MLP feedforward dimension dffn= 4dmodel .
2 P ROBLEM STATEMENT
While our proposal is agnostic to training objective, we focus on language modeling as our motivat-
ing use case. Below is a brief description of the language modeling problem and, in particular, the
maximization of conditional probabilities given a task-speciÔ¨Åc prompt.
Suppose we are given a pre-trained autoregressive language model P(yjx)parametrized by .
For instance, P(yjx)can be a generic multi-task learner such as GPT (Radford et al., b; Brown
et al., 2020) based on the Transformer architecture (Vaswani et al., 2017). Consider adapting this
pre-trained model to downstream conditional text generation tasks, such as summarization, machine
reading comprehension (MRC), and natural language to SQL (NL2SQL). Each downstream task is
represented by a training dataset of context-target pairs: Z=f(xi;yi)gi=1;::;N, where both xiand
yiare sequences of tokens. For example, in NL2SQL, xiis a natural language query and yiits
corresponding SQL command; for summarization, xiis the content of an article and yiits summary.
2

--- PAGE 3 ---
During full Ô¨Åne-tuning, the model is initialized to pre-trained weights 0and updated to 0+ 
by repeatedly following the gradient to maximize the conditional language modeling objective:
max
X
(x;y)2ZjyjX
t=1log(P(ytjx;y<t)) (1)
One of the main drawbacks for full Ô¨Åne-tuning is that for each downstream task, we learn a different
set of parameters whose dimensionjjequalsj0j. Thus, if the pre-trained model is large
(such as GPT-3 with j0j175Billion), storing and deploying many independent instances of
Ô¨Åne-tuned models can be challenging, if at all feasible.
In this paper, we adopt a more parameter-efÔ¨Åcient approach, where the task-speciÔ¨Åc parameter
increment  = () is further encoded by a much smaller-sized set of parameters with
jjj 0j. The task of Ô¨Ånding thus becomes optimizing over :
max
X
(x;y)2ZjyjX
t=1log 
p0+() (ytjx;y<t)
(2)
In the subsequent sections, we propose to use a low-rank representation to encode that is both
compute- and memory-efÔ¨Åcient. When the pre-trained model is GPT-3 175B, the number of train-
able parametersjjcan be as small as 0:01% ofj0j.
3 A REN‚ÄôTEXISTING SOLUTIONS GOOD ENOUGH ?
The problem we set out to tackle is by no means new. Since the inception of transfer learning, dozens
of works have sought to make model adaptation more parameter- and compute-efÔ¨Åcient. See Sec-
tion 6 for a survey of some of the well-known works. Using language modeling as an example, there
are two prominent strategies when it comes to efÔ¨Åcient adaptations: adding adapter layers (Houlsby
et al., 2019; RebufÔ¨Å et al., 2017; Pfeiffer et al., 2021; R ¬®uckl¬¥e et al., 2020) or optimizing some forms
of the input layer activations (Li & Liang, 2021; Lester et al., 2021; Hambardzumyan et al., 2020;
Liu et al., 2021). However, both strategies have their limitations, especially in a large-scale and
latency-sensitive production scenario.
Adapter Layers Introduce Inference Latency There are many variants of adapters. We focus
on the original design by Houlsby et al. (2019) which has two adapter layers per Transformer block
and a more recent one by Lin et al. (2020) which has only one per block but with an additional
LayerNorm (Ba et al., 2016). While one can reduce the overall latency by pruning layers or exploit-
ing multi-task settings (R ¬®uckl¬¥e et al., 2020; Pfeiffer et al., 2021), there is no direct ways to bypass
the extra compute in adapter layers. This seems like a non-issue since adapter layers are designed
to have few parameters (sometimes <1% of the original model) by having a small bottleneck di-
mension, which limits the FLOPs they can add. However, large neural networks rely on hardware
parallelism to keep the latency low, and adapter layers have to be processed sequentially. This makes
a difference in the online inference setting where the batch size is typically as small as one. In a
generic scenario without model parallelism, such as running inference on GPT-2 (Radford et al., b)
medium on a single GPU, we see a noticeable increase in latency when using adapters, even with a
very small bottleneck dimension (Table 1).
This problem gets worse when we need to shard the model as done in Shoeybi et al. (2020); Lep-
ikhin et al. (2020), because the additional depth requires more synchronous GPU operations such as
AllReduce andBroadcast , unless we store the adapter parameters redundantly many times.
Directly Optimizing the Prompt is Hard The other direction, as exempliÔ¨Åed by preÔ¨Åx tuning (Li
& Liang, 2021), faces a different challenge. We observe that preÔ¨Åx tuning is difÔ¨Åcult to optimize
and that its performance changes non-monotonically in trainable parameters, conÔ¨Årming similar
observations in the original paper. More fundamentally, reserving a part of the sequence length for
adaptation necessarily reduces the sequence length available to process a downstream task, which
we suspect makes tuning the prompt less performant compared to other methods. We defer the study
on task performance to Section 5.
3

--- PAGE 4 ---
Batch Size 32 16 1
Sequence Length 512 256 128
jj 0.5M 11M 11M
Fine-Tune/LoRA 1449.40.8 338.0 0.6 19.8 2.7
AdapterL1482.01.0 (+2.2%) 354.8 0.5 (+5.0%) 23.9 2.1 (+20.7%)
AdapterH1492.21.0 (+3.0%) 366.3 0.5 (+8.4%) 25.8 2.2 (+30.3%)
Table 1: Infernece latency of a single forward pass in GPT-2 medium measured in milliseconds, av-
eraged over 100 trials. We use an NVIDIA Quadro RTX8000. ‚Äú jj‚Äù denotes the number of trainable
parameters in adapter layers. AdapterLand AdapterHare two variants of adapter tuning, which we
describe in Section 5.1. The inference latency introduced by adapter layers can be signiÔ¨Åcant in an
online, short-sequence-length scenario. See the full study in Appendix B.
4 O URMETHOD
We describe the simple design of LoRA and its practical beneÔ¨Åts. The principles outlined here apply
to any dense layers in deep learning models, though we only focus on certain weights in Transformer
language models in our experiments as the motivating use case.
4.1 L OW-RANK -PARAMETRIZED UPDATE MATRICES
A neural network contains many dense layers which perform matrix multiplication. The weight
matrices in these layers typically have full-rank. When adapting to a speciÔ¨Åc task, Aghajanyan et al.
(2020) shows that the pre-trained language models have a low ‚Äúinstrisic dimension‚Äù and can still
learn efÔ¨Åciently despite a random projection to a smaller subspace. Inspired by this, we hypothe-
size the updates to the weights also have a low ‚Äúintrinsic rank‚Äù during adaptation. For a pre-trained
weight matrix W02Rdk, we constrain its update by representing the latter with a low-rank de-
composition W0+ W=W0+BA, whereB2Rdr;A2Rrk, and the rank rmin(d;k).
During training, W0is frozen and does not receive gradient updates, while AandBcontain trainable
parameters. Note both W0andW=BAare multiplied with the same input, and their respective
output vectors are summed coordinate-wise. For h=W0x, our modiÔ¨Åed forward pass yields:
h=W0x+ Wx=W0x+BAx (3)
We illustrate our reparametrization in Figure 1. We use a random Gaussian initialization for Aand
zero forB, soW=BAis zero at the beginning of training. We then scale Wx by
r, where
is a constant in r. When optimizing with Adam, tuning is roughly the same as tuning the learning
rate if we scale the initialization appropriately. As a result, we simply set to the Ô¨Årstrwe try
and do not tune it. This scaling helps to reduce the need to retune hyperparameters when we vary
r(Yang & Hu, 2021).
A Generalization of Full Fine-tuning. A more general form of Ô¨Åne-tuning allows the training of
a subset of the pre-trained parameters. LoRA takes a step further and does not require the accumu-
lated gradient update to weight matrices to have full-rank during adaptation. This means that when
applying LoRA to all weight matrices and training all biases2, we roughly recover the expressive-
ness of full Ô¨Åne-tuning by setting the LoRA rank rto the rank of the pre-trained weight matrices. In
other words, as we increase the number of trainable parameters3, training LoRA roughly converges
to training the original model, while adapter-based methods converges to an MLP and preÔ¨Åx-based
methods to a model that cannot take long input sequences.
No Additional Inference Latency. When deployed in production, we can explicitly compute and
storeW=W0+BA and perform inference as usual. Note that both W0andBA are inRdk.
When we need to switch to another downstream task, we can recover W0by subtracting BAand
then adding a different B0A0, a quick operation with very little memory overhead. Critically, this
2They represent a negligible number of parameters compared to weights.
3An inevitability when adapting to hard tasks.
4

--- PAGE 5 ---
guarantees that we do not introduce any additional latency during inference compared to a Ô¨Åne-tuned
model by construction.
4.2 A PPLYING LORA TOTRANSFORMER
In principle, we can apply LoRA to any subset of weight matrices in a neural network to reduce the
number of trainable parameters. In the Transformer architecture, there are four weight matrices in
the self-attention module ( Wq;Wk;Wv;Wo) and two in the MLP module. We treat Wq(orWk,Wv)
as a single matrix of dimension dmodeldmodel , even though the output dimension is usually sliced
into attention heads. We limit our study to only adapting the attention weights for downstream
tasks and freeze the MLP modules (so they are not trained in downstream tasks) both for simplicity
and parameter-efÔ¨Åciency.We further study the effect on adapting different types of attention weight
matrices in a Transformer in Section 7.1. We leave the empirical investigation of adapting the MLP
layers, LayerNorm layers, and biases to a future work.
Practical BeneÔ¨Åts and Limitations. The most signiÔ¨Åcant beneÔ¨Åt comes from the reduction in
memory and storage usage. For a large Transformer trained with Adam, we reduce that VRAM
usage by up to 2=3ifrdmodel as we do not need to store the optimizer states for the frozen
parameters. On GPT-3 175B, we reduce the VRAM consumption during training from 1.2TB to
350GB. With r= 4and only the query and value projection matrices being adapted, the checkpoint
size is reduced by roughly 10,000 (from 350GB to 35MB)4. This allows us to train with signiÔ¨Å-
cantly fewer GPUs and avoid I/O bottlenecks. Another beneÔ¨Åt is that we can switch between tasks
while deployed at a much lower cost by only swapping the LoRA weights as opposed to all the
parameters. This allows for the creation of many customized models that can be swapped in and out
on the Ô¨Çy on machines that store the pre-trained weights in VRAM. We also observe a 25% speedup
during training on GPT-3 175B compared to full Ô¨Åne-tuning5as we do not need to calculate the
gradient for the vast majority of the parameters.
LoRA also has its limitations. For example, it is not straightforward to batch inputs to different tasks
with different AandBin a single forward pass, if one chooses to absorb AandBintoWto eliminate
additional inference latency. Though it is possible to not merge the weights and dynamically choose
the LoRA modules to use for samples in a batch for scenarios where latency is not critical.
5 E MPIRICAL EXPERIMENTS
We evaluate the downstream task performance of LoRA on RoBERTa (Liu et al., 2019), De-
BERTa (He et al., 2021), and GPT-2 (Radford et al., b), before scaling up to GPT-3 175B (Brown
et al., 2020). Our experiments cover a wide range of tasks, from natural language understanding
(NLU) to generation (NLG). SpeciÔ¨Åcally, we evaluate on the GLUE (Wang et al., 2019) benchmark
for RoBERTa and DeBERTa. We follow the setup of Li & Liang (2021) on GPT-2 for a direct com-
parison and add WikiSQL (Zhong et al., 2017) (NL to SQL queries) and SAMSum (Gliwa et al.,
2019) (conversation summarization) for large-scale experiments on GPT-3. See Appendix C for
more details on the datasets we use. We use NVIDIA Tesla V100 for all experiments.
5.1 B ASELINES
To compare with other baselines broadly, we replicate the setups used by prior work and reuse their
reported numbers whenever possible. This, however, means that some baselines might only appear
in certain experiments.
Fine-Tuning (FT) is a common approach for adaptation. During Ô¨Åne-tuning, the model is initialized
to the pre-trained weights and biases, and all model parameters undergo gradient updates.A simple
variant is to update only some layers while freezing others. We include one such baseline reported
in prior work (Li & Liang, 2021) on GPT-2, which adapts just the last two layers ( FTTop2).
4We still need the 350GB model during deployment; however, storing 100 adapted models only requires
350GB + 35MB * 100 354GB as opposed to 100 * 350GB 35TB.
5For GPT-3 175B, the training throughput for full Ô¨Åne-tuning is 32.5 tokens/s per V100 GPU; with the same
number of weight shards for model parallelism, the throughput is 43.1 tokens/s per V100 GPU for LoRA.
5

--- PAGE 6 ---
Model & Method # Trainable
Parameters MNLI SST-2 MRPC CoLA QNLI QQP RTE STS-B Avg.
RoB base(FT)* 125.0M 87.6 94.8 90.2 63.6 92.8 91.9 78.7 91.2 86.4
RoB base(BitFit)* 0.1M 84.7 93.7 92.7 62.0 91.8 84.0 81.5 90.8 85.2
RoB base(AdptD)* 0.3M 87.1.094.2.188.51.160.8.493.1.190.2.071.52.789.7.384.4
RoB base(AdptD)* 0.9M 87.3.194.7.388.4.162.6.993.0.290.6.075.92.290.3.185.4
RoB base(LoRA) 0.3M 87.5.395.1.289.7.763.41.293.3.390.8.186.6.791.5.287.2
RoB large(FT)* 355.0M 90.2 96.4 90.9 68.0 94.7 92.2 86.6 92.4 88.9
RoB large(LoRA) 0.8M 90.6.296.2.590.91.268.21.994.9.391.6.187.42.592.6.289.0
RoB large(AdptP)y 3.0M 90.2.396.1.390.2.768.31.094.8.291.9.183.82.992.1.788.4
RoB large(AdptP)y 0.8M 90.5.396.6.289.71.267.82.594.8.391.7.280.12.991.9.487.9
RoB large(AdptH)y 6.0M 89.9.596.2.388.72.966.54.494.7.292.1.183.41.191.01.787.8
RoB large(AdptH)y 0.8M 90.3.396.3.587.71.766.32.094.7.291.5.172.92.991.5.586.4
RoB large(LoRA)y 0.8M 90.6.296.2.590.21.068.21.994.8.391.6.285.21.192.3.588.6
DeB XXL(FT)* 1500.0M 91.8 97.2 92.0 72.0 96.0 92.7 93.9 92.9 91.1
DeB XXL(LoRA) 4.7M 91.9.296.9.292.6.672.41.196.0.192.9.194.9.493.0.291.3
Table 2: RoBERTa base, RoBERTa large, and DeBERTa XXLwith different adaptation methods on the
GLUE benchmark. We report the overall (matched and mismatched) accuracy for MNLI, Matthew‚Äôs
correlation for CoLA, Pearson correlation for STS-B, and accuracy for other tasks. Higher is better
for all metrics. * indicates numbers published in prior works. yindicates runs conÔ¨Ågured in a setup
similar to Houlsby et al. (2019) for a fair comparison.
Bias-only or BitFit is a baseline where we only train the bias vectors while freezing everything else.
Contemporarily, this baseline has also been studied by BitFit (Zaken et al., 2021).
PreÔ¨Åx-embedding tuning (PreEmbed) inserts special tokens among the input tokens. These spe-
cial tokens have trainable word embeddings and are generally not in the model‚Äôs vocabulary. Where
to place such tokens can have an impact on performance. We focus on ‚ÄúpreÔ¨Åxing‚Äù, which prepends
such tokens to the prompt, and ‚ÄúinÔ¨Åxing‚Äù, which appends to the prompt; both are discussed in Li &
Liang (2021). We use lp(resp.li) denote the number of preÔ¨Åx (resp. inÔ¨Åx) tokens. The number of
trainable parameters is jj=dmodel(lp+li).
PreÔ¨Åx-layer tuning (PreLayer) is an extension to preÔ¨Åx-embedding tuning. Instead of just learning
the word embeddings (or equivalently, the activations after the embedding layer) for some special
tokens, we learn the activations after every Transformer layer. The activations computed from pre-
vious layers are simply replaced by trainable ones. The resulting number of trainable parameters is
jj=Ldmodel(lp+li), whereLis the number of Transformer layers.
Adapter tuning as proposed in Houlsby et al. (2019) inserts adapter layers between the self-
attention module (and the MLP module) and the subsequent residual connection. There are two
fully connected layers with biases in an adapter layer with a nonlinearity in between. We call this
original design AdapterH. Recently, Lin et al. (2020) proposed a more efÔ¨Åcient design with the
adapter layer applied only after the MLP module and after a LayerNorm. We call it AdapterL. This
is very similar to another deign proposed in Pfeiffer et al. (2021), which we call AdapterP. We also
include another baseline call AdapterDrop (R ¬®uckl¬¥e et al., 2020) which drops some adapter layers for
greater efÔ¨Åciency ( AdapterD). We cite numbers from prior works whenever possible to maximize
the number of baselines we compare with; they are in rows with an asterisk (*) in the Ô¨Årst column.
In all cases, we have jj=^LAdpt(2dmodelr+r+dmodel )+2^LLNdmodel where ^LAdpt
is the number of adapter layers and ^LLNthe number of trainable LayerNorms (e.g., in AdapterL).
LoRA adds trainable pairs of rank decomposition matrices in parallel to existing weight matrices.
As mentioned in Section 4.2, we only apply LoRA to WqandWvin most experiments for simplicity.
The number of trainable parameters is determined by the rank rand the shape of the original weights:
jj= 2^LLoRAdmodelr, where ^LLoRA is the number of weight matrices we apply LoRA to.
6

--- PAGE 7 ---
Model & Method # Trainable E2E NLG Challenge
Parameters BLEU NIST MET ROUGE-L CIDEr
GPT-2 M (FT)* 354.92M 68.2 8.62 46.2 71.0 2.47
GPT-2 M (AdapterL)* 0.37M 66.3 8.41 45.0 69.8 2.40
GPT-2 M (AdapterL)* 11.09M 68.9 8.71 46.1 71.3 2.47
GPT-2 M (AdapterH) 11.09M 67.3.68.50.07 46.0.2 70.7.2 2.44.01
GPT-2 M (FTTop2)* 25.19M 68.1 8.59 46.0 70.8 2.41
GPT-2 M (PreLayer)* 0.35M 69.7 8.81 46.1 71.4 2.49
GPT-2 M (LoRA) 0.35M 70.4.18.85.02 46.8.2 71.8.1 2.53.02
GPT-2 L (FT)* 774.03M 68.5 8.78 46.0 69.9 2.45
GPT-2 L (AdapterL) 0.88M 69.1.18.68.03 46.3.0 71.4.2 2.49.0
GPT-2 L (AdapterL) 23.00M 68.9.38.70.04 46.1.1 71.3.2 2.45.02
GPT-2 L (PreLayer)* 0.77M 70.3 8.85 46.2 71.7 2.47
GPT-2 L (LoRA) 0.77M 70.4.18.89.02 46.8.2 72.0.2 2.47.02
Table 3: GPT-2 medium (M) and large (L) with different adaptation methods on the E2E NLG
Challenge. For all metrics, higher is better. LoRA outperforms several baselines with comparable
or fewer trainable parameters. ConÔ¨Ådence intervals are shown for experiments we ran. * indicates
numbers published in prior works.
5.2 R OBERT A BASE /LARGE
RoBERTa (Liu et al., 2019) optimized the pre-training recipe originally proposed in BERT (Devlin
et al., 2019a) and boosted the latter‚Äôs task performance without introducing many more trainable
parameters. While RoBERTa has been overtaken by much larger models on NLP leaderboards
such as the GLUE benchmark (Wang et al., 2019) in recent years, it remains a competitive and
popular pre-trained model for its size among practitioners. We take the pre-trained RoBERTa base
(125M) and RoBERTa large (355M) from the HuggingFace Transformers library (Wolf et al., 2020)
and evaluate the performance of different efÔ¨Åcient adaptation approaches on tasks from the GLUE
benchmark. We also replicate Houlsby et al. (2019) and Pfeiffer et al. (2021) according to their
setup. To ensure a fair comparison, we make two crucial changes to how we evaluate LoRA when
comparing with adapters. First, we use the same batch size for all tasks and use a sequence length
of 128 to match the adapter baselines. Second, we initialize the model to the pre-trained model for
MRPC, RTE, and STS-B, not a model already adapted to MNLI like the Ô¨Åne-tuning baseline. Runs
following this more restricted setup from Houlsby et al. (2019) are labeled with y. The result is
presented in Table 2 (Top Three Sections). See Section D.1 for details on the hyperparameters used.
5.3 D EBERT AXXL
DeBERTa (He et al., 2021) is a more recent variant of BERT that is trained on a much larger
scale and performs very competitively on benchmarks such as GLUE (Wang et al., 2019) and Su-
perGLUE (Wang et al., 2020). We evaluate if LoRA can still match the performance of a fully
Ô¨Åne-tuned DeBERTa XXL (1.5B) on GLUE. The result is presented in Table 2 (Bottom Section).
See Section D.2 for details on the hyperparameters used.
5.4 GPT-2 MEDIUM /LARGE
Having shown that LoRA can be a competitive alternative to full Ô¨Åne-tuning on NLU, we hope to
answer if LoRA still prevails on NLG models, such as GPT-2 medium and large (Radford et al.,
b). We keep our setup as close as possible to Li & Liang (2021) for a direct comparison. Due
to space constraint, we only present our result on E2E NLG Challenge (Table 3) in this section.
See Section F.1 for results on WebNLG (Gardent et al., 2017) and DART (Nan et al., 2020). We
include a list of the hyperparameters used in Section D.3.
7

--- PAGE 8 ---
Model&Method# Trainable WikiSQL MNLI-m SAMSum
Parameters Acc. (%) Acc. (%) R1/R2/RL
GPT-3 (FT) 175,255.8M 73.8 89.5 52.0/28.0/44.5
GPT-3 (BitFit) 14.2M 71.3 91.0 51.3/27.4/43.5
GPT-3 (PreEmbed) 3.2M 63.1 88.6 48.3/24.2/40.5
GPT-3 (PreLayer) 20.2M 70.1 89.5 50.8/27.3/43.5
GPT-3 (AdapterH) 7.1M 71.9 89.8 53.0/28.9/44.8
GPT-3 (AdapterH) 40.1M 73.2 91.5 53.2/29.0/45.1
GPT-3 (LoRA) 4.7M 73.4 91.7 53.8/29.8/45.9
GPT-3 (LoRA) 37.7M 74.0 91.6 53.4/29.2/45.1
Table 4: Performance of different adaptation methods on GPT-3 175B. We report the logical form
validation accuracy on WikiSQL, validation accuracy on MultiNLI-matched, and Rouge-1/2/L on
SAMSum. LoRA performs better than prior approaches, including full Ô¨Åne-tuning. The results
on WikiSQL have a Ô¨Çuctuation around 0:5%, MNLI-m around 0:1%, and SAMSum around
0:2/0:2/0:1for the three metrics.
5.5 S CALING UP TO GPT-3 175B
As a Ô¨Ånal stress test for LoRA, we scale up to GPT-3 with 175 billion parameters. Due to the high
training cost, we only report the typical standard deviation for a given task over random seeds, as
opposed to providing one for every entry. See Section D.4 for details on the hyperparameters used.
As shown in Table 4, LoRA matches or exceeds the Ô¨Åne-tuning baseline on all three datasets. Note
that not all methods beneÔ¨Åt monotonically from having more trainable parameters, as shown in Fig-
ure 2. We observe a signiÔ¨Åcant performance drop when we use more than 256 special tokens for
preÔ¨Åx-embedding tuning or more than 32 special tokens for preÔ¨Åx-layer tuning. This corroborates
similar observations in Li & Liang (2021). While a thorough investigation into this phenomenon
is out-of-scope for this work, we suspect that having more special tokens causes the input distri-
bution to shift further away from the pre-training data distribution. Separately, we investigate the
performance of different adaptation approaches in the low-data regime in Section F.3.
6 7 8 9 10 11
log10 # Trainable Parameters0.550.600.650.700.75Validation Accuracy
WikiSQL
Method
Fine-Tune
PrefixEmbed
PrefixLayer
Adapter(H)
LoRA
6 7 8 9 10 11
log10 # Trainable Parameters0.840.860.880.900.92
MultiNLI-matched
Figure 2: GPT-3 175B validation accuracy vs. number of trainable parameters of several adaptation
methods on WikiSQL and MNLI-matched. LoRA exhibits better scalability and task performance.
See Section F.2 for more details on the plotted data points.
6 R ELATED WORKS
Transformer Language Models. Transformer (Vaswani et al., 2017) is a sequence-to-sequence
architecture that makes heavy use of self-attention. Radford et al. (a) applied it to autoregressive lan-
guage modeling by using a stack of Transformer decoders. Since then, Transformer-based language
models have dominated NLP, achieving the state-of-the-art in many tasks. A new paradigm emerged
with BERT (Devlin et al., 2019b) and GPT-2 (Radford et al., b) ‚Äì both are large Transformer lan-
8

--- PAGE 9 ---
guage models trained on a large amount of text ‚Äì where Ô¨Åne-tuning on task-speciÔ¨Åc data after pre-
training on general domain data provides a signiÔ¨Åcant performance gain compared to training on
task-speciÔ¨Åc data directly. Training larger Transformers generally results in better performance and
remains an active research direction. GPT-3 (Brown et al., 2020) is the largest single Transformer
language model trained to-date with 175B parameters.
Prompt Engineering and Fine-Tuning. While GPT-3 175B can adapt its behavior with just a
few additional training examples, the result depends heavily on the input prompt (Brown et al.,
2020). This necessitates an empirical art of composing and formatting the prompt to maximize a
model‚Äôs performance on a desired task, which is known as prompt engineering or prompt hacking.
Fine-tuning retrains a model pre-trained on general domains to a speciÔ¨Åc task Devlin et al. (2019b);
Radford et al. (a). Variants of it include learning just a subset of the parameters Devlin et al. (2019b);
Collobert & Weston (2008), yet practitioners often retrain all of them to maximize the downstream
performance. However, the enormity of GPT-3 175B makes it challenging to perform Ô¨Åne-tuning in
the usual way due to the large checkpoint it produces and the high hardware barrier to entry since it
has the same memory footprint as pre-training.
Parameter-EfÔ¨Åcient Adaptation. Many have proposed inserting adapter layers between existing
layers in a neural network (Houlsby et al., 2019; RebufÔ¨Å et al., 2017; Lin et al., 2020). Our method
uses a similar bottleneck structure to impose a low-rank constraint on the weight updates. The
key functional difference is that our learned weights can be merged with the main weights during
inference, thus not introducing any latency, which is not the case for the adapter layers (Section 3).
A comtenporary extension of adapter is COMPACTER (Mahabadi et al., 2021), which essentially
parametrizes the adapter layers using Kronecker products with some predetermined weight sharing
scheme. Similarly, combining LoRA with other tensor product-based methods could potentially
improve its parameter efÔ¨Åciency, which we leave to future work. More recently, many proposed
optimizing the input word embeddings in lieu of Ô¨Åne-tuning, akin to a continuous and differentiable
generalization of prompt engineering (Li & Liang, 2021; Lester et al., 2021; Hambardzumyan et al.,
2020; Liu et al., 2021). We include comparisons with Li & Liang (2021) in our experiment section.
However, this line of works can only scale up by using more special tokens in the prompt, which
take up available sequence length for task tokens when positional embeddings are learned.
Low-Rank Structures in Deep Learning. Low-rank structure is very common in machine learn-
ing. A lot of machine learning problems have certain intrinsic low-rank structure (Li et al., 2016;
Cai et al., 2010; Li et al., 2018b; Grasedyck et al., 2013). Moreover, it is known that for many
deep learning tasks, especially those with a heavily over-parametrized neural network, the learned
neural network will enjoy low-rank properties after training (Oymak et al., 2019). Some prior works
even explicitly impose the low-rank constraint when training the original neural network (Sainath
et al., 2013; Povey et al., 2018; Zhang et al., 2014; Jaderberg et al., 2014; Zhao et al., 2016; Kho-
dak et al., 2021; Denil et al., 2014); however, to the best of our knowledge, none of these works
considers low-rank update to a frozen model for adaptation to downstream tasks . In theory liter-
ature, it is known that neural networks outperform other classical learning methods, including the
corresponding (Ô¨Ånite-width) neural tangent kernels (Allen-Zhu et al., 2019; Li & Liang, 2018) when
the underlying concept class has certain low-rank structure (Ghorbani et al., 2020; Allen-Zhu & Li,
2019; Allen-Zhu & Li, 2020a). Another theoretical result in Allen-Zhu & Li (2020b) suggests that
low-rank adaptations can be useful for adversarial training. In sum, we believe that our proposed
low-rank adaptation update is well-motivated by the literature.
7 U NDERSTANDING THE LOW-RANK UPDATES
Given the empirical advantage of LoRA, we hope to further explain the properties of the low-rank
adaptation learned from downstream tasks. Note that the low-rank structure not only lowers the
hardware barrier to entry which allows us to run multiple experiments in parallel, but also gives
better interpretability of how the update weights are correlated with the pre-trained weights. We
focus our study on GPT-3 175B, where we achieved the largest reduction of trainable parameters
(up to 10,000) without adversely affecting task performances.
We perform a sequence of empirical studies to answer the following questions: 1) Given a parameter
budget constraint, which subset of weight matrices in a pre-trained Transformer should we adapt
9

--- PAGE 10 ---
to maximize downstream performance? 2) Is the ‚Äúoptimal‚Äù adaptation matrix Wreally rank-
deÔ¨Åcient ? If so, what is a good rank to use in practice? 3) What is the connection between Wand
W? Does Whighly correlate with W? How large is Wcomparing to W?
We believe that our answers to question (2) and (3) shed light on the fundamental principles of using
pre-trained language models for downstream tasks, which is a critical topic in NLP.
7.1 W HICH WEIGHT MATRICES IN TRANSFORMER SHOULD WEAPPLY LORA TO?
Given a limited parameter budget, which types of weights should we adapt with LoRA to obtain
the best performance on downstream tasks? As mentioned in Section 4.2, we only consider weight
matrices in the self-attention module. We set a parameter budget of 18M (roughly 35MB if stored
in FP16) on GPT-3 175B, which corresponds to r= 8if we adapt one type of attention weights or
r= 4if we adapt two types, for all 96 layers. The result is presented in Table 5.
# of Trainable Parameters = 18M
Weight Type WqWkWvWoWq;WkWq;WvWq;Wk;Wv;Wo
Rankr 8 8 8 8 4 4 2
WikiSQL (0:5%) 70.4 70.0 73.0 73.2 71.4 73.7 73.7
MultiNLI (0:1%) 91.0 90.8 91.0 91.3 91.3 91.3 91.7
Table 5: Validation accuracy on WikiSQL and MultiNLI after applying LoRA to different types of
attention weights in GPT-3, given the same number of trainable parameters. Adapting both Wqand
Wvgives the best performance overall. We Ô¨Ånd the standard deviation across random seeds to be
consistent for a given dataset, which we report in the Ô¨Årst column.
Note that putting all the parameters in WqorWkresults in signiÔ¨Åcantly lower performance,
while adapting both WqandWvyields the best result. This suggests that even a rank of four
captures enough information in Wsuch that it is preferable to adapt more weight matrices than
adapting a single type of weights with a larger rank.
7.2 W HAT IS THE OPTIMAL RANKrFOR LORA?
We turn our attention to the effect of rank ron model performance. We adapt fWq;Wvg,
fWq;Wk;Wv;Wcg, and justWqfor a comparison.
Weight Type r= 1r= 2r= 4r= 8r= 64
WikiSQL(0:5%)Wq 68.8 69.6 70.5 70.4 70.0
Wq;Wv 73.4 73.3 73.7 73.8 73.5
Wq;Wk;Wv;Wo 74.1 73.7 74.0 74.0 73.9
MultiNLI (0:1%)Wq 90.7 90.9 91.1 90.7 90.7
Wq;Wv 91.3 91.4 91.3 91.6 91.4
Wq;Wk;Wv;Wo 91.2 91.7 91.7 91.5 91.4
Table 6: Validation accuracy on WikiSQL and MultiNLI with different rank r. To our surprise, a
rank as small as one sufÔ¨Åces for adapting both WqandWvon these datasets while training Wqalone
needs a larger r. We conduct a similar experiment on GPT-2 in Section H.2.
Table 6 shows that, surprisingly, LoRA already performs competitively with a very small r(more
so forfWq;Wvgthan justWq). This suggests the update matrix Wcould have a very small
‚Äúintrinsic rank‚Äù.6To further support this Ô¨Ånding, we check the overlap of the subspaces learned by
different choices of rand by different random seeds. We argue that increasing rdoes not cover a
more meaningful subspace, which suggests that a low-rank adaptation matrix is sufÔ¨Åcient.
6However, we do not expect a small rto work for every task or dataset. Consider the following thought
experiment: if the downstream task were in a different language than the one used for pre-training, retraining
the entire model (similar to LoRA with r=dmodel ) could certainly outperform LoRA with a small r.
10

--- PAGE 11 ---
Subspace similarity between different r.GivenAr=8andAr=64which are the learned adapta-
tion matrices with rank r= 8and64using the same pre-trained model , we perform singular value
decomposition and obtain the right-singular unitary matrices UAr=8andUAr=64.7We hope to an-
swer: how much of the subspace spanned by the top isingular vectors in UAr=8(for1i8) is
contained in the subspace spanned by top jsingular vectors of UAr=64(for1j64)? We mea-
sure this quantity with a normalized subspace similarity based on the Grassmann distance (See Ap-
pendix G for a more formal discussion)
(Ar=8;Ar=64;i;j) =jjUi>
Ar=8Uj
Ar=64jj2
F
min(i;j)2[0;1] (4)
whereUi
Ar=8represents the columns of UAr=8corresponding to the top- isingular vectors.
()has a range of [0;1], where 1represents a complete overlap of subspaces and 0a complete
separation. See Figure 3 for how changes as we vary iandj. We only look at the 48th layer
(out of 96) due to space constraint, but the conclusion holds for other layers as well, as shown
in Section H.1.
0.00.20.40.60.81.0
1
6
12
18
23
29
35
40
46
52
58
j12345678iWq
1
6
12
18
23
29
35
40
46
52
58
jWv
12345678
jWq
12345678
jWv
(Ar=64,Ar=8,i,j)
Figure 3: Subspace similarity between column vectors of Ar=8andAr=64for both WqandWv.
The third and the fourth Ô¨Ågures zoom in on the lower-left triangle in the Ô¨Årst two Ô¨Ågures. The top
directions in r= 8are included in r= 64 , and vice versa.
We make an important observation from Figure 3.
Directions corresponding to the top singular vector overlap signiÔ¨Åcantly between
Ar=8andAr=64, while others do not. SpeciÔ¨Åcally, Wv(resp. Wq) ofAr=8
andWv(resp. Wq) ofAr=64share a subspace of dimension 1 with normalized
similarity>0:5, providing an explanation of why r= 1 performs quite well in our
downstream tasks for GPT-3.
Since bothAr=8andAr=64are learned using the same pre-trained model, Figure 3 indicates that
the top singular-vector directions of Ar=8andAr=64are the most useful, while other directions
potentially contain mostly random noises accumulated during training. Hence, the adaptation matrix
can indeed have a very low rank.
Subspace similarity between different random seeds. We further conÔ¨Årm this by plotting the
normalized subspace similarity between two randomly seeded runs with r= 64 , shown in Figure 4.
Wqappears to have a higher ‚Äúintrinsic rank‚Äù than Wv, since more common singular value direc-
tions are learned by both runs for Wq, which is in line with our empirical observation in Table 6.
As a comparison, we also plot two random Gaussian matrices, which do not share any common
singular value directions with each other.
7.3 H OWDOES THE ADAPTATION MATRIX WCOMPARE TO W?
We further investigate the relationship between WandW. In particular, does Whighly correlate
withW? (Or mathematically, is Wmostly contained in the top singular directions of W?) Also,
7Note that a similar analysis can be carried out with Band the left-singular unitary matrices ‚Äì we stick with
Afor our experiments.
11

--- PAGE 12 ---
0.00.10.20.30.40.5
1
5
10
15
20
25
30
34
39
44
49
54
59
j1
8
16
24
32
40
48
56iWq
1
5
10
15
20
25
30
34
39
44
49
54
59
j(Ar=64,A/primer=64,i,j)
Wv
1
5
10
15
20
25
30
34
39
44
49
54
59
jRandom GaussianFigure 4: Left and Middle: Normalized subspace similarity between the column vectors of Ar=64
from two random seeds, for both WqandWvin the 48-th layer. Right: the same heat-map
between the column vectors of two random Gaussian matrices. See Section H.1 for other layers.
how ‚Äúlarge‚Äù is Wcomparing to its corresponding directions in W? This can shed light on the
underlying mechanism for adapting pre-trained language models.
To answer these questions, we project Wonto ther-dimensional subspace of Wby comput-
ingU>WV>, withU/Vbeing the left/right singular-vector matrix of W. Then, we com-
pare the Frobenius norm between kU>WV>kFandkWkF. As a comparison, we also compute
kU>WV>kFby replacing U;V with the top rsingular vectors of Wor a random matrix.
r= 4 r= 64
WqWq Random WqWq Random
jjU>WqV>jjF= 0.32 21.67 0.02 1.90 37.71 0.33
jjWqjjF= 61:95jjWqjjF= 6:91jjWqjjF= 3:57
Table 7: The Frobenius norm of U>WqV>whereUandVare the left/right top rsingular vector
directions of either (1) Wq, (2)Wq, or (3) a random matrix. The weight matrices are taken from
the 48th layer of GPT-3.
We draw several conclusions from Table 7. First, Whas a stronger correlation with Wcompared
to a random matrix, indicating that WampliÔ¨Åes some features that are already in W. Second,
instead of repeating the top singular directions of W,Wonly ampliÔ¨Åes directions that are not
emphasized in W. Third, the ampliÔ¨Åcation factor is rather huge: 21:56:91=0:32forr= 4.
See Section H.4 for why r= 64 has a smaller ampliÔ¨Åcation factor. We also provide a visualization
in Section H.3 for how the correlation changes as we include more top singular directions from Wq.
This suggests that the low-rank adaptation matrix potentially ampliÔ¨Åes the important features for
speciÔ¨Åc downstream tasks that were learned but not emphasized in the general pre-training model .
8 C ONCLUSION AND FUTURE WORK
Fine-tuning enormous language models is prohibitively expensive in terms of the hardware required
and the storage/switching cost for hosting independent instances for different tasks. We propose
LoRA, an efÔ¨Åcient adaptation strategy that neither introduces inference latency nor reduces input
sequence length while retaining high model quality. Importantly, it allows for quick task-switching
when deployed as a service by sharing the vast majority of the model parameters. While we focused
on Transformer language models, the proposed principles are generally applicable to any neural
networks with dense layers.
There are many directions for future works. 1) LoRA can be combined with other efÔ¨Åcient adapta-
tion methods, potentially providing orthogonal improvement. 2) The mechanism behind Ô¨Åne-tuning
or LoRA is far from clear ‚Äì how are features learned during pre-training transformed to do well
on downstream tasks? We believe that LoRA makes it more tractable to answer this than full Ô¨Åne-
12

--- PAGE 13 ---
tuning. 3) We mostly depend on heuristics to select the weight matrices to apply LoRA to. Are
there more principled ways to do it? 4) Finally, the rank-deÔ¨Åciency of Wsuggests that Wcould
be rank-deÔ¨Åcient as well, which can also be a source of inspiration for future works.
REFERENCES
Armen Aghajanyan, Luke Zettlemoyer, and Sonal Gupta. Intrinsic Dimensionality Explains the
Effectiveness of Language Model Fine-Tuning. arXiv:2012.13255 [cs] , December 2020. URL
http://arxiv.org/abs/2012.13255 .
Zeyuan Allen-Zhu and Yuanzhi Li. What Can ResNet Learn EfÔ¨Åciently, Going Beyond Kernels? In
NeurIPS , 2019. Full version available at http://arxiv.org/abs/1905.10337 .
Zeyuan Allen-Zhu and Yuanzhi Li. Backward feature correction: How deep learning performs deep
learning. arXiv preprint arXiv:2001.04413 , 2020a.
Zeyuan Allen-Zhu and Yuanzhi Li. Feature puriÔ¨Åcation: How adversarial training performs robust
deep learning. arXiv preprint arXiv:2005.10190 , 2020b.
Zeyuan Allen-Zhu, Yuanzhi Li, and Zhao Song. A convergence theory for deep learning via over-
parameterization. In ICML , 2019. Full version available at http://arxiv.org/abs/1811.
03962 .
Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E. Hinton. Layer normalization, 2016.
Tom B. Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhari-
wal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal,
Ariel Herbert-V oss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel M.
Ziegler, Jeffrey Wu, Clemens Winter, Christopher Hesse, Mark Chen, Eric Sigler, Mateusz Litwin,
Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford,
Ilya Sutskever, and Dario Amodei. Language Models are Few-Shot Learners. arXiv:2005.14165
[cs], July 2020. URL http://arxiv.org/abs/2005.14165 .
Jian-Feng Cai, Emmanuel J Cand `es, and Zuowei Shen. A singular value thresholding algorithm for
matrix completion. SIAM Journal on optimization , 20(4):1956‚Äì1982, 2010.
Daniel Cer, Mona Diab, Eneko Agirre, Inigo Lopez-Gazpio, and Lucia Specia. Semeval-2017 task
1: Semantic textual similarity multilingual and crosslingual focused evaluation. Proceedings of
the 11th International Workshop on Semantic Evaluation (SemEval-2017) , 2017. doi: 10.18653/
v1/s17-2001. URL http://dx.doi.org/10.18653/v1/S17-2001 .
Ronan Collobert and Jason Weston. A uniÔ¨Åed architecture for natural language processing: deep
neural networks with multitask learning. In Proceedings of the 25th international conference
on Machine learning , ICML ‚Äô08, pp. 160‚Äì167, New York, NY , USA, July 2008. Association
for Computing Machinery. ISBN 978-1-60558-205-4. doi: 10.1145/1390156.1390177. URL
https://doi.org/10.1145/1390156.1390177 .
Misha Denil, Babak Shakibi, Laurent Dinh, Marc‚ÄôAurelio Ranzato, and Nando de Freitas. Predicting
parameters in deep learning, 2014.
Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep
bidirectional transformers for language understanding, 2019a.
Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of Deep
Bidirectional Transformers for Language Understanding. arXiv:1810.04805 [cs] , May 2019b.
URL http://arxiv.org/abs/1810.04805 . arXiv: 1810.04805.
William B. Dolan and Chris Brockett. Automatically constructing a corpus of sentential paraphrases.
InProceedings of the Third International Workshop on Paraphrasing (IWP2005) , 2005. URL
https://aclanthology.org/I05-5002 .
Claire Gardent, Anastasia Shimorina, Shashi Narayan, and Laura Perez-Beltrachini. The webnlg
challenge: Generating text from rdf data. In Proceedings of the 10th International Conference on
Natural Language Generation , pp. 124‚Äì133, 2017.
13

--- PAGE 14 ---
Behrooz Ghorbani, Song Mei, Theodor Misiakiewicz, and Andrea Montanari. When do neural
networks outperform kernel methods? arXiv preprint arXiv:2006.13409 , 2020.
Bogdan Gliwa, Iwona Mochol, Maciej Biesek, and Aleksander Wawer. Samsum corpus: A human-
annotated dialogue dataset for abstractive summarization. CoRR , abs/1911.12237, 2019. URL
http://arxiv.org/abs/1911.12237 .
Lars Grasedyck, Daniel Kressner, and Christine Tobler. A literature survey of low-rank tensor
approximation techniques. GAMM-Mitteilungen , 36(1):53‚Äì78, 2013.
Jihun Ham and Daniel D. Lee. Grassmann discriminant analysis: a unifying view on subspace-based
learning. In ICML , pp. 376‚Äì383, 2008. URL https://doi.org/10.1145/1390156.
1390204 .
Karen Hambardzumyan, Hrant Khachatrian, and Jonathan May. WARP: Word-level Adversarial
ReProgramming. arXiv:2101.00121 [cs] , December 2020. URL http://arxiv.org/abs/
2101.00121 . arXiv: 2101.00121.
Pengcheng He, Xiaodong Liu, Jianfeng Gao, and Weizhu Chen. Deberta: Decoding-enhanced bert
with disentangled attention, 2021.
Neil Houlsby, Andrei Giurgiu, Stanislaw Jastrzebski, Bruna Morrone, Quentin de Laroussilhe,
Andrea Gesmundo, Mona Attariyan, and Sylvain Gelly. Parameter-EfÔ¨Åcient Transfer Learning
for NLP. arXiv:1902.00751 [cs, stat] , June 2019. URL http://arxiv.org/abs/1902.
00751 .
Max Jaderberg, Andrea Vedaldi, and Andrew Zisserman. Speeding up convolutional neural networks
with low rank expansions. arXiv preprint arXiv:1405.3866 , 2014.
Mikhail Khodak, Neil Tenenholtz, Lester Mackey, and Nicol `o Fusi. Initialization and regularization
of factorized neural layers, 2021.
Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization, 2017.
Dmitry Lepikhin, HyoukJoong Lee, Yuanzhong Xu, Dehao Chen, Orhan Firat, Yanping Huang,
Maxim Krikun, Noam Shazeer, and Zhifeng Chen. Gshard: Scaling giant models with conditional
computation and automatic sharding, 2020.
Brian Lester, Rami Al-Rfou, and Noah Constant. The Power of Scale for Parameter-EfÔ¨Åcient Prompt
Tuning. arXiv:2104.08691 [cs] , April 2021. URL http://arxiv.org/abs/2104.08691 .
arXiv: 2104.08691.
Chunyuan Li, Heerad Farkhoor, Rosanne Liu, and Jason Yosinski. Measuring the Intrinsic Di-
mension of Objective Landscapes. arXiv:1804.08838 [cs, stat] , April 2018a. URL http:
//arxiv.org/abs/1804.08838 . arXiv: 1804.08838.
Xiang Lisa Li and Percy Liang. PreÔ¨Åx-Tuning: Optimizing Continuous Prompts for Generation.
arXiv:2101.00190 [cs] , January 2021. URL http://arxiv.org/abs/2101.00190 .
Yuanzhi Li and Yingyu Liang. Learning overparameterized neural networks via stochastic gradient
descent on structured data. In Advances in Neural Information Processing Systems , 2018.
Yuanzhi Li, Yingyu Liang, and Andrej Risteski. Recovery guarantee of weighted low-rank ap-
proximation via alternating minimization. In International Conference on Machine Learning , pp.
2358‚Äì2367. PMLR, 2016.
Yuanzhi Li, Tengyu Ma, and Hongyang Zhang. Algorithmic regularization in over-parameterized
matrix sensing and neural networks with quadratic activations. In Conference On Learning The-
ory, pp. 2‚Äì47. PMLR, 2018b.
Zhaojiang Lin, Andrea Madotto, and Pascale Fung. Exploring versatile generative language model
via parameter-efÔ¨Åcient transfer learning. In Findings of the Association for Computational Lin-
guistics: EMNLP 2020 , pp. 441‚Äì459, Online, November 2020. Association for Computational
Linguistics. doi: 10.18653/v1/2020.Ô¨Åndings-emnlp.41. URL https://aclanthology.
org/2020.findings-emnlp.41 .
14

--- PAGE 15 ---
Xiao Liu, Yanan Zheng, Zhengxiao Du, Ming Ding, Yujie Qian, Zhilin Yang, and Jie Tang. GPT
Understands, Too. arXiv:2103.10385 [cs] , March 2021. URL http://arxiv.org/abs/
2103.10385 . arXiv: 2103.10385.
Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike
Lewis, Luke Zettlemoyer, and Veselin Stoyanov. Roberta: A robustly optimized bert pretraining
approach, 2019.
Ilya Loshchilov and Frank Hutter. Decoupled weight decay regularization. arXiv preprint
arXiv:1711.05101 , 2017.
Ilya Loshchilov and Frank Hutter. Decoupled weight decay regularization, 2019.
Rabeeh Karimi Mahabadi, James Henderson, and Sebastian Ruder. Compacter: EfÔ¨Åcient low-rank
hypercomplex adapter layers, 2021.
Linyong Nan, Dragomir Radev, Rui Zhang, Amrit Rau, Abhinand Sivaprasad, Chiachun Hsieh,
Xiangru Tang, Aadit Vyas, Neha Verma, Pranav Krishna, et al. Dart: Open-domain structured
data record to text generation. arXiv preprint arXiv:2007.02871 , 2020.
Jekaterina Novikova, Ond Àárej Du Àásek, and Verena Rieser. The e2e dataset: New challenges for end-
to-end generation. arXiv preprint arXiv:1706.09254 , 2017.
Samet Oymak, Zalan Fabian, Mingchen Li, and Mahdi Soltanolkotabi. Generalization guaran-
tees for neural networks via harnessing the low-rank structure of the jacobian. arXiv preprint
arXiv:1906.05392 , 2019.
Jonas Pfeiffer, Aishwarya Kamath, Andreas R ¬®uckl¬¥e, Kyunghyun Cho, and Iryna Gurevych. Adapter-
fusion: Non-destructive task composition for transfer learning, 2021.
Daniel Povey, Gaofeng Cheng, Yiming Wang, Ke Li, Hainan Xu, Mahsa Yarmohammadi, and San-
jeev Khudanpur. Semi-orthogonal low-rank matrix factorization for deep neural networks. In
Interspeech , pp. 3743‚Äì3747, 2018.
Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. Improving Language Under-
standing by Generative Pre-Training. pp. 12, a.
Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language
Models are Unsupervised Multitask Learners. pp. 24, b.
Pranav Rajpurkar, Robin Jia, and Percy Liang. Know what you don‚Äôt know: Unanswerable questions
for squad. CoRR , abs/1806.03822, 2018. URL http://arxiv.org/abs/1806.03822 .
Sylvestre-Alvise RebufÔ¨Å, Hakan Bilen, and Andrea Vedaldi. Learning multiple visual domains with
residual adapters. arXiv:1705.08045 [cs, stat] , November 2017. URL http://arxiv.org/
abs/1705.08045 . arXiv: 1705.08045.
Andreas R ¬®uckl¬¥e, Gregor Geigle, Max Glockner, Tilman Beck, Jonas Pfeiffer, Nils Reimers, and
Iryna Gurevych. Adapterdrop: On the efÔ¨Åciency of adapters in transformers, 2020.
Tara N Sainath, Brian Kingsbury, Vikas Sindhwani, Ebru Arisoy, and Bhuvana Ramabhadran. Low-
rank matrix factorization for deep neural network training with high-dimensional output targets.
In2013 IEEE international conference on acoustics, speech and signal processing , pp. 6655‚Äì
6659. IEEE, 2013.
Mohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley, Jared Casper, and Bryan
Catanzaro. Megatron-lm: Training multi-billion parameter language models using model par-
allelism, 2020.
Richard Socher, Alex Perelygin, Jean Wu, Jason Chuang, Christopher D. Manning, Andrew Ng,
and Christopher Potts. Recursive deep models for semantic compositionality over a sentiment
treebank. In Proceedings of the 2013 Conference on Empirical Methods in Natural Language
Processing , pp. 1631‚Äì1642, Seattle, Washington, USA, October 2013. Association for Computa-
tional Linguistics. URL https://aclanthology.org/D13-1170 .
15

--- PAGE 16 ---
Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,
≈Åukasz Kaiser, and Illia Polosukhin. Attention is all you need. In Proceedings of the 31st In-
ternational Conference on Neural Information Processing Systems , pp. 6000‚Äì6010, 2017.
Alex Wang, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy, and Samuel R. Bowman.
Glue: A multi-task benchmark and analysis platform for natural language understanding, 2019.
Alex Wang, Yada Pruksachatkun, Nikita Nangia, Amanpreet Singh, Julian Michael, Felix Hill, Omer
Levy, and Samuel R. Bowman. Superglue: A stickier benchmark for general-purpose language
understanding systems, 2020.
Alex Warstadt, Amanpreet Singh, and Samuel R Bowman. Neural network acceptability judgments.
arXiv preprint arXiv:1805.12471 , 2018.
Adina Williams, Nikita Nangia, and Samuel Bowman. A broad-coverage challenge corpus for sen-
tence understanding through inference. In Proceedings of the 2018 Conference of the North
American Chapter of the Association for Computational Linguistics: Human Language Technolo-
gies, Volume 1 (Long Papers) , pp. 1112‚Äì1122, New Orleans, Louisiana, June 2018. Association
for Computational Linguistics. doi: 10.18653/v1/N18-1101. URL https://www.aclweb.
org/anthology/N18-1101 .
Thomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi,
Pierric Cistac, Tim Rault, R ¬¥emi Louf, Morgan Funtowicz, Joe Davison, Sam Shleifer, Patrick
von Platen, Clara Ma, Yacine Jernite, Julien Plu, Canwen Xu, Teven Le Scao, Sylvain Gug-
ger, Mariama Drame, Quentin Lhoest, and Alexander M. Rush. Transformers: State-of-the-art
natural language processing. In Proceedings of the 2020 Conference on Empirical Methods in
Natural Language Processing: System Demonstrations , pp. 38‚Äì45, Online, October 2020. As-
sociation for Computational Linguistics. URL https://www.aclweb.org/anthology/
2020.emnlp-demos.6 .
Greg Yang and Edward J. Hu. Feature Learning in InÔ¨Ånite-Width Neural Networks.
arXiv:2011.14522 [cond-mat] , May 2021. URL http://arxiv.org/abs/2011.14522 .
arXiv: 2011.14522.
Elad Ben Zaken, Shauli Ravfogel, and Yoav Goldberg. BitÔ¨Åt: Simple parameter-efÔ¨Åcient Ô¨Åne-tuning
for transformer-based masked language-models, 2021.
Yu Zhang, Ekapol Chuangsuwanich, and James Glass. Extracting deep neural network bottleneck
features using low-rank matrix factorization. In 2014 IEEE international conference on acoustics,
speech and signal processing (ICASSP) , pp. 185‚Äì189. IEEE, 2014.
Yong Zhao, Jinyu Li, and Yifan Gong. Low-rank plus diagonal adaptation for deep neural networks.
In2016 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP) ,
pp. 5005‚Äì5009. IEEE, 2016.
Victor Zhong, Caiming Xiong, and Richard Socher. Seq2sql: Generating structured queries from
natural language using reinforcement learning. CoRR , abs/1709.00103, 2017. URL http://
arxiv.org/abs/1709.00103 .
A L ARGE LANGUAGE MODELS STILL NEED PARAMETER UPDATES
Few-shot learning, or prompt engineering, is very advantageous when we only have a handful of
training samples. However, in practice, we can often afford to curate a few thousand or more training
examples for performance-sensitive applications. As shown in Table 8, Ô¨Åne-tuning improves the
model performance drastically compared to few-shot learning on datasets large and small. We take
the GPT-3 few-shot result on RTE from the GPT-3 paper (Brown et al., 2020). For MNLI-matched,
we use two demonstrations per class and six in-context examples in total.
16

--- PAGE 17 ---
Method MNLI-m (Val. Acc./%) RTE (Val. Acc./%)
GPT-3 Few-Shot 40.6 69.0
GPT-3 Fine-Tuned 89.5 85.4
Table 8: Fine-tuning signiÔ¨Åcantly outperforms few-shot learning on GPT-3 (Brown et al., 2020).
B I NFERENCE LATENCY INTRODUCED BY ADAPTER LAYERS
Adapter layers are external modules added to a pre-trained model in a sequential manner, whereas
our proposal, LoRA, can be seen as external modules added in a parallel manner. Consequently,
adapter layers must be computed in addition to the base model, inevitably introducing additional
latency. While as pointed out in R ¬®uckl¬¥e et al. (2020), the latency introduced by adapter layers can
be mitigated when the model batch size and/or sequence length is large enough to full utilize the
hardware parallelism. We conÔ¨Årm their observation with a similar latency study on GPT-2 medium
and point out that there are scenarios, notably online inference where the batch size is small, where
the added latency can be signiÔ¨Åcant.
We measure the latency of a single forward pass on an NVIDIA Quadro RTX8000 by averaging
over 100 trials. We vary the input batch size, sequence length, and the adapter bottleneck dimension
r. We test two adapter designs: the original one by Houlsby et al. (2019), which we call AdapterH,
and a recent, more efÔ¨Åcient variant by Lin et al. (2020), which we call AdapterL. See Section 5.1
for more details on the designs. We plot the slow-down in percentage compared to the no-adapter
baseline in Figure 5.
05101520253035
0 10 100 250AdapterH rSeq Len = 128 Seq Len = 256 Seq Len = 512
1 2 4 8 16 32
Batch Size0 10 100 250AdapterL r
1 2 4 8 16 32
Batch Size1 2 4 8 16 32
Batch Size
Figure 5: Percentage slow-down of inference latency compared to the no-adapter ( r= 0) baseline.
The top row shows the result for AdapterHand the bottom row AdapterL. Larger batch size and
sequence length help to mitigate the latency, but the slow-down can be as high as over 30% in an
online, short-sequence-length scenario. We tweak the colormap for better visibility.
C D ATASET DETAILS
GLUE Benchmark is a wide-ranging collection of natural language understanding tasks. It includes
MNLI (inference, Williams et al. (2018)), SST-2 (sentiment analysis, Socher et al. (2013)), MRPC
(paraphrase detection, Dolan & Brockett (2005)), CoLA (linguistic acceptability, Warstadt et al.
(2018)), QNLI (inference, Rajpurkar et al. (2018)), QQP8(question-answering), RTE (inference),
8https://quoradata.quora.com/First-Quora-Dataset-Release-Question-Pairs
17

--- PAGE 18 ---
and STS-B (textual similarity, Cer et al. (2017)). The broad coverage makes GLUE benchmark a
standard metric to evaluate NLU models such as RoBERTa and DeBERTa. The individual datasets
are released under different permissive licenses.
WikiSQL is introduced in Zhong et al. (2017) and contains 56;355/8;421training/validation ex-
amples. The task is to generate SQL queries from natural language questions and table schemata.
We encode context as x=ftable schema ;querygand target as y=fSQLg. The dataset is release
under the BSD 3-Clause License.
SAMSum is introduced in Gliwa et al. (2019) and contains 14;732/819training/test examples. It
consists of staged chat conversations between two people and corresponding abstractive summaries
written by linguists. We encode context as ‚Äù nn‚Äù concatenated utterances followed by a ‚Äù nnnn‚Äù,
and target as y=fsummaryg. The dataset is released under the non-commercial licence: Creative
Commons BY-NC-ND 4.0.
E2E NLG Challenge was Ô¨Årst introduced in Novikova et al. (2017) as a dataset for training end-to-
end, data-driven natural language generation systems and is commonly used for data-to-text evalua-
tion. The E2E dataset consists of roughly 42;000training, 4;600validation, and 4;600test exam-
ples from the restaurant domain. Each source table used as input can have multiple references. Each
sample input (x;y)consists of a sequence of slot-value pairs, along with a corresponding natural
language reference text. The dataset is released under Creative Commons BY-NC-SA 4.0.
DART is an open-domain data-to-text dataset described in Nan et al. (2020). DART inputs are
structured as sequences of ENTITY ‚Äî RELATION ‚Äî ENTITY triples. With 82Kexamples in
total, DART is a signiÔ¨Åcantly larger and more complex data-to-text task compared to E2E. The
dataset is released under the MIT license.
WebNLG is another commonly used dataset for data-to-text evaluation (Gardent et al., 2017). With
22Kexamples in total WebNLG comprises 14 distinct categories, nine of which are seen during
training. Since Ô¨Åve of the 14 total categories are not seen during training, but are represented in
the test set, evaluation is typically broken out by ‚Äúseen‚Äù categories (S), ‚Äúunseen‚Äù categories (U)
and ‚Äúall‚Äù (A). Each input example is represented by a sequence of SUBJECT ‚Äî PROPERTY ‚Äî
OBJECT triples. The dataset is released under Creative Commons BY-NC-SA 4.0.
D H YPERPARAMETERS USED IN EXPERIMENTS
D.1 R OBERT A
We train using AdamW with a linear learning rate decay schedule. We sweep learning rate, number
of training epochs, and batch size for LoRA. Following Liu et al. (2019), we initialize the LoRA
modules to our best MNLI checkpoint when adapting to MRPC, RTE, and STS-B, instead of the
usual initialization; the pre-trained model stays frozen for all tasks. We report the median over 5
random seeds; the result for each run is taken from the best epoch. For a fair comparison with the
setup in Houlsby et al. (2019) and Pfeiffer et al. (2021), we restrict the model sequence length to 128
and used a Ô¨Åxed batch size for all tasks. Importantly, we start with the pre-trained RoBERTa large
model when adapting to MRPC, RTE, and STS-B, instead of a model already adapted to MNLI.
The runs with this restricted setup are marked with y. See the hyperparameters used in our runs
in Table 9.
D.2 D EBERT A
We again train using AdamW with a linear learning rate decay schedule. Following He et al. (2021),
we tune learning rate, dropout probability, warm-up steps, and batch size. We use the same model
sequence length used by (He et al., 2021) to keep our comparison fair. Following He et al. (2021),
we initialize the LoRA modules to our best MNLI checkpoint when adapting to MRPC, RTE, and
STS-B, instead of the usual initialization; the pre-trained model stays frozen for all tasks. We report
the median over 5 random seeds; the result for each run is taken from the best epoch. See the
hyperparameters used in our runs in Table 10.
18

--- PAGE 19 ---
Method Dataset MNLI SST-2 MRPC CoLA QNLI QQP RTE STS-B
Optimizer AdamW
Warmup Ratio 0.06
LR Schedule Linear
RoBERTa base
LoRABatch Size 16 16 16 32 32 16 32 16
# Epochs 30 60 30 80 25 25 80 40
Learning Rate 5E-04 5E-04 4E-04 4E-04 4E-04 5E-04 5E-04 4E-04
LoRA ConÔ¨Åg. rq=rv= 8
LoRA 8
Max Seq. Len. 512
RoBERTa large
LoRABatch Size 4 4 4 4 4 4 8 8
# Epochs 10 10 20 20 10 20 20 30
Learning Rate 3E-04 4E-04 3E-04 2E-04 2E-04 3E-04 4E-04 2E-04
LoRA ConÔ¨Åg. rq=rv= 8
LoRA 16
Max Seq. Len. 128 128 512 128 512 512 512 512
RoBERTa large
LoRAyBatch Size 4
# Epochs 10 10 20 20 10 20 20 10
Learning Rate 3E-04 4E-04 3E-04 2E-04 2E-04 3E-04 4E-04 2E-04
LoRA ConÔ¨Åg. rq=rv= 8
LoRA 16
Max Seq. Len. 128
RoBERTa large
AdptP(3M)yBatch Size 32
# Epochs 10 20 20 20 10 20 20 20
Learning Rate 3E-05 3E-05 3E-04 3E-04 3E-04 3E-04 3E-04 3E-04
Bottleneckr 64
Max Seq. Len. 128
RoBERTa large
AdptP(0.8M)yBatch Size 32
# Epochs 5 20 20 20 10 20 20 20
Learning Rate 3E-04 3E-04 3E-04 3E-04 3E-04 3E-04 3E-04 3E-04
Bottleneckr 16
Max Seq. Len. 128
RoBERTa large
AdptH(6M)yBatch Size 32
# Epochs 10 5 10 10 5 20 20 10
Learning Rate 3E-05 3E-04 3E-04 3E-04 3E-04 3E-04 3E-04 3E-04
Bottleneckr 64
Max Seq. Len. 128
RoBERTa large
AdptH(0.8M)yBatch Size 32
# Epochs 10 5 10 10 5 20 20 10
Learning Rate 3E-04 3E-04 3E-04 3E-04 3E-04 3E-04 3E-04 3E-04
Bottleneckr 8
Max Seq. Len. 128
Table 9: The hyperparameters we used for RoBERTa on the GLUE benchmark.
D.3 GPT-2
We train all of our GPT-2 models using AdamW (Loshchilov & Hutter, 2017) with a linear learning
rate schedule for 5 epochs. We use the batch size, learning rate, and beam search beam size described
in Li & Liang (2021). Accordingly, we also tune the above hyperparameters for LoRA. We report the
mean over 3 random seeds; the result for each run is taken from the best epoch. The hyperparameters
used for LoRA in GPT-2 are listed in Table 11. For those used for other baselines, see Li & Liang
(2021).
D.4 GPT-3
For all GPT-3 experiments, we train using AdamW (Loshchilov & Hutter, 2017) for 2 epochs with
a batch size of 128 samples and a weight decay factor of 0.1. We use a sequence length of 384 for
19

--- PAGE 20 ---
Method Dataset MNLI SST-2 MRPC CoLA QNLI QQP RTE STS-B
Optimizer AdamW
Warmup Ratio 0.1
LR Schedule Linear
DeBERTa XXL
LoRABatch Size 8 8 32 4 6 8 4 4
# Epochs 5 16 30 10 8 11 11 10
Learning Rate 1E-04 6E-05 2E-04 1E-04 1E-04 1E-04 2E-04 2E-04
Weight Decay 0 0.01 0.01 0 0.01 0.01 0.01 0.1
CLS Dropout 0.15 0 0 0.1 0.1 0.2 0.2 0.2
LoRA ConÔ¨Åg. rq=rv= 8
LoRA 8
Max Seq. Len. 256 128 128 64 512 320 320 128
Table 10: The hyperparameters for DeBERTa XXL on tasks included in the GLUE benchmark.
Dataset E2E WebNLG DART
Training
Optimizer AdamW
Weight Decay 0.01 0.01 0.0
Dropout Prob 0.1 0.1 0.0
Batch Size 8
# Epoch 5
Warmup Steps 500
Learning Rate Schedule Linear
Label Smooth 0.1 0.1 0.0
Learning Rate 0.0002
Adaptation rq=rv= 4
LoRA 32
Inference
Beam Size 10
Length Penalty 0.9 0.8 0.8
no repeat ngram size 4
Table 11: The hyperparameters for GPT-2 LoRA on E2E, WebNLG and DART.
WikiSQL (Zhong et al., 2017), 768 for MNLI (Williams et al., 2018), and 2048 for SAMSum (Gliwa
et al., 2019). We tune learning rate for all method-dataset combinations. See Section D.4 for more
details on the hyperparameters used. For preÔ¨Åx-embedding tuning, we Ô¨Ånd the optimal lpandli
to be 256 and 8, respectively, totalling 3:2Mtrainable parameters. We use lp= 8 andli= 8 for
preÔ¨Åx-layer tuning with 20:2Mtrainable parameters to obtain the overall best performance. We
present two parameter budgets for LoRA: 4.7M ( rq=rv= 1orrv= 2) and 37.7M ( rq=rv= 8
orrq=rk=rv=ro= 2). We report the best validation performance from each run. The training
hyperparameters used in our GPT-3 experiments are listed in Table 12.
E C OMBINING LORA WITH PREFIX TUNING
LoRA can be naturally combined with existing preÔ¨Åx-based approaches. In this section, we evaluate
two combinations of LoRA and variants of preÔ¨Åx-tuning on WikiSQL and MNLI.
LoRA+PreÔ¨ÅxEmbed (LoRA+PE) combines LoRA with preÔ¨Åx-embedding tuning, where we insert
lp+lispecial tokens whose embeddings are treated as trainable parameters. For more on preÔ¨Åx-
embedding tuning, see Section 5.1.
LoRA+PreÔ¨ÅxLayer (LoRA+PL) combines LoRA with preÔ¨Åx-layer tuning. We also insert lp+li
special tokens; however, instead of letting the hidden representations of these tokens evolve natu-
20

--- PAGE 21 ---
Hyperparameters Fine-Tune PreEmbed PreLayer BitFit AdapterHLoRA
Optimizer AdamW
Batch Size 128
# Epoch 2
Warmup Tokens 250,000
LR Schedule Linear
Learning Rate 5.00E-06 5.00E-04 1.00E-04 1.6E-03 1.00E-04 2.00E-04
Table 12: The training hyperparameters used for different GPT-3 adaption methods. We use the
same hyperparameters for all datasets after tuning learning rate.
rally, we replace them after every Transformer block with an input agnostic vector. Thus, both the
embeddings and subsequent Transformer block activations are treated as trainable parameters. For
more on preÔ¨Åx-layer tuning, see Section 5.1.
In Table 15, we show the evaluation results of LoRA+PE and LoRA+PL on WikiSQL and MultiNLI.
First of all, LoRA+PE signiÔ¨Åcantly outperforms both LoRA and preÔ¨Åx-embedding tuning on
WikiSQL, which indicates that LoRA is somewhat orthogonal to preÔ¨Åx-embedding tuning. On
MultiNLI, the combination of LoRA+PE doesn‚Äôt perform better than LoRA, possibly because LoRA
on its own already achieves performance comparable to the human baseline. Secondly, we notice
that LoRA+PL performs slightly worse than LoRA even with more trainable parameters. We at-
tribute this to the fact that preÔ¨Åx-layer tuning is very sensitive to the choice of learning rate and thus
makes the optimization of LoRA weights more difÔ¨Åcult in LoRA+PL.
F A DDITIONAL EMPIRICAL EXPERIMENTS
F.1 A DDITIONAL EXPERIMENTS ON GPT-2
We also repeat our experiment on DART (Nan et al., 2020) and WebNLG (Gardent et al., 2017)
following the setup of Li & Liang (2021). The result is shown in Table 13. Similar to our result
on E2E NLG Challenge, reported in Section 5, LoRA performs better than or at least on-par with
preÔ¨Åx-based approaches given the same number of trainable parameters.
Method # Trainable DART
Parameters BLEU"MET"TER#
GPT-2 Medium
Fine-Tune 354M 46.2 0.39 0.46
AdapterL0.37M 42.4 0.36 0.48
AdapterL11M 45.2 0.38 0.46
FTTop224M 41.0 0.34 0.56
PrefLayer 0.35M 46.4 0.38 0.46
LoRA 0.35M 47.1.2 0.39 0.46
GPT-2 Large
Fine-Tune 774M 47.0 0.39 0.46
AdapterL0.88M 45.7.1 0.38 0.46
AdapterL23M 47.1.1 0.39 0.45
PrefLayer 0.77M 46.7 0.38 0.45
LoRA 0.77M 47.5.1 0.39 0.45
Table 13: GPT-2 with different adaptation methods on DART. The variances of MET and TER are
less than 0:01for all adaption approaches.
21

--- PAGE 22 ---
Method WebNLG
BLEU" MET" TER#
U S A U S A U S A
GPT-2 Medium
Fine-Tune (354M) 27.7 64.2 46.5 .30 .45 .38 .76 .33 .53
AdapterL(0.37M) 45.1 54.5 50.2 .36 .39 .38 .46 .40 .43
AdapterL(11M) 48.3 60.4 54.9 .38 .43 .41 .45 .35 .39
FTTop2(24M) 18.9 53.6 36.0 .23 .38 .31 .99 .49 .72
PreÔ¨Åx (0.35M) 45.6 62.9 55.1 .38 .44 .41 .49 .35 .40
LoRA (0.35M) 46.7.462.1.255.3.2.38 .44 .41 .46 .33 .39
GPT-2 Large
Fine-Tune (774M) 43.1 65.3 55.5 .38 .46 .42 .53 .33 .42
AdapterL(0.88M) 49.8.061.1.056.0.0.38 .43 .41 .44 .35 .39
AdapterL(23M) 49.2.164.7.257.7.1.39 .46 .43 .46 .33 .39
PreÔ¨Åx (0.77M) 47.7 63.4 56.3 .39 .45 .42 .48 .34 .40
LoRA (0.77M) 48.4.364.0.357.0.1.39 .45 .42 .45 .32 .38
Table 14: GPT-2 with different adaptation methods on WebNLG. The variances of MET and TER
are less than 0:01for all the experiments we ran. ‚ÄúU‚Äù indicates unseen categories, ‚ÄúS‚Äù indicates seen
categories, and ‚ÄúA‚Äù indicates all categories in the test set of WebNLG.
F.2 A DDITIONAL EXPERIMENTS ON GPT-3
We present additional runs on GPT-3 with different adaptation methods in Table 15. The focus is on
identifying the trade-off between performance and the number of trainable parameters.
F.3 L OW-DATA REGIME
To evaluate the performance of different adaptation approaches in the low-data regime. we randomly
sample 100, 1k and 10k training examples from the full training set of MNLI to form the low-data
MNLI-ntasks. In Table 16, we show the performance of different adaptation approaches on MNLI-
n. To our surprise, PreÔ¨ÅxEmbed and PreÔ¨ÅxLayer performs very poorly on MNLI-100 dataset, with
PreÔ¨ÅxEmbed performing only slightly better than random chance (37.6% vs. 33.3%). PreÔ¨ÅxLayer
performs better than PreÔ¨ÅxEmbed but is still signiÔ¨Åcantly worse than Fine-Tune or LoRA on MNLI-
100. The gap between preÔ¨Åx-based approaches and LoRA/Fine-tuning becomes smaller as we in-
crease the number of training examples, which might suggest that preÔ¨Åx-based approaches are not
suitable for low-data tasks in GPT-3. LoRA achieves better performance than Ô¨Åne-tuning on both
MNLI-100 and MNLI-Full, and comparable results on MNLI-1k and MNLI-10K considering the
(0:3) variance due to random seeds.
The training hyperparameters of different adaptation approaches on MNLI-n are reported in Ta-
ble 17. We use a smaller learning rate for PreÔ¨ÅxLayer on the MNLI-100 set, as the training loss does
not decrease with a larger learning rate.
G M EASURING SIMILARITY BETWEEN SUBSPACES
In this paper we use the measure (A;B;i;j ) = (Ui
A;Uj
B) =kUi>
AUBk2
F
minfi;jgto measure the subspace
similarity between two column orthonormal matrices Ui
A2RdiandUj
B2Rdj, obtained by
taking columns of the left singular matrices of AandB. We point out that this similarity is simply
a reverse of the standard Projection Metric that measures distance between subspaces Ham & Lee
(2008).
22

--- PAGE 23 ---
Method Hyperparameters # Trainable Parameters WikiSQL MNLI-m
Fine-Tune - 175B 73.8 89.5
PreÔ¨ÅxEmbedlp= 32;li= 8 0.4 M 55.9 84.9
lp= 64;li= 8 0.9 M 58.7 88.1
lp= 128;li= 8 1.7 M 60.6 88.0
lp= 256;li= 8 3.2 M 63.1 88.6
lp= 512;li= 8 6.4 M 55.9 85.8
PreÔ¨ÅxLayerlp= 2;li= 2 5.1 M 68.5 89.2
lp= 8;li= 0 10.1 M 69.8 88.2
lp= 8;li= 8 20.2 M 70.1 89.5
lp= 32;li= 4 44.1 M 66.4 89.6
lp= 64;li= 0 76.1 M 64.9 87.9
AdapterHr= 1 7.1 M 71.9 89.8
r= 4 21.2 M 73.2 91.0
r= 8 40.1 M 73.2 91.5
r= 16 77.9 M 73.2 91.5
r= 64 304.4 M 72.6 91.5
LoRArv= 2 4.7 M 73.4 91.7
rq=rv= 1 4.7 M 73.4 91.3
rq=rv= 2 9.4 M 73.3 91.4
rq=rk=rv=ro= 1 9.4 M 74.1 91.2
rq=rv= 4 18.8 M 73.7 91.3
rq=rk=rv=ro= 2 18.8 M 73.7 91.7
rq=rv= 8 37.7 M 73.8 91.6
rq=rk=rv=ro= 4 37.7 M 74.0 91.7
rq=rv= 64 301.9 M 73.6 91.4
rq=rk=rv=ro= 64 603.8 M 73.9 91.4
LoRA+PErq=rv= 8;lp= 8;li= 4 37.8 M 75.0 91.4
rq=rv= 32;lp= 8;li= 4 151.1 M 75.9 91.1
rq=rv= 64;lp= 8;li= 4 302.1 M 76.2 91.3
LoRA+PL rq=rv= 8;lp= 8;li= 4 52.8 M 72.9 90.2
Table 15: Hyperparameter analysis of different adaptation approaches on WikiSQL and MNLI. Both
preÔ¨Åx-embedding tuning (PreÔ¨ÅxEmbed) and preÔ¨Åx-layer tuning (PreÔ¨ÅxLayer) perform worse as we
increase the number of trainable parameters, while LoRA‚Äôs performance stabilizes. Performance is
measured in validation accuracy.
Method MNLI(m)-100 MNLI(m)-1k MNLI(m)-10k MNLI(m)-392K
GPT-3 (Fine-Tune) 60.2 85.8 88.9 89.5
GPT-3 (PreÔ¨ÅxEmbed) 37.6 75.2 79.5 88.6
GPT-3 (PreÔ¨ÅxLayer) 48.3 82.5 85.9 89.6
GPT-3 (LoRA) 63.8 85.6 89.2 91.7
Table 16: Validation accuracy of different methods on subsets of MNLI using GPT-3 175B. MNLI-
ndescribes a subset with ntraining examples. We evaluate with the full validation set. LoRA
performs exhibits favorable sample-efÔ¨Åciency compared to other methods, including Ô¨Åne-tuning.
To be concrete, let the singular values of Ui>
AUj
Bto be1;2;;pwherep= minfi;jg. We
know that the Projection Metric Ham & Lee (2008) is deÔ¨Åned as:
d(Ui
A;Uj
B) =vuutp pX
i=12
i2[0;pp]
23

--- PAGE 24 ---
Hyperparameters Adaptation MNLI-100 MNLI-1k MNLI-10K MNLI-392K
Optimizer - AdamW
Warmup Tokens - 250,000
LR Schedule - Linear
Batch Size - 20 20 100 128
# Epoch - 40 40 4 2
Learning RateFineTune 5.00E-6
PreÔ¨ÅxEmbed 2.00E-04 2.00E-04 4.00E-04 5.00E-04
PreÔ¨ÅxLayer 5.00E-05 5.00E-05 5.00E-05 1.00E-04
LoRA 2.00E-4
PreÔ¨ÅxEmbed lp 16 32 64 256
Adaptation- PreÔ¨ÅxEmbed li 8
SpeciÔ¨Åc PreÔ¨ÅxTune lp=li= 8
LoRA rq=rv= 8
Table 17: The hyperparameters used for different GPT-3 adaptation methods on MNLI(m)- n.
where our similarity is deÔ¨Åned as:
(A;B;i;j ) = (Ui
A;Uj
B) =Pp
i=12
i
p=1
p
1 d(Ui
A;Uj
B)2
This similarity satisÔ¨Åes that if Ui
AandUj
Bshare the same column span, then (A;B;i;j ) = 1 . If
they are completely orthogonal, then (A;B;i;j ) = 0 . Otherwise, (A;B;i;j )2(0;1).
H A DDITIONAL EXPERIMENTS ON LOW-RANK MATRICES
We present additional results from our investigation into the low-rank update matrices.
H.1 C ORRELATION BETWEEN LORA M ODULES
See Figure 6 and Figure 7 for how the results presented in Figure 3 and Figure 4 generalize to other
layers.
H.2 E FFECT OFrONGPT-2
We repeat our experiment on the effect of r(Section 7.2) in GPT-2. Using the E2E NLG Challenge
dataset as an example, we report the validation loss and test metrics achieved by different choices
ofrafter training for 26,000 steps. We present our result in Table 18. The optimal rank for GPT-2
Medium is between 4 and 16 depending on the metric used, which is similar to that for GPT-3 175B.
Note that the relationship between model size and the optimal rank for adaptation is still an open
question.
H.3 C ORRELATION BETWEEN WAND W
See Figure 8 for the normalized subspace similarity between WandWwith varying r.
Note again that Wdoes not contain the top singular directions of W, since the similarity between
the top 4 directions in Wand the top-10% of those in Wbarely exceeds 0.2. This gives evidence
thatWcontains those ‚Äútask-speciÔ¨Åc‚Äù directions that are otherwise notemphasized in W.
An interesting next question to answer, is how ‚Äústrong‚Äù do we need to amplify those task-speciÔ¨Åc
directions, in order for the model adaptation to work well?
24

--- PAGE 25 ---
0.00.20.40.60.81.0
12345678Layer 1
iWq
 Wv
 Wq
 Wv
12345678Layer 32
i
12345678Layer 64
i
1
6
12
18
23
29
35
40
46
52
58
j12345678Layer 96
i
1
6
12
18
23
29
35
40
46
52
58
j12345678
j12345678
j(Ar=8,Ar=64,i,j)
Figure 6: Normalized subspace similarity between the column vectors of Ar=8andAr=64for both
WqandWvfrom the 1st, 32nd, 64th, and 96th layers in a 96-layer Transformer.
H.4 A MPLIFICATION FACTOR
One can naturally consider a feature ampliÔ¨Åcation factor as the ratiokWkF
kU>WV>kF, whereUandV
are the left- and right-singular matrices of the SVD decomposition of W. (RecallUU>WV>V
gives the ‚Äúprojection‚Äù of Wonto the subspace spanned by W.)
Intuitively, when Wmostly contains task-speciÔ¨Åc directions, this quantity measures how much of
them are ampliÔ¨Åed by W. As shown in Section 7.3, for r= 4, this ampliÔ¨Åcation factor is as large
as 20. In other words, there are (generally speaking) four feature directions in each layer (out of the
entire feature space from the pre-trained model W), that need to be ampliÔ¨Åed by a very large factor
20, in order to achieve our reported accuracy for the downstream speciÔ¨Åc task. And, one should
expect a very different set of feature directions to be ampliÔ¨Åed for each different downstream task.
One may notice, however, for r= 64 , this ampliÔ¨Åcation factor is only around 2, meaning that
most directions learned in Wwithr= 64 arenotbeing ampliÔ¨Åed by much. This should not
be surprising, and in fact gives evidence (once again) that the intrinsic rank needed to represent
the ‚Äútask-speciÔ¨Åc directions‚Äù (thus for model adaptation) is low. In contrast, those directions in the
rank-4 version of W(corresponding to r= 4) are ampliÔ¨Åed by a much larger factor 20.
25

--- PAGE 26 ---
0.00.10.20.30.40.50.60.70.8
1
7
13
19
25
31
37
43
49
55
61Layer 1
iWq
 Wv
Layer 32Wq
 Wv
1
6
11
16
21
26
31
36
41
46
51
56
61
j1
7
13
19
25
31
37
43
49
55
61Layer 64
i
1
6
11
16
21
26
31
36
41
46
51
56
61
j
1
6
11
16
21
26
31
36
41
46
51
56
61
jLayer 96
1
6
11
16
21
26
31
36
41
46
51
56
61
j(Ar=64,A/primer=64,i,j)
Figure 7: Normalized subspace similarity between the column vectors of Ar=64from two randomly
seeded runs, for both WqandWvfrom the 1st, 32nd, 64th, and 96th layers in a 96-layer Trans-
former.
Rankrvalloss BLEU NIST METEOR ROUGE L CIDEr
1 1.23 68.72 8.7215 0.4565 0.7052 2.4329
2 1.21 69.17 8.7413 0.4590 0.7052 2.4639
4 1.18 70.38 8.8439 0.4689 0.7186 2.5349
8 1.17 69.57 8.7457 0.4636 0.7196 2.5196
16 1.16 69.61 8.7483 0.4629 0.7177 2.4985
32 1.16 69.33 8.7736 0.4642 0.7105 2.5255
64 1.16 69.24 8.7174 0.4651 0.7180 2.5070
128 1.16 68.73 8.6718 0.4628 0.7127 2.5030
256 1.16 68.92 8.6982 0.4629 0.7128 2.5012
512 1.16 68.78 8.6857 0.4637 0.7128 2.5025
1024 1.17 69.37 8.7495 0.4659 0.7149 2.5090
Table 18: Validation loss and test set metrics on E2E NLG Challenge achieved by LoRA with
different rank rusing GPT-2 Medium. Unlike on GPT-3 where r= 1sufÔ¨Åces for many tasks, here
the performance peaks at r= 16 for validation loss and r= 4 for BLEU, suggesting the GPT-2
Medium has a similar intrinsic rank for adaptation compared to GPT-3 175B. Note that some of our
hyperparameters are tuned on r= 4, which matches the parameter count of another baseline, and
thus might not be optimal for other choices of r.
0.1000.1250.1500.1750.200
j451
555
658
762
865
969
1072
1176i(Wq,Ar=4,i,j)
jWq
(Wq,Ar=8,i,j)
j(Wq,Ar=64,i,j)
jRandom
(Wq,Arand,i,j)
Figure 8: Normalized subspace similarity between the singular directions of Wqand those of Wq
with varying rand a random baseline. WqampliÔ¨Åes directions that are important but not empha-
sized inW.Wwith a larger rtends to pick up more directions that are already emphasized in
W.
26
