#compdef arxivdl_cli.py
# Zsh completion for arxivdl_cli.py
# Generated by setup_autocompletion.py

_arxivdl_cli() {
    local context state state_descr line
    typeset -A opt_args

    _arguments -C \
        '1: :->command' \
        '2: :->subcommand' \
        '*: :->args' && return 0

    case $state in
        command)
            local commands=(
                'download:Main command download'
                'convert:Main command convert'
                'translate:Main command translate'
                'organize:Main command organize'
                'analyze:Main command analyze'
                'inventory:Main command inventory'
                'setup:Main command setup'
                'workflow:Main command workflow'
                '--help:Show help message'
                '--samples:Show sample commands'
                '--list:List available commands'
                '--interactive:Interactive sample picker'
            )
            _describe 'commands' commands
            ;;
        subcommand)
            case $words[2] in
                download)
                    local subcommands=(
                        'single:Subcommand single'
                        'batch:Subcommand batch'
                        'crawler:Subcommand crawler'
                    )
                    _describe 'subcommands' subcommands
                    ;;
                convert)
                    local subcommands=(
                        'main:Subcommand main (options: --convert --rename --both --collection --all --help)'
                    )
                    _describe 'subcommands' subcommands
                    ;;
                translate)
                    local subcommands=(
                        'claude:Subcommand claude (options: --workers --claude-path --queue-file --verbose --clean-only --clean-stale)'
                        'openai:Subcommand openai'
                        'check:Subcommand check (options: --threshold --output --root-dir --add-to-queue --queue-file --remove-big-papers)'
                        'queue:Subcommand queue (options: --queue-file --recursive --force --list --clear)'
                        'cleanup:Subcommand cleanup (options: --threshold --backup --requeue --execute --verbose)'
                        'stalled:Subcommand stalled (options: --execute --max-age --score)'
                        'test:Subcommand test'
                    )
                    _describe 'subcommands' subcommands
                    ;;
                organize)
                    local subcommands=(
                        'enhanced:Subcommand enhanced (options: --execute --base-dir --collections --exclude --log-level --log-file --verbose)'
                        'basic:Subcommand basic'
                        'simple:Subcommand simple'
                    )
                    _describe 'subcommands' subcommands
                    ;;
                analyze)
                    local subcommands=(
                        'duplicates:Subcommand duplicates (options: --verbose --output-file --directory)'
                        'translations:Subcommand translations'
                        'monitor:Subcommand monitor'
                        'status:Subcommand status'
                    )
                    _describe 'subcommands' subcommands
                    ;;
                inventory)
                    local subcommands=(
                        'all:Subcommand all (options: --verbose --output-file --collections --format)'
                        'expected:Subcommand expected (options: --collection --collections --format)'
                        'quick:Subcommand quick (options: --summary)'
                    )
                    _describe 'subcommands' subcommands
                    ;;
                setup)
                    local subcommands=(
                        'init:Subcommand init (options: --quick --full)'
                        'env:Subcommand env'
                        'simple:Subcommand simple'
                        'test:Subcommand test (options: --verbose)'
                        'direnv:Subcommand direnv'
                        'completion:Subcommand completion (options: --install --uninstall)'
                    )
                    _describe 'subcommands' subcommands
                    ;;
            esac
            ;;
        args)
            # Handle option completion
            if [[ $words[CURRENT] == --* ]]; then
                local cmd_options=()
                case "$words[2]-$words[3]" in
                    convert-main)
                        cmd_options=(
                            '--convert:Option --convert'
                            '--rename:Option --rename'
                            '--both:Option --both'
                            '--collection:Option --collection'
                            '--all:Option --all'
                            '--help:Option --help'
                        )
                        ;;
                    translate-claude)
                        cmd_options=(
                            '--workers:Option --workers'
                            '--claude-path:Option --claude-path'
                            '--queue-file:Option --queue-file'
                            '--verbose:Option --verbose'
                            '--clean-only:Option --clean-only'
                            '--clean-stale:Option --clean-stale'
                        )
                        ;;
                    translate-check)
                        cmd_options=(
                            '--threshold:Option --threshold'
                            '--output:Option --output'
                            '--root-dir:Option --root-dir'
                            '--add-to-queue:Option --add-to-queue'
                            '--queue-file:Option --queue-file'
                            '--remove-big-papers:Option --remove-big-papers'
                        )
                        ;;
                    translate-queue)
                        cmd_options=(
                            '--queue-file:Option --queue-file'
                            '--recursive:Option --recursive'
                            '--force:Option --force'
                            '--list:Option --list'
                            '--clear:Option --clear'
                        )
                        ;;
                    translate-cleanup)
                        cmd_options=(
                            '--threshold:Option --threshold'
                            '--backup:Option --backup'
                            '--requeue:Option --requeue'
                            '--execute:Option --execute'
                            '--verbose:Option --verbose'
                        )
                        ;;
                    translate-stalled)
                        cmd_options=(
                            '--execute:Option --execute'
                            '--max-age:Option --max-age'
                            '--score:Option --score'
                        )
                        ;;
                    organize-enhanced)
                        cmd_options=(
                            '--execute:Option --execute'
                            '--base-dir:Option --base-dir'
                            '--collections:Option --collections'
                            '--exclude:Option --exclude'
                            '--log-level:Option --log-level'
                            '--log-file:Option --log-file'
                            '--verbose:Option --verbose'
                        )
                        ;;
                    analyze-duplicates)
                        cmd_options=(
                            '--verbose:Option --verbose'
                            '--output-file:Option --output-file'
                            '--directory:Option --directory'
                        )
                        ;;
                    inventory-all)
                        cmd_options=(
                            '--verbose:Option --verbose'
                            '--output-file:Option --output-file'
                            '--collections:Option --collections'
                            '--format:Option --format'
                        )
                        ;;
                    inventory-expected)
                        cmd_options=(
                            '--collection:Option --collection'
                            '--collections:Option --collections'
                            '--format:Option --format'
                        )
                        ;;
                    inventory-quick)
                        cmd_options=(
                            '--summary:Option --summary'
                        )
                        ;;
                    setup-init)
                        cmd_options=(
                            '--quick:Option --quick'
                            '--full:Option --full'
                        )
                        ;;
                    setup-test)
                        cmd_options=(
                            '--verbose:Option --verbose'
                        )
                        ;;
                    setup-completion)
                        cmd_options=(
                            '--install:Option --install'
                            '--uninstall:Option --uninstall'
                        )
                        ;;
                esac
                _describe 'options' cmd_options
                return 0
            fi

            # Handle file completion
            case $words[2] in
                download)
                    _files -g '*.txt'
                    ;;
                convert)
                    _files -g '*.pdf'
                    ;;
                translate)
                    _files -g '*.txt'
                    ;;
                *)
                    _files
                    ;;
            esac
            ;;
    esac
}

_arxivdl_cli "$@"
